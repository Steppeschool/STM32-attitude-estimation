
I2C_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cccc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800ce60  0800ce60  0001ce60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d4d8  0800d4d8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d4d8  0800d4d8  0001d4d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4e0  0800d4e0  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4e0  0800d4e0  0001d4e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4e4  0800d4e4  0001d4e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d4e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001dc  0800d6c4  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  0800d6c4  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018a63  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ea3  00000000  00000000  00038c6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  0003bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001478  00000000  00000000  0003d0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029511  00000000  00000000  0003e540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019eda  00000000  00000000  00067a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa54a  00000000  00000000  0008192b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017be75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007008  00000000  00000000  0017bec8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce44 	.word	0x0800ce44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800ce44 	.word	0x0800ce44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00b      	beq.n	8000f8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f74:	e000      	b.n	8000f78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f9      	beq.n	8000f76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f82:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08e      	sub	sp, #56	; 0x38
 8000fa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f001 fc31 	bl	8002808 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f88f 	bl	80010c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 fa1d 	bl	80013e8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fae:	f000 f9a9 	bl	8001304 <MX_USART2_UART_Init>
  MX_DMA_Init();
 8000fb2:	f000 f9d7 	bl	8001364 <MX_DMA_Init>
  MX_I2C1_Init();
 8000fb6:	f000 f8d9 	bl	800116c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fba:	f000 f917 	bl	80011ec <MX_SPI1_Init>
  MX_TIM2_Init();
 8000fbe:	f000 f953 	bl	8001268 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // mpu6050_init();
  mpu9250_init();
 8000fc2:	f000 fb07 	bl	80015d4 <mpu9250_init>
  HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f001 fc9a 	bl	8002900 <HAL_Delay>
  mpu9250_data mpu_data;
  EulerAngles euler_angles, euler_angles_gyro;
  uint8_t uart_counter = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  HAL_TIM_Base_Start_IT(&htim2);
 8000fd2:	4838      	ldr	r0, [pc, #224]	; (80010b4 <main+0x118>)
 8000fd4:	f005 ff6e 	bl	8006eb4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8000fd8:	4836      	ldr	r0, [pc, #216]	; (80010b4 <main+0x118>)
 8000fda:	f005 ff03 	bl	8006de4 <HAL_TIM_Base_Start>
  mpu9250_read_sensor(&mpu_data);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f000 fb7c 	bl	80016e0 <mpu9250_read_sensor>
  HAL_Delay(100);
 8000fe8:	2064      	movs	r0, #100	; 0x64
 8000fea:	f001 fc89 	bl	8002900 <HAL_Delay>
  mpu9250_read_sensor(&mpu_data);
 8000fee:	f107 031c 	add.w	r3, r7, #28
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 fb74 	bl	80016e0 <mpu9250_read_sensor>
  HAL_Delay(100);
 8000ff8:	2064      	movs	r0, #100	; 0x64
 8000ffa:	f001 fc81 	bl	8002900 <HAL_Delay>
  mpu9250_read_sensor(&mpu_data);
 8000ffe:	f107 031c 	add.w	r3, r7, #28
 8001002:	4618      	mov	r0, r3
 8001004:	f000 fb6c 	bl	80016e0 <mpu9250_read_sensor>
  HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	; 0x64
 800100a:	f001 fc79 	bl	8002900 <HAL_Delay>
  estimate_euler_angles(mpu_data, &euler_angles);
 800100e:	f107 0310 	add.w	r3, r7, #16
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001016:	f8ad 3000 	strh.w	r3, [sp]
 800101a:	f107 031c 	add.w	r3, r7, #28
 800101e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001020:	f000 fd4e 	bl	8001ac0 <estimate_euler_angles>
  euler_angles_gyro = euler_angles;
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	f107 0210 	add.w	r2, r7, #16
 800102a:	ca07      	ldmia	r2, {r0, r1, r2}
 800102c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (timer_flag == 1)
 8001030:	4b21      	ldr	r3, [pc, #132]	; (80010b8 <main+0x11c>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b01      	cmp	r3, #1
 8001038:	d1fa      	bne.n	8001030 <main+0x94>
	  {
		  mpu9250_read_sensor(&mpu_data);
 800103a:	f107 031c 	add.w	r3, r7, #28
 800103e:	4618      	mov	r0, r3
 8001040:	f000 fb4e 	bl	80016e0 <mpu9250_read_sensor>
		  euler_angles = complementary_filter(mpu_data);
 8001044:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001046:	f8ad 3000 	strh.w	r3, [sp]
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001050:	f000 ff92 	bl	8001f78 <complementary_filter>
 8001054:	eef0 6a40 	vmov.f32	s13, s0
 8001058:	eeb0 7a60 	vmov.f32	s14, s1
 800105c:	eef0 7a41 	vmov.f32	s15, s2
 8001060:	edc7 6a04 	vstr	s13, [r7, #16]
 8001064:	ed87 7a05 	vstr	s14, [r7, #20]
 8001068:	edc7 7a06 	vstr	s15, [r7, #24]
		  uart_counter++;
 800106c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001070:	3301      	adds	r3, #1
 8001072:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  pitch_angle_gyro = (float)euler_angles.yaw;
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	4a10      	ldr	r2, [pc, #64]	; (80010bc <main+0x120>)
 800107a:	6013      	str	r3, [r2, #0]
		  pitch_angle_acc_magn = (float) mpu_data.x_mag;
 800107c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <main+0x124>)
 800108a:	edc3 7a00 	vstr	s15, [r3]
		  if(uart_counter == 40)
 800108e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001092:	2b28      	cmp	r3, #40	; 0x28
 8001094:	d109      	bne.n	80010aa <main+0x10e>
		  {
			  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&euler_angles, sizeof(euler_angles));
 8001096:	f107 0310 	add.w	r3, r7, #16
 800109a:	220c      	movs	r2, #12
 800109c:	4619      	mov	r1, r3
 800109e:	4809      	ldr	r0, [pc, #36]	; (80010c4 <main+0x128>)
 80010a0:	f006 fbb0 	bl	8007804 <HAL_UART_Transmit_DMA>
			  uart_counter = 0;
 80010a4:	2300      	movs	r3, #0
 80010a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		  }
		  timer_flag = 0;
 80010aa:	4b03      	ldr	r3, [pc, #12]	; (80010b8 <main+0x11c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
	  if (timer_flag == 1)
 80010b0:	e7be      	b.n	8001030 <main+0x94>
 80010b2:	bf00      	nop
 80010b4:	20000388 	.word	0x20000388
 80010b8:	200004a8 	.word	0x200004a8
 80010bc:	200004a0 	.word	0x200004a0
 80010c0:	200004a4 	.word	0x200004a4
 80010c4:	200003d4 	.word	0x200003d4

080010c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b096      	sub	sp, #88	; 0x58
 80010cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	2244      	movs	r2, #68	; 0x44
 80010d4:	2100      	movs	r1, #0
 80010d6:	4618      	mov	r0, r3
 80010d8:	f007 fd2e 	bl	8008b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010dc:	463b      	mov	r3, r7
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80010ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80010ee:	f003 f84f 	bl	8004190 <HAL_PWREx_ControlVoltageScaling>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80010f8:	f000 fa0e 	bl	8001518 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010fc:	2302      	movs	r3, #2
 80010fe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001100:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001104:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001106:	2310      	movs	r3, #16
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110a:	2302      	movs	r3, #2
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800110e:	2302      	movs	r3, #2
 8001110:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001112:	2301      	movs	r3, #1
 8001114:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001116:	230a      	movs	r3, #10
 8001118:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800111a:	2307      	movs	r3, #7
 800111c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800111e:	2302      	movs	r3, #2
 8001120:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0314 	add.w	r3, r7, #20
 800112a:	4618      	mov	r0, r3
 800112c:	f003 f886 	bl	800423c <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001136:	f000 f9ef 	bl	8001518 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	230f      	movs	r3, #15
 800113c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113e:	2303      	movs	r3, #3
 8001140:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	2104      	movs	r1, #4
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fc4e 	bl	80049f4 <HAL_RCC_ClockConfig>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800115e:	f000 f9db 	bl	8001518 <Error_Handler>
  }
}
 8001162:	bf00      	nop
 8001164:	3758      	adds	r7, #88	; 0x58
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001172:	4a1c      	ldr	r2, [pc, #112]	; (80011e4 <MX_I2C1_Init+0x78>)
 8001174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8001176:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001178:	4a1b      	ldr	r2, [pc, #108]	; (80011e8 <MX_I2C1_Init+0x7c>)
 800117a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800117c:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_I2C1_Init+0x74>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001184:	2201      	movs	r2, #1
 8001186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001188:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <MX_I2C1_Init+0x74>)
 800118a:	2200      	movs	r2, #0
 800118c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800118e:	4b14      	ldr	r3, [pc, #80]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001190:	2200      	movs	r2, #0
 8001192:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <MX_I2C1_Init+0x74>)
 8001196:	2200      	movs	r2, #0
 8001198:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <MX_I2C1_Init+0x74>)
 800119c:	2200      	movs	r2, #0
 800119e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011a8:	f002 f926 	bl	80033f8 <HAL_I2C_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011b2:	f000 f9b1 	bl	8001518 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011b6:	2100      	movs	r1, #0
 80011b8:	4809      	ldr	r0, [pc, #36]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011ba:	f002 ff44 	bl	8004046 <HAL_I2CEx_ConfigAnalogFilter>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011c4:	f000 f9a8 	bl	8001518 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011c8:	2100      	movs	r1, #0
 80011ca:	4805      	ldr	r0, [pc, #20]	; (80011e0 <MX_I2C1_Init+0x74>)
 80011cc:	f002 ff86 	bl	80040dc <HAL_I2CEx_ConfigDigitalFilter>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f000 f99f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200001f8 	.word	0x200001f8
 80011e4:	40005400 	.word	0x40005400
 80011e8:	10909cec 	.word	0x10909cec

080011ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <MX_SPI1_Init+0x74>)
 80011f2:	4a1c      	ldr	r2, [pc, #112]	; (8001264 <MX_SPI1_Init+0x78>)
 80011f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011f6:	4b1a      	ldr	r3, [pc, #104]	; (8001260 <MX_SPI1_Init+0x74>)
 80011f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011fe:	4b18      	ldr	r3, [pc, #96]	; (8001260 <MX_SPI1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001204:	4b16      	ldr	r3, [pc, #88]	; (8001260 <MX_SPI1_Init+0x74>)
 8001206:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800120a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800120c:	4b14      	ldr	r3, [pc, #80]	; (8001260 <MX_SPI1_Init+0x74>)
 800120e:	2202      	movs	r2, #2
 8001210:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001212:	4b13      	ldr	r3, [pc, #76]	; (8001260 <MX_SPI1_Init+0x74>)
 8001214:	2201      	movs	r2, #1
 8001216:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001218:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_SPI1_Init+0x74>)
 800121a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800121e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_SPI1_Init+0x74>)
 8001222:	2220      	movs	r2, #32
 8001224:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_SPI1_Init+0x74>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_SPI1_Init+0x74>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_SPI1_Init+0x74>)
 8001234:	2200      	movs	r2, #0
 8001236:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_SPI1_Init+0x74>)
 800123a:	2207      	movs	r2, #7
 800123c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800123e:	4b08      	ldr	r3, [pc, #32]	; (8001260 <MX_SPI1_Init+0x74>)
 8001240:	2200      	movs	r2, #0
 8001242:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_SPI1_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800124a:	4805      	ldr	r0, [pc, #20]	; (8001260 <MX_SPI1_Init+0x74>)
 800124c:	f004 fab2 	bl	80057b4 <HAL_SPI_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001256:	f000 f95f 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000294 	.word	0x20000294
 8001264:	40013000 	.word	0x40013000

08001268 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800126e:	f107 0310 	add.w	r3, r7, #16
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127c:	1d3b      	adds	r3, r7, #4
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
 8001282:	605a      	str	r2, [r3, #4]
 8001284:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM2_Init+0x98>)
 8001288:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800128c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_TIM2_Init+0x98>)
 8001290:	f240 321f 	movw	r2, #799	; 0x31f
 8001294:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM2_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800129c:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_TIM2_Init+0x98>)
 800129e:	f242 720f 	movw	r2, #9999	; 0x270f
 80012a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_TIM2_Init+0x98>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <MX_TIM2_Init+0x98>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012b0:	4813      	ldr	r0, [pc, #76]	; (8001300 <MX_TIM2_Init+0x98>)
 80012b2:	f005 fd3f 	bl	8006d34 <HAL_TIM_Base_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80012bc:	f000 f92c 	bl	8001518 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012c6:	f107 0310 	add.w	r3, r7, #16
 80012ca:	4619      	mov	r1, r3
 80012cc:	480c      	ldr	r0, [pc, #48]	; (8001300 <MX_TIM2_Init+0x98>)
 80012ce:	f005 ff80 	bl	80071d2 <HAL_TIM_ConfigClockSource>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80012d8:	f000 f91e 	bl	8001518 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e4:	1d3b      	adds	r3, r7, #4
 80012e6:	4619      	mov	r1, r3
 80012e8:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_TIM2_Init+0x98>)
 80012ea:	f006 f997 	bl	800761c <HAL_TIMEx_MasterConfigSynchronization>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80012f4:	f000 f910 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012f8:	bf00      	nop
 80012fa:	3720      	adds	r7, #32
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20000388 	.word	0x20000388

08001304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001308:	4b14      	ldr	r3, [pc, #80]	; (800135c <MX_USART2_UART_Init+0x58>)
 800130a:	4a15      	ldr	r2, [pc, #84]	; (8001360 <MX_USART2_UART_Init+0x5c>)
 800130c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130e:	4b13      	ldr	r3, [pc, #76]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001310:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001316:	4b11      	ldr	r3, [pc, #68]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <MX_USART2_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001322:	4b0e      	ldr	r3, [pc, #56]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001328:	4b0c      	ldr	r3, [pc, #48]	; (800135c <MX_USART2_UART_Init+0x58>)
 800132a:	220c      	movs	r2, #12
 800132c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800133a:	4b08      	ldr	r3, [pc, #32]	; (800135c <MX_USART2_UART_Init+0x58>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001342:	2200      	movs	r2, #0
 8001344:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001346:	4805      	ldr	r0, [pc, #20]	; (800135c <MX_USART2_UART_Init+0x58>)
 8001348:	f006 fa0e 	bl	8007768 <HAL_UART_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001352:	f000 f8e1 	bl	8001518 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001356:	bf00      	nop
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	200003d4 	.word	0x200003d4
 8001360:	40004400 	.word	0x40004400

08001364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <MX_DMA_Init+0x80>)
 800136c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800136e:	4a1d      	ldr	r2, [pc, #116]	; (80013e4 <MX_DMA_Init+0x80>)
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	6493      	str	r3, [r2, #72]	; 0x48
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_DMA_Init+0x80>)
 8001378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001382:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_DMA_Init+0x80>)
 8001384:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001386:	4a17      	ldr	r2, [pc, #92]	; (80013e4 <MX_DMA_Init+0x80>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6493      	str	r3, [r2, #72]	; 0x48
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_DMA_Init+0x80>)
 8001390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800139a:	2200      	movs	r2, #0
 800139c:	2100      	movs	r1, #0
 800139e:	200c      	movs	r0, #12
 80013a0:	f001 fbad 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013a4:	200c      	movs	r0, #12
 80013a6:	f001 fbc6 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013aa:	2200      	movs	r2, #0
 80013ac:	2100      	movs	r1, #0
 80013ae:	200d      	movs	r0, #13
 80013b0:	f001 fba5 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013b4:	200d      	movs	r0, #13
 80013b6:	f001 fbbe 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013ba:	2200      	movs	r2, #0
 80013bc:	2100      	movs	r1, #0
 80013be:	2011      	movs	r0, #17
 80013c0:	f001 fb9d 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013c4:	2011      	movs	r0, #17
 80013c6:	f001 fbb6 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	2044      	movs	r0, #68	; 0x44
 80013d0:	f001 fb95 	bl	8002afe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 80013d4:	2044      	movs	r0, #68	; 0x44
 80013d6:	f001 fbae 	bl	8002b36 <HAL_NVIC_EnableIRQ>

}
 80013da:	bf00      	nop
 80013dc:	3708      	adds	r7, #8
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	40021000 	.word	0x40021000

080013e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a2a      	ldr	r2, [pc, #168]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <MX_GPIO_Init+0xc4>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001416:	4b25      	ldr	r3, [pc, #148]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141a:	4a24      	ldr	r2, [pc, #144]	; (80014ac <MX_GPIO_Init+0xc4>)
 800141c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_GPIO_Init+0xc4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60bb      	str	r3, [r7, #8]
 8001444:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a18      	ldr	r2, [pc, #96]	; (80014ac <MX_GPIO_Init+0xc4>)
 800144c:	f043 0302 	orr.w	r3, r3, #2
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_GPIO_Init+0xc4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2110      	movs	r1, #16
 8001462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001466:	f001 ffaf 	bl	80033c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800146e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001470:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147a:	f107 0314 	add.w	r3, r7, #20
 800147e:	4619      	mov	r1, r3
 8001480:	480b      	ldr	r0, [pc, #44]	; (80014b0 <MX_GPIO_Init+0xc8>)
 8001482:	f001 fdf7 	bl	8003074 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001486:	2310      	movs	r3, #16
 8001488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f001 fde8 	bl	8003074 <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000800 	.word	0x48000800

080014b4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	2300      	movs	r3, #0
 80014c2:	617b      	str	r3, [r7, #20]
 80014c4:	e009      	b.n	80014da <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	1c5a      	adds	r2, r3, #1
 80014ca:	60ba      	str	r2, [r7, #8]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fd3c 	bl	8000f4c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	dbf1      	blt.n	80014c6 <_write+0x12>
	}
	return len;
 80014e2:	687b      	ldr	r3, [r7, #4]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]

	if (htim == &htim2)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d102      	bne.n	8001502 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		timer_flag = 1;
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80014fe:	2201      	movs	r2, #1
 8001500:	701a      	strb	r2, [r3, #0]
	}
}
 8001502:	bf00      	nop
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000388 	.word	0x20000388
 8001514:	200004a8 	.word	0x200004a8

08001518 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800151c:	b672      	cpsid	i
}
 800151e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001520:	e7fe      	b.n	8001520 <Error_Handler+0x8>

08001522 <activate_spi_mpu9250>:

extern SPI_HandleTypeDef hspi1;
static uint8_t mag_adjust[3];

static void activate_spi_mpu9250()
{
 8001522:	b580      	push	{r7, lr}
 8001524:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001526:	2200      	movs	r2, #0
 8001528:	2110      	movs	r1, #16
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f001 ff4b 	bl	80033c8 <HAL_GPIO_WritePin>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}

08001536 <deactivate_spi_mpu9250>:

static void deactivate_spi_mpu9250()
{
 8001536:	b580      	push	{r7, lr}
 8001538:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	2110      	movs	r1, #16
 800153e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001542:	f001 ff41 	bl	80033c8 <HAL_GPIO_WritePin>
}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}

0800154a <ak8963_write_reg>:

void ak8963_write_reg(uint8_t reg, uint8_t data)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b082      	sub	sp, #8
 800154e:	af00      	add	r7, sp, #0
 8001550:	4603      	mov	r3, r0
 8001552:	460a      	mov	r2, r1
 8001554:	71fb      	strb	r3, [r7, #7]
 8001556:	4613      	mov	r3, r2
 8001558:	71bb      	strb	r3, [r7, #6]
	mpu9250_write_reg(I2C_SLV0_ADDR_REG, AK8963_ADDRESS);
 800155a:	210c      	movs	r1, #12
 800155c:	2025      	movs	r0, #37	; 0x25
 800155e:	f000 fa61 	bl	8001a24 <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_REG_REG, reg);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4619      	mov	r1, r3
 8001566:	2026      	movs	r0, #38	; 0x26
 8001568:	f000 fa5c 	bl	8001a24 <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_DATA_REG, data);
 800156c:	79bb      	ldrb	r3, [r7, #6]
 800156e:	4619      	mov	r1, r3
 8001570:	2063      	movs	r0, #99	; 0x63
 8001572:	f000 fa57 	bl	8001a24 <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|0x01));
 8001576:	2181      	movs	r1, #129	; 0x81
 8001578:	2027      	movs	r0, #39	; 0x27
 800157a:	f000 fa53 	bl	8001a24 <mpu9250_write_reg>
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}

08001586 <ak8963_read_reg>:

void ak8963_read_reg(uint8_t start_reg, uint8_t *data, uint8_t len)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	4603      	mov	r3, r0
 800158e:	6039      	str	r1, [r7, #0]
 8001590:	71fb      	strb	r3, [r7, #7]
 8001592:	4613      	mov	r3, r2
 8001594:	71bb      	strb	r3, [r7, #6]
	mpu9250_write_reg(I2C_SLV0_ADDR_REG, 0x80|AK8963_ADDRESS);
 8001596:	218c      	movs	r1, #140	; 0x8c
 8001598:	2025      	movs	r0, #37	; 0x25
 800159a:	f000 fa43 	bl	8001a24 <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_REG_REG, start_reg);
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	4619      	mov	r1, r3
 80015a2:	2026      	movs	r0, #38	; 0x26
 80015a4:	f000 fa3e 	bl	8001a24 <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|len));
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	4619      	mov	r1, r3
 80015b2:	2027      	movs	r0, #39	; 0x27
 80015b4:	f000 fa36 	bl	8001a24 <mpu9250_write_reg>
	HAL_Delay(10);
 80015b8:	200a      	movs	r0, #10
 80015ba:	f001 f9a1 	bl	8002900 <HAL_Delay>
	mpu9250_read_reg(EXT_SENS_DATA_00_REG, data, len);
 80015be:	79bb      	ldrb	r3, [r7, #6]
 80015c0:	461a      	mov	r2, r3
 80015c2:	6839      	ldr	r1, [r7, #0]
 80015c4:	2049      	movs	r0, #73	; 0x49
 80015c6:	f000 fa4b 	bl	8001a60 <mpu9250_read_reg>

}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <mpu9250_init>:

void mpu9250_init()
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
	uint8_t temp_data[7];

	// Resetting IMU and magnetometer
	mpu9250_write_reg(USR_CTRL_REG, 0);
 80015da:	2100      	movs	r1, #0
 80015dc:	206a      	movs	r0, #106	; 0x6a
 80015de:	f000 fa21 	bl	8001a24 <mpu9250_write_reg>
	HAL_Delay(300);
 80015e2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015e6:	f001 f98b 	bl	8002900 <HAL_Delay>
	mpu9250_write_reg(0x27, 2);
 80015ea:	2102      	movs	r1, #2
 80015ec:	2027      	movs	r0, #39	; 0x27
 80015ee:	f000 fa19 	bl	8001a24 <mpu9250_write_reg>
	HAL_Delay(300);
 80015f2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015f6:	f001 f983 	bl	8002900 <HAL_Delay>
	mpu9250_write_reg(USR_CTRL_REG, USR_CTRL_REG_I2CEN);
 80015fa:	2120      	movs	r1, #32
 80015fc:	206a      	movs	r0, #106	; 0x6a
 80015fe:	f000 fa11 	bl	8001a24 <mpu9250_write_reg>
	mpu9250_write_reg(I2C_MSTR_CTRL_REG, I2C_MSTR_CTRL_I2CCLK_400);
 8001602:	210d      	movs	r1, #13
 8001604:	2024      	movs	r0, #36	; 0x24
 8001606:	f000 fa0d 	bl	8001a24 <mpu9250_write_reg>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 800160a:	2100      	movs	r1, #0
 800160c:	200a      	movs	r0, #10
 800160e:	f7ff ff9c 	bl	800154a <ak8963_write_reg>
	HAL_Delay(300);
 8001612:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001616:	f001 f973 	bl	8002900 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL2_REG, 0x01);
 800161a:	2101      	movs	r1, #1
 800161c:	200b      	movs	r0, #11
 800161e:	f7ff ff94 	bl	800154a <ak8963_write_reg>
	HAL_Delay(300);
 8001622:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001626:	f001 f96b 	bl	8002900 <HAL_Delay>
	mpu9250_write_reg(PWR_MGTM1_REG, 0x80);
 800162a:	2180      	movs	r1, #128	; 0x80
 800162c:	206b      	movs	r0, #107	; 0x6b
 800162e:	f000 f9f9 	bl	8001a24 <mpu9250_write_reg>
	HAL_Delay(100);
 8001632:	2064      	movs	r0, #100	; 0x64
 8001634:	f001 f964 	bl	8002900 <HAL_Delay>

	// gyroscope configuration
	mpu9250_write_reg(GYRO_CONFIG_REG, GYRO_FS_500);
 8001638:	2108      	movs	r1, #8
 800163a:	201b      	movs	r0, #27
 800163c:	f000 f9f2 	bl	8001a24 <mpu9250_write_reg>

	// accelerometer configuration
	mpu9250_write_reg(ACCEL_CONFIG_REG, ACCEL_FS_4G);
 8001640:	2108      	movs	r1, #8
 8001642:	201c      	movs	r0, #28
 8001644:	f000 f9ee 	bl	8001a24 <mpu9250_write_reg>

	//	Enable I2C master setting 400 kHz
	mpu9250_write_reg(USR_CTRL_REG, USR_CTRL_REG_I2CEN);
 8001648:	2120      	movs	r1, #32
 800164a:	206a      	movs	r0, #106	; 0x6a
 800164c:	f000 f9ea 	bl	8001a24 <mpu9250_write_reg>
	mpu9250_write_reg(I2C_MSTR_CTRL_REG, I2C_MSTR_CTRL_I2CCLK_400);
 8001650:	210d      	movs	r1, #13
 8001652:	2024      	movs	r0, #36	; 0x24
 8001654:	f000 f9e6 	bl	8001a24 <mpu9250_write_reg>

	// Setting the sampling rate of the IMU sensor to 1 kHz
	mpu9250_write_reg(CONFIG_REG, 1);
 8001658:	2101      	movs	r1, #1
 800165a:	201a      	movs	r0, #26
 800165c:	f000 f9e2 	bl	8001a24 <mpu9250_write_reg>


	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 8001660:	2100      	movs	r1, #0
 8001662:	200a      	movs	r0, #10
 8001664:	f7ff ff71 	bl	800154a <ak8963_write_reg>
	HAL_Delay(100);
 8001668:	2064      	movs	r0, #100	; 0x64
 800166a:	f001 f949 	bl	8002900 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_FUSE_ROM);
 800166e:	210f      	movs	r1, #15
 8001670:	200a      	movs	r0, #10
 8001672:	f7ff ff6a 	bl	800154a <ak8963_write_reg>
	HAL_Delay(100);
 8001676:	2064      	movs	r0, #100	; 0x64
 8001678:	f001 f942 	bl	8002900 <HAL_Delay>
	ak8963_read_reg(AK8963_SEN_ONSET_REG, mag_adjust, 3);
 800167c:	2203      	movs	r2, #3
 800167e:	4917      	ldr	r1, [pc, #92]	; (80016dc <mpu9250_init+0x108>)
 8001680:	2010      	movs	r0, #16
 8001682:	f7ff ff80 	bl	8001586 <ak8963_read_reg>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 8001686:	2100      	movs	r1, #0
 8001688:	200a      	movs	r0, #10
 800168a:	f7ff ff5e 	bl	800154a <ak8963_write_reg>
	HAL_Delay(100);
 800168e:	2064      	movs	r0, #100	; 0x64
 8001690:	f001 f936 	bl	8002900 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_CONT_MEAS2);
 8001694:	2116      	movs	r1, #22
 8001696:	200a      	movs	r0, #10
 8001698:	f7ff ff57 	bl	800154a <ak8963_write_reg>
	HAL_Delay(100);
 800169c:	2064      	movs	r0, #100	; 0x64
 800169e:	f001 f92f 	bl	8002900 <HAL_Delay>
	// Setting the sampling rate of the magnetometer to 50 HZ
	mpu9250_write_reg(I2C_SLV4_DO_REG, 19);
 80016a2:	2113      	movs	r1, #19
 80016a4:	2034      	movs	r0, #52	; 0x34
 80016a6:	f000 f9bd 	bl	8001a24 <mpu9250_write_reg>
	mpu9250_write_reg(I2C_MSTR_DEL_REG, 1);
 80016aa:	2101      	movs	r1, #1
 80016ac:	2067      	movs	r0, #103	; 0x67
 80016ae:	f000 f9b9 	bl	8001a24 <mpu9250_write_reg>
	mpu9250_write_reg(PWR_MGTM1_REG, PWR_MGTM1_PLL_EXSLP);
 80016b2:	2101      	movs	r1, #1
 80016b4:	206b      	movs	r0, #107	; 0x6b
 80016b6:	f000 f9b5 	bl	8001a24 <mpu9250_write_reg>
		HAL_Delay(100);
 80016ba:	2064      	movs	r0, #100	; 0x64
 80016bc:	f001 f920 	bl	8002900 <HAL_Delay>
	ak8963_read_reg(AK8963_DATA_ONSET_REG, temp_data, 7);
 80016c0:	463b      	mov	r3, r7
 80016c2:	2207      	movs	r2, #7
 80016c4:	4619      	mov	r1, r3
 80016c6:	2003      	movs	r0, #3
 80016c8:	f7ff ff5d 	bl	8001586 <ak8963_read_reg>
	HAL_Delay(100);
 80016cc:	2064      	movs	r0, #100	; 0x64
 80016ce:	f001 f917 	bl	8002900 <HAL_Delay>

}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200004ac 	.word	0x200004ac

080016e0 <mpu9250_read_sensor>:

void mpu9250_read_sensor(mpu9250_data *data_imu)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	static uint8_t data1[20],data2[20], buffer_counter = 0;
	uint8_t temp_data = 0x80|ONSET_DATA_REG;
 80016e8:	23bb      	movs	r3, #187	; 0xbb
 80016ea:	73fb      	strb	r3, [r7, #15]
	int16_t temp_mag[3];

	activate_spi_mpu9250();
 80016ec:	f7ff ff19 	bl	8001522 <activate_spi_mpu9250>
	HAL_SPI_Transmit(&hspi1, &temp_data, 1, 100);
 80016f0:	f107 010f 	add.w	r1, r7, #15
 80016f4:	2364      	movs	r3, #100	; 0x64
 80016f6:	2201      	movs	r2, #1
 80016f8:	4844      	ldr	r0, [pc, #272]	; (800180c <mpu9250_read_sensor+0x12c>)
 80016fa:	f004 f8fe 	bl	80058fa <HAL_SPI_Transmit>
	if(buffer_counter == 0)
 80016fe:	4b44      	ldr	r3, [pc, #272]	; (8001810 <mpu9250_read_sensor+0x130>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b00      	cmp	r3, #0
 8001704:	f040 808a 	bne.w	800181c <mpu9250_read_sensor+0x13c>
	{
		HAL_SPI_Receive_DMA(&hspi1, data1, 20);
 8001708:	2214      	movs	r2, #20
 800170a:	4942      	ldr	r1, [pc, #264]	; (8001814 <mpu9250_read_sensor+0x134>)
 800170c:	483f      	ldr	r0, [pc, #252]	; (800180c <mpu9250_read_sensor+0x12c>)
 800170e:	f004 fda5 	bl	800625c <HAL_SPI_Receive_DMA>


		data_imu ->x_accel = ((int16_t)data2[0]<<8) + data2[1];
 8001712:	4b41      	ldr	r3, [pc, #260]	; (8001818 <mpu9250_read_sensor+0x138>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	b29b      	uxth	r3, r3
 8001718:	021b      	lsls	r3, r3, #8
 800171a:	b29a      	uxth	r2, r3
 800171c:	4b3e      	ldr	r3, [pc, #248]	; (8001818 <mpu9250_read_sensor+0x138>)
 800171e:	785b      	ldrb	r3, [r3, #1]
 8001720:	b29b      	uxth	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b29b      	uxth	r3, r3
 8001726:	b21a      	sxth	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	801a      	strh	r2, [r3, #0]
		data_imu ->y_accel = ((int16_t)data2[2]<<8) + data2[3];
 800172c:	4b3a      	ldr	r3, [pc, #232]	; (8001818 <mpu9250_read_sensor+0x138>)
 800172e:	789b      	ldrb	r3, [r3, #2]
 8001730:	b29b      	uxth	r3, r3
 8001732:	021b      	lsls	r3, r3, #8
 8001734:	b29a      	uxth	r2, r3
 8001736:	4b38      	ldr	r3, [pc, #224]	; (8001818 <mpu9250_read_sensor+0x138>)
 8001738:	78db      	ldrb	r3, [r3, #3]
 800173a:	b29b      	uxth	r3, r3
 800173c:	4413      	add	r3, r2
 800173e:	b29b      	uxth	r3, r3
 8001740:	b21a      	sxth	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	805a      	strh	r2, [r3, #2]
		data_imu ->z_accel = ((int16_t)data2[4]<<8) + data2[5];
 8001746:	4b34      	ldr	r3, [pc, #208]	; (8001818 <mpu9250_read_sensor+0x138>)
 8001748:	791b      	ldrb	r3, [r3, #4]
 800174a:	b29b      	uxth	r3, r3
 800174c:	021b      	lsls	r3, r3, #8
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b31      	ldr	r3, [pc, #196]	; (8001818 <mpu9250_read_sensor+0x138>)
 8001752:	795b      	ldrb	r3, [r3, #5]
 8001754:	b29b      	uxth	r3, r3
 8001756:	4413      	add	r3, r2
 8001758:	b29b      	uxth	r3, r3
 800175a:	b21a      	sxth	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	809a      	strh	r2, [r3, #4]

		data_imu ->x_gyro = ((int16_t)data2[8]<<8) + data2[9] -   X_GYRO_BIAS;
 8001760:	4b2d      	ldr	r3, [pc, #180]	; (8001818 <mpu9250_read_sensor+0x138>)
 8001762:	7a1b      	ldrb	r3, [r3, #8]
 8001764:	b29b      	uxth	r3, r3
 8001766:	021b      	lsls	r3, r3, #8
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b2b      	ldr	r3, [pc, #172]	; (8001818 <mpu9250_read_sensor+0x138>)
 800176c:	7a5b      	ldrb	r3, [r3, #9]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4413      	add	r3, r2
 8001772:	b29b      	uxth	r3, r3
 8001774:	3b52      	subs	r3, #82	; 0x52
 8001776:	b29b      	uxth	r3, r3
 8001778:	b21a      	sxth	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	80da      	strh	r2, [r3, #6]
		data_imu ->y_gyro = ((int16_t)data2[10]<<8) + data2[11] - Y_GYRO_BIAS;
 800177e:	4b26      	ldr	r3, [pc, #152]	; (8001818 <mpu9250_read_sensor+0x138>)
 8001780:	7a9b      	ldrb	r3, [r3, #10]
 8001782:	b29b      	uxth	r3, r3
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	b29a      	uxth	r2, r3
 8001788:	4b23      	ldr	r3, [pc, #140]	; (8001818 <mpu9250_read_sensor+0x138>)
 800178a:	7adb      	ldrb	r3, [r3, #11]
 800178c:	b29b      	uxth	r3, r3
 800178e:	4413      	add	r3, r2
 8001790:	b29b      	uxth	r3, r3
 8001792:	3b29      	subs	r3, #41	; 0x29
 8001794:	b29b      	uxth	r3, r3
 8001796:	b21a      	sxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	811a      	strh	r2, [r3, #8]
		data_imu ->z_gyro = ((int16_t)data2[12]<<8) + data2[13] - Z_GYRO_BIAS;
 800179c:	4b1e      	ldr	r3, [pc, #120]	; (8001818 <mpu9250_read_sensor+0x138>)
 800179e:	7b1b      	ldrb	r3, [r3, #12]
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	021b      	lsls	r3, r3, #8
 80017a4:	b29a      	uxth	r2, r3
 80017a6:	4b1c      	ldr	r3, [pc, #112]	; (8001818 <mpu9250_read_sensor+0x138>)
 80017a8:	7b5b      	ldrb	r3, [r3, #13]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	4413      	add	r3, r2
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	3b0a      	subs	r3, #10
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	815a      	strh	r2, [r3, #10]

		temp_mag[0] = ((int16_t)data2[15]<<8) + data2[14];
 80017ba:	4b17      	ldr	r3, [pc, #92]	; (8001818 <mpu9250_read_sensor+0x138>)
 80017bc:	7bdb      	ldrb	r3, [r3, #15]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	021b      	lsls	r3, r3, #8
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	4b14      	ldr	r3, [pc, #80]	; (8001818 <mpu9250_read_sensor+0x138>)
 80017c6:	7b9b      	ldrb	r3, [r3, #14]
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	4413      	add	r3, r2
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	813b      	strh	r3, [r7, #8]
		temp_mag[1] = ((int16_t)data2[17]<<8) + data2[16];
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <mpu9250_read_sensor+0x138>)
 80017d4:	7c5b      	ldrb	r3, [r3, #17]
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	b29a      	uxth	r2, r3
 80017dc:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <mpu9250_read_sensor+0x138>)
 80017de:	7c1b      	ldrb	r3, [r3, #16]
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	4413      	add	r3, r2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	817b      	strh	r3, [r7, #10]
		temp_mag[2] = ((int16_t)data2[19]<<8) + data2[18];
 80017ea:	4b0b      	ldr	r3, [pc, #44]	; (8001818 <mpu9250_read_sensor+0x138>)
 80017ec:	7cdb      	ldrb	r3, [r3, #19]
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	021b      	lsls	r3, r3, #8
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	4b08      	ldr	r3, [pc, #32]	; (8001818 <mpu9250_read_sensor+0x138>)
 80017f6:	7c9b      	ldrb	r3, [r3, #18]
 80017f8:	b29b      	uxth	r3, r3
 80017fa:	4413      	add	r3, r2
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	b21b      	sxth	r3, r3
 8001800:	81bb      	strh	r3, [r7, #12]
		buffer_counter = 1;
 8001802:	4b03      	ldr	r3, [pc, #12]	; (8001810 <mpu9250_read_sensor+0x130>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
 8001808:	e088      	b.n	800191c <mpu9250_read_sensor+0x23c>
 800180a:	bf00      	nop
 800180c:	20000294 	.word	0x20000294
 8001810:	200004af 	.word	0x200004af
 8001814:	200004b0 	.word	0x200004b0
 8001818:	200004c4 	.word	0x200004c4
	}
	else
	{
		HAL_SPI_Receive_DMA(&hspi1, data2, 20);
 800181c:	2214      	movs	r2, #20
 800181e:	497a      	ldr	r1, [pc, #488]	; (8001a08 <mpu9250_read_sensor+0x328>)
 8001820:	487a      	ldr	r0, [pc, #488]	; (8001a0c <mpu9250_read_sensor+0x32c>)
 8001822:	f004 fd1b 	bl	800625c <HAL_SPI_Receive_DMA>

		data_imu ->x_accel = ((int16_t)data1[0]<<8) + data1[1];
 8001826:	4b7a      	ldr	r3, [pc, #488]	; (8001a10 <mpu9250_read_sensor+0x330>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b29b      	uxth	r3, r3
 800182c:	021b      	lsls	r3, r3, #8
 800182e:	b29a      	uxth	r2, r3
 8001830:	4b77      	ldr	r3, [pc, #476]	; (8001a10 <mpu9250_read_sensor+0x330>)
 8001832:	785b      	ldrb	r3, [r3, #1]
 8001834:	b29b      	uxth	r3, r3
 8001836:	4413      	add	r3, r2
 8001838:	b29b      	uxth	r3, r3
 800183a:	b21a      	sxth	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	801a      	strh	r2, [r3, #0]
		data_imu ->y_accel = ((int16_t)data1[2]<<8) + data1[3];
 8001840:	4b73      	ldr	r3, [pc, #460]	; (8001a10 <mpu9250_read_sensor+0x330>)
 8001842:	789b      	ldrb	r3, [r3, #2]
 8001844:	b29b      	uxth	r3, r3
 8001846:	021b      	lsls	r3, r3, #8
 8001848:	b29a      	uxth	r2, r3
 800184a:	4b71      	ldr	r3, [pc, #452]	; (8001a10 <mpu9250_read_sensor+0x330>)
 800184c:	78db      	ldrb	r3, [r3, #3]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4413      	add	r3, r2
 8001852:	b29b      	uxth	r3, r3
 8001854:	b21a      	sxth	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	805a      	strh	r2, [r3, #2]
		data_imu ->z_accel = ((int16_t)data1[4]<<8) + data1[5];
 800185a:	4b6d      	ldr	r3, [pc, #436]	; (8001a10 <mpu9250_read_sensor+0x330>)
 800185c:	791b      	ldrb	r3, [r3, #4]
 800185e:	b29b      	uxth	r3, r3
 8001860:	021b      	lsls	r3, r3, #8
 8001862:	b29a      	uxth	r2, r3
 8001864:	4b6a      	ldr	r3, [pc, #424]	; (8001a10 <mpu9250_read_sensor+0x330>)
 8001866:	795b      	ldrb	r3, [r3, #5]
 8001868:	b29b      	uxth	r3, r3
 800186a:	4413      	add	r3, r2
 800186c:	b29b      	uxth	r3, r3
 800186e:	b21a      	sxth	r2, r3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	809a      	strh	r2, [r3, #4]

		data_imu ->x_gyro = ((int16_t)data1[8]<<8) + data1[9] - X_GYRO_BIAS;
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <mpu9250_read_sensor+0x330>)
 8001876:	7a1b      	ldrb	r3, [r3, #8]
 8001878:	b29b      	uxth	r3, r3
 800187a:	021b      	lsls	r3, r3, #8
 800187c:	b29a      	uxth	r2, r3
 800187e:	4b64      	ldr	r3, [pc, #400]	; (8001a10 <mpu9250_read_sensor+0x330>)
 8001880:	7a5b      	ldrb	r3, [r3, #9]
 8001882:	b29b      	uxth	r3, r3
 8001884:	4413      	add	r3, r2
 8001886:	b29b      	uxth	r3, r3
 8001888:	3b52      	subs	r3, #82	; 0x52
 800188a:	b29b      	uxth	r3, r3
 800188c:	b21a      	sxth	r2, r3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	80da      	strh	r2, [r3, #6]
		data_imu ->y_gyro = ((int16_t)data1[10]<<8) + data1[11] - Y_GYRO_BIAS;
 8001892:	4b5f      	ldr	r3, [pc, #380]	; (8001a10 <mpu9250_read_sensor+0x330>)
 8001894:	7a9b      	ldrb	r3, [r3, #10]
 8001896:	b29b      	uxth	r3, r3
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	b29a      	uxth	r2, r3
 800189c:	4b5c      	ldr	r3, [pc, #368]	; (8001a10 <mpu9250_read_sensor+0x330>)
 800189e:	7adb      	ldrb	r3, [r3, #11]
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	3b29      	subs	r3, #41	; 0x29
 80018a8:	b29b      	uxth	r3, r3
 80018aa:	b21a      	sxth	r2, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	811a      	strh	r2, [r3, #8]
		data_imu ->z_gyro = ((int16_t)data1[12]<<8) + data1[13] - Z_GYRO_BIAS;
 80018b0:	4b57      	ldr	r3, [pc, #348]	; (8001a10 <mpu9250_read_sensor+0x330>)
 80018b2:	7b1b      	ldrb	r3, [r3, #12]
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	4b55      	ldr	r3, [pc, #340]	; (8001a10 <mpu9250_read_sensor+0x330>)
 80018bc:	7b5b      	ldrb	r3, [r3, #13]
 80018be:	b29b      	uxth	r3, r3
 80018c0:	4413      	add	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	3b0a      	subs	r3, #10
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b21a      	sxth	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	815a      	strh	r2, [r3, #10]


		temp_mag[0] = ((int16_t)data1[15]<<8) + data1[14];
 80018ce:	4b50      	ldr	r3, [pc, #320]	; (8001a10 <mpu9250_read_sensor+0x330>)
 80018d0:	7bdb      	ldrb	r3, [r3, #15]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	021b      	lsls	r3, r3, #8
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	4b4d      	ldr	r3, [pc, #308]	; (8001a10 <mpu9250_read_sensor+0x330>)
 80018da:	7b9b      	ldrb	r3, [r3, #14]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	4413      	add	r3, r2
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	813b      	strh	r3, [r7, #8]
		temp_mag[1] = ((int16_t)data1[17]<<8) + data1[16];
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <mpu9250_read_sensor+0x330>)
 80018e8:	7c5b      	ldrb	r3, [r3, #17]
 80018ea:	b29b      	uxth	r3, r3
 80018ec:	021b      	lsls	r3, r3, #8
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <mpu9250_read_sensor+0x330>)
 80018f2:	7c1b      	ldrb	r3, [r3, #16]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	4413      	add	r3, r2
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	817b      	strh	r3, [r7, #10]
		temp_mag[2] = ((int16_t)data1[19]<<8) + data1[18];
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <mpu9250_read_sensor+0x330>)
 8001900:	7cdb      	ldrb	r3, [r3, #19]
 8001902:	b29b      	uxth	r3, r3
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b41      	ldr	r3, [pc, #260]	; (8001a10 <mpu9250_read_sensor+0x330>)
 800190a:	7c9b      	ldrb	r3, [r3, #18]
 800190c:	b29b      	uxth	r3, r3
 800190e:	4413      	add	r3, r2
 8001910:	b29b      	uxth	r3, r3
 8001912:	b21b      	sxth	r3, r3
 8001914:	81bb      	strh	r3, [r7, #12]
		buffer_counter = 0;
 8001916:	4b3f      	ldr	r3, [pc, #252]	; (8001a14 <mpu9250_read_sensor+0x334>)
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
	}

	data_imu ->x_mag = (int16_t)((float) temp_mag[1]  * (((float)mag_adjust[1] - 128) / 256.0f + 1.0f)) - XMAGN_BIAS;
 800191c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001920:	ee07 3a90 	vmov	s15, r3
 8001924:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001928:	4b3b      	ldr	r3, [pc, #236]	; (8001a18 <mpu9250_read_sensor+0x338>)
 800192a:	785b      	ldrb	r3, [r3, #1]
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001934:	eddf 6a39 	vldr	s13, [pc, #228]	; 8001a1c <mpu9250_read_sensor+0x33c>
 8001938:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800193c:	ed9f 6a38 	vldr	s12, [pc, #224]	; 8001a20 <mpu9250_read_sensor+0x340>
 8001940:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001944:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001948:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800194c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001950:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001954:	ee17 3a90 	vmov	r3, s15
 8001958:	b21b      	sxth	r3, r3
 800195a:	b29b      	uxth	r3, r3
 800195c:	3b6e      	subs	r3, #110	; 0x6e
 800195e:	b29b      	uxth	r3, r3
 8001960:	b21a      	sxth	r2, r3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	819a      	strh	r2, [r3, #12]
	data_imu ->y_mag = (int16_t)((float) temp_mag[0]  * (((float)mag_adjust[0] - 128) / 256.0f + 1.0f)) - YMAGN_BIAS;
 8001966:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800196a:	ee07 3a90 	vmov	s15, r3
 800196e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001972:	4b29      	ldr	r3, [pc, #164]	; (8001a18 <mpu9250_read_sensor+0x338>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	ee07 3a90 	vmov	s15, r3
 800197a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800197e:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001a1c <mpu9250_read_sensor+0x33c>
 8001982:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001986:	ed9f 6a26 	vldr	s12, [pc, #152]	; 8001a20 <mpu9250_read_sensor+0x340>
 800198a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800198e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800199a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800199e:	ee17 3a90 	vmov	r3, s15
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	3bbe      	subs	r3, #190	; 0xbe
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	b21a      	sxth	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	81da      	strh	r2, [r3, #14]
	data_imu ->z_mag = -(int16_t)((float)temp_mag[2] * (((float)mag_adjust[2] - 128) / 256.0f + 1.0f)) - ZMAGN_BIAS;
 80019b0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019b4:	ee07 3a90 	vmov	s15, r3
 80019b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019bc:	4b16      	ldr	r3, [pc, #88]	; (8001a18 <mpu9250_read_sensor+0x338>)
 80019be:	789b      	ldrb	r3, [r3, #2]
 80019c0:	ee07 3a90 	vmov	s15, r3
 80019c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019c8:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001a1c <mpu9250_read_sensor+0x33c>
 80019cc:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80019d0:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8001a20 <mpu9250_read_sensor+0x340>
 80019d4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80019d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80019dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80019e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019e8:	ee17 3a90 	vmov	r3, s15
 80019ec:	b21b      	sxth	r3, r3
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	f06f 034a 	mvn.w	r3, #74	; 0x4a
 80019f4:	1a9b      	subs	r3, r3, r2
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	821a      	strh	r2, [r3, #16]

//	printf("accelerometer : %d, %d, and %d \n", data_imu ->x_accel, data_imu ->y_accel,data_imu ->z_accel);
//	printf("gyroscope : %d, %d, and %d \n", data_imu ->x_gyro, data_imu ->y_gyro,data_imu ->z_gyro);
//	printf("magnetometer : %d, %d, and %d \n", data_imu ->x_mag, data_imu ->y_mag,data_imu ->z_mag);
}
 80019fe:	bf00      	nop
 8001a00:	3710      	adds	r7, #16
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	200004c4 	.word	0x200004c4
 8001a0c:	20000294 	.word	0x20000294
 8001a10:	200004b0 	.word	0x200004b0
 8001a14:	200004af 	.word	0x200004af
 8001a18:	200004ac 	.word	0x200004ac
 8001a1c:	43000000 	.word	0x43000000
 8001a20:	43800000 	.word	0x43800000

08001a24 <mpu9250_write_reg>:

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	460a      	mov	r2, r1
 8001a2e:	71fb      	strb	r3, [r7, #7]
 8001a30:	4613      	mov	r3, r2
 8001a32:	71bb      	strb	r3, [r7, #6]
	activate_spi_mpu9250();
 8001a34:	f7ff fd75 	bl	8001522 <activate_spi_mpu9250>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001a38:	1df9      	adds	r1, r7, #7
 8001a3a:	2364      	movs	r3, #100	; 0x64
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <mpu9250_write_reg+0x38>)
 8001a40:	f003 ff5b 	bl	80058fa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001a44:	1db9      	adds	r1, r7, #6
 8001a46:	2364      	movs	r3, #100	; 0x64
 8001a48:	2201      	movs	r2, #1
 8001a4a:	4804      	ldr	r0, [pc, #16]	; (8001a5c <mpu9250_write_reg+0x38>)
 8001a4c:	f003 ff55 	bl	80058fa <HAL_SPI_Transmit>
	deactivate_spi_mpu9250();
 8001a50:	f7ff fd71 	bl	8001536 <deactivate_spi_mpu9250>
}
 8001a54:	bf00      	nop
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000294 	.word	0x20000294

08001a60 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b084      	sub	sp, #16
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	4603      	mov	r3, r0
 8001a68:	6039      	str	r1, [r7, #0]
 8001a6a:	71fb      	strb	r3, [r7, #7]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	73fb      	strb	r3, [r7, #15]
	activate_spi_mpu9250();
 8001a7a:	f7ff fd52 	bl	8001522 <activate_spi_mpu9250>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001a7e:	f107 010f 	add.w	r1, r7, #15
 8001a82:	2364      	movs	r3, #100	; 0x64
 8001a84:	2201      	movs	r2, #1
 8001a86:	4808      	ldr	r0, [pc, #32]	; (8001aa8 <mpu9250_read_reg+0x48>)
 8001a88:	f003 ff37 	bl	80058fa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8001a8c:	79bb      	ldrb	r3, [r7, #6]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	2364      	movs	r3, #100	; 0x64
 8001a92:	6839      	ldr	r1, [r7, #0]
 8001a94:	4804      	ldr	r0, [pc, #16]	; (8001aa8 <mpu9250_read_reg+0x48>)
 8001a96:	f004 f89e 	bl	8005bd6 <HAL_SPI_Receive>
	deactivate_spi_mpu9250();
 8001a9a:	f7ff fd4c 	bl	8001536 <deactivate_spi_mpu9250>
}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	20000294 	.word	0x20000294

08001aac <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
	deactivate_spi_mpu9250();
 8001ab4:	f7ff fd3f 	bl	8001536 <deactivate_spi_mpu9250>
}
 8001ab8:	bf00      	nop
 8001aba:	3708      	adds	r7, #8
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <estimate_euler_angles>:
#include "orientation_est.h"
#include "mpu9250.h"
#include <math.h>

void estimate_euler_angles(mpu9250_data imu_data, EulerAngles *euler_angles)
{
 8001ac0:	b084      	sub	sp, #16
 8001ac2:	b5b0      	push	{r4, r5, r7, lr}
 8001ac4:	b086      	sub	sp, #24
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001acc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	float sinroll = sin(euler_angles  -> roll);
 8001ad0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7fe fd37 	bl	8000548 <__aeabi_f2d>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	ec43 2b10 	vmov	d0, r2, r3
 8001ae2:	f009 fe11 	bl	800b708 <sin>
 8001ae6:	ec53 2b10 	vmov	r2, r3, d0
 8001aea:	4610      	mov	r0, r2
 8001aec:	4619      	mov	r1, r3
 8001aee:	f7ff f85b 	bl	8000ba8 <__aeabi_d2f>
 8001af2:	4603      	mov	r3, r0
 8001af4:	617b      	str	r3, [r7, #20]
		float cosroll = cos(euler_angles  -> roll );
 8001af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7fe fd24 	bl	8000548 <__aeabi_f2d>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	ec43 2b10 	vmov	d0, r2, r3
 8001b08:	f009 fdaa 	bl	800b660 <cos>
 8001b0c:	ec53 2b10 	vmov	r2, r3, d0
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7ff f848 	bl	8000ba8 <__aeabi_d2f>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	613b      	str	r3, [r7, #16]
		float sinpitch = sin(euler_angles -> pitch);
 8001b1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7fe fd11 	bl	8000548 <__aeabi_f2d>
 8001b26:	4602      	mov	r2, r0
 8001b28:	460b      	mov	r3, r1
 8001b2a:	ec43 2b10 	vmov	d0, r2, r3
 8001b2e:	f009 fdeb 	bl	800b708 <sin>
 8001b32:	ec53 2b10 	vmov	r2, r3, d0
 8001b36:	4610      	mov	r0, r2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	f7ff f835 	bl	8000ba8 <__aeabi_d2f>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	60fb      	str	r3, [r7, #12]
		float cospitch = cos(euler_angles -> pitch );
 8001b42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f7fe fcfe 	bl	8000548 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	ec43 2b10 	vmov	d0, r2, r3
 8001b54:	f009 fd84 	bl	800b660 <cos>
 8001b58:	ec53 2b10 	vmov	r2, r3, d0
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff f822 	bl	8000ba8 <__aeabi_d2f>
 8001b64:	4603      	mov	r3, r0
 8001b66:	60bb      	str	r3, [r7, #8]

	float ay_az_sqrt = sqrt((float)imu_data.y_accel * imu_data.y_accel +
 8001b68:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b6c:	ee07 3a90 	vmov	s15, r3
 8001b70:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b74:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001b78:	ee07 3a90 	vmov	s15, r3
 8001b7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b80:	ee27 7a27 	vmul.f32	s14, s14, s15
			imu_data.z_accel * imu_data.z_accel);
 8001b84:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001b88:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
	float ay_az_sqrt = sqrt((float)imu_data.y_accel * imu_data.y_accel +
 8001b90:	ee07 3a90 	vmov	s15, r3
 8001b94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9c:	ee17 0a90 	vmov	r0, s15
 8001ba0:	f7fe fcd2 	bl	8000548 <__aeabi_f2d>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	ec43 2b10 	vmov	d0, r2, r3
 8001bac:	f009 fe06 	bl	800b7bc <sqrt>
 8001bb0:	ec53 2b10 	vmov	r2, r3, d0
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f7fe fff6 	bl	8000ba8 <__aeabi_d2f>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	607b      	str	r3, [r7, #4]
	float ax_ay_az_sqrt = sqrt(ay_az_sqrt * ay_az_sqrt + (float)imu_data.x_accel * imu_data.x_accel);
 8001bc0:	edd7 7a01 	vldr	s15, [r7, #4]
 8001bc4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001bc8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001bcc:	ee07 3a90 	vmov	s15, r3
 8001bd0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001bd4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001be4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be8:	ee17 0a90 	vmov	r0, s15
 8001bec:	f7fe fcac 	bl	8000548 <__aeabi_f2d>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	ec43 2b10 	vmov	d0, r2, r3
 8001bf8:	f009 fde0 	bl	800b7bc <sqrt>
 8001bfc:	ec53 2b10 	vmov	r2, r3, d0
 8001c00:	4610      	mov	r0, r2
 8001c02:	4619      	mov	r1, r3
 8001c04:	f7fe ffd0 	bl	8000ba8 <__aeabi_d2f>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	603b      	str	r3, [r7, #0]
	euler_angles ->pitch = atan2(imu_data.x_accel, ay_az_sqrt);
 8001c0c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7fe fc87 	bl	8000524 <__aeabi_i2d>
 8001c16:	4604      	mov	r4, r0
 8001c18:	460d      	mov	r5, r1
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f7fe fc94 	bl	8000548 <__aeabi_f2d>
 8001c20:	4602      	mov	r2, r0
 8001c22:	460b      	mov	r3, r1
 8001c24:	ec43 2b11 	vmov	d1, r2, r3
 8001c28:	ec45 4b10 	vmov	d0, r4, r5
 8001c2c:	f009 fdc4 	bl	800b7b8 <atan2>
 8001c30:	ec53 2b10 	vmov	r2, r3, d0
 8001c34:	4610      	mov	r0, r2
 8001c36:	4619      	mov	r1, r3
 8001c38:	f7fe ffb6 	bl	8000ba8 <__aeabi_d2f>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c40:	605a      	str	r2, [r3, #4]
	euler_angles ->roll  = 	atan2(-imu_data.y_accel, -imu_data.z_accel);
 8001c42:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c46:	425b      	negs	r3, r3
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7fe fc6b 	bl	8000524 <__aeabi_i2d>
 8001c4e:	4604      	mov	r4, r0
 8001c50:	460d      	mov	r5, r1
 8001c52:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001c56:	425b      	negs	r3, r3
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7fe fc63 	bl	8000524 <__aeabi_i2d>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	ec43 2b11 	vmov	d1, r2, r3
 8001c66:	ec45 4b10 	vmov	d0, r4, r5
 8001c6a:	f009 fda5 	bl	800b7b8 <atan2>
 8001c6e:	ec53 2b10 	vmov	r2, r3, d0
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7fe ff97 	bl	8000ba8 <__aeabi_d2f>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c7e:	609a      	str	r2, [r3, #8]
//	float sinroll = ((float)-imu_data.y_accel)/ ay_az_sqrt;
//	float cosroll = ((float)-imu_data.z_accel)/ ay_az_sqrt;
//	float sinpitch = (float)imu_data.x_accel / ax_ay_az_sqrt;
//	float cospitch = (float)ay_az_sqrt / ax_ay_az_sqrt;

	euler_angles ->yaw = atan2((float)imu_data.z_mag * sinroll - (float)imu_data.y_mag * cosroll,
 8001c80:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001c84:	ee07 3a90 	vmov	s15, r3
 8001c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c94:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001c98:	ee07 3a90 	vmov	s15, r3
 8001c9c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ca0:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ca4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ca8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cac:	ee17 0a90 	vmov	r0, s15
 8001cb0:	f7fe fc4a 	bl	8000548 <__aeabi_f2d>
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	460d      	mov	r5, r1
				(float)imu_data.x_mag * cospitch + sinpitch *
 8001cb8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001cbc:	ee07 3a90 	vmov	s15, r3
 8001cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cc4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
				((float)imu_data.z_mag * cosroll + (float)imu_data.y_mag * sinroll));
 8001ccc:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cd8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cdc:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001ce0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001ce4:	ee07 3a90 	vmov	s15, r3
 8001ce8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001cec:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cf0:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001cf4:	ee76 6aa7 	vadd.f32	s13, s13, s15
				(float)imu_data.x_mag * cospitch + sinpitch *
 8001cf8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
	euler_angles ->yaw = atan2((float)imu_data.z_mag * sinroll - (float)imu_data.y_mag * cosroll,
 8001d04:	ee17 0a90 	vmov	r0, s15
 8001d08:	f7fe fc1e 	bl	8000548 <__aeabi_f2d>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	460b      	mov	r3, r1
 8001d10:	ec43 2b11 	vmov	d1, r2, r3
 8001d14:	ec45 4b10 	vmov	d0, r4, r5
 8001d18:	f009 fd4e 	bl	800b7b8 <atan2>
 8001d1c:	ec53 2b10 	vmov	r2, r3, d0
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f7fe ff40 	bl	8000ba8 <__aeabi_d2f>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d2c:	601a      	str	r2, [r3, #0]
}
 8001d2e:	bf00      	nop
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d38:	b004      	add	sp, #16
 8001d3a:	4770      	bx	lr
 8001d3c:	0000      	movs	r0, r0
	...

08001d40 <update_euler_angles_gyro>:

void update_euler_angles_gyro(mpu9250_data imu_data, EulerAngles *euler_angles)
{
 8001d40:	b084      	sub	sp, #16
 8001d42:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	float sinroll = sin(euler_angles  -> roll);
 8001d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7fe fbf6 	bl	8000548 <__aeabi_f2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	ec43 2b10 	vmov	d0, r2, r3
 8001d64:	f009 fcd0 	bl	800b708 <sin>
 8001d68:	ec53 2b10 	vmov	r2, r3, d0
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe ff1a 	bl	8000ba8 <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	60fb      	str	r3, [r7, #12]
	float cosroll = cos(euler_angles  -> roll );
 8001d78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbe3 	bl	8000548 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	ec43 2b10 	vmov	d0, r2, r3
 8001d8a:	f009 fc69 	bl	800b660 <cos>
 8001d8e:	ec53 2b10 	vmov	r2, r3, d0
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	f7fe ff07 	bl	8000ba8 <__aeabi_d2f>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	60bb      	str	r3, [r7, #8]
	float sinpitch = sin(euler_angles -> pitch);
 8001d9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7fe fbd0 	bl	8000548 <__aeabi_f2d>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	ec43 2b10 	vmov	d0, r2, r3
 8001db0:	f009 fcaa 	bl	800b708 <sin>
 8001db4:	ec53 2b10 	vmov	r2, r3, d0
 8001db8:	4610      	mov	r0, r2
 8001dba:	4619      	mov	r1, r3
 8001dbc:	f7fe fef4 	bl	8000ba8 <__aeabi_d2f>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	607b      	str	r3, [r7, #4]
	float cospitch = cos(euler_angles -> pitch );
 8001dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f7fe fbbd 	bl	8000548 <__aeabi_f2d>
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	ec43 2b10 	vmov	d0, r2, r3
 8001dd6:	f009 fc43 	bl	800b660 <cos>
 8001dda:	ec53 2b10 	vmov	r2, r3, d0
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe fee1 	bl	8000ba8 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	603b      	str	r3, [r7, #0]

	euler_angles -> roll += GYRO_TO_ANGLE / SAMPLING_RATE * ((float)imu_data.x_gyro +
 8001dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbaa 	bl	8000548 <__aeabi_f2d>
 8001df4:	4604      	mov	r4, r0
 8001df6:	460d      	mov	r5, r1
 8001df8:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			sinpitch / cospitch * ((float)imu_data.y_gyro * sinroll + (float)imu_data.z_gyro * cosroll));
 8001e04:	ed97 6a01 	vldr	s12, [r7, #4]
 8001e08:	edd7 7a00 	vldr	s15, [r7]
 8001e0c:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001e10:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e20:	ee26 6a27 	vmul.f32	s12, s12, s15
 8001e24:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8001e30:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e34:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001e38:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
	euler_angles -> roll += GYRO_TO_ANGLE / SAMPLING_RATE * ((float)imu_data.x_gyro +
 8001e40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e44:	ee17 0a90 	vmov	r0, s15
 8001e48:	f7fe fb7e 	bl	8000548 <__aeabi_f2d>
 8001e4c:	a348      	add	r3, pc, #288	; (adr r3, 8001f70 <update_euler_angles_gyro+0x230>)
 8001e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e52:	f7fe fbd1 	bl	80005f8 <__aeabi_dmul>
 8001e56:	4602      	mov	r2, r0
 8001e58:	460b      	mov	r3, r1
 8001e5a:	4620      	mov	r0, r4
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	f7fe fa15 	bl	800028c <__adddf3>
 8001e62:	4602      	mov	r2, r0
 8001e64:	460b      	mov	r3, r1
 8001e66:	4610      	mov	r0, r2
 8001e68:	4619      	mov	r1, r3
 8001e6a:	f7fe fe9d 	bl	8000ba8 <__aeabi_d2f>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e72:	609a      	str	r2, [r3, #8]

	euler_angles -> pitch += GYRO_TO_ANGLE / SAMPLING_RATE * ((float)imu_data.y_gyro * cosroll
 8001e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb65 	bl	8000548 <__aeabi_f2d>
 8001e7e:	4604      	mov	r4, r0
 8001e80:	460d      	mov	r5, r1
 8001e82:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001e86:	ee07 3a90 	vmov	s15, r3
 8001e8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e8e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e92:	ee27 7a27 	vmul.f32	s14, s14, s15
			- (float)imu_data.z_gyro * sinroll);
 8001e96:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001e9a:	ee07 3a90 	vmov	s15, r3
 8001e9e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ea2:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eae:	ee17 0a90 	vmov	r0, s15
 8001eb2:	f7fe fb49 	bl	8000548 <__aeabi_f2d>
	euler_angles -> pitch += GYRO_TO_ANGLE / SAMPLING_RATE * ((float)imu_data.y_gyro * cosroll
 8001eb6:	a32e      	add	r3, pc, #184	; (adr r3, 8001f70 <update_euler_angles_gyro+0x230>)
 8001eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ebc:	f7fe fb9c 	bl	80005f8 <__aeabi_dmul>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4620      	mov	r0, r4
 8001ec6:	4629      	mov	r1, r5
 8001ec8:	f7fe f9e0 	bl	800028c <__adddf3>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	460b      	mov	r3, r1
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	4619      	mov	r1, r3
 8001ed4:	f7fe fe68 	bl	8000ba8 <__aeabi_d2f>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001edc:	605a      	str	r2, [r3, #4]

	euler_angles -> yaw += GYRO_TO_ANGLE / SAMPLING_RATE * ((float)imu_data.y_gyro * sinroll
 8001ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7fe fb30 	bl	8000548 <__aeabi_f2d>
 8001ee8:	4604      	mov	r4, r0
 8001eea:	460d      	mov	r5, r1
 8001eec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001ef0:	ee07 3a90 	vmov	s15, r3
 8001ef4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ef8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001efc:	ee27 7a27 	vmul.f32	s14, s14, s15
			+ (float)imu_data.z_gyro * cosroll) / cospitch;
 8001f00:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f10:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f18:	ee17 0a90 	vmov	r0, s15
 8001f1c:	f7fe fb14 	bl	8000548 <__aeabi_f2d>
	euler_angles -> yaw += GYRO_TO_ANGLE / SAMPLING_RATE * ((float)imu_data.y_gyro * sinroll
 8001f20:	a313      	add	r3, pc, #76	; (adr r3, 8001f70 <update_euler_angles_gyro+0x230>)
 8001f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f26:	f7fe fb67 	bl	80005f8 <__aeabi_dmul>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	4690      	mov	r8, r2
 8001f30:	4699      	mov	r9, r3
			+ (float)imu_data.z_gyro * cosroll) / cospitch;
 8001f32:	6838      	ldr	r0, [r7, #0]
 8001f34:	f7fe fb08 	bl	8000548 <__aeabi_f2d>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4640      	mov	r0, r8
 8001f3e:	4649      	mov	r1, r9
 8001f40:	f7fe fc84 	bl	800084c <__aeabi_ddiv>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
	euler_angles -> yaw += GYRO_TO_ANGLE / SAMPLING_RATE * ((float)imu_data.y_gyro * sinroll
 8001f48:	4620      	mov	r0, r4
 8001f4a:	4629      	mov	r1, r5
 8001f4c:	f7fe f99e 	bl	800028c <__adddf3>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	f7fe fe26 	bl	8000ba8 <__aeabi_d2f>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f60:	601a      	str	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	e8bd 43b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, lr}
 8001f6c:	b004      	add	sp, #16
 8001f6e:	4770      	bx	lr
 8001f70:	5f385af7 	.word	0x5f385af7
 8001f74:	3e91d9d8 	.word	0x3e91d9d8

08001f78 <complementary_filter>:


EulerAngles complementary_filter(mpu9250_data imu_data)
{
 8001f78:	b084      	sub	sp, #16
 8001f7a:	b5b0      	push	{r4, r5, r7, lr}
 8001f7c:	b08c      	sub	sp, #48	; 0x30
 8001f7e:	af02      	add	r7, sp, #8
 8001f80:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	static EulerAngles euler_angles_static;
	EulerAngles euler_angles;
	static uint8_t first_time = 0;
	if(first_time == 0)
 8001f88:	4b63      	ldr	r3, [pc, #396]	; (8002118 <complementary_filter+0x1a0>)
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d111      	bne.n	8001fb4 <complementary_filter+0x3c>
	{
		estimate_euler_angles(imu_data, &euler_angles_static);
 8001f90:	4b62      	ldr	r3, [pc, #392]	; (800211c <complementary_filter+0x1a4>)
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001f98:	f8ad 3000 	strh.w	r3, [sp]
 8001f9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fa0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa2:	f7ff fd8d 	bl	8001ac0 <estimate_euler_angles>
		first_time = 1;
 8001fa6:	4b5c      	ldr	r3, [pc, #368]	; (8002118 <complementary_filter+0x1a0>)
 8001fa8:	2201      	movs	r2, #1
 8001faa:	701a      	strb	r2, [r3, #0]
		printf("first time \n");
 8001fac:	485c      	ldr	r0, [pc, #368]	; (8002120 <complementary_filter+0x1a8>)
 8001fae:	f007 faa3 	bl	80094f8 <puts>
 8001fb2:	e08e      	b.n	80020d2 <complementary_filter+0x15a>
	}
	else
	{
		euler_angles = euler_angles_static;
 8001fb4:	4a59      	ldr	r2, [pc, #356]	; (800211c <complementary_filter+0x1a4>)
 8001fb6:	f107 0310 	add.w	r3, r7, #16
 8001fba:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		update_euler_angles_gyro(imu_data, &euler_angles_static);
 8001fc0:	4b56      	ldr	r3, [pc, #344]	; (800211c <complementary_filter+0x1a4>)
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fc8:	f8ad 3000 	strh.w	r3, [sp]
 8001fcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fd0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fd2:	f7ff feb5 	bl	8001d40 <update_euler_angles_gyro>
		estimate_euler_angles(imu_data, &euler_angles);
 8001fd6:	f107 0310 	add.w	r3, r7, #16
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8001fe0:	f8ad 3000 	strh.w	r3, [sp]
 8001fe4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001fe8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fea:	f7ff fd69 	bl	8001ac0 <estimate_euler_angles>
		euler_angles_static.pitch = ALPHA * euler_angles_static.pitch + (1 - ALPHA) * euler_angles.pitch;
 8001fee:	4b4b      	ldr	r3, [pc, #300]	; (800211c <complementary_filter+0x1a4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7fe faa8 	bl	8000548 <__aeabi_f2d>
 8001ff8:	a343      	add	r3, pc, #268	; (adr r3, 8002108 <complementary_filter+0x190>)
 8001ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffe:	f7fe fafb 	bl	80005f8 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4614      	mov	r4, r2
 8002008:	461d      	mov	r5, r3
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fa9b 	bl	8000548 <__aeabi_f2d>
 8002012:	a33f      	add	r3, pc, #252	; (adr r3, 8002110 <complementary_filter+0x198>)
 8002014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002018:	f7fe faee 	bl	80005f8 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4620      	mov	r0, r4
 8002022:	4629      	mov	r1, r5
 8002024:	f7fe f932 	bl	800028c <__adddf3>
 8002028:	4602      	mov	r2, r0
 800202a:	460b      	mov	r3, r1
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fdba 	bl	8000ba8 <__aeabi_d2f>
 8002034:	4603      	mov	r3, r0
 8002036:	4a39      	ldr	r2, [pc, #228]	; (800211c <complementary_filter+0x1a4>)
 8002038:	6053      	str	r3, [r2, #4]
		euler_angles_static.roll = ALPHA * euler_angles_static.roll + (1 - ALPHA) * euler_angles.roll;
 800203a:	4b38      	ldr	r3, [pc, #224]	; (800211c <complementary_filter+0x1a4>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa82 	bl	8000548 <__aeabi_f2d>
 8002044:	a330      	add	r3, pc, #192	; (adr r3, 8002108 <complementary_filter+0x190>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fad5 	bl	80005f8 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4614      	mov	r4, r2
 8002054:	461d      	mov	r5, r3
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa75 	bl	8000548 <__aeabi_f2d>
 800205e:	a32c      	add	r3, pc, #176	; (adr r3, 8002110 <complementary_filter+0x198>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	f7fe fac8 	bl	80005f8 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4620      	mov	r0, r4
 800206e:	4629      	mov	r1, r5
 8002070:	f7fe f90c 	bl	800028c <__adddf3>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f7fe fd94 	bl	8000ba8 <__aeabi_d2f>
 8002080:	4603      	mov	r3, r0
 8002082:	4a26      	ldr	r2, [pc, #152]	; (800211c <complementary_filter+0x1a4>)
 8002084:	6093      	str	r3, [r2, #8]
		euler_angles_static.yaw = ALPHA * euler_angles_static.yaw + (1 - ALPHA) * euler_angles.yaw;
 8002086:	4b25      	ldr	r3, [pc, #148]	; (800211c <complementary_filter+0x1a4>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fa5c 	bl	8000548 <__aeabi_f2d>
 8002090:	a31d      	add	r3, pc, #116	; (adr r3, 8002108 <complementary_filter+0x190>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	f7fe faaf 	bl	80005f8 <__aeabi_dmul>
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4614      	mov	r4, r2
 80020a0:	461d      	mov	r5, r3
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe fa4f 	bl	8000548 <__aeabi_f2d>
 80020aa:	a319      	add	r3, pc, #100	; (adr r3, 8002110 <complementary_filter+0x198>)
 80020ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020b0:	f7fe faa2 	bl	80005f8 <__aeabi_dmul>
 80020b4:	4602      	mov	r2, r0
 80020b6:	460b      	mov	r3, r1
 80020b8:	4620      	mov	r0, r4
 80020ba:	4629      	mov	r1, r5
 80020bc:	f7fe f8e6 	bl	800028c <__adddf3>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	4610      	mov	r0, r2
 80020c6:	4619      	mov	r1, r3
 80020c8:	f7fe fd6e 	bl	8000ba8 <__aeabi_d2f>
 80020cc:	4603      	mov	r3, r0
 80020ce:	4a13      	ldr	r2, [pc, #76]	; (800211c <complementary_filter+0x1a4>)
 80020d0:	6013      	str	r3, [r2, #0]
	}

	return euler_angles_static;
 80020d2:	4a12      	ldr	r2, [pc, #72]	; (800211c <complementary_filter+0x1a4>)
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80020de:	69f9      	ldr	r1, [r7, #28]
 80020e0:	6a3a      	ldr	r2, [r7, #32]
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	ee06 1a90 	vmov	s13, r1
 80020e8:	ee07 2a10 	vmov	s14, r2
 80020ec:	ee07 3a90 	vmov	s15, r3
}
 80020f0:	eeb0 0a66 	vmov.f32	s0, s13
 80020f4:	eef0 0a47 	vmov.f32	s1, s14
 80020f8:	eeb0 1a67 	vmov.f32	s2, s15
 80020fc:	3728      	adds	r7, #40	; 0x28
 80020fe:	46bd      	mov	sp, r7
 8002100:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002104:	b004      	add	sp, #16
 8002106:	4770      	bx	lr
 8002108:	7ae147ae 	.word	0x7ae147ae
 800210c:	3fefae14 	.word	0x3fefae14
 8002110:	47ae1480 	.word	0x47ae1480
 8002114:	3f847ae1 	.word	0x3f847ae1
 8002118:	200004d8 	.word	0x200004d8
 800211c:	200004dc 	.word	0x200004dc
 8002120:	0800ce60 	.word	0x0800ce60

08002124 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_MspInit+0x44>)
 800212c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800212e:	4a0e      	ldr	r2, [pc, #56]	; (8002168 <HAL_MspInit+0x44>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	6613      	str	r3, [r2, #96]	; 0x60
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <HAL_MspInit+0x44>)
 8002138:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <HAL_MspInit+0x44>)
 8002144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_MspInit+0x44>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800214c:	6593      	str	r3, [r2, #88]	; 0x58
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <HAL_MspInit+0x44>)
 8002150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002156:	603b      	str	r3, [r7, #0]
 8002158:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800215a:	bf00      	nop
 800215c:	370c      	adds	r7, #12
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000

0800216c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b0ac      	sub	sp, #176	; 0xb0
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002174:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002178:	2200      	movs	r2, #0
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	605a      	str	r2, [r3, #4]
 800217e:	609a      	str	r2, [r3, #8]
 8002180:	60da      	str	r2, [r3, #12]
 8002182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002184:	f107 0314 	add.w	r3, r7, #20
 8002188:	2288      	movs	r2, #136	; 0x88
 800218a:	2100      	movs	r1, #0
 800218c:	4618      	mov	r0, r3
 800218e:	f006 fcd3 	bl	8008b38 <memset>
  if(hi2c->Instance==I2C1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a3e      	ldr	r2, [pc, #248]	; (8002290 <HAL_I2C_MspInit+0x124>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d174      	bne.n	8002286 <HAL_I2C_MspInit+0x11a>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800219c:	2340      	movs	r3, #64	; 0x40
 800219e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80021a0:	2300      	movs	r3, #0
 80021a2:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80021a4:	f107 0314 	add.w	r3, r7, #20
 80021a8:	4618      	mov	r0, r3
 80021aa:	f002 fe47 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80021b4:	f7ff f9b0 	bl	8001518 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b8:	4b36      	ldr	r3, [pc, #216]	; (8002294 <HAL_I2C_MspInit+0x128>)
 80021ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021bc:	4a35      	ldr	r2, [pc, #212]	; (8002294 <HAL_I2C_MspInit+0x128>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021c4:	4b33      	ldr	r3, [pc, #204]	; (8002294 <HAL_I2C_MspInit+0x128>)
 80021c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	613b      	str	r3, [r7, #16]
 80021ce:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80021d0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80021d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021d8:	2312      	movs	r3, #18
 80021da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021ea:	2304      	movs	r3, #4
 80021ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80021f4:	4619      	mov	r1, r3
 80021f6:	4828      	ldr	r0, [pc, #160]	; (8002298 <HAL_I2C_MspInit+0x12c>)
 80021f8:	f000 ff3c 	bl	8003074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <HAL_I2C_MspInit+0x128>)
 80021fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002200:	4a24      	ldr	r2, [pc, #144]	; (8002294 <HAL_I2C_MspInit+0x128>)
 8002202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002206:	6593      	str	r3, [r2, #88]	; 0x58
 8002208:	4b22      	ldr	r3, [pc, #136]	; (8002294 <HAL_I2C_MspInit+0x128>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002210:	60fb      	str	r3, [r7, #12]
 8002212:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 8002214:	4b21      	ldr	r3, [pc, #132]	; (800229c <HAL_I2C_MspInit+0x130>)
 8002216:	4a22      	ldr	r2, [pc, #136]	; (80022a0 <HAL_I2C_MspInit+0x134>)
 8002218:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 800221a:	4b20      	ldr	r3, [pc, #128]	; (800229c <HAL_I2C_MspInit+0x130>)
 800221c:	2205      	movs	r2, #5
 800221e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002220:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_I2C_MspInit+0x130>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_I2C_MspInit+0x130>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_I2C_MspInit+0x130>)
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002232:	4b1a      	ldr	r3, [pc, #104]	; (800229c <HAL_I2C_MspInit+0x130>)
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002238:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_I2C_MspInit+0x130>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_I2C_MspInit+0x130>)
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002244:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_I2C_MspInit+0x130>)
 8002246:	2200      	movs	r2, #0
 8002248:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800224a:	4814      	ldr	r0, [pc, #80]	; (800229c <HAL_I2C_MspInit+0x130>)
 800224c:	f000 fc8e 	bl	8002b6c <HAL_DMA_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 8002256:	f7ff f95f 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a0f      	ldr	r2, [pc, #60]	; (800229c <HAL_I2C_MspInit+0x130>)
 800225e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002260:	4a0e      	ldr	r2, [pc, #56]	; (800229c <HAL_I2C_MspInit+0x130>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 8002266:	2200      	movs	r2, #0
 8002268:	2101      	movs	r1, #1
 800226a:	201f      	movs	r0, #31
 800226c:	f000 fc47 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002270:	201f      	movs	r0, #31
 8002272:	f000 fc60 	bl	8002b36 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 8002276:	2200      	movs	r2, #0
 8002278:	2101      	movs	r1, #1
 800227a:	2020      	movs	r0, #32
 800227c:	f000 fc3f 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002280:	2020      	movs	r0, #32
 8002282:	f000 fc58 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002286:	bf00      	nop
 8002288:	37b0      	adds	r7, #176	; 0xb0
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	40005400 	.word	0x40005400
 8002294:	40021000 	.word	0x40021000
 8002298:	48000400 	.word	0x48000400
 800229c:	2000024c 	.word	0x2000024c
 80022a0:	4002046c 	.word	0x4002046c

080022a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a40      	ldr	r2, [pc, #256]	; (80023c4 <HAL_SPI_MspInit+0x120>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d17a      	bne.n	80023bc <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022c6:	4b40      	ldr	r3, [pc, #256]	; (80023c8 <HAL_SPI_MspInit+0x124>)
 80022c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ca:	4a3f      	ldr	r2, [pc, #252]	; (80023c8 <HAL_SPI_MspInit+0x124>)
 80022cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022d0:	6613      	str	r3, [r2, #96]	; 0x60
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_SPI_MspInit+0x124>)
 80022d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022da:	613b      	str	r3, [r7, #16]
 80022dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b3a      	ldr	r3, [pc, #232]	; (80023c8 <HAL_SPI_MspInit+0x124>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022e2:	4a39      	ldr	r2, [pc, #228]	; (80023c8 <HAL_SPI_MspInit+0x124>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022ea:	4b37      	ldr	r3, [pc, #220]	; (80023c8 <HAL_SPI_MspInit+0x124>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
 80022f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80022f6:	23e0      	movs	r3, #224	; 0xe0
 80022f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022fa:	2302      	movs	r3, #2
 80022fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002302:	2303      	movs	r3, #3
 8002304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002306:	2305      	movs	r3, #5
 8002308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800230a:	f107 0314 	add.w	r3, r7, #20
 800230e:	4619      	mov	r1, r3
 8002310:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002314:	f000 feae 	bl	8003074 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002318:	4b2c      	ldr	r3, [pc, #176]	; (80023cc <HAL_SPI_MspInit+0x128>)
 800231a:	4a2d      	ldr	r2, [pc, #180]	; (80023d0 <HAL_SPI_MspInit+0x12c>)
 800231c:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 800231e:	4b2b      	ldr	r3, [pc, #172]	; (80023cc <HAL_SPI_MspInit+0x128>)
 8002320:	2201      	movs	r2, #1
 8002322:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002324:	4b29      	ldr	r3, [pc, #164]	; (80023cc <HAL_SPI_MspInit+0x128>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800232a:	4b28      	ldr	r3, [pc, #160]	; (80023cc <HAL_SPI_MspInit+0x128>)
 800232c:	2200      	movs	r2, #0
 800232e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <HAL_SPI_MspInit+0x128>)
 8002332:	2280      	movs	r2, #128	; 0x80
 8002334:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_SPI_MspInit+0x128>)
 8002338:	2200      	movs	r2, #0
 800233a:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800233c:	4b23      	ldr	r3, [pc, #140]	; (80023cc <HAL_SPI_MspInit+0x128>)
 800233e:	2200      	movs	r2, #0
 8002340:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_SPI_MspInit+0x128>)
 8002344:	2200      	movs	r2, #0
 8002346:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002348:	4b20      	ldr	r3, [pc, #128]	; (80023cc <HAL_SPI_MspInit+0x128>)
 800234a:	2200      	movs	r2, #0
 800234c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800234e:	481f      	ldr	r0, [pc, #124]	; (80023cc <HAL_SPI_MspInit+0x128>)
 8002350:	f000 fc0c 	bl	8002b6c <HAL_DMA_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800235a:	f7ff f8dd 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a1a      	ldr	r2, [pc, #104]	; (80023cc <HAL_SPI_MspInit+0x128>)
 8002362:	659a      	str	r2, [r3, #88]	; 0x58
 8002364:	4a19      	ldr	r2, [pc, #100]	; (80023cc <HAL_SPI_MspInit+0x128>)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 800236c:	4a1a      	ldr	r2, [pc, #104]	; (80023d8 <HAL_SPI_MspInit+0x134>)
 800236e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8002370:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 8002372:	2201      	movs	r2, #1
 8002374:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002376:	4b17      	ldr	r3, [pc, #92]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 8002378:	2210      	movs	r2, #16
 800237a:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800237c:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 800237e:	2200      	movs	r2, #0
 8002380:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002382:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 8002384:	2280      	movs	r2, #128	; 0x80
 8002386:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002388:	4b12      	ldr	r3, [pc, #72]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 800238a:	2200      	movs	r2, #0
 800238c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800238e:	4b11      	ldr	r3, [pc, #68]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 8002390:	2200      	movs	r2, #0
 8002392:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8002394:	4b0f      	ldr	r3, [pc, #60]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 8002396:	2200      	movs	r2, #0
 8002398:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800239a:	4b0e      	ldr	r3, [pc, #56]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 800239c:	2200      	movs	r2, #0
 800239e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80023a0:	480c      	ldr	r0, [pc, #48]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 80023a2:	f000 fbe3 	bl	8002b6c <HAL_DMA_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80023ac:	f7ff f8b4 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a08      	ldr	r2, [pc, #32]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 80023b4:	655a      	str	r2, [r3, #84]	; 0x54
 80023b6:	4a07      	ldr	r2, [pc, #28]	; (80023d4 <HAL_SPI_MspInit+0x130>)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80023bc:	bf00      	nop
 80023be:	3728      	adds	r7, #40	; 0x28
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40013000 	.word	0x40013000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	200002f8 	.word	0x200002f8
 80023d0:	4002001c 	.word	0x4002001c
 80023d4:	20000340 	.word	0x20000340
 80023d8:	40020030 	.word	0x40020030

080023dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023ec:	d113      	bne.n	8002416 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_TIM_Base_MspInit+0x44>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f2:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <HAL_TIM_Base_MspInit+0x44>)
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	6593      	str	r3, [r2, #88]	; 0x58
 80023fa:	4b09      	ldr	r3, [pc, #36]	; (8002420 <HAL_TIM_Base_MspInit+0x44>)
 80023fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002406:	2200      	movs	r2, #0
 8002408:	2100      	movs	r1, #0
 800240a:	201c      	movs	r0, #28
 800240c:	f000 fb77 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002410:	201c      	movs	r0, #28
 8002412:	f000 fb90 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002416:	bf00      	nop
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000

08002424 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b0ac      	sub	sp, #176	; 0xb0
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800242c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002430:	2200      	movs	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	605a      	str	r2, [r3, #4]
 8002436:	609a      	str	r2, [r3, #8]
 8002438:	60da      	str	r2, [r3, #12]
 800243a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800243c:	f107 0314 	add.w	r3, r7, #20
 8002440:	2288      	movs	r2, #136	; 0x88
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f006 fb77 	bl	8008b38 <memset>
  if(huart->Instance==USART2)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a3a      	ldr	r2, [pc, #232]	; (8002538 <HAL_UART_MspInit+0x114>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d16c      	bne.n	800252e <HAL_UART_MspInit+0x10a>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002454:	2302      	movs	r3, #2
 8002456:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002458:	2300      	movs	r3, #0
 800245a:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4618      	mov	r0, r3
 8002462:	f002 fceb 	bl	8004e3c <HAL_RCCEx_PeriphCLKConfig>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800246c:	f7ff f854 	bl	8001518 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002470:	4b32      	ldr	r3, [pc, #200]	; (800253c <HAL_UART_MspInit+0x118>)
 8002472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002474:	4a31      	ldr	r2, [pc, #196]	; (800253c <HAL_UART_MspInit+0x118>)
 8002476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800247a:	6593      	str	r3, [r2, #88]	; 0x58
 800247c:	4b2f      	ldr	r3, [pc, #188]	; (800253c <HAL_UART_MspInit+0x118>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <HAL_UART_MspInit+0x118>)
 800248a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248c:	4a2b      	ldr	r2, [pc, #172]	; (800253c <HAL_UART_MspInit+0x118>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002494:	4b29      	ldr	r3, [pc, #164]	; (800253c <HAL_UART_MspInit+0x118>)
 8002496:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024a0:	230c      	movs	r3, #12
 80024a2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a6:	2302      	movs	r3, #2
 80024a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b2:	2303      	movs	r3, #3
 80024b4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024b8:	2307      	movs	r3, #7
 80024ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024be:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024c2:	4619      	mov	r1, r3
 80024c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024c8:	f000 fdd4 	bl	8003074 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80024cc:	4b1c      	ldr	r3, [pc, #112]	; (8002540 <HAL_UART_MspInit+0x11c>)
 80024ce:	4a1d      	ldr	r2, [pc, #116]	; (8002544 <HAL_UART_MspInit+0x120>)
 80024d0:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80024d2:	4b1b      	ldr	r3, [pc, #108]	; (8002540 <HAL_UART_MspInit+0x11c>)
 80024d4:	2202      	movs	r2, #2
 80024d6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80024d8:	4b19      	ldr	r3, [pc, #100]	; (8002540 <HAL_UART_MspInit+0x11c>)
 80024da:	2210      	movs	r2, #16
 80024dc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024de:	4b18      	ldr	r3, [pc, #96]	; (8002540 <HAL_UART_MspInit+0x11c>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024e4:	4b16      	ldr	r3, [pc, #88]	; (8002540 <HAL_UART_MspInit+0x11c>)
 80024e6:	2280      	movs	r2, #128	; 0x80
 80024e8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ea:	4b15      	ldr	r3, [pc, #84]	; (8002540 <HAL_UART_MspInit+0x11c>)
 80024ec:	2200      	movs	r2, #0
 80024ee:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024f0:	4b13      	ldr	r3, [pc, #76]	; (8002540 <HAL_UART_MspInit+0x11c>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80024f6:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_UART_MspInit+0x11c>)
 80024f8:	2200      	movs	r2, #0
 80024fa:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024fc:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_UART_MspInit+0x11c>)
 80024fe:	2200      	movs	r2, #0
 8002500:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002502:	480f      	ldr	r0, [pc, #60]	; (8002540 <HAL_UART_MspInit+0x11c>)
 8002504:	f000 fb32 	bl	8002b6c <HAL_DMA_Init>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 800250e:	f7ff f803 	bl	8001518 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <HAL_UART_MspInit+0x11c>)
 8002516:	66da      	str	r2, [r3, #108]	; 0x6c
 8002518:	4a09      	ldr	r2, [pc, #36]	; (8002540 <HAL_UART_MspInit+0x11c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800251e:	2200      	movs	r2, #0
 8002520:	2100      	movs	r1, #0
 8002522:	2026      	movs	r0, #38	; 0x26
 8002524:	f000 faeb 	bl	8002afe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002528:	2026      	movs	r0, #38	; 0x26
 800252a:	f000 fb04 	bl	8002b36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	37b0      	adds	r7, #176	; 0xb0
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40004400 	.word	0x40004400
 800253c:	40021000 	.word	0x40021000
 8002540:	20000458 	.word	0x20000458
 8002544:	40020080 	.word	0x40020080

08002548 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800254c:	e7fe      	b.n	800254c <NMI_Handler+0x4>

0800254e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254e:	b480      	push	{r7}
 8002550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002552:	e7fe      	b.n	8002552 <HardFault_Handler+0x4>

08002554 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002558:	e7fe      	b.n	8002558 <MemManage_Handler+0x4>

0800255a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255e:	e7fe      	b.n	800255e <BusFault_Handler+0x4>

08002560 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002564:	e7fe      	b.n	8002564 <UsageFault_Handler+0x4>

08002566 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002566:	b480      	push	{r7}
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800256a:	bf00      	nop
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002578:	bf00      	nop
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002582:	b480      	push	{r7}
 8002584:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002586:	bf00      	nop
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002594:	f000 f994 	bl	80028c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}

0800259c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80025a0:	4802      	ldr	r0, [pc, #8]	; (80025ac <DMA1_Channel2_IRQHandler+0x10>)
 80025a2:	f000 fc7a 	bl	8002e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	200002f8 	.word	0x200002f8

080025b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80025b4:	4802      	ldr	r0, [pc, #8]	; (80025c0 <DMA1_Channel3_IRQHandler+0x10>)
 80025b6:	f000 fc70 	bl	8002e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000340 	.word	0x20000340

080025c4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80025c8:	4802      	ldr	r0, [pc, #8]	; (80025d4 <DMA1_Channel7_IRQHandler+0x10>)
 80025ca:	f000 fc66 	bl	8002e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80025ce:	bf00      	nop
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	20000458 	.word	0x20000458

080025d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025dc:	4802      	ldr	r0, [pc, #8]	; (80025e8 <TIM2_IRQHandler+0x10>)
 80025de:	f004 fcd9 	bl	8006f94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025e2:	bf00      	nop
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	20000388 	.word	0x20000388

080025ec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80025f0:	4802      	ldr	r0, [pc, #8]	; (80025fc <I2C1_EV_IRQHandler+0x10>)
 80025f2:	f000 ff90 	bl	8003516 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80025f6:	bf00      	nop
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	200001f8 	.word	0x200001f8

08002600 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002604:	4802      	ldr	r0, [pc, #8]	; (8002610 <I2C1_ER_IRQHandler+0x10>)
 8002606:	f000 ffa0 	bl	800354a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200001f8 	.word	0x200001f8

08002614 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002618:	4802      	ldr	r0, [pc, #8]	; (8002624 <USART2_IRQHandler+0x10>)
 800261a:	f005 f983 	bl	8007924 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800261e:	bf00      	nop
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	200003d4 	.word	0x200003d4

08002628 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800262c:	4802      	ldr	r0, [pc, #8]	; (8002638 <DMA2_Channel6_IRQHandler+0x10>)
 800262e:	f000 fc34 	bl	8002e9a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8002632:	bf00      	nop
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000024c 	.word	0x2000024c

0800263c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
	return 1;
 8002640:	2301      	movs	r3, #1
}
 8002642:	4618      	mov	r0, r3
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <_kill>:

int _kill(int pid, int sig)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002656:	f006 fa45 	bl	8008ae4 <__errno>
 800265a:	4603      	mov	r3, r0
 800265c:	2216      	movs	r2, #22
 800265e:	601a      	str	r2, [r3, #0]
	return -1;
 8002660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <_exit>:

void _exit (int status)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002674:	f04f 31ff 	mov.w	r1, #4294967295
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f7ff ffe7 	bl	800264c <_kill>
	while (1) {}		/* Make sure we hang here */
 800267e:	e7fe      	b.n	800267e <_exit+0x12>

08002680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	e00a      	b.n	80026a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002692:	f3af 8000 	nop.w
 8002696:	4601      	mov	r1, r0
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	1c5a      	adds	r2, r3, #1
 800269c:	60ba      	str	r2, [r7, #8]
 800269e:	b2ca      	uxtb	r2, r1
 80026a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	3301      	adds	r3, #1
 80026a6:	617b      	str	r3, [r7, #20]
 80026a8:	697a      	ldr	r2, [r7, #20]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	dbf0      	blt.n	8002692 <_read+0x12>
	}

return len;
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <_close>:
	}
	return len;
}

int _close(int file)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
	return -1;
 80026c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026c6:	4618      	mov	r0, r3
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr

080026d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
 80026da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026e2:	605a      	str	r2, [r3, #4]
	return 0;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <_isatty>:

int _isatty(int file)
{
 80026f2:	b480      	push	{r7}
 80026f4:	b083      	sub	sp, #12
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	6078      	str	r0, [r7, #4]
	return 1;
 80026fa:	2301      	movs	r3, #1
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
	return 0;
 8002714:	2300      	movs	r3, #0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3714      	adds	r7, #20
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
	...

08002724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800272c:	4a14      	ldr	r2, [pc, #80]	; (8002780 <_sbrk+0x5c>)
 800272e:	4b15      	ldr	r3, [pc, #84]	; (8002784 <_sbrk+0x60>)
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d102      	bne.n	8002746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <_sbrk+0x64>)
 8002742:	4a12      	ldr	r2, [pc, #72]	; (800278c <_sbrk+0x68>)
 8002744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002746:	4b10      	ldr	r3, [pc, #64]	; (8002788 <_sbrk+0x64>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4413      	add	r3, r2
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	429a      	cmp	r2, r3
 8002752:	d207      	bcs.n	8002764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002754:	f006 f9c6 	bl	8008ae4 <__errno>
 8002758:	4603      	mov	r3, r0
 800275a:	220c      	movs	r2, #12
 800275c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800275e:	f04f 33ff 	mov.w	r3, #4294967295
 8002762:	e009      	b.n	8002778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002764:	4b08      	ldr	r3, [pc, #32]	; (8002788 <_sbrk+0x64>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <_sbrk+0x64>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4413      	add	r3, r2
 8002772:	4a05      	ldr	r2, [pc, #20]	; (8002788 <_sbrk+0x64>)
 8002774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002776:	68fb      	ldr	r3, [r7, #12]
}
 8002778:	4618      	mov	r0, r3
 800277a:	3718      	adds	r7, #24
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20018000 	.word	0x20018000
 8002784:	00000400 	.word	0x00000400
 8002788:	200004e8 	.word	0x200004e8
 800278c:	20000500 	.word	0x20000500

08002790 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002794:	4b06      	ldr	r3, [pc, #24]	; (80027b0 <SystemInit+0x20>)
 8002796:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800279a:	4a05      	ldr	r2, [pc, #20]	; (80027b0 <SystemInit+0x20>)
 800279c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80027a4:	bf00      	nop
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027b8:	f7ff ffea 	bl	8002790 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027bc:	480c      	ldr	r0, [pc, #48]	; (80027f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80027be:	490d      	ldr	r1, [pc, #52]	; (80027f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027c0:	4a0d      	ldr	r2, [pc, #52]	; (80027f8 <LoopForever+0xe>)
  movs r3, #0
 80027c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c4:	e002      	b.n	80027cc <LoopCopyDataInit>

080027c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ca:	3304      	adds	r3, #4

080027cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d0:	d3f9      	bcc.n	80027c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d2:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80027d4:	4c0a      	ldr	r4, [pc, #40]	; (8002800 <LoopForever+0x16>)
  movs r3, #0
 80027d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027d8:	e001      	b.n	80027de <LoopFillZerobss>

080027da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027dc:	3204      	adds	r2, #4

080027de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e0:	d3fb      	bcc.n	80027da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e2:	f006 f985 	bl	8008af0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027e6:	f7fe fbd9 	bl	8000f9c <main>

080027ea <LoopForever>:

LoopForever:
    b LoopForever
 80027ea:	e7fe      	b.n	80027ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f4:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80027f8:	0800d4e8 	.word	0x0800d4e8
  ldr r2, =_sbss
 80027fc:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002800:	20000500 	.word	0x20000500

08002804 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002804:	e7fe      	b.n	8002804 <ADC1_2_IRQHandler>
	...

08002808 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b082      	sub	sp, #8
 800280c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800280e:	2300      	movs	r3, #0
 8002810:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002812:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <HAL_Init+0x3c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <HAL_Init+0x3c>)
 8002818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800281e:	2003      	movs	r0, #3
 8002820:	f000 f962 	bl	8002ae8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002824:	2000      	movs	r0, #0
 8002826:	f000 f80f 	bl	8002848 <HAL_InitTick>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d002      	beq.n	8002836 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	71fb      	strb	r3, [r7, #7]
 8002834:	e001      	b.n	800283a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002836:	f7ff fc75 	bl	8002124 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800283a:	79fb      	ldrb	r3, [r7, #7]
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	40022000 	.word	0x40022000

08002848 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002850:	2300      	movs	r3, #0
 8002852:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002854:	4b17      	ldr	r3, [pc, #92]	; (80028b4 <HAL_InitTick+0x6c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d023      	beq.n	80028a4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800285c:	4b16      	ldr	r3, [pc, #88]	; (80028b8 <HAL_InitTick+0x70>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b14      	ldr	r3, [pc, #80]	; (80028b4 <HAL_InitTick+0x6c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	4619      	mov	r1, r3
 8002866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286a:	fbb3 f3f1 	udiv	r3, r3, r1
 800286e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002872:	4618      	mov	r0, r3
 8002874:	f000 f96d 	bl	8002b52 <HAL_SYSTICK_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d10f      	bne.n	800289e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b0f      	cmp	r3, #15
 8002882:	d809      	bhi.n	8002898 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002884:	2200      	movs	r2, #0
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	f04f 30ff 	mov.w	r0, #4294967295
 800288c:	f000 f937 	bl	8002afe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002890:	4a0a      	ldr	r2, [pc, #40]	; (80028bc <HAL_InitTick+0x74>)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6013      	str	r3, [r2, #0]
 8002896:	e007      	b.n	80028a8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
 800289c:	e004      	b.n	80028a8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	73fb      	strb	r3, [r7, #15]
 80028a2:	e001      	b.n	80028a8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}
 80028b2:	bf00      	nop
 80028b4:	20000008 	.word	0x20000008
 80028b8:	20000000 	.word	0x20000000
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028c4:	4b06      	ldr	r3, [pc, #24]	; (80028e0 <HAL_IncTick+0x20>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	461a      	mov	r2, r3
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x24>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4413      	add	r3, r2
 80028d0:	4a04      	ldr	r2, [pc, #16]	; (80028e4 <HAL_IncTick+0x24>)
 80028d2:	6013      	str	r3, [r2, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop
 80028e0:	20000008 	.word	0x20000008
 80028e4:	200004ec 	.word	0x200004ec

080028e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  return uwTick;
 80028ec:	4b03      	ldr	r3, [pc, #12]	; (80028fc <HAL_GetTick+0x14>)
 80028ee:	681b      	ldr	r3, [r3, #0]
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	200004ec 	.word	0x200004ec

08002900 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002908:	f7ff ffee 	bl	80028e8 <HAL_GetTick>
 800290c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002918:	d005      	beq.n	8002926 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800291a:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <HAL_Delay+0x44>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4413      	add	r3, r2
 8002924:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002926:	bf00      	nop
 8002928:	f7ff ffde 	bl	80028e8 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d8f7      	bhi.n	8002928 <HAL_Delay+0x28>
  {
  }
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000008 	.word	0x20000008

08002948 <__NVIC_SetPriorityGrouping>:
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002958:	4b0c      	ldr	r3, [pc, #48]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002964:	4013      	ands	r3, r2
 8002966:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002970:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002974:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002978:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297a:	4a04      	ldr	r2, [pc, #16]	; (800298c <__NVIC_SetPriorityGrouping+0x44>)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	60d3      	str	r3, [r2, #12]
}
 8002980:	bf00      	nop
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <__NVIC_GetPriorityGrouping>:
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002994:	4b04      	ldr	r3, [pc, #16]	; (80029a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	0a1b      	lsrs	r3, r3, #8
 800299a:	f003 0307 	and.w	r3, r3, #7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	e000ed00 	.word	0xe000ed00

080029ac <__NVIC_EnableIRQ>:
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4603      	mov	r3, r0
 80029b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	db0b      	blt.n	80029d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029be:	79fb      	ldrb	r3, [r7, #7]
 80029c0:	f003 021f 	and.w	r2, r3, #31
 80029c4:	4907      	ldr	r1, [pc, #28]	; (80029e4 <__NVIC_EnableIRQ+0x38>)
 80029c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ca:	095b      	lsrs	r3, r3, #5
 80029cc:	2001      	movs	r0, #1
 80029ce:	fa00 f202 	lsl.w	r2, r0, r2
 80029d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	e000e100 	.word	0xe000e100

080029e8 <__NVIC_SetPriority>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b083      	sub	sp, #12
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	4603      	mov	r3, r0
 80029f0:	6039      	str	r1, [r7, #0]
 80029f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	db0a      	blt.n	8002a12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	b2da      	uxtb	r2, r3
 8002a00:	490c      	ldr	r1, [pc, #48]	; (8002a34 <__NVIC_SetPriority+0x4c>)
 8002a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a06:	0112      	lsls	r2, r2, #4
 8002a08:	b2d2      	uxtb	r2, r2
 8002a0a:	440b      	add	r3, r1
 8002a0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a10:	e00a      	b.n	8002a28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <__NVIC_SetPriority+0x50>)
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	f003 030f 	and.w	r3, r3, #15
 8002a1e:	3b04      	subs	r3, #4
 8002a20:	0112      	lsls	r2, r2, #4
 8002a22:	b2d2      	uxtb	r2, r2
 8002a24:	440b      	add	r3, r1
 8002a26:	761a      	strb	r2, [r3, #24]
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a32:	4770      	bx	lr
 8002a34:	e000e100 	.word	0xe000e100
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <NVIC_EncodePriority>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b089      	sub	sp, #36	; 0x24
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	60f8      	str	r0, [r7, #12]
 8002a44:	60b9      	str	r1, [r7, #8]
 8002a46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a50:	69fb      	ldr	r3, [r7, #28]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	bf28      	it	cs
 8002a5a:	2304      	movcs	r3, #4
 8002a5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3304      	adds	r3, #4
 8002a62:	2b06      	cmp	r3, #6
 8002a64:	d902      	bls.n	8002a6c <NVIC_EncodePriority+0x30>
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	3b03      	subs	r3, #3
 8002a6a:	e000      	b.n	8002a6e <NVIC_EncodePriority+0x32>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a70:	f04f 32ff 	mov.w	r2, #4294967295
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43da      	mvns	r2, r3
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	401a      	ands	r2, r3
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a84:	f04f 31ff 	mov.w	r1, #4294967295
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43d9      	mvns	r1, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	4313      	orrs	r3, r2
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3724      	adds	r7, #36	; 0x24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <SysTick_Config>:
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b082      	sub	sp, #8
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab4:	d301      	bcc.n	8002aba <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e00f      	b.n	8002ada <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aba:	4a0a      	ldr	r2, [pc, #40]	; (8002ae4 <SysTick_Config+0x40>)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac2:	210f      	movs	r1, #15
 8002ac4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac8:	f7ff ff8e 	bl	80029e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002acc:	4b05      	ldr	r3, [pc, #20]	; (8002ae4 <SysTick_Config+0x40>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad2:	4b04      	ldr	r3, [pc, #16]	; (8002ae4 <SysTick_Config+0x40>)
 8002ad4:	2207      	movs	r2, #7
 8002ad6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
 8002ae2:	bf00      	nop
 8002ae4:	e000e010 	.word	0xe000e010

08002ae8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ff29 	bl	8002948 <__NVIC_SetPriorityGrouping>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	4603      	mov	r3, r0
 8002b06:	60b9      	str	r1, [r7, #8]
 8002b08:	607a      	str	r2, [r7, #4]
 8002b0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b10:	f7ff ff3e 	bl	8002990 <__NVIC_GetPriorityGrouping>
 8002b14:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b16:	687a      	ldr	r2, [r7, #4]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	6978      	ldr	r0, [r7, #20]
 8002b1c:	f7ff ff8e 	bl	8002a3c <NVIC_EncodePriority>
 8002b20:	4602      	mov	r2, r0
 8002b22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b26:	4611      	mov	r1, r2
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff ff5d 	bl	80029e8 <__NVIC_SetPriority>
}
 8002b2e:	bf00      	nop
 8002b30:	3718      	adds	r7, #24
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}

08002b36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b36:	b580      	push	{r7, lr}
 8002b38:	b082      	sub	sp, #8
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff ff31 	bl	80029ac <__NVIC_EnableIRQ>
}
 8002b4a:	bf00      	nop
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7ff ffa2 	bl	8002aa4 <SysTick_Config>
 8002b60:	4603      	mov	r3, r0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3708      	adds	r7, #8
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b085      	sub	sp, #20
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e098      	b.n	8002cb0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	461a      	mov	r2, r3
 8002b84:	4b4d      	ldr	r3, [pc, #308]	; (8002cbc <HAL_DMA_Init+0x150>)
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d80f      	bhi.n	8002baa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4b4b      	ldr	r3, [pc, #300]	; (8002cc0 <HAL_DMA_Init+0x154>)
 8002b92:	4413      	add	r3, r2
 8002b94:	4a4b      	ldr	r2, [pc, #300]	; (8002cc4 <HAL_DMA_Init+0x158>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	091b      	lsrs	r3, r3, #4
 8002b9c:	009a      	lsls	r2, r3, #2
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a48      	ldr	r2, [pc, #288]	; (8002cc8 <HAL_DMA_Init+0x15c>)
 8002ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ba8:	e00e      	b.n	8002bc8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	4b46      	ldr	r3, [pc, #280]	; (8002ccc <HAL_DMA_Init+0x160>)
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4a43      	ldr	r2, [pc, #268]	; (8002cc4 <HAL_DMA_Init+0x158>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	091b      	lsrs	r3, r3, #4
 8002bbc:	009a      	lsls	r2, r3, #2
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a42      	ldr	r2, [pc, #264]	; (8002cd0 <HAL_DMA_Init+0x164>)
 8002bc6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2202      	movs	r2, #2
 8002bcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002be2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002bec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	691b      	ldr	r3, [r3, #16]
 8002bf2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002bf8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a1b      	ldr	r3, [r3, #32]
 8002c0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c22:	d039      	beq.n	8002c98 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	4a27      	ldr	r2, [pc, #156]	; (8002cc8 <HAL_DMA_Init+0x15c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d11a      	bne.n	8002c64 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c2e:	4b29      	ldr	r3, [pc, #164]	; (8002cd4 <HAL_DMA_Init+0x168>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f003 031c 	and.w	r3, r3, #28
 8002c3a:	210f      	movs	r1, #15
 8002c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c40:	43db      	mvns	r3, r3
 8002c42:	4924      	ldr	r1, [pc, #144]	; (8002cd4 <HAL_DMA_Init+0x168>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c48:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_DMA_Init+0x168>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6859      	ldr	r1, [r3, #4]
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f003 031c 	and.w	r3, r3, #28
 8002c58:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5c:	491d      	ldr	r1, [pc, #116]	; (8002cd4 <HAL_DMA_Init+0x168>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
 8002c62:	e019      	b.n	8002c98 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002c64:	4b1c      	ldr	r3, [pc, #112]	; (8002cd8 <HAL_DMA_Init+0x16c>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6c:	f003 031c 	and.w	r3, r3, #28
 8002c70:	210f      	movs	r1, #15
 8002c72:	fa01 f303 	lsl.w	r3, r1, r3
 8002c76:	43db      	mvns	r3, r3
 8002c78:	4917      	ldr	r1, [pc, #92]	; (8002cd8 <HAL_DMA_Init+0x16c>)
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002c7e:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <HAL_DMA_Init+0x16c>)
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6859      	ldr	r1, [r3, #4]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8a:	f003 031c 	and.w	r3, r3, #28
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	4911      	ldr	r1, [pc, #68]	; (8002cd8 <HAL_DMA_Init+0x16c>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	40020407 	.word	0x40020407
 8002cc0:	bffdfff8 	.word	0xbffdfff8
 8002cc4:	cccccccd 	.word	0xcccccccd
 8002cc8:	40020000 	.word	0x40020000
 8002ccc:	bffdfbf8 	.word	0xbffdfbf8
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	400200a8 	.word	0x400200a8
 8002cd8:	400204a8 	.word	0x400204a8

08002cdc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	60b9      	str	r1, [r7, #8]
 8002ce6:	607a      	str	r2, [r7, #4]
 8002ce8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_DMA_Start_IT+0x20>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e04b      	b.n	8002d94 <HAL_DMA_Start_IT+0xb8>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d13a      	bne.n	8002d86 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f022 0201 	bic.w	r2, r2, #1
 8002d2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	687a      	ldr	r2, [r7, #4]
 8002d32:	68b9      	ldr	r1, [r7, #8]
 8002d34:	68f8      	ldr	r0, [r7, #12]
 8002d36:	f000 f96d 	bl	8003014 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d008      	beq.n	8002d54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f042 020e 	orr.w	r2, r2, #14
 8002d50:	601a      	str	r2, [r3, #0]
 8002d52:	e00f      	b.n	8002d74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0204 	bic.w	r2, r2, #4
 8002d62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 020a 	orr.w	r2, r2, #10
 8002d72:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e005      	b.n	8002d92 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002d8e:	2302      	movs	r3, #2
 8002d90:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002da4:	2300      	movs	r3, #0
 8002da6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d008      	beq.n	8002dc6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2204      	movs	r2, #4
 8002db8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e022      	b.n	8002e0c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 020e 	bic.w	r2, r2, #14
 8002dd4:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f022 0201 	bic.w	r2, r2, #1
 8002de4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f003 021c 	and.w	r2, r3, #28
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df2:	2101      	movs	r1, #1
 8002df4:	fa01 f202 	lsl.w	r2, r1, r2
 8002df8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8002e0a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	3714      	adds	r7, #20
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d005      	beq.n	8002e3c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
 8002e3a:	e029      	b.n	8002e90 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 020e 	bic.w	r2, r2, #14
 8002e4a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0201 	bic.w	r2, r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e60:	f003 021c 	and.w	r2, r3, #28
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	2101      	movs	r1, #1
 8002e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002e6e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4798      	blx	r3
    }
  }
  return status;
 8002e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3710      	adds	r7, #16
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b084      	sub	sp, #16
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	f003 031c 	and.w	r3, r3, #28
 8002eba:	2204      	movs	r2, #4
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d026      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x7a>
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d021      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f022 0204 	bic.w	r2, r2, #4
 8002eec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f003 021c 	and.w	r2, r3, #28
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efa:	2104      	movs	r1, #4
 8002efc:	fa01 f202 	lsl.w	r2, r1, r2
 8002f00:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d071      	beq.n	8002fee <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8002f12:	e06c      	b.n	8002fee <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	f003 031c 	and.w	r3, r3, #28
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	409a      	lsls	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	4013      	ands	r3, r2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d02e      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xec>
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	f003 0302 	and.w	r3, r3, #2
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d029      	beq.n	8002f86 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0320 	and.w	r3, r3, #32
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d10b      	bne.n	8002f58 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 020a 	bic.w	r2, r2, #10
 8002f4e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5c:	f003 021c 	and.w	r2, r3, #28
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	2102      	movs	r1, #2
 8002f66:	fa01 f202 	lsl.w	r2, r1, r2
 8002f6a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d038      	beq.n	8002fee <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f84:	e033      	b.n	8002fee <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f003 031c 	and.w	r3, r3, #28
 8002f8e:	2208      	movs	r2, #8
 8002f90:	409a      	lsls	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	4013      	ands	r3, r2
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d02a      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x156>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f003 0308 	and.w	r3, r3, #8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d025      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 020e 	bic.w	r2, r2, #14
 8002fb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb8:	f003 021c 	and.w	r2, r3, #28
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	fa01 f202 	lsl.w	r2, r1, r2
 8002fc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fee:	bf00      	nop
 8002ff0:	bf00      	nop
}
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003006:	b2db      	uxtb	r3, r3
}
 8003008:	4618      	mov	r0, r3
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003026:	f003 021c 	and.w	r2, r3, #28
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	2101      	movs	r1, #1
 8003030:	fa01 f202 	lsl.w	r2, r1, r2
 8003034:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	683a      	ldr	r2, [r7, #0]
 800303c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	2b10      	cmp	r3, #16
 8003044:	d108      	bne.n	8003058 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003056:	e007      	b.n	8003068 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	60da      	str	r2, [r3, #12]
}
 8003068:	bf00      	nop
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003074:	b480      	push	{r7}
 8003076:	b087      	sub	sp, #28
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003082:	e17f      	b.n	8003384 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2101      	movs	r1, #1
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	fa01 f303 	lsl.w	r3, r1, r3
 8003090:	4013      	ands	r3, r2
 8003092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b00      	cmp	r3, #0
 8003098:	f000 8171 	beq.w	800337e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f003 0303 	and.w	r3, r3, #3
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d005      	beq.n	80030b4 <HAL_GPIO_Init+0x40>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d130      	bne.n	8003116 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	2203      	movs	r2, #3
 80030c0:	fa02 f303 	lsl.w	r3, r2, r3
 80030c4:	43db      	mvns	r3, r3
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	4013      	ands	r3, r2
 80030ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	693a      	ldr	r2, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	693a      	ldr	r2, [r7, #16]
 80030e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80030ea:	2201      	movs	r2, #1
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	43db      	mvns	r3, r3
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	4013      	ands	r3, r2
 80030f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	091b      	lsrs	r3, r3, #4
 8003100:	f003 0201 	and.w	r2, r3, #1
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	693a      	ldr	r2, [r7, #16]
 800310c:	4313      	orrs	r3, r2
 800310e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	2b03      	cmp	r3, #3
 8003120:	d118      	bne.n	8003154 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003128:	2201      	movs	r2, #1
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	693a      	ldr	r2, [r7, #16]
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	08db      	lsrs	r3, r3, #3
 800313e:	f003 0201 	and.w	r2, r3, #1
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4313      	orrs	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b03      	cmp	r3, #3
 800315e:	d017      	beq.n	8003190 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	68db      	ldr	r3, [r3, #12]
 8003164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	2203      	movs	r2, #3
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	4013      	ands	r3, r2
 8003176:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	693a      	ldr	r2, [r7, #16]
 8003186:	4313      	orrs	r3, r2
 8003188:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	2b02      	cmp	r3, #2
 800319a:	d123      	bne.n	80031e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	08da      	lsrs	r2, r3, #3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	3208      	adds	r2, #8
 80031a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	220f      	movs	r2, #15
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	693a      	ldr	r2, [r7, #16]
 80031bc:	4013      	ands	r3, r2
 80031be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	691a      	ldr	r2, [r3, #16]
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	fa02 f303 	lsl.w	r3, r2, r3
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	08da      	lsrs	r2, r3, #3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3208      	adds	r2, #8
 80031de:	6939      	ldr	r1, [r7, #16]
 80031e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4013      	ands	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 0203 	and.w	r2, r3, #3
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	693a      	ldr	r2, [r7, #16]
 800320e:	4313      	orrs	r3, r2
 8003210:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	693a      	ldr	r2, [r7, #16]
 8003216:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003220:	2b00      	cmp	r3, #0
 8003222:	f000 80ac 	beq.w	800337e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003226:	4b5f      	ldr	r3, [pc, #380]	; (80033a4 <HAL_GPIO_Init+0x330>)
 8003228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800322a:	4a5e      	ldr	r2, [pc, #376]	; (80033a4 <HAL_GPIO_Init+0x330>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6613      	str	r3, [r2, #96]	; 0x60
 8003232:	4b5c      	ldr	r3, [pc, #368]	; (80033a4 <HAL_GPIO_Init+0x330>)
 8003234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800323e:	4a5a      	ldr	r2, [pc, #360]	; (80033a8 <HAL_GPIO_Init+0x334>)
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	089b      	lsrs	r3, r3, #2
 8003244:	3302      	adds	r3, #2
 8003246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	f003 0303 	and.w	r3, r3, #3
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	220f      	movs	r2, #15
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	43db      	mvns	r3, r3
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	4013      	ands	r3, r2
 8003260:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003268:	d025      	beq.n	80032b6 <HAL_GPIO_Init+0x242>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a4f      	ldr	r2, [pc, #316]	; (80033ac <HAL_GPIO_Init+0x338>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01f      	beq.n	80032b2 <HAL_GPIO_Init+0x23e>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a4e      	ldr	r2, [pc, #312]	; (80033b0 <HAL_GPIO_Init+0x33c>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d019      	beq.n	80032ae <HAL_GPIO_Init+0x23a>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a4d      	ldr	r2, [pc, #308]	; (80033b4 <HAL_GPIO_Init+0x340>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <HAL_GPIO_Init+0x236>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a4c      	ldr	r2, [pc, #304]	; (80033b8 <HAL_GPIO_Init+0x344>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00d      	beq.n	80032a6 <HAL_GPIO_Init+0x232>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a4b      	ldr	r2, [pc, #300]	; (80033bc <HAL_GPIO_Init+0x348>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d007      	beq.n	80032a2 <HAL_GPIO_Init+0x22e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a4a      	ldr	r2, [pc, #296]	; (80033c0 <HAL_GPIO_Init+0x34c>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d101      	bne.n	800329e <HAL_GPIO_Init+0x22a>
 800329a:	2306      	movs	r3, #6
 800329c:	e00c      	b.n	80032b8 <HAL_GPIO_Init+0x244>
 800329e:	2307      	movs	r3, #7
 80032a0:	e00a      	b.n	80032b8 <HAL_GPIO_Init+0x244>
 80032a2:	2305      	movs	r3, #5
 80032a4:	e008      	b.n	80032b8 <HAL_GPIO_Init+0x244>
 80032a6:	2304      	movs	r3, #4
 80032a8:	e006      	b.n	80032b8 <HAL_GPIO_Init+0x244>
 80032aa:	2303      	movs	r3, #3
 80032ac:	e004      	b.n	80032b8 <HAL_GPIO_Init+0x244>
 80032ae:	2302      	movs	r3, #2
 80032b0:	e002      	b.n	80032b8 <HAL_GPIO_Init+0x244>
 80032b2:	2301      	movs	r3, #1
 80032b4:	e000      	b.n	80032b8 <HAL_GPIO_Init+0x244>
 80032b6:	2300      	movs	r3, #0
 80032b8:	697a      	ldr	r2, [r7, #20]
 80032ba:	f002 0203 	and.w	r2, r2, #3
 80032be:	0092      	lsls	r2, r2, #2
 80032c0:	4093      	lsls	r3, r2
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032c8:	4937      	ldr	r1, [pc, #220]	; (80033a8 <HAL_GPIO_Init+0x334>)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	089b      	lsrs	r3, r3, #2
 80032ce:	3302      	adds	r3, #2
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80032d6:	4b3b      	ldr	r3, [pc, #236]	; (80033c4 <HAL_GPIO_Init+0x350>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43db      	mvns	r3, r3
 80032e0:	693a      	ldr	r2, [r7, #16]
 80032e2:	4013      	ands	r3, r2
 80032e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032fa:	4a32      	ldr	r2, [pc, #200]	; (80033c4 <HAL_GPIO_Init+0x350>)
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003300:	4b30      	ldr	r3, [pc, #192]	; (80033c4 <HAL_GPIO_Init+0x350>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43db      	mvns	r3, r3
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003324:	4a27      	ldr	r2, [pc, #156]	; (80033c4 <HAL_GPIO_Init+0x350>)
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800332a:	4b26      	ldr	r3, [pc, #152]	; (80033c4 <HAL_GPIO_Init+0x350>)
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	43db      	mvns	r3, r3
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	4013      	ands	r3, r2
 8003338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003346:	693a      	ldr	r2, [r7, #16]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	4313      	orrs	r3, r2
 800334c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <HAL_GPIO_Init+0x350>)
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003354:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <HAL_GPIO_Init+0x350>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	43db      	mvns	r3, r3
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	4013      	ands	r3, r2
 8003362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	4313      	orrs	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003378:	4a12      	ldr	r2, [pc, #72]	; (80033c4 <HAL_GPIO_Init+0x350>)
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	3301      	adds	r3, #1
 8003382:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	fa22 f303 	lsr.w	r3, r2, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	f47f ae78 	bne.w	8003084 <HAL_GPIO_Init+0x10>
  }
}
 8003394:	bf00      	nop
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40010000 	.word	0x40010000
 80033ac:	48000400 	.word	0x48000400
 80033b0:	48000800 	.word	0x48000800
 80033b4:	48000c00 	.word	0x48000c00
 80033b8:	48001000 	.word	0x48001000
 80033bc:	48001400 	.word	0x48001400
 80033c0:	48001800 	.word	0x48001800
 80033c4:	40010400 	.word	0x40010400

080033c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b083      	sub	sp, #12
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	807b      	strh	r3, [r7, #2]
 80033d4:	4613      	mov	r3, r2
 80033d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033d8:	787b      	ldrb	r3, [r7, #1]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d003      	beq.n	80033e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033de:	887a      	ldrh	r2, [r7, #2]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033e4:	e002      	b.n	80033ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033e6:	887a      	ldrh	r2, [r7, #2]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e081      	b.n	800350e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003410:	b2db      	uxtb	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d106      	bne.n	8003424 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f7fe fea4 	bl	800216c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2224      	movs	r2, #36	; 0x24
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f022 0201 	bic.w	r2, r2, #1
 800343a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003448:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003458:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d107      	bne.n	8003472 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689a      	ldr	r2, [r3, #8]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800346e:	609a      	str	r2, [r3, #8]
 8003470:	e006      	b.n	8003480 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800347e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68db      	ldr	r3, [r3, #12]
 8003484:	2b02      	cmp	r3, #2
 8003486:	d104      	bne.n	8003492 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003490:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034a4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034b4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691a      	ldr	r2, [r3, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	430a      	orrs	r2, r1
 80034ce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	69d9      	ldr	r1, [r3, #28]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a1a      	ldr	r2, [r3, #32]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0201 	orr.w	r2, r2, #1
 80034ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2220      	movs	r2, #32
 80034fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003532:	2b00      	cmp	r3, #0
 8003534:	d005      	beq.n	8003542 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	68f9      	ldr	r1, [r7, #12]
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	4798      	blx	r3
  }
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b086      	sub	sp, #24
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699b      	ldr	r3, [r3, #24]
 8003558:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	0a1b      	lsrs	r3, r3, #8
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d010      	beq.n	8003590 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	09db      	lsrs	r3, r3, #7
 8003572:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800357e:	f043 0201 	orr.w	r2, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800358e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	0a9b      	lsrs	r3, r3, #10
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d010      	beq.n	80035be <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	09db      	lsrs	r3, r3, #7
 80035a0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00a      	beq.n	80035be <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	f043 0208 	orr.w	r2, r3, #8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035bc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	0a5b      	lsrs	r3, r3, #9
 80035c2:	f003 0301 	and.w	r3, r3, #1
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	09db      	lsrs	r3, r3, #7
 80035ce:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035da:	f043 0202 	orr.w	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ea:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f003 030b 	and.w	r3, r3, #11
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80035fc:	68f9      	ldr	r1, [r7, #12]
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 fb8a 	bl	8003d18 <I2C_ITError>
  }
}
 8003604:	bf00      	nop
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}

0800360c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
 8003640:	4613      	mov	r3, r2
 8003642:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003644:	bf00      	nop
 8003646:	370c      	adds	r7, #12
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003650:	b480      	push	{r7}
 8003652:	b083      	sub	sp, #12
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003664:	b480      	push	{r7}
 8003666:	b083      	sub	sp, #12
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr

08003678 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <I2C_Slave_ISR_IT+0x24>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e0ec      	b.n	800388a <I2C_Slave_ISR_IT+0x1fe>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	095b      	lsrs	r3, r3, #5
 80036c8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d003      	beq.n	80036d8 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80036d0:	6939      	ldr	r1, [r7, #16]
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f9c0 	bl	8003a58 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d04d      	beq.n	8003780 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	091b      	lsrs	r3, r3, #4
 80036e8:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d047      	beq.n	8003780 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d128      	bne.n	800374c <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b28      	cmp	r3, #40	; 0x28
 8003704:	d108      	bne.n	8003718 <I2C_Slave_ISR_IT+0x8c>
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800370c:	d104      	bne.n	8003718 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800370e:	6939      	ldr	r1, [r7, #16]
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 faab 	bl	8003c6c <I2C_ITListenCplt>
 8003716:	e032      	b.n	800377e <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371e:	b2db      	uxtb	r3, r3
 8003720:	2b29      	cmp	r3, #41	; 0x29
 8003722:	d10e      	bne.n	8003742 <I2C_Slave_ISR_IT+0xb6>
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800372a:	d00a      	beq.n	8003742 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2210      	movs	r2, #16
 8003732:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003734:	68f8      	ldr	r0, [r7, #12]
 8003736:	f000 fbe6 	bl	8003f06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f92d 	bl	800399a <I2C_ITSlaveSeqCplt>
 8003740:	e01d      	b.n	800377e <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2210      	movs	r2, #16
 8003748:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800374a:	e096      	b.n	800387a <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	2210      	movs	r2, #16
 8003752:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003758:	f043 0204 	orr.w	r2, r3, #4
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d004      	beq.n	8003770 <I2C_Slave_ISR_IT+0xe4>
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800376c:	f040 8085 	bne.w	800387a <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003774:	4619      	mov	r1, r3
 8003776:	68f8      	ldr	r0, [r7, #12]
 8003778:	f000 face 	bl	8003d18 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800377c:	e07d      	b.n	800387a <I2C_Slave_ISR_IT+0x1ee>
 800377e:	e07c      	b.n	800387a <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	d030      	beq.n	80037ee <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	089b      	lsrs	r3, r3, #2
 8003790:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003794:	2b00      	cmp	r3, #0
 8003796:	d02a      	beq.n	80037ee <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d018      	beq.n	80037d4 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d14f      	bne.n	800387e <I2C_Slave_ISR_IT+0x1f2>
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e4:	d04b      	beq.n	800387e <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 f8d7 	bl	800399a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80037ec:	e047      	b.n	800387e <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	08db      	lsrs	r3, r3, #3
 80037f2:	f003 0301 	and.w	r3, r3, #1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	08db      	lsrs	r3, r3, #3
 80037fe:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003802:	2b00      	cmp	r3, #0
 8003804:	d004      	beq.n	8003810 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003806:	6939      	ldr	r1, [r7, #16]
 8003808:	68f8      	ldr	r0, [r7, #12]
 800380a:	f000 f842 	bl	8003892 <I2C_ITAddrCplt>
 800380e:	e037      	b.n	8003880 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	085b      	lsrs	r3, r3, #1
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d031      	beq.n	8003880 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02b      	beq.n	8003880 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800382c:	b29b      	uxth	r3, r3
 800382e:	2b00      	cmp	r3, #0
 8003830:	d018      	beq.n	8003864 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	3b01      	subs	r3, #1
 8003850:	b29a      	uxth	r2, r3
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	851a      	strh	r2, [r3, #40]	; 0x28
 8003862:	e00d      	b.n	8003880 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800386a:	d002      	beq.n	8003872 <I2C_Slave_ISR_IT+0x1e6>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003872:	68f8      	ldr	r0, [r7, #12]
 8003874:	f000 f891 	bl	800399a <I2C_ITSlaveSeqCplt>
 8003878:	e002      	b.n	8003880 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 800387a:	bf00      	nop
 800387c:	e000      	b.n	8003880 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 800387e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003888:	2300      	movs	r3, #0
}
 800388a:	4618      	mov	r0, r3
 800388c:	3718      	adds	r7, #24
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}

08003892 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
 800389a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038a8:	2b28      	cmp	r3, #40	; 0x28
 80038aa:	d16a      	bne.n	8003982 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	0c1b      	lsrs	r3, r3, #16
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	f003 0301 	and.w	r3, r3, #1
 80038ba:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	699b      	ldr	r3, [r3, #24]
 80038c2:	0c1b      	lsrs	r3, r3, #16
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80038ca:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80038d8:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80038e6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d138      	bne.n	8003962 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80038f0:	897b      	ldrh	r3, [r7, #10]
 80038f2:	09db      	lsrs	r3, r3, #7
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	89bb      	ldrh	r3, [r7, #12]
 80038f8:	4053      	eors	r3, r2
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	f003 0306 	and.w	r3, r3, #6
 8003900:	2b00      	cmp	r3, #0
 8003902:	d11c      	bne.n	800393e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003904:	897b      	ldrh	r3, [r7, #10]
 8003906:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	1c5a      	adds	r2, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003916:	2b02      	cmp	r3, #2
 8003918:	d13b      	bne.n	8003992 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2208      	movs	r2, #8
 8003926:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003930:	89ba      	ldrh	r2, [r7, #12]
 8003932:	7bfb      	ldrb	r3, [r7, #15]
 8003934:	4619      	mov	r1, r3
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff fe7c 	bl	8003634 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800393c:	e029      	b.n	8003992 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800393e:	893b      	ldrh	r3, [r7, #8]
 8003940:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003942:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fb1f 	bl	8003f8a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003954:	89ba      	ldrh	r2, [r7, #12]
 8003956:	7bfb      	ldrb	r3, [r7, #15]
 8003958:	4619      	mov	r1, r3
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff fe6a 	bl	8003634 <HAL_I2C_AddrCallback>
}
 8003960:	e017      	b.n	8003992 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003962:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 fb0f 	bl	8003f8a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003974:	89ba      	ldrh	r2, [r7, #12]
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f7ff fe5a 	bl	8003634 <HAL_I2C_AddrCallback>
}
 8003980:	e007      	b.n	8003992 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2208      	movs	r2, #8
 8003988:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003992:	bf00      	nop
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b084      	sub	sp, #16
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	0b9b      	lsrs	r3, r3, #14
 80039b6:	f003 0301 	and.w	r3, r3, #1
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d008      	beq.n	80039d0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e00d      	b.n	80039ec <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	0bdb      	lsrs	r3, r3, #15
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d007      	beq.n	80039ec <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80039ea:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b29      	cmp	r3, #41	; 0x29
 80039f6:	d112      	bne.n	8003a1e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2228      	movs	r2, #40	; 0x28
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2221      	movs	r2, #33	; 0x21
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a06:	2101      	movs	r1, #1
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fabe 	bl	8003f8a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f7ff fdf8 	bl	800360c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a1c:	e017      	b.n	8003a4e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b2a      	cmp	r3, #42	; 0x2a
 8003a28:	d111      	bne.n	8003a4e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2228      	movs	r2, #40	; 0x28
 8003a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2222      	movs	r2, #34	; 0x22
 8003a36:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a38:	2102      	movs	r1, #2
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 faa5 	bl	8003f8a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff fde9 	bl	8003620 <HAL_I2C_SlaveRxCpltCallback>
}
 8003a4e:	bf00      	nop
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
	...

08003a58 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a74:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	2220      	movs	r2, #32
 8003a7c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	2b21      	cmp	r3, #33	; 0x21
 8003a82:	d002      	beq.n	8003a8a <I2C_ITSlaveCplt+0x32>
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	2b29      	cmp	r3, #41	; 0x29
 8003a88:	d108      	bne.n	8003a9c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003a8a:	f248 0101 	movw	r1, #32769	; 0x8001
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa7b 	bl	8003f8a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2221      	movs	r2, #33	; 0x21
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
 8003a9a:	e00d      	b.n	8003ab8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
 8003a9e:	2b22      	cmp	r3, #34	; 0x22
 8003aa0:	d002      	beq.n	8003aa8 <I2C_ITSlaveCplt+0x50>
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8003aa6:	d107      	bne.n	8003ab8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003aa8:	f248 0102 	movw	r1, #32770	; 0x8002
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fa6c 	bl	8003f8a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2222      	movs	r2, #34	; 0x22
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ac6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6859      	ldr	r1, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b64      	ldr	r3, [pc, #400]	; (8003c64 <I2C_ITSlaveCplt+0x20c>)
 8003ad4:	400b      	ands	r3, r1
 8003ad6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 fa14 	bl	8003f06 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	0b9b      	lsrs	r3, r3, #14
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d013      	beq.n	8003b12 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003af8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d020      	beq.n	8003b44 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b10:	e018      	b.n	8003b44 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	0bdb      	lsrs	r3, r3, #15
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b2c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d006      	beq.n	8003b44 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	089b      	lsrs	r3, r3, #2
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d020      	beq.n	8003b92 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	f023 0304 	bic.w	r3, r3, #4
 8003b56:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00c      	beq.n	8003b92 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b88:	b29b      	uxth	r3, r3
 8003b8a:	3b01      	subs	r3, #1
 8003b8c:	b29a      	uxth	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d005      	beq.n	8003ba8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba0:	f043 0204 	orr.w	r2, r3, #4
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 f8a7 	bl	8003d18 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b28      	cmp	r3, #40	; 0x28
 8003bd4:	d141      	bne.n	8003c5a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003bd6:	6979      	ldr	r1, [r7, #20]
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 f847 	bl	8003c6c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bde:	e03c      	b.n	8003c5a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003be8:	d014      	beq.n	8003c14 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7ff fed5 	bl	800399a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a1d      	ldr	r2, [pc, #116]	; (8003c68 <I2C_ITSlaveCplt+0x210>)
 8003bf4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2220      	movs	r2, #32
 8003bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fd1f 	bl	8003650 <HAL_I2C_ListenCpltCallback>
}
 8003c12:	e022      	b.n	8003c5a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	2b22      	cmp	r3, #34	; 0x22
 8003c1e:	d10e      	bne.n	8003c3e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fcf2 	bl	8003620 <HAL_I2C_SlaveRxCpltCallback>
}
 8003c3c:	e00d      	b.n	8003c5a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2220      	movs	r2, #32
 8003c42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f7ff fcd9 	bl	800360c <HAL_I2C_SlaveTxCpltCallback>
}
 8003c5a:	bf00      	nop
 8003c5c:	3718      	adds	r7, #24
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	fe00e800 	.word	0xfe00e800
 8003c68:	ffff0000 	.word	0xffff0000

08003c6c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b082      	sub	sp, #8
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a26      	ldr	r2, [pc, #152]	; (8003d14 <I2C_ITListenCplt+0xa8>)
 8003c7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	089b      	lsrs	r3, r3, #2
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d022      	beq.n	8003cea <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d012      	beq.n	8003cea <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce2:	f043 0204 	orr.w	r2, r3, #4
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cea:	f248 0103 	movw	r1, #32771	; 0x8003
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 f94b 	bl	8003f8a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f7ff fca3 	bl	8003650 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003d0a:	bf00      	nop
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	ffff0000 	.word	0xffff0000

08003d18 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a5d      	ldr	r2, [pc, #372]	; (8003eac <I2C_ITError+0x194>)
 8003d36:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	431a      	orrs	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003d4a:	7bfb      	ldrb	r3, [r7, #15]
 8003d4c:	2b28      	cmp	r3, #40	; 0x28
 8003d4e:	d005      	beq.n	8003d5c <I2C_ITError+0x44>
 8003d50:	7bfb      	ldrb	r3, [r7, #15]
 8003d52:	2b29      	cmp	r3, #41	; 0x29
 8003d54:	d002      	beq.n	8003d5c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003d56:	7bfb      	ldrb	r3, [r7, #15]
 8003d58:	2b2a      	cmp	r3, #42	; 0x2a
 8003d5a:	d10b      	bne.n	8003d74 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d5c:	2103      	movs	r1, #3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f913 	bl	8003f8a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2228      	movs	r2, #40	; 0x28
 8003d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a50      	ldr	r2, [pc, #320]	; (8003eb0 <I2C_ITError+0x198>)
 8003d70:	635a      	str	r2, [r3, #52]	; 0x34
 8003d72:	e011      	b.n	8003d98 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d74:	f248 0103 	movw	r1, #32771	; 0x8003
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f906 	bl	8003f8a <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b60      	cmp	r3, #96	; 0x60
 8003d88:	d003      	beq.n	8003d92 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9c:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d039      	beq.n	8003e1a <I2C_ITError+0x102>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b11      	cmp	r3, #17
 8003daa:	d002      	beq.n	8003db2 <I2C_ITError+0x9a>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	2b21      	cmp	r3, #33	; 0x21
 8003db0:	d133      	bne.n	8003e1a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003dc0:	d107      	bne.n	8003dd2 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dd0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f7ff f90e 	bl	8002ff8 <HAL_DMA_GetState>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d017      	beq.n	8003e12 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	4a33      	ldr	r2, [pc, #204]	; (8003eb4 <I2C_ITError+0x19c>)
 8003de8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7ff f80e 	bl	8002e18 <HAL_DMA_Abort_IT>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d04d      	beq.n	8003e9e <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e0c:	4610      	mov	r0, r2
 8003e0e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e10:	e045      	b.n	8003e9e <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f850 	bl	8003eb8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e18:	e041      	b.n	8003e9e <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d039      	beq.n	8003e96 <I2C_ITError+0x17e>
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	2b12      	cmp	r3, #18
 8003e26:	d002      	beq.n	8003e2e <I2C_ITError+0x116>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b22      	cmp	r3, #34	; 0x22
 8003e2c:	d133      	bne.n	8003e96 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3c:	d107      	bne.n	8003e4e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e4c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e52:	4618      	mov	r0, r3
 8003e54:	f7ff f8d0 	bl	8002ff8 <HAL_DMA_GetState>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d017      	beq.n	8003e8e <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e62:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <I2C_ITError+0x19c>)
 8003e64:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e72:	4618      	mov	r0, r3
 8003e74:	f7fe ffd0 	bl	8002e18 <HAL_DMA_Abort_IT>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d011      	beq.n	8003ea2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e88:	4610      	mov	r0, r2
 8003e8a:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e8c:	e009      	b.n	8003ea2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 f812 	bl	8003eb8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e94:	e005      	b.n	8003ea2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003e96:	6878      	ldr	r0, [r7, #4]
 8003e98:	f000 f80e 	bl	8003eb8 <I2C_TreatErrorCallback>
  }
}
 8003e9c:	e002      	b.n	8003ea4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ea2:	bf00      	nop
}
 8003ea4:	bf00      	nop
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	ffff0000 	.word	0xffff0000
 8003eb0:	0800368d 	.word	0x0800368d
 8003eb4:	08003f4f 	.word	0x08003f4f

08003eb8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b60      	cmp	r3, #96	; 0x60
 8003eca:	d10e      	bne.n	8003eea <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7ff fbc8 	bl	8003678 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ee8:	e009      	b.n	8003efe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	f7ff fbb3 	bl	8003664 <HAL_I2C_ErrorCallback>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	699b      	ldr	r3, [r3, #24]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d103      	bne.n	8003f24 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	2200      	movs	r2, #0
 8003f22:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d007      	beq.n	8003f42 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f042 0201 	orr.w	r2, r2, #1
 8003f40:	619a      	str	r2, [r3, #24]
  }
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	2200      	movs	r2, #0
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d003      	beq.n	8003f7c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f78:	2200      	movs	r2, #0
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f7ff ff9b 	bl	8003eb8 <I2C_TreatErrorCallback>
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b085      	sub	sp, #20
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	460b      	mov	r3, r1
 8003f94:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f9a:	887b      	ldrh	r3, [r7, #2]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00f      	beq.n	8003fc4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003faa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fb8:	2b28      	cmp	r3, #40	; 0x28
 8003fba:	d003      	beq.n	8003fc4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003fc2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003fc4:	887b      	ldrh	r3, [r7, #2]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00f      	beq.n	8003fee <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003fd4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fe2:	2b28      	cmp	r3, #40	; 0x28
 8003fe4:	d003      	beq.n	8003fee <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003fec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fee:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	da03      	bge.n	8003ffe <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003ffc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003ffe:	887b      	ldrh	r3, [r7, #2]
 8004000:	2b10      	cmp	r3, #16
 8004002:	d103      	bne.n	800400c <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800400a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800400c:	887b      	ldrh	r3, [r7, #2]
 800400e:	2b20      	cmp	r3, #32
 8004010:	d103      	bne.n	800401a <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f043 0320 	orr.w	r3, r3, #32
 8004018:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800401a:	887b      	ldrh	r3, [r7, #2]
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d103      	bne.n	8004028 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004026:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6819      	ldr	r1, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	43da      	mvns	r2, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	400a      	ands	r2, r1
 8004038:	601a      	str	r2, [r3, #0]
}
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b20      	cmp	r3, #32
 800405a:	d138      	bne.n	80040ce <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004062:	2b01      	cmp	r3, #1
 8004064:	d101      	bne.n	800406a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004066:	2302      	movs	r3, #2
 8004068:	e032      	b.n	80040d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2201      	movs	r2, #1
 800406e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2224      	movs	r2, #36	; 0x24
 8004076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f022 0201 	bic.w	r2, r2, #1
 8004088:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004098:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6819      	ldr	r1, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e000      	b.n	80040d0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040ce:	2302      	movs	r3, #2
  }
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr

080040dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	2b20      	cmp	r3, #32
 80040f0:	d139      	bne.n	8004166 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e033      	b.n	8004168 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2224      	movs	r2, #36	; 0x24
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 0201 	bic.w	r2, r2, #1
 800411e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800412e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	021b      	lsls	r3, r3, #8
 8004134:	68fa      	ldr	r2, [r7, #12]
 8004136:	4313      	orrs	r3, r2
 8004138:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2220      	movs	r2, #32
 8004156:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004162:	2300      	movs	r3, #0
 8004164:	e000      	b.n	8004168 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004166:	2302      	movs	r3, #2
  }
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <HAL_PWREx_GetVoltageRange+0x18>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40007000 	.word	0x40007000

08004190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800419e:	d130      	bne.n	8004202 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a0:	4b23      	ldr	r3, [pc, #140]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ac:	d038      	beq.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041b6:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2232      	movs	r2, #50	; 0x32
 80041c4:	fb02 f303 	mul.w	r3, r2, r3
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	0c9b      	lsrs	r3, r3, #18
 80041d0:	3301      	adds	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d4:	e002      	b.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b01      	subs	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e8:	d102      	bne.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f2      	bne.n	80041d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	d110      	bne.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e00f      	b.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420e:	d007      	beq.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004218:	4a05      	ldr	r2, [pc, #20]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000
 8004234:	20000000 	.word	0x20000000
 8004238:	431bde83 	.word	0x431bde83

0800423c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e3ca      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800424e:	4b97      	ldr	r3, [pc, #604]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004258:	4b94      	ldr	r3, [pc, #592]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f003 0303 	and.w	r3, r3, #3
 8004260:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 80e4 	beq.w	8004438 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <HAL_RCC_OscConfig+0x4a>
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	2b0c      	cmp	r3, #12
 800427a:	f040 808b 	bne.w	8004394 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2b01      	cmp	r3, #1
 8004282:	f040 8087 	bne.w	8004394 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004286:	4b89      	ldr	r3, [pc, #548]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f003 0302 	and.w	r3, r3, #2
 800428e:	2b00      	cmp	r3, #0
 8004290:	d005      	beq.n	800429e <HAL_RCC_OscConfig+0x62>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	699b      	ldr	r3, [r3, #24]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e3a2      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	4b82      	ldr	r3, [pc, #520]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0308 	and.w	r3, r3, #8
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d004      	beq.n	80042b8 <HAL_RCC_OscConfig+0x7c>
 80042ae:	4b7f      	ldr	r3, [pc, #508]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b6:	e005      	b.n	80042c4 <HAL_RCC_OscConfig+0x88>
 80042b8:	4b7c      	ldr	r3, [pc, #496]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d223      	bcs.n	8004310 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a1b      	ldr	r3, [r3, #32]
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fd55 	bl	8004d7c <RCC_SetFlashLatencyFromMSIRange>
 80042d2:	4603      	mov	r3, r0
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d001      	beq.n	80042dc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e383      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042dc:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a72      	ldr	r2, [pc, #456]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042e2:	f043 0308 	orr.w	r3, r3, #8
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	4b70      	ldr	r3, [pc, #448]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	496d      	ldr	r1, [pc, #436]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042fa:	4b6c      	ldr	r3, [pc, #432]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69db      	ldr	r3, [r3, #28]
 8004306:	021b      	lsls	r3, r3, #8
 8004308:	4968      	ldr	r1, [pc, #416]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800430a:	4313      	orrs	r3, r2
 800430c:	604b      	str	r3, [r1, #4]
 800430e:	e025      	b.n	800435c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004310:	4b66      	ldr	r3, [pc, #408]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a65      	ldr	r2, [pc, #404]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004316:	f043 0308 	orr.w	r3, r3, #8
 800431a:	6013      	str	r3, [r2, #0]
 800431c:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	4960      	ldr	r1, [pc, #384]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800432a:	4313      	orrs	r3, r2
 800432c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800432e:	4b5f      	ldr	r3, [pc, #380]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69db      	ldr	r3, [r3, #28]
 800433a:	021b      	lsls	r3, r3, #8
 800433c:	495b      	ldr	r1, [pc, #364]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800433e:	4313      	orrs	r3, r2
 8004340:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d109      	bne.n	800435c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
 800434c:	4618      	mov	r0, r3
 800434e:	f000 fd15 	bl	8004d7c <RCC_SetFlashLatencyFromMSIRange>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d001      	beq.n	800435c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e343      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800435c:	f000 fc4a 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b52      	ldr	r3, [pc, #328]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	4950      	ldr	r1, [pc, #320]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	f003 031f 	and.w	r3, r3, #31
 8004374:	fa22 f303 	lsr.w	r3, r2, r3
 8004378:	4a4e      	ldr	r2, [pc, #312]	; (80044b4 <HAL_RCC_OscConfig+0x278>)
 800437a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800437c:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <HAL_RCC_OscConfig+0x27c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4618      	mov	r0, r3
 8004382:	f7fe fa61 	bl	8002848 <HAL_InitTick>
 8004386:	4603      	mov	r3, r0
 8004388:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800438a:	7bfb      	ldrb	r3, [r7, #15]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d052      	beq.n	8004436 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004390:	7bfb      	ldrb	r3, [r7, #15]
 8004392:	e327      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	699b      	ldr	r3, [r3, #24]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d032      	beq.n	8004402 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800439c:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a42      	ldr	r2, [pc, #264]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043a2:	f043 0301 	orr.w	r3, r3, #1
 80043a6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043a8:	f7fe fa9e 	bl	80028e8 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043b0:	f7fe fa9a 	bl	80028e8 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e310      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c2:	4b3a      	ldr	r3, [pc, #232]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0302 	and.w	r3, r3, #2
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043ce:	4b37      	ldr	r3, [pc, #220]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a36      	ldr	r2, [pc, #216]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043d4:	f043 0308 	orr.w	r3, r3, #8
 80043d8:	6013      	str	r3, [r2, #0]
 80043da:	4b34      	ldr	r3, [pc, #208]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a1b      	ldr	r3, [r3, #32]
 80043e6:	4931      	ldr	r1, [pc, #196]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ec:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69db      	ldr	r3, [r3, #28]
 80043f8:	021b      	lsls	r3, r3, #8
 80043fa:	492c      	ldr	r1, [pc, #176]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043fc:	4313      	orrs	r3, r2
 80043fe:	604b      	str	r3, [r1, #4]
 8004400:	e01a      	b.n	8004438 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004402:	4b2a      	ldr	r3, [pc, #168]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a29      	ldr	r2, [pc, #164]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800440e:	f7fe fa6b 	bl	80028e8 <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004416:	f7fe fa67 	bl	80028e8 <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e2dd      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004428:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 0302 	and.w	r3, r3, #2
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x1da>
 8004434:	e000      	b.n	8004438 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004436:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b00      	cmp	r3, #0
 8004442:	d074      	beq.n	800452e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b08      	cmp	r3, #8
 8004448:	d005      	beq.n	8004456 <HAL_RCC_OscConfig+0x21a>
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b0c      	cmp	r3, #12
 800444e:	d10e      	bne.n	800446e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	2b03      	cmp	r3, #3
 8004454:	d10b      	bne.n	800446e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004456:	4b15      	ldr	r3, [pc, #84]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d064      	beq.n	800452c <HAL_RCC_OscConfig+0x2f0>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d160      	bne.n	800452c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e2ba      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d106      	bne.n	8004486 <HAL_RCC_OscConfig+0x24a>
 8004478:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0b      	ldr	r2, [pc, #44]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800447e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	e026      	b.n	80044d4 <HAL_RCC_OscConfig+0x298>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800448e:	d115      	bne.n	80044bc <HAL_RCC_OscConfig+0x280>
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	4a05      	ldr	r2, [pc, #20]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004496:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800449a:	6013      	str	r3, [r2, #0]
 800449c:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a02      	ldr	r2, [pc, #8]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80044a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a6:	6013      	str	r3, [r2, #0]
 80044a8:	e014      	b.n	80044d4 <HAL_RCC_OscConfig+0x298>
 80044aa:	bf00      	nop
 80044ac:	40021000 	.word	0x40021000
 80044b0:	0800ce6c 	.word	0x0800ce6c
 80044b4:	20000000 	.word	0x20000000
 80044b8:	20000004 	.word	0x20000004
 80044bc:	4ba0      	ldr	r3, [pc, #640]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a9f      	ldr	r2, [pc, #636]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b9d      	ldr	r3, [pc, #628]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a9c      	ldr	r2, [pc, #624]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d013      	beq.n	8004504 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fe fa04 	bl	80028e8 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fe fa00 	bl	80028e8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e276      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f6:	4b92      	ldr	r3, [pc, #584]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x2a8>
 8004502:	e014      	b.n	800452e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fe f9f0 	bl	80028e8 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450c:	f7fe f9ec 	bl	80028e8 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e262      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800451e:	4b88      	ldr	r3, [pc, #544]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x2d0>
 800452a:	e000      	b.n	800452e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d060      	beq.n	80045fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d005      	beq.n	800454c <HAL_RCC_OscConfig+0x310>
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d119      	bne.n	800457a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d116      	bne.n	800457a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800454c:	4b7c      	ldr	r3, [pc, #496]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x328>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e23f      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004564:	4b76      	ldr	r3, [pc, #472]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	4973      	ldr	r1, [pc, #460]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004578:	e040      	b.n	80045fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d023      	beq.n	80045ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004582:	4b6f      	ldr	r3, [pc, #444]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6e      	ldr	r2, [pc, #440]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fe f9ab 	bl	80028e8 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004596:	f7fe f9a7 	bl	80028e8 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e21d      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a8:	4b65      	ldr	r3, [pc, #404]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b4:	4b62      	ldr	r3, [pc, #392]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	495f      	ldr	r1, [pc, #380]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
 80045c8:	e018      	b.n	80045fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ca:	4b5d      	ldr	r3, [pc, #372]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a5c      	ldr	r2, [pc, #368]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d6:	f7fe f987 	bl	80028e8 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045de:	f7fe f983 	bl	80028e8 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e1f9      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f0:	4b53      	ldr	r3, [pc, #332]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f0      	bne.n	80045de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03c      	beq.n	8004682 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01c      	beq.n	800464a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004610:	4b4b      	ldr	r3, [pc, #300]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004616:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fe f962 	bl	80028e8 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004628:	f7fe f95e 	bl	80028e8 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e1d4      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463a:	4b41      	ldr	r3, [pc, #260]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800463c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0ef      	beq.n	8004628 <HAL_RCC_OscConfig+0x3ec>
 8004648:	e01b      	b.n	8004682 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464a:	4b3d      	ldr	r3, [pc, #244]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800464c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004650:	4a3b      	ldr	r2, [pc, #236]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fe f945 	bl	80028e8 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004662:	f7fe f941 	bl	80028e8 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e1b7      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004674:	4b32      	ldr	r3, [pc, #200]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ef      	bne.n	8004662 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80a6 	beq.w	80047dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004690:	2300      	movs	r3, #0
 8004692:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004694:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	4a26      	ldr	r2, [pc, #152]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6593      	str	r3, [r2, #88]	; 0x58
 80046ac:	4b24      	ldr	r3, [pc, #144]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b8:	2301      	movs	r3, #1
 80046ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046bc:	4b21      	ldr	r3, [pc, #132]	; (8004744 <HAL_RCC_OscConfig+0x508>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d118      	bne.n	80046fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c8:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <HAL_RCC_OscConfig+0x508>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <HAL_RCC_OscConfig+0x508>)
 80046ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d4:	f7fe f908 	bl	80028e8 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046dc:	f7fe f904 	bl	80028e8 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e17a      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_RCC_OscConfig+0x508>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d108      	bne.n	8004714 <HAL_RCC_OscConfig+0x4d8>
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004712:	e029      	b.n	8004768 <HAL_RCC_OscConfig+0x52c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b05      	cmp	r3, #5
 800471a:	d115      	bne.n	8004748 <HAL_RCC_OscConfig+0x50c>
 800471c:	4b08      	ldr	r3, [pc, #32]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	4a03      	ldr	r2, [pc, #12]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800473c:	e014      	b.n	8004768 <HAL_RCC_OscConfig+0x52c>
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	40007000 	.word	0x40007000
 8004748:	4b9c      	ldr	r3, [pc, #624]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	4a9b      	ldr	r2, [pc, #620]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004758:	4b98      	ldr	r3, [pc, #608]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	4a97      	ldr	r2, [pc, #604]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004760:	f023 0304 	bic.w	r3, r3, #4
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d016      	beq.n	800479e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fe f8ba 	bl	80028e8 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fe f8b6 	bl	80028e8 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	; 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e12a      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478e:	4b8b      	ldr	r3, [pc, #556]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ed      	beq.n	8004778 <HAL_RCC_OscConfig+0x53c>
 800479c:	e015      	b.n	80047ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479e:	f7fe f8a3 	bl	80028e8 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fe f89f 	bl	80028e8 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e113      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047bc:	4b7f      	ldr	r3, [pc, #508]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ed      	bne.n	80047a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ca:	7ffb      	ldrb	r3, [r7, #31]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d105      	bne.n	80047dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d0:	4b7a      	ldr	r3, [pc, #488]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	4a79      	ldr	r2, [pc, #484]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 80047d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047da:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	f000 80fe 	beq.w	80049e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	f040 80d0 	bne.w	8004990 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047f0:	4b72      	ldr	r3, [pc, #456]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 0203 	and.w	r2, r3, #3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	429a      	cmp	r2, r3
 8004802:	d130      	bne.n	8004866 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800480e:	3b01      	subs	r3, #1
 8004810:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004812:	429a      	cmp	r2, r3
 8004814:	d127      	bne.n	8004866 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004820:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004822:	429a      	cmp	r2, r3
 8004824:	d11f      	bne.n	8004866 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004830:	2a07      	cmp	r2, #7
 8004832:	bf14      	ite	ne
 8004834:	2201      	movne	r2, #1
 8004836:	2200      	moveq	r2, #0
 8004838:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800483a:	4293      	cmp	r3, r2
 800483c:	d113      	bne.n	8004866 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	085b      	lsrs	r3, r3, #1
 800484a:	3b01      	subs	r3, #1
 800484c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800484e:	429a      	cmp	r2, r3
 8004850:	d109      	bne.n	8004866 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485c:	085b      	lsrs	r3, r3, #1
 800485e:	3b01      	subs	r3, #1
 8004860:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004862:	429a      	cmp	r2, r3
 8004864:	d06e      	beq.n	8004944 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	2b0c      	cmp	r3, #12
 800486a:	d069      	beq.n	8004940 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800486c:	4b53      	ldr	r3, [pc, #332]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d105      	bne.n	8004884 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004878:	4b50      	ldr	r3, [pc, #320]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	e0ad      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004888:	4b4c      	ldr	r3, [pc, #304]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a4b      	ldr	r2, [pc, #300]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 800488e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004892:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004894:	f7fe f828 	bl	80028e8 <HAL_GetTick>
 8004898:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489c:	f7fe f824 	bl	80028e8 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b02      	cmp	r3, #2
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e09a      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048ae:	4b43      	ldr	r3, [pc, #268]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048ba:	4b40      	ldr	r3, [pc, #256]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	4b40      	ldr	r3, [pc, #256]	; (80049c0 <HAL_RCC_OscConfig+0x784>)
 80048c0:	4013      	ands	r3, r2
 80048c2:	687a      	ldr	r2, [r7, #4]
 80048c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048ca:	3a01      	subs	r2, #1
 80048cc:	0112      	lsls	r2, r2, #4
 80048ce:	4311      	orrs	r1, r2
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048d4:	0212      	lsls	r2, r2, #8
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048dc:	0852      	lsrs	r2, r2, #1
 80048de:	3a01      	subs	r2, #1
 80048e0:	0552      	lsls	r2, r2, #21
 80048e2:	4311      	orrs	r1, r2
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048e8:	0852      	lsrs	r2, r2, #1
 80048ea:	3a01      	subs	r2, #1
 80048ec:	0652      	lsls	r2, r2, #25
 80048ee:	4311      	orrs	r1, r2
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048f4:	0912      	lsrs	r2, r2, #4
 80048f6:	0452      	lsls	r2, r2, #17
 80048f8:	430a      	orrs	r2, r1
 80048fa:	4930      	ldr	r1, [pc, #192]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004900:	4b2e      	ldr	r3, [pc, #184]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a2d      	ldr	r2, [pc, #180]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800490a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800490c:	4b2b      	ldr	r3, [pc, #172]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	4a2a      	ldr	r2, [pc, #168]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004918:	f7fd ffe6 	bl	80028e8 <HAL_GetTick>
 800491c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004920:	f7fd ffe2 	bl	80028e8 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b02      	cmp	r3, #2
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e058      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004932:	4b22      	ldr	r3, [pc, #136]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800493e:	e050      	b.n	80049e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004940:	2301      	movs	r3, #1
 8004942:	e04f      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004944:	4b1d      	ldr	r3, [pc, #116]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800494c:	2b00      	cmp	r3, #0
 800494e:	d148      	bne.n	80049e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004950:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a19      	ldr	r2, [pc, #100]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800495c:	4b17      	ldr	r3, [pc, #92]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4a16      	ldr	r2, [pc, #88]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004966:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004968:	f7fd ffbe 	bl	80028e8 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fd ffba 	bl	80028e8 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e030      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004982:	4b0e      	ldr	r3, [pc, #56]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0x734>
 800498e:	e028      	b.n	80049e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	2b0c      	cmp	r3, #12
 8004994:	d023      	beq.n	80049de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a08      	ldr	r2, [pc, #32]	; (80049bc <HAL_RCC_OscConfig+0x780>)
 800499c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049a2:	f7fd ffa1 	bl	80028e8 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049a8:	e00c      	b.n	80049c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049aa:	f7fd ff9d 	bl	80028e8 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d905      	bls.n	80049c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e013      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
 80049bc:	40021000 	.word	0x40021000
 80049c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049c4:	4b09      	ldr	r3, [pc, #36]	; (80049ec <HAL_RCC_OscConfig+0x7b0>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d1ec      	bne.n	80049aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049d0:	4b06      	ldr	r3, [pc, #24]	; (80049ec <HAL_RCC_OscConfig+0x7b0>)
 80049d2:	68da      	ldr	r2, [r3, #12]
 80049d4:	4905      	ldr	r1, [pc, #20]	; (80049ec <HAL_RCC_OscConfig+0x7b0>)
 80049d6:	4b06      	ldr	r3, [pc, #24]	; (80049f0 <HAL_RCC_OscConfig+0x7b4>)
 80049d8:	4013      	ands	r3, r2
 80049da:	60cb      	str	r3, [r1, #12]
 80049dc:	e001      	b.n	80049e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e000      	b.n	80049e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3720      	adds	r7, #32
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	40021000 	.word	0x40021000
 80049f0:	feeefffc 	.word	0xfeeefffc

080049f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b084      	sub	sp, #16
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d101      	bne.n	8004a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e0e7      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a08:	4b75      	ldr	r3, [pc, #468]	; (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d910      	bls.n	8004a38 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a16:	4b72      	ldr	r3, [pc, #456]	; (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f023 0207 	bic.w	r2, r3, #7
 8004a1e:	4970      	ldr	r1, [pc, #448]	; (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a26:	4b6e      	ldr	r3, [pc, #440]	; (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	683a      	ldr	r2, [r7, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d001      	beq.n	8004a38 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e0cf      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d010      	beq.n	8004a66 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	4b66      	ldr	r3, [pc, #408]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d908      	bls.n	8004a66 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a54:	4b63      	ldr	r3, [pc, #396]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4960      	ldr	r1, [pc, #384]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04c      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b03      	cmp	r3, #3
 8004a78:	d107      	bne.n	8004a8a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a7a:	4b5a      	ldr	r3, [pc, #360]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d121      	bne.n	8004aca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0a6      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d107      	bne.n	8004aa2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a92:	4b54      	ldr	r3, [pc, #336]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d115      	bne.n	8004aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e09a      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d107      	bne.n	8004aba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aaa:	4b4e      	ldr	r3, [pc, #312]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e08e      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aba:	4b4a      	ldr	r3, [pc, #296]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e086      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004aca:	4b46      	ldr	r3, [pc, #280]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f023 0203 	bic.w	r2, r3, #3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	4943      	ldr	r1, [pc, #268]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004adc:	f7fd ff04 	bl	80028e8 <HAL_GetTick>
 8004ae0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ae2:	e00a      	b.n	8004afa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ae4:	f7fd ff00 	bl	80028e8 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e06e      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004afa:	4b3a      	ldr	r3, [pc, #232]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f003 020c 	and.w	r2, r3, #12
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d1eb      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d010      	beq.n	8004b3a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689a      	ldr	r2, [r3, #8]
 8004b1c:	4b31      	ldr	r3, [pc, #196]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d208      	bcs.n	8004b3a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b28:	4b2e      	ldr	r3, [pc, #184]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	492b      	ldr	r1, [pc, #172]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b3a:	4b29      	ldr	r3, [pc, #164]	; (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0307 	and.w	r3, r3, #7
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d210      	bcs.n	8004b6a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b48:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 0207 	bic.w	r2, r3, #7
 8004b50:	4923      	ldr	r1, [pc, #140]	; (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b58:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <HAL_RCC_ClockConfig+0x1ec>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	683a      	ldr	r2, [r7, #0]
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d001      	beq.n	8004b6a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e036      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d008      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b76:	4b1b      	ldr	r3, [pc, #108]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	68db      	ldr	r3, [r3, #12]
 8004b82:	4918      	ldr	r1, [pc, #96]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d009      	beq.n	8004ba8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b94:	4b13      	ldr	r3, [pc, #76]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	00db      	lsls	r3, r3, #3
 8004ba2:	4910      	ldr	r1, [pc, #64]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ba8:	f000 f824 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8004bac:	4602      	mov	r2, r0
 8004bae:	4b0d      	ldr	r3, [pc, #52]	; (8004be4 <HAL_RCC_ClockConfig+0x1f0>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	091b      	lsrs	r3, r3, #4
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	490b      	ldr	r1, [pc, #44]	; (8004be8 <HAL_RCC_ClockConfig+0x1f4>)
 8004bba:	5ccb      	ldrb	r3, [r1, r3]
 8004bbc:	f003 031f 	and.w	r3, r3, #31
 8004bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8004bc4:	4a09      	ldr	r2, [pc, #36]	; (8004bec <HAL_RCC_ClockConfig+0x1f8>)
 8004bc6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004bc8:	4b09      	ldr	r3, [pc, #36]	; (8004bf0 <HAL_RCC_ClockConfig+0x1fc>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f7fd fe3b 	bl	8002848 <HAL_InitTick>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	72fb      	strb	r3, [r7, #11]

  return status;
 8004bd6:	7afb      	ldrb	r3, [r7, #11]
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40022000 	.word	0x40022000
 8004be4:	40021000 	.word	0x40021000
 8004be8:	0800ce6c 	.word	0x0800ce6c
 8004bec:	20000000 	.word	0x20000000
 8004bf0:	20000004 	.word	0x20000004

08004bf4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b089      	sub	sp, #36	; 0x24
 8004bf8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	61fb      	str	r3, [r7, #28]
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c02:	4b3e      	ldr	r3, [pc, #248]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f003 030c 	and.w	r3, r3, #12
 8004c0a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c0c:	4b3b      	ldr	r3, [pc, #236]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d005      	beq.n	8004c28 <HAL_RCC_GetSysClockFreq+0x34>
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	2b0c      	cmp	r3, #12
 8004c20:	d121      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d11e      	bne.n	8004c66 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c28:	4b34      	ldr	r3, [pc, #208]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f003 0308 	and.w	r3, r3, #8
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d107      	bne.n	8004c44 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c34:	4b31      	ldr	r3, [pc, #196]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c3a:	0a1b      	lsrs	r3, r3, #8
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e005      	b.n	8004c50 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c44:	4b2d      	ldr	r3, [pc, #180]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 030f 	and.w	r3, r3, #15
 8004c4e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c50:	4a2b      	ldr	r2, [pc, #172]	; (8004d00 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c58:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10d      	bne.n	8004c7c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c64:	e00a      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b04      	cmp	r3, #4
 8004c6a:	d102      	bne.n	8004c72 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c6c:	4b25      	ldr	r3, [pc, #148]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c6e:	61bb      	str	r3, [r7, #24]
 8004c70:	e004      	b.n	8004c7c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b08      	cmp	r3, #8
 8004c76:	d101      	bne.n	8004c7c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c78:	4b23      	ldr	r3, [pc, #140]	; (8004d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c7a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d134      	bne.n	8004cec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c82:	4b1e      	ldr	r3, [pc, #120]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d003      	beq.n	8004c9a <HAL_RCC_GetSysClockFreq+0xa6>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	2b03      	cmp	r3, #3
 8004c96:	d003      	beq.n	8004ca0 <HAL_RCC_GetSysClockFreq+0xac>
 8004c98:	e005      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	; (8004d04 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c9c:	617b      	str	r3, [r7, #20]
      break;
 8004c9e:	e005      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ca0:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <HAL_RCC_GetSysClockFreq+0x114>)
 8004ca2:	617b      	str	r3, [r7, #20]
      break;
 8004ca4:	e002      	b.n	8004cac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	617b      	str	r3, [r7, #20]
      break;
 8004caa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cac:	4b13      	ldr	r3, [pc, #76]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004cba:	4b10      	ldr	r3, [pc, #64]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	fb03 f202 	mul.w	r2, r3, r2
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004cd2:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <HAL_RCC_GetSysClockFreq+0x108>)
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	0e5b      	lsrs	r3, r3, #25
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	3301      	adds	r3, #1
 8004cde:	005b      	lsls	r3, r3, #1
 8004ce0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cec:	69bb      	ldr	r3, [r7, #24]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3724      	adds	r7, #36	; 0x24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf8:	4770      	bx	lr
 8004cfa:	bf00      	nop
 8004cfc:	40021000 	.word	0x40021000
 8004d00:	0800ce84 	.word	0x0800ce84
 8004d04:	00f42400 	.word	0x00f42400
 8004d08:	007a1200 	.word	0x007a1200

08004d0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d10:	4b03      	ldr	r3, [pc, #12]	; (8004d20 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d12:	681b      	ldr	r3, [r3, #0]
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000000 	.word	0x20000000

08004d24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d28:	f7ff fff0 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	4b06      	ldr	r3, [pc, #24]	; (8004d48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	0a1b      	lsrs	r3, r3, #8
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	4904      	ldr	r1, [pc, #16]	; (8004d4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d3a:	5ccb      	ldrb	r3, [r1, r3]
 8004d3c:	f003 031f 	and.w	r3, r3, #31
 8004d40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d44:	4618      	mov	r0, r3
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	0800ce7c 	.word	0x0800ce7c

08004d50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d54:	f7ff ffda 	bl	8004d0c <HAL_RCC_GetHCLKFreq>
 8004d58:	4602      	mov	r2, r0
 8004d5a:	4b06      	ldr	r3, [pc, #24]	; (8004d74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	0adb      	lsrs	r3, r3, #11
 8004d60:	f003 0307 	and.w	r3, r3, #7
 8004d64:	4904      	ldr	r1, [pc, #16]	; (8004d78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d66:	5ccb      	ldrb	r3, [r1, r3]
 8004d68:	f003 031f 	and.w	r3, r3, #31
 8004d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	40021000 	.word	0x40021000
 8004d78:	0800ce7c 	.word	0x0800ce7c

08004d7c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b086      	sub	sp, #24
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d84:	2300      	movs	r3, #0
 8004d86:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d88:	4b2a      	ldr	r3, [pc, #168]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d003      	beq.n	8004d9c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d94:	f7ff f9ee 	bl	8004174 <HAL_PWREx_GetVoltageRange>
 8004d98:	6178      	str	r0, [r7, #20]
 8004d9a:	e014      	b.n	8004dc6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d9c:	4b25      	ldr	r3, [pc, #148]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004da0:	4a24      	ldr	r2, [pc, #144]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004da2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6593      	str	r3, [r2, #88]	; 0x58
 8004da8:	4b22      	ldr	r3, [pc, #136]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db0:	60fb      	str	r3, [r7, #12]
 8004db2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004db4:	f7ff f9de 	bl	8004174 <HAL_PWREx_GetVoltageRange>
 8004db8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004dba:	4b1e      	ldr	r3, [pc, #120]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dbe:	4a1d      	ldr	r2, [pc, #116]	; (8004e34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dc4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dcc:	d10b      	bne.n	8004de6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b80      	cmp	r3, #128	; 0x80
 8004dd2:	d919      	bls.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2ba0      	cmp	r3, #160	; 0xa0
 8004dd8:	d902      	bls.n	8004de0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004dda:	2302      	movs	r3, #2
 8004ddc:	613b      	str	r3, [r7, #16]
 8004dde:	e013      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004de0:	2301      	movs	r3, #1
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	e010      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2b80      	cmp	r3, #128	; 0x80
 8004dea:	d902      	bls.n	8004df2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dec:	2303      	movs	r3, #3
 8004dee:	613b      	str	r3, [r7, #16]
 8004df0:	e00a      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2b80      	cmp	r3, #128	; 0x80
 8004df6:	d102      	bne.n	8004dfe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004df8:	2302      	movs	r3, #2
 8004dfa:	613b      	str	r3, [r7, #16]
 8004dfc:	e004      	b.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2b70      	cmp	r3, #112	; 0x70
 8004e02:	d101      	bne.n	8004e08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e04:	2301      	movs	r3, #1
 8004e06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 0207 	bic.w	r2, r3, #7
 8004e10:	4909      	ldr	r1, [pc, #36]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e18:	4b07      	ldr	r3, [pc, #28]	; (8004e38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	693a      	ldr	r2, [r7, #16]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d001      	beq.n	8004e2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e000      	b.n	8004e2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e2a:	2300      	movs	r3, #0
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	3718      	adds	r7, #24
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	40021000 	.word	0x40021000
 8004e38:	40022000 	.word	0x40022000

08004e3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e44:	2300      	movs	r3, #0
 8004e46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e48:	2300      	movs	r3, #0
 8004e4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d041      	beq.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e60:	d02a      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e66:	d824      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e6c:	d008      	beq.n	8004e80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e72:	d81e      	bhi.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d00a      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e7c:	d010      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e7e:	e018      	b.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e80:	4b86      	ldr	r3, [pc, #536]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e82:	68db      	ldr	r3, [r3, #12]
 8004e84:	4a85      	ldr	r2, [pc, #532]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e8c:	e015      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3304      	adds	r3, #4
 8004e92:	2100      	movs	r1, #0
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 fabb 	bl	8005410 <RCCEx_PLLSAI1_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e9e:	e00c      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3320      	adds	r3, #32
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fba6 	bl	80055f8 <RCCEx_PLLSAI2_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eb0:	e003      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	74fb      	strb	r3, [r7, #19]
      break;
 8004eb6:	e000      	b.n	8004eba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004eb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10b      	bne.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ec0:	4b76      	ldr	r3, [pc, #472]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ece:	4973      	ldr	r1, [pc, #460]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ed6:	e001      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d041      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ef0:	d02a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004ef2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004ef6:	d824      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ef8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004efc:	d008      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004efe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f02:	d81e      	bhi.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00a      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f0c:	d010      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f0e:	e018      	b.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f10:	4b62      	ldr	r3, [pc, #392]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	4a61      	ldr	r2, [pc, #388]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f1c:	e015      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	3304      	adds	r3, #4
 8004f22:	2100      	movs	r1, #0
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fa73 	bl	8005410 <RCCEx_PLLSAI1_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f2e:	e00c      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3320      	adds	r3, #32
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fb5e 	bl	80055f8 <RCCEx_PLLSAI2_Config>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f40:	e003      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	74fb      	strb	r3, [r7, #19]
      break;
 8004f46:	e000      	b.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f4a:	7cfb      	ldrb	r3, [r7, #19]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f50:	4b52      	ldr	r3, [pc, #328]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f5e:	494f      	ldr	r1, [pc, #316]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f60:	4313      	orrs	r3, r2
 8004f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f66:	e001      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	f000 80a0 	beq.w	80050ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f7e:	4b47      	ldr	r3, [pc, #284]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e000      	b.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f8e:	2300      	movs	r3, #0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00d      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f94:	4b41      	ldr	r3, [pc, #260]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f98:	4a40      	ldr	r2, [pc, #256]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004fa0:	4b3e      	ldr	r3, [pc, #248]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fa8:	60bb      	str	r3, [r7, #8]
 8004faa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fac:	2301      	movs	r3, #1
 8004fae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fb0:	4b3b      	ldr	r3, [pc, #236]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a3a      	ldr	r2, [pc, #232]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fbc:	f7fd fc94 	bl	80028e8 <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fc2:	e009      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc4:	f7fd fc90 	bl	80028e8 <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d902      	bls.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004fd2:	2303      	movs	r3, #3
 8004fd4:	74fb      	strb	r3, [r7, #19]
        break;
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fd8:	4b31      	ldr	r3, [pc, #196]	; (80050a0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0ef      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d15c      	bne.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004fea:	4b2c      	ldr	r3, [pc, #176]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ff4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d01f      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	429a      	cmp	r2, r3
 8005006:	d019      	beq.n	800503c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005008:	4b24      	ldr	r3, [pc, #144]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800500a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800500e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005012:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005014:	4b21      	ldr	r3, [pc, #132]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	4a20      	ldr	r2, [pc, #128]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005024:	4b1d      	ldr	r3, [pc, #116]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	4a1c      	ldr	r2, [pc, #112]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800502c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005030:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005034:	4a19      	ldr	r2, [pc, #100]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	f003 0301 	and.w	r3, r3, #1
 8005042:	2b00      	cmp	r3, #0
 8005044:	d016      	beq.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005046:	f7fd fc4f 	bl	80028e8 <HAL_GetTick>
 800504a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504c:	e00b      	b.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504e:	f7fd fc4b 	bl	80028e8 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f241 3288 	movw	r2, #5000	; 0x1388
 800505c:	4293      	cmp	r3, r2
 800505e:	d902      	bls.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	74fb      	strb	r3, [r7, #19]
            break;
 8005064:	e006      	b.n	8005074 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ec      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005074:	7cfb      	ldrb	r3, [r7, #19]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d10c      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800507a:	4b08      	ldr	r3, [pc, #32]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800508a:	4904      	ldr	r1, [pc, #16]	; (800509c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800508c:	4313      	orrs	r3, r2
 800508e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005092:	e009      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005094:	7cfb      	ldrb	r3, [r7, #19]
 8005096:	74bb      	strb	r3, [r7, #18]
 8005098:	e006      	b.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800509a:	bf00      	nop
 800509c:	40021000 	.word	0x40021000
 80050a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050a4:	7cfb      	ldrb	r3, [r7, #19]
 80050a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050a8:	7c7b      	ldrb	r3, [r7, #17]
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d105      	bne.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050ae:	4b9e      	ldr	r3, [pc, #632]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b2:	4a9d      	ldr	r2, [pc, #628]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0301 	and.w	r3, r3, #1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050c6:	4b98      	ldr	r3, [pc, #608]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f023 0203 	bic.w	r2, r3, #3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d4:	4994      	ldr	r1, [pc, #592]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 0302 	and.w	r3, r3, #2
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050e8:	4b8f      	ldr	r3, [pc, #572]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ee:	f023 020c 	bic.w	r2, r3, #12
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f6:	498c      	ldr	r1, [pc, #560]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 0304 	and.w	r3, r3, #4
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800510a:	4b87      	ldr	r3, [pc, #540]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005118:	4983      	ldr	r1, [pc, #524]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800512c:	4b7e      	ldr	r3, [pc, #504]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800513a:	497b      	ldr	r1, [pc, #492]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800514e:	4b76      	ldr	r3, [pc, #472]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515c:	4972      	ldr	r1, [pc, #456]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0320 	and.w	r3, r3, #32
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00a      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005170:	4b6d      	ldr	r3, [pc, #436]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800517e:	496a      	ldr	r1, [pc, #424]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00a      	beq.n	80051a8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005192:	4b65      	ldr	r3, [pc, #404]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005194:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005198:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a0:	4961      	ldr	r1, [pc, #388]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d00a      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051b4:	4b5c      	ldr	r3, [pc, #368]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051ba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c2:	4959      	ldr	r1, [pc, #356]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00a      	beq.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051d6:	4b54      	ldr	r3, [pc, #336]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051dc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051e4:	4950      	ldr	r1, [pc, #320]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d00a      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051f8:	4b4b      	ldr	r3, [pc, #300]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005206:	4948      	ldr	r1, [pc, #288]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005208:	4313      	orrs	r3, r2
 800520a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d00a      	beq.n	8005230 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800521a:	4b43      	ldr	r3, [pc, #268]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005220:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005228:	493f      	ldr	r1, [pc, #252]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522a:	4313      	orrs	r3, r2
 800522c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005238:	2b00      	cmp	r3, #0
 800523a:	d028      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800523c:	4b3a      	ldr	r3, [pc, #232]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800524a:	4937      	ldr	r1, [pc, #220]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005256:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800525a:	d106      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800525c:	4b32      	ldr	r3, [pc, #200]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	4a31      	ldr	r2, [pc, #196]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005266:	60d3      	str	r3, [r2, #12]
 8005268:	e011      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800526e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005272:	d10c      	bne.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	3304      	adds	r3, #4
 8005278:	2101      	movs	r1, #1
 800527a:	4618      	mov	r0, r3
 800527c:	f000 f8c8 	bl	8005410 <RCCEx_PLLSAI1_Config>
 8005280:	4603      	mov	r3, r0
 8005282:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005284:	7cfb      	ldrb	r3, [r7, #19]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800528a:	7cfb      	ldrb	r3, [r7, #19]
 800528c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d028      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800529a:	4b23      	ldr	r3, [pc, #140]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800529c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052a0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a8:	491f      	ldr	r1, [pc, #124]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052b8:	d106      	bne.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052ba:	4b1b      	ldr	r3, [pc, #108]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	4a1a      	ldr	r2, [pc, #104]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052c4:	60d3      	str	r3, [r2, #12]
 80052c6:	e011      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052d0:	d10c      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	3304      	adds	r3, #4
 80052d6:	2101      	movs	r1, #1
 80052d8:	4618      	mov	r0, r3
 80052da:	f000 f899 	bl	8005410 <RCCEx_PLLSAI1_Config>
 80052de:	4603      	mov	r3, r0
 80052e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052e2:	7cfb      	ldrb	r3, [r7, #19]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d001      	beq.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80052e8:	7cfb      	ldrb	r3, [r7, #19]
 80052ea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d02b      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052f8:	4b0b      	ldr	r3, [pc, #44]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005306:	4908      	ldr	r1, [pc, #32]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	4313      	orrs	r3, r2
 800530a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005312:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005316:	d109      	bne.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005318:	4b03      	ldr	r3, [pc, #12]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	4a02      	ldr	r2, [pc, #8]	; (8005328 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800531e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005322:	60d3      	str	r3, [r2, #12]
 8005324:	e014      	b.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005326:	bf00      	nop
 8005328:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005334:	d10c      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	3304      	adds	r3, #4
 800533a:	2101      	movs	r1, #1
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f867 	bl	8005410 <RCCEx_PLLSAI1_Config>
 8005342:	4603      	mov	r3, r0
 8005344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d001      	beq.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800534c:	7cfb      	ldrb	r3, [r7, #19]
 800534e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d02f      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800535c:	4b2b      	ldr	r3, [pc, #172]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800535e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005362:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800536a:	4928      	ldr	r1, [pc, #160]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800536c:	4313      	orrs	r3, r2
 800536e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800537a:	d10d      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	2102      	movs	r1, #2
 8005382:	4618      	mov	r0, r3
 8005384:	f000 f844 	bl	8005410 <RCCEx_PLLSAI1_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800538c:	7cfb      	ldrb	r3, [r7, #19]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d014      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005392:	7cfb      	ldrb	r3, [r7, #19]
 8005394:	74bb      	strb	r3, [r7, #18]
 8005396:	e011      	b.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800539c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053a0:	d10c      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	3320      	adds	r3, #32
 80053a6:	2102      	movs	r1, #2
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f925 	bl	80055f8 <RCCEx_PLLSAI2_Config>
 80053ae:	4603      	mov	r3, r0
 80053b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053b2:	7cfb      	ldrb	r3, [r7, #19]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053b8:	7cfb      	ldrb	r3, [r7, #19]
 80053ba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d00a      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80053c8:	4b10      	ldr	r3, [pc, #64]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053d6:	490d      	ldr	r1, [pc, #52]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00b      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053ea:	4b08      	ldr	r3, [pc, #32]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	4904      	ldr	r1, [pc, #16]	; (800540c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005402:	7cbb      	ldrb	r3, [r7, #18]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	40021000 	.word	0x40021000

08005410 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800541e:	4b75      	ldr	r3, [pc, #468]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	2b00      	cmp	r3, #0
 8005428:	d018      	beq.n	800545c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800542a:	4b72      	ldr	r3, [pc, #456]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f003 0203 	and.w	r2, r3, #3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	429a      	cmp	r2, r3
 8005438:	d10d      	bne.n	8005456 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
       ||
 800543e:	2b00      	cmp	r3, #0
 8005440:	d009      	beq.n	8005456 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005442:	4b6c      	ldr	r3, [pc, #432]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	091b      	lsrs	r3, r3, #4
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
       ||
 8005452:	429a      	cmp	r2, r3
 8005454:	d047      	beq.n	80054e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	73fb      	strb	r3, [r7, #15]
 800545a:	e044      	b.n	80054e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	2b03      	cmp	r3, #3
 8005462:	d018      	beq.n	8005496 <RCCEx_PLLSAI1_Config+0x86>
 8005464:	2b03      	cmp	r3, #3
 8005466:	d825      	bhi.n	80054b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005468:	2b01      	cmp	r3, #1
 800546a:	d002      	beq.n	8005472 <RCCEx_PLLSAI1_Config+0x62>
 800546c:	2b02      	cmp	r3, #2
 800546e:	d009      	beq.n	8005484 <RCCEx_PLLSAI1_Config+0x74>
 8005470:	e020      	b.n	80054b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005472:	4b60      	ldr	r3, [pc, #384]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d11d      	bne.n	80054ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005482:	e01a      	b.n	80054ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005484:	4b5b      	ldr	r3, [pc, #364]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800548c:	2b00      	cmp	r3, #0
 800548e:	d116      	bne.n	80054be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005494:	e013      	b.n	80054be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005496:	4b57      	ldr	r3, [pc, #348]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d10f      	bne.n	80054c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054a2:	4b54      	ldr	r3, [pc, #336]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d109      	bne.n	80054c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054b2:	e006      	b.n	80054c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e004      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054ba:	bf00      	nop
 80054bc:	e002      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054be:	bf00      	nop
 80054c0:	e000      	b.n	80054c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80054c4:	7bfb      	ldrb	r3, [r7, #15]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d10d      	bne.n	80054e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054ca:	4b4a      	ldr	r3, [pc, #296]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	3b01      	subs	r3, #1
 80054dc:	011b      	lsls	r3, r3, #4
 80054de:	430b      	orrs	r3, r1
 80054e0:	4944      	ldr	r1, [pc, #272]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d17d      	bne.n	80055e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054ec:	4b41      	ldr	r3, [pc, #260]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a40      	ldr	r2, [pc, #256]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054f8:	f7fd f9f6 	bl	80028e8 <HAL_GetTick>
 80054fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054fe:	e009      	b.n	8005514 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005500:	f7fd f9f2 	bl	80028e8 <HAL_GetTick>
 8005504:	4602      	mov	r2, r0
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	2b02      	cmp	r3, #2
 800550c:	d902      	bls.n	8005514 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	73fb      	strb	r3, [r7, #15]
        break;
 8005512:	e005      	b.n	8005520 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005514:	4b37      	ldr	r3, [pc, #220]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1ef      	bne.n	8005500 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d160      	bne.n	80055e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d111      	bne.n	8005550 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800552c:	4b31      	ldr	r3, [pc, #196]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005534:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005538:	687a      	ldr	r2, [r7, #4]
 800553a:	6892      	ldr	r2, [r2, #8]
 800553c:	0211      	lsls	r1, r2, #8
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	68d2      	ldr	r2, [r2, #12]
 8005542:	0912      	lsrs	r2, r2, #4
 8005544:	0452      	lsls	r2, r2, #17
 8005546:	430a      	orrs	r2, r1
 8005548:	492a      	ldr	r1, [pc, #168]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800554a:	4313      	orrs	r3, r2
 800554c:	610b      	str	r3, [r1, #16]
 800554e:	e027      	b.n	80055a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b01      	cmp	r3, #1
 8005554:	d112      	bne.n	800557c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005556:	4b27      	ldr	r3, [pc, #156]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005558:	691b      	ldr	r3, [r3, #16]
 800555a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800555e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005562:	687a      	ldr	r2, [r7, #4]
 8005564:	6892      	ldr	r2, [r2, #8]
 8005566:	0211      	lsls	r1, r2, #8
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6912      	ldr	r2, [r2, #16]
 800556c:	0852      	lsrs	r2, r2, #1
 800556e:	3a01      	subs	r2, #1
 8005570:	0552      	lsls	r2, r2, #21
 8005572:	430a      	orrs	r2, r1
 8005574:	491f      	ldr	r1, [pc, #124]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005576:	4313      	orrs	r3, r2
 8005578:	610b      	str	r3, [r1, #16]
 800557a:	e011      	b.n	80055a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800557c:	4b1d      	ldr	r3, [pc, #116]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005584:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	6892      	ldr	r2, [r2, #8]
 800558c:	0211      	lsls	r1, r2, #8
 800558e:	687a      	ldr	r2, [r7, #4]
 8005590:	6952      	ldr	r2, [r2, #20]
 8005592:	0852      	lsrs	r2, r2, #1
 8005594:	3a01      	subs	r2, #1
 8005596:	0652      	lsls	r2, r2, #25
 8005598:	430a      	orrs	r2, r1
 800559a:	4916      	ldr	r1, [pc, #88]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559c:	4313      	orrs	r3, r2
 800559e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055a0:	4b14      	ldr	r3, [pc, #80]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ac:	f7fd f99c 	bl	80028e8 <HAL_GetTick>
 80055b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055b2:	e009      	b.n	80055c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055b4:	f7fd f998 	bl	80028e8 <HAL_GetTick>
 80055b8:	4602      	mov	r2, r0
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d902      	bls.n	80055c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	73fb      	strb	r3, [r7, #15]
          break;
 80055c6:	e005      	b.n	80055d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055c8:	4b0a      	ldr	r3, [pc, #40]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d0ef      	beq.n	80055b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80055d4:	7bfb      	ldrb	r3, [r7, #15]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055dc:	691a      	ldr	r2, [r3, #16]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	4904      	ldr	r1, [pc, #16]	; (80055f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}
 80055f2:	bf00      	nop
 80055f4:	40021000 	.word	0x40021000

080055f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005606:	4b6a      	ldr	r3, [pc, #424]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f003 0303 	and.w	r3, r3, #3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d018      	beq.n	8005644 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005612:	4b67      	ldr	r3, [pc, #412]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005614:	68db      	ldr	r3, [r3, #12]
 8005616:	f003 0203 	and.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d10d      	bne.n	800563e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
       ||
 8005626:	2b00      	cmp	r3, #0
 8005628:	d009      	beq.n	800563e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800562a:	4b61      	ldr	r3, [pc, #388]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800562c:	68db      	ldr	r3, [r3, #12]
 800562e:	091b      	lsrs	r3, r3, #4
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	1c5a      	adds	r2, r3, #1
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
       ||
 800563a:	429a      	cmp	r2, r3
 800563c:	d047      	beq.n	80056ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
 8005642:	e044      	b.n	80056ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b03      	cmp	r3, #3
 800564a:	d018      	beq.n	800567e <RCCEx_PLLSAI2_Config+0x86>
 800564c:	2b03      	cmp	r3, #3
 800564e:	d825      	bhi.n	800569c <RCCEx_PLLSAI2_Config+0xa4>
 8005650:	2b01      	cmp	r3, #1
 8005652:	d002      	beq.n	800565a <RCCEx_PLLSAI2_Config+0x62>
 8005654:	2b02      	cmp	r3, #2
 8005656:	d009      	beq.n	800566c <RCCEx_PLLSAI2_Config+0x74>
 8005658:	e020      	b.n	800569c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800565a:	4b55      	ldr	r3, [pc, #340]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0302 	and.w	r3, r3, #2
 8005662:	2b00      	cmp	r3, #0
 8005664:	d11d      	bne.n	80056a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800566a:	e01a      	b.n	80056a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800566c:	4b50      	ldr	r3, [pc, #320]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005674:	2b00      	cmp	r3, #0
 8005676:	d116      	bne.n	80056a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800567c:	e013      	b.n	80056a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800567e:	4b4c      	ldr	r3, [pc, #304]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10f      	bne.n	80056aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800568a:	4b49      	ldr	r3, [pc, #292]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d109      	bne.n	80056aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800569a:	e006      	b.n	80056aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	73fb      	strb	r3, [r7, #15]
      break;
 80056a0:	e004      	b.n	80056ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056a2:	bf00      	nop
 80056a4:	e002      	b.n	80056ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056a6:	bf00      	nop
 80056a8:	e000      	b.n	80056ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d10d      	bne.n	80056ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056b2:	4b3f      	ldr	r3, [pc, #252]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6819      	ldr	r1, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	430b      	orrs	r3, r1
 80056c8:	4939      	ldr	r1, [pc, #228]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d167      	bne.n	80057a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056d4:	4b36      	ldr	r3, [pc, #216]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a35      	ldr	r2, [pc, #212]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e0:	f7fd f902 	bl	80028e8 <HAL_GetTick>
 80056e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056e6:	e009      	b.n	80056fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056e8:	f7fd f8fe 	bl	80028e8 <HAL_GetTick>
 80056ec:	4602      	mov	r2, r0
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	1ad3      	subs	r3, r2, r3
 80056f2:	2b02      	cmp	r3, #2
 80056f4:	d902      	bls.n	80056fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056f6:	2303      	movs	r3, #3
 80056f8:	73fb      	strb	r3, [r7, #15]
        break;
 80056fa:	e005      	b.n	8005708 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056fc:	4b2c      	ldr	r3, [pc, #176]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1ef      	bne.n	80056e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d14a      	bne.n	80057a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d111      	bne.n	8005738 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005714:	4b26      	ldr	r3, [pc, #152]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800571c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6892      	ldr	r2, [r2, #8]
 8005724:	0211      	lsls	r1, r2, #8
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68d2      	ldr	r2, [r2, #12]
 800572a:	0912      	lsrs	r2, r2, #4
 800572c:	0452      	lsls	r2, r2, #17
 800572e:	430a      	orrs	r2, r1
 8005730:	491f      	ldr	r1, [pc, #124]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005732:	4313      	orrs	r3, r2
 8005734:	614b      	str	r3, [r1, #20]
 8005736:	e011      	b.n	800575c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005738:	4b1d      	ldr	r3, [pc, #116]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005740:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005744:	687a      	ldr	r2, [r7, #4]
 8005746:	6892      	ldr	r2, [r2, #8]
 8005748:	0211      	lsls	r1, r2, #8
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6912      	ldr	r2, [r2, #16]
 800574e:	0852      	lsrs	r2, r2, #1
 8005750:	3a01      	subs	r2, #1
 8005752:	0652      	lsls	r2, r2, #25
 8005754:	430a      	orrs	r2, r1
 8005756:	4916      	ldr	r1, [pc, #88]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005758:	4313      	orrs	r3, r2
 800575a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800575c:	4b14      	ldr	r3, [pc, #80]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a13      	ldr	r2, [pc, #76]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005766:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005768:	f7fd f8be 	bl	80028e8 <HAL_GetTick>
 800576c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800576e:	e009      	b.n	8005784 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005770:	f7fd f8ba 	bl	80028e8 <HAL_GetTick>
 8005774:	4602      	mov	r2, r0
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	2b02      	cmp	r3, #2
 800577c:	d902      	bls.n	8005784 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800577e:	2303      	movs	r3, #3
 8005780:	73fb      	strb	r3, [r7, #15]
          break;
 8005782:	e005      	b.n	8005790 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005784:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d0ef      	beq.n	8005770 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005790:	7bfb      	ldrb	r3, [r7, #15]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d106      	bne.n	80057a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005796:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005798:	695a      	ldr	r2, [r3, #20]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	695b      	ldr	r3, [r3, #20]
 800579e:	4904      	ldr	r1, [pc, #16]	; (80057b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40021000 	.word	0x40021000

080057b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b084      	sub	sp, #16
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e095      	b.n	80058f2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d108      	bne.n	80057e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057d6:	d009      	beq.n	80057ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	61da      	str	r2, [r3, #28]
 80057de:	e005      	b.n	80057ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2200      	movs	r2, #0
 80057e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057f8:	b2db      	uxtb	r3, r3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d106      	bne.n	800580c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	f7fc fd4c 	bl	80022a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2202      	movs	r2, #2
 8005810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005822:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800582c:	d902      	bls.n	8005834 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e002      	b.n	800583a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005834:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005838:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68db      	ldr	r3, [r3, #12]
 800583e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005842:	d007      	beq.n	8005854 <HAL_SPI_Init+0xa0>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800584c:	d002      	beq.n	8005854 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005864:	431a      	orrs	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0302 	and.w	r3, r3, #2
 800586e:	431a      	orrs	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	695b      	ldr	r3, [r3, #20]
 8005874:	f003 0301 	and.w	r3, r3, #1
 8005878:	431a      	orrs	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	699b      	ldr	r3, [r3, #24]
 800587e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005882:	431a      	orrs	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	69db      	ldr	r3, [r3, #28]
 8005888:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005896:	ea42 0103 	orr.w	r1, r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	0c1b      	lsrs	r3, r3, #16
 80058b0:	f003 0204 	and.w	r2, r3, #4
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f003 0310 	and.w	r3, r3, #16
 80058bc:	431a      	orrs	r2, r3
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c2:	f003 0308 	and.w	r3, r3, #8
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058d0:	ea42 0103 	orr.w	r1, r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3710      	adds	r7, #16
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bd80      	pop	{r7, pc}

080058fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b088      	sub	sp, #32
 80058fe:	af00      	add	r7, sp, #0
 8005900:	60f8      	str	r0, [r7, #12]
 8005902:	60b9      	str	r1, [r7, #8]
 8005904:	603b      	str	r3, [r7, #0]
 8005906:	4613      	mov	r3, r2
 8005908:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800590a:	2300      	movs	r3, #0
 800590c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_SPI_Transmit+0x22>
 8005918:	2302      	movs	r3, #2
 800591a:	e158      	b.n	8005bce <HAL_SPI_Transmit+0x2d4>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005924:	f7fc ffe0 	bl	80028e8 <HAL_GetTick>
 8005928:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800592a:	88fb      	ldrh	r3, [r7, #6]
 800592c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005934:	b2db      	uxtb	r3, r3
 8005936:	2b01      	cmp	r3, #1
 8005938:	d002      	beq.n	8005940 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800593a:	2302      	movs	r3, #2
 800593c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800593e:	e13d      	b.n	8005bbc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d002      	beq.n	800594c <HAL_SPI_Transmit+0x52>
 8005946:	88fb      	ldrh	r3, [r7, #6]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d102      	bne.n	8005952 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005950:	e134      	b.n	8005bbc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2203      	movs	r2, #3
 8005956:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	88fa      	ldrh	r2, [r7, #6]
 800596a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2200      	movs	r2, #0
 800598c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800599c:	d10f      	bne.n	80059be <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c8:	2b40      	cmp	r3, #64	; 0x40
 80059ca:	d007      	beq.n	80059dc <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059e4:	d94b      	bls.n	8005a7e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_SPI_Transmit+0xfa>
 80059ee:	8afb      	ldrh	r3, [r7, #22]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d13e      	bne.n	8005a72 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f8:	881a      	ldrh	r2, [r3, #0]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a04:	1c9a      	adds	r2, r3, #2
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	3b01      	subs	r3, #1
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a18:	e02b      	b.n	8005a72 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	f003 0302 	and.w	r3, r3, #2
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d112      	bne.n	8005a4e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2c:	881a      	ldrh	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a38:	1c9a      	adds	r2, r3, #2
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a42:	b29b      	uxth	r3, r3
 8005a44:	3b01      	subs	r3, #1
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a4c:	e011      	b.n	8005a72 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4e:	f7fc ff4b 	bl	80028e8 <HAL_GetTick>
 8005a52:	4602      	mov	r2, r0
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	1ad3      	subs	r3, r2, r3
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d803      	bhi.n	8005a66 <HAL_SPI_Transmit+0x16c>
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a64:	d102      	bne.n	8005a6c <HAL_SPI_Transmit+0x172>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d102      	bne.n	8005a72 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005a70:	e0a4      	b.n	8005bbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1ce      	bne.n	8005a1a <HAL_SPI_Transmit+0x120>
 8005a7c:	e07c      	b.n	8005b78 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_SPI_Transmit+0x192>
 8005a86:	8afb      	ldrh	r3, [r7, #22]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d170      	bne.n	8005b6e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d912      	bls.n	8005abc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	881a      	ldrh	r2, [r3, #0]
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aa6:	1c9a      	adds	r2, r3, #2
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	3b02      	subs	r3, #2
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005aba:	e058      	b.n	8005b6e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	330c      	adds	r3, #12
 8005ac6:	7812      	ldrb	r2, [r2, #0]
 8005ac8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	1c5a      	adds	r2, r3, #1
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ae2:	e044      	b.n	8005b6e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	f003 0302 	and.w	r3, r3, #2
 8005aee:	2b02      	cmp	r3, #2
 8005af0:	d12b      	bne.n	8005b4a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d912      	bls.n	8005b22 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	881a      	ldrh	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b0c:	1c9a      	adds	r2, r3, #2
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b02      	subs	r3, #2
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b20:	e025      	b.n	8005b6e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	330c      	adds	r3, #12
 8005b2c:	7812      	ldrb	r2, [r2, #0]
 8005b2e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b48:	e011      	b.n	8005b6e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b4a:	f7fc fecd 	bl	80028e8 <HAL_GetTick>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	69bb      	ldr	r3, [r7, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	683a      	ldr	r2, [r7, #0]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d803      	bhi.n	8005b62 <HAL_SPI_Transmit+0x268>
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b60:	d102      	bne.n	8005b68 <HAL_SPI_Transmit+0x26e>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d102      	bne.n	8005b6e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005b6c:	e026      	b.n	8005bbc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1b5      	bne.n	8005ae4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	68f8      	ldr	r0, [r7, #12]
 8005b7e:	f001 f893 	bl	8006ca8 <SPI_EndRxTxTransaction>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d002      	beq.n	8005b8e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2220      	movs	r2, #32
 8005b8c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10a      	bne.n	8005bac <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b96:	2300      	movs	r3, #0
 8005b98:	613b      	str	r3, [r7, #16]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	613b      	str	r3, [r7, #16]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	613b      	str	r3, [r7, #16]
 8005baa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	77fb      	strb	r3, [r7, #31]
 8005bb8:	e000      	b.n	8005bbc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005bba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005bcc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b088      	sub	sp, #32
 8005bda:	af02      	add	r7, sp, #8
 8005bdc:	60f8      	str	r0, [r7, #12]
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	603b      	str	r3, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005bf2:	d112      	bne.n	8005c1a <HAL_SPI_Receive+0x44>
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10e      	bne.n	8005c1a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2204      	movs	r2, #4
 8005c00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c04:	88fa      	ldrh	r2, [r7, #6]
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	9300      	str	r3, [sp, #0]
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	68b9      	ldr	r1, [r7, #8]
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f910 	bl	8005e36 <HAL_SPI_TransmitReceive>
 8005c16:	4603      	mov	r3, r0
 8005c18:	e109      	b.n	8005e2e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d101      	bne.n	8005c28 <HAL_SPI_Receive+0x52>
 8005c24:	2302      	movs	r3, #2
 8005c26:	e102      	b.n	8005e2e <HAL_SPI_Receive+0x258>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c30:	f7fc fe5a 	bl	80028e8 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d002      	beq.n	8005c48 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8005c42:	2302      	movs	r3, #2
 8005c44:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c46:	e0e9      	b.n	8005e1c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <HAL_SPI_Receive+0x7e>
 8005c4e:	88fb      	ldrh	r3, [r7, #6]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d102      	bne.n	8005c5a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c58:	e0e0      	b.n	8005e1c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2204      	movs	r2, #4
 8005c5e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	68ba      	ldr	r2, [r7, #8]
 8005c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	88fa      	ldrh	r2, [r7, #6]
 8005c72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	88fa      	ldrh	r2, [r7, #6]
 8005c7a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2200      	movs	r2, #0
 8005c82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2200      	movs	r2, #0
 8005c88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ca4:	d908      	bls.n	8005cb8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cb4:	605a      	str	r2, [r3, #4]
 8005cb6:	e007      	b.n	8005cc8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685a      	ldr	r2, [r3, #4]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005cc6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cd0:	d10f      	bne.n	8005cf2 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005cf0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	2b40      	cmp	r3, #64	; 0x40
 8005cfe:	d007      	beq.n	8005d10 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	681a      	ldr	r2, [r3, #0]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d0e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d18:	d867      	bhi.n	8005dea <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d1a:	e030      	b.n	8005d7e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f003 0301 	and.w	r3, r3, #1
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d117      	bne.n	8005d5a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f103 020c 	add.w	r2, r3, #12
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	7812      	ldrb	r2, [r2, #0]
 8005d38:	b2d2      	uxtb	r2, r2
 8005d3a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	3b01      	subs	r3, #1
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005d58:	e011      	b.n	8005d7e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d5a:	f7fc fdc5 	bl	80028e8 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	693b      	ldr	r3, [r7, #16]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d803      	bhi.n	8005d72 <HAL_SPI_Receive+0x19c>
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d70:	d102      	bne.n	8005d78 <HAL_SPI_Receive+0x1a2>
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d102      	bne.n	8005d7e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005d78:	2303      	movs	r3, #3
 8005d7a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005d7c:	e04e      	b.n	8005e1c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d1c8      	bne.n	8005d1c <HAL_SPI_Receive+0x146>
 8005d8a:	e034      	b.n	8005df6 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	689b      	ldr	r3, [r3, #8]
 8005d92:	f003 0301 	and.w	r3, r3, #1
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d115      	bne.n	8005dc6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	68da      	ldr	r2, [r3, #12]
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da4:	b292      	uxth	r2, r2
 8005da6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dac:	1c9a      	adds	r2, r3, #2
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005dc4:	e011      	b.n	8005dea <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc6:	f7fc fd8f 	bl	80028e8 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d803      	bhi.n	8005dde <HAL_SPI_Receive+0x208>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d102      	bne.n	8005de4 <HAL_SPI_Receive+0x20e>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005de8:	e018      	b.n	8005e1c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d1ca      	bne.n	8005d8c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005df6:	693a      	ldr	r2, [r7, #16]
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	f000 fefc 	bl	8006bf8 <SPI_EndRxTransaction>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d002      	beq.n	8005e0c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	75fb      	strb	r3, [r7, #23]
 8005e18:	e000      	b.n	8005e1c <HAL_SPI_Receive+0x246>
  }

error :
 8005e1a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3718      	adds	r7, #24
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e36:	b580      	push	{r7, lr}
 8005e38:	b08a      	sub	sp, #40	; 0x28
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	60f8      	str	r0, [r7, #12]
 8005e3e:	60b9      	str	r1, [r7, #8]
 8005e40:	607a      	str	r2, [r7, #4]
 8005e42:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005e44:	2301      	movs	r3, #1
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d101      	bne.n	8005e5c <HAL_SPI_TransmitReceive+0x26>
 8005e58:	2302      	movs	r3, #2
 8005e5a:	e1fb      	b.n	8006254 <HAL_SPI_TransmitReceive+0x41e>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e64:	f7fc fd40 	bl	80028e8 <HAL_GetTick>
 8005e68:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005e70:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005e78:	887b      	ldrh	r3, [r7, #2]
 8005e7a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005e7c:	887b      	ldrh	r3, [r7, #2]
 8005e7e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e80:	7efb      	ldrb	r3, [r7, #27]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d00e      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x6e>
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8c:	d106      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	689b      	ldr	r3, [r3, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d102      	bne.n	8005e9c <HAL_SPI_TransmitReceive+0x66>
 8005e96:	7efb      	ldrb	r3, [r7, #27]
 8005e98:	2b04      	cmp	r3, #4
 8005e9a:	d003      	beq.n	8005ea4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ea2:	e1cd      	b.n	8006240 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d005      	beq.n	8005eb6 <HAL_SPI_TransmitReceive+0x80>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_SPI_TransmitReceive+0x80>
 8005eb0:	887b      	ldrh	r3, [r7, #2]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d103      	bne.n	8005ebe <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005ebc:	e1c0      	b.n	8006240 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b04      	cmp	r3, #4
 8005ec8:	d003      	beq.n	8005ed2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2205      	movs	r2, #5
 8005ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	687a      	ldr	r2, [r7, #4]
 8005edc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	887a      	ldrh	r2, [r7, #2]
 8005ee2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	887a      	ldrh	r2, [r7, #2]
 8005eea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	887a      	ldrh	r2, [r7, #2]
 8005ef8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	887a      	ldrh	r2, [r7, #2]
 8005efe:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f14:	d802      	bhi.n	8005f1c <HAL_SPI_TransmitReceive+0xe6>
 8005f16:	8a3b      	ldrh	r3, [r7, #16]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d908      	bls.n	8005f2e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f2a:	605a      	str	r2, [r3, #4]
 8005f2c:	e007      	b.n	8005f3e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685a      	ldr	r2, [r3, #4]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f3c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f48:	2b40      	cmp	r3, #64	; 0x40
 8005f4a:	d007      	beq.n	8005f5c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f64:	d97c      	bls.n	8006060 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d002      	beq.n	8005f74 <HAL_SPI_TransmitReceive+0x13e>
 8005f6e:	8a7b      	ldrh	r3, [r7, #18]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d169      	bne.n	8006048 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	1c9a      	adds	r2, r3, #2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b01      	subs	r3, #1
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f98:	e056      	b.n	8006048 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b02      	cmp	r3, #2
 8005fa6:	d11b      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x1aa>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d016      	beq.n	8005fe0 <HAL_SPI_TransmitReceive+0x1aa>
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb4:	2b01      	cmp	r3, #1
 8005fb6:	d113      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fbc:	881a      	ldrh	r2, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc8:	1c9a      	adds	r2, r3, #2
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fd2:	b29b      	uxth	r3, r3
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	b29a      	uxth	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	f003 0301 	and.w	r3, r3, #1
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d11c      	bne.n	8006028 <HAL_SPI_TransmitReceive+0x1f2>
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d016      	beq.n	8006028 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006004:	b292      	uxth	r2, r2
 8006006:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600c:	1c9a      	adds	r2, r3, #2
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006018:	b29b      	uxth	r3, r3
 800601a:	3b01      	subs	r3, #1
 800601c:	b29a      	uxth	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006024:	2301      	movs	r3, #1
 8006026:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006028:	f7fc fc5e 	bl	80028e8 <HAL_GetTick>
 800602c:	4602      	mov	r2, r0
 800602e:	69fb      	ldr	r3, [r7, #28]
 8006030:	1ad3      	subs	r3, r2, r3
 8006032:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006034:	429a      	cmp	r2, r3
 8006036:	d807      	bhi.n	8006048 <HAL_SPI_TransmitReceive+0x212>
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800603e:	d003      	beq.n	8006048 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006046:	e0fb      	b.n	8006240 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1a3      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x164>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d19d      	bne.n	8005f9a <HAL_SPI_TransmitReceive+0x164>
 800605e:	e0df      	b.n	8006220 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d003      	beq.n	8006070 <HAL_SPI_TransmitReceive+0x23a>
 8006068:	8a7b      	ldrh	r3, [r7, #18]
 800606a:	2b01      	cmp	r3, #1
 800606c:	f040 80cb 	bne.w	8006206 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b01      	cmp	r3, #1
 8006078:	d912      	bls.n	80060a0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800607e:	881a      	ldrh	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608a:	1c9a      	adds	r2, r3, #2
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006094:	b29b      	uxth	r3, r3
 8006096:	3b02      	subs	r3, #2
 8006098:	b29a      	uxth	r2, r3
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800609e:	e0b2      	b.n	8006206 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	330c      	adds	r3, #12
 80060aa:	7812      	ldrb	r2, [r2, #0]
 80060ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b2:	1c5a      	adds	r2, r3, #1
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060bc:	b29b      	uxth	r3, r3
 80060be:	3b01      	subs	r3, #1
 80060c0:	b29a      	uxth	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060c6:	e09e      	b.n	8006206 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d134      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x30a>
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060da:	b29b      	uxth	r3, r3
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d02f      	beq.n	8006140 <HAL_SPI_TransmitReceive+0x30a>
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d12c      	bne.n	8006140 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d912      	bls.n	8006116 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f4:	881a      	ldrh	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	1c9a      	adds	r2, r3, #2
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800610a:	b29b      	uxth	r3, r3
 800610c:	3b02      	subs	r3, #2
 800610e:	b29a      	uxth	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006114:	e012      	b.n	800613c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	330c      	adds	r3, #12
 8006120:	7812      	ldrb	r2, [r2, #0]
 8006122:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006132:	b29b      	uxth	r3, r3
 8006134:	3b01      	subs	r3, #1
 8006136:	b29a      	uxth	r2, r3
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800613c:	2300      	movs	r3, #0
 800613e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	2b01      	cmp	r3, #1
 800614c:	d148      	bne.n	80061e0 <HAL_SPI_TransmitReceive+0x3aa>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006154:	b29b      	uxth	r3, r3
 8006156:	2b00      	cmp	r3, #0
 8006158:	d042      	beq.n	80061e0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006160:	b29b      	uxth	r3, r3
 8006162:	2b01      	cmp	r3, #1
 8006164:	d923      	bls.n	80061ae <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	68da      	ldr	r2, [r3, #12]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006170:	b292      	uxth	r2, r2
 8006172:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006178:	1c9a      	adds	r2, r3, #2
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006184:	b29b      	uxth	r3, r3
 8006186:	3b02      	subs	r3, #2
 8006188:	b29a      	uxth	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006196:	b29b      	uxth	r3, r3
 8006198:	2b01      	cmp	r3, #1
 800619a:	d81f      	bhi.n	80061dc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80061aa:	605a      	str	r2, [r3, #4]
 80061ac:	e016      	b.n	80061dc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f103 020c 	add.w	r2, r3, #12
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	7812      	ldrb	r2, [r2, #0]
 80061bc:	b2d2      	uxtb	r2, r2
 80061be:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	3b01      	subs	r3, #1
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80061dc:	2301      	movs	r3, #1
 80061de:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80061e0:	f7fc fb82 	bl	80028e8 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d803      	bhi.n	80061f8 <HAL_SPI_TransmitReceive+0x3c2>
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061f6:	d102      	bne.n	80061fe <HAL_SPI_TransmitReceive+0x3c8>
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d103      	bne.n	8006206 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006204:	e01c      	b.n	8006240 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800620a:	b29b      	uxth	r3, r3
 800620c:	2b00      	cmp	r3, #0
 800620e:	f47f af5b 	bne.w	80060c8 <HAL_SPI_TransmitReceive+0x292>
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	f47f af54 	bne.w	80060c8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006220:	69fa      	ldr	r2, [r7, #28]
 8006222:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006224:	68f8      	ldr	r0, [r7, #12]
 8006226:	f000 fd3f 	bl	8006ca8 <SPI_EndRxTxTransaction>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d006      	beq.n	800623e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006230:	2301      	movs	r3, #1
 8006232:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2220      	movs	r2, #32
 800623a:	661a      	str	r2, [r3, #96]	; 0x60
 800623c:	e000      	b.n	8006240 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800623e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006250:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006254:	4618      	mov	r0, r3
 8006256:	3728      	adds	r7, #40	; 0x28
 8006258:	46bd      	mov	sp, r7
 800625a:	bd80      	pop	{r7, pc}

0800625c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	60b9      	str	r1, [r7, #8]
 8006266:	4613      	mov	r3, r2
 8006268:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800626a:	2300      	movs	r3, #0
 800626c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d110      	bne.n	8006298 <HAL_SPI_Receive_DMA+0x3c>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800627e:	d10b      	bne.n	8006298 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	2204      	movs	r2, #4
 8006284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	68ba      	ldr	r2, [r7, #8]
 800628c:	68b9      	ldr	r1, [r7, #8]
 800628e:	68f8      	ldr	r0, [r7, #12]
 8006290:	f000 f908 	bl	80064a4 <HAL_SPI_TransmitReceive_DMA>
 8006294:	4603      	mov	r3, r0
 8006296:	e0fb      	b.n	8006490 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d101      	bne.n	80062a6 <HAL_SPI_Receive_DMA+0x4a>
 80062a2:	2302      	movs	r3, #2
 80062a4:	e0f4      	b.n	8006490 <HAL_SPI_Receive_DMA+0x234>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2201      	movs	r2, #1
 80062aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d002      	beq.n	80062c0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 80062ba:	2302      	movs	r3, #2
 80062bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062be:	e0e2      	b.n	8006486 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <HAL_SPI_Receive_DMA+0x70>
 80062c6:	88fb      	ldrh	r3, [r7, #6]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80062d0:	e0d9      	b.n	8006486 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2204      	movs	r2, #4
 80062d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	88fa      	ldrh	r2, [r7, #6]
 80062ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	88fa      	ldrh	r2, [r7, #6]
 80062f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	2200      	movs	r2, #0
 80062fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2200      	movs	r2, #0
 8006306:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2200      	movs	r2, #0
 800630c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006316:	d10f      	bne.n	8006338 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006326:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006336:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006346:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006350:	d908      	bls.n	8006364 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	e042      	b.n	80063ea <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006372:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006378:	699b      	ldr	r3, [r3, #24]
 800637a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800637e:	d134      	bne.n	80063ea <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685a      	ldr	r2, [r3, #4]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800638e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006396:	b29b      	uxth	r3, r3
 8006398:	f003 0301 	and.w	r3, r3, #1
 800639c:	2b00      	cmp	r3, #0
 800639e:	d111      	bne.n	80063c4 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063ae:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	085b      	lsrs	r3, r3, #1
 80063ba:	b29a      	uxth	r2, r3
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063c2:	e012      	b.n	80063ea <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063d2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063da:	b29b      	uxth	r3, r3
 80063dc:	085b      	lsrs	r3, r3, #1
 80063de:	b29b      	uxth	r3, r3
 80063e0:	3301      	adds	r3, #1
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ee:	4a2a      	ldr	r2, [pc, #168]	; (8006498 <HAL_SPI_Receive_DMA+0x23c>)
 80063f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f6:	4a29      	ldr	r2, [pc, #164]	; (800649c <HAL_SPI_Receive_DMA+0x240>)
 80063f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fe:	4a28      	ldr	r2, [pc, #160]	; (80064a0 <HAL_SPI_Receive_DMA+0x244>)
 8006400:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006406:	2200      	movs	r2, #0
 8006408:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	330c      	adds	r3, #12
 8006414:	4619      	mov	r1, r3
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006422:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006424:	f7fc fc5a 	bl	8002cdc <HAL_DMA_Start_IT>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00c      	beq.n	8006448 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006432:	f043 0210 	orr.w	r2, r3, #16
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006446:	e01e      	b.n	8006486 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006452:	2b40      	cmp	r3, #64	; 0x40
 8006454:	d007      	beq.n	8006466 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006464:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f042 0220 	orr.w	r2, r2, #32
 8006474:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800648e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}
 8006498:	08006945 	.word	0x08006945
 800649c:	0800680d 	.word	0x0800680d
 80064a0:	0800697d 	.word	0x0800697d

080064a4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b086      	sub	sp, #24
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	607a      	str	r2, [r7, #4]
 80064b0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80064b2:	2300      	movs	r3, #0
 80064b4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d101      	bne.n	80064c4 <HAL_SPI_TransmitReceive_DMA+0x20>
 80064c0:	2302      	movs	r3, #2
 80064c2:	e16c      	b.n	800679e <HAL_SPI_TransmitReceive_DMA+0x2fa>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064d2:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80064da:	7dbb      	ldrb	r3, [r7, #22]
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d00d      	beq.n	80064fc <HAL_SPI_TransmitReceive_DMA+0x58>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80064e6:	d106      	bne.n	80064f6 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	689b      	ldr	r3, [r3, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d102      	bne.n	80064f6 <HAL_SPI_TransmitReceive_DMA+0x52>
 80064f0:	7dbb      	ldrb	r3, [r7, #22]
 80064f2:	2b04      	cmp	r3, #4
 80064f4:	d002      	beq.n	80064fc <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
 80064f8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80064fa:	e14b      	b.n	8006794 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d002      	beq.n	800650e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006508:	887b      	ldrh	r3, [r7, #2]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d102      	bne.n	8006514 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006512:	e13f      	b.n	8006794 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b04      	cmp	r3, #4
 800651e:	d003      	beq.n	8006528 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2205      	movs	r2, #5
 8006524:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	887a      	ldrh	r2, [r7, #2]
 8006538:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	887a      	ldrh	r2, [r7, #2]
 800653e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	887a      	ldrh	r2, [r7, #2]
 800654a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	887a      	ldrh	r2, [r7, #2]
 8006552:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	2200      	movs	r2, #0
 800655a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2200      	movs	r2, #0
 8006560:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 8006570:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800657a:	d908      	bls.n	800658e <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685a      	ldr	r2, [r3, #4]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800658a:	605a      	str	r2, [r3, #4]
 800658c:	e06f      	b.n	800666e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800659c:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065a8:	d126      	bne.n	80065f8 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80065ae:	f003 0301 	and.w	r3, r3, #1
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d10f      	bne.n	80065d6 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80065c4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ca:	b29b      	uxth	r3, r3
 80065cc:	085b      	lsrs	r3, r3, #1
 80065ce:	b29a      	uxth	r2, r3
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d4:	e010      	b.n	80065f8 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685a      	ldr	r2, [r3, #4]
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80065e4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	085b      	lsrs	r3, r3, #1
 80065ee:	b29b      	uxth	r3, r3
 80065f0:	3301      	adds	r3, #1
 80065f2:	b29a      	uxth	r2, r3
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006602:	d134      	bne.n	800666e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006612:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800661a:	b29b      	uxth	r3, r3
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d111      	bne.n	8006648 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006632:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800663a:	b29b      	uxth	r3, r3
 800663c:	085b      	lsrs	r3, r3, #1
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006646:	e012      	b.n	800666e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006656:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800665e:	b29b      	uxth	r3, r3
 8006660:	085b      	lsrs	r3, r3, #1
 8006662:	b29b      	uxth	r3, r3
 8006664:	3301      	adds	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b04      	cmp	r3, #4
 8006678:	d108      	bne.n	800668c <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800667e:	4a4a      	ldr	r2, [pc, #296]	; (80067a8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006680:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006686:	4a49      	ldr	r2, [pc, #292]	; (80067ac <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006688:	62da      	str	r2, [r3, #44]	; 0x2c
 800668a:	e007      	b.n	800669c <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006690:	4a47      	ldr	r2, [pc, #284]	; (80067b0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006692:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006698:	4a46      	ldr	r2, [pc, #280]	; (80067b4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a0:	4a45      	ldr	r2, [pc, #276]	; (80067b8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 80066a2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a8:	2200      	movs	r2, #0
 80066aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6d98      	ldr	r0, [r3, #88]	; 0x58
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	4619      	mov	r1, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066bc:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066c4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80066c6:	f7fc fb09 	bl	8002cdc <HAL_DMA_Start_IT>
 80066ca:	4603      	mov	r3, r0
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00c      	beq.n	80066ea <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d4:	f043 0210 	orr.w	r2, r3, #16
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2201      	movs	r2, #1
 80066e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80066e8:	e054      	b.n	8006794 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	685a      	ldr	r2, [r3, #4]
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f042 0201 	orr.w	r2, r2, #1
 80066f8:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80066fe:	2200      	movs	r2, #0
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006706:	2200      	movs	r2, #0
 8006708:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800670e:	2200      	movs	r2, #0
 8006710:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006716:	2200      	movs	r2, #0
 8006718:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	4619      	mov	r1, r3
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	330c      	adds	r3, #12
 800672a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006730:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006732:	f7fc fad3 	bl	8002cdc <HAL_DMA_Start_IT>
 8006736:	4603      	mov	r3, r0
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00c      	beq.n	8006756 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006740:	f043 0210 	orr.w	r2, r3, #16
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006748:	2301      	movs	r3, #1
 800674a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2201      	movs	r2, #1
 8006750:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006754:	e01e      	b.n	8006794 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d007      	beq.n	8006774 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006772:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	685a      	ldr	r2, [r3, #4]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f042 0220 	orr.w	r2, r2, #32
 8006782:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685a      	ldr	r2, [r3, #4]
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f042 0202 	orr.w	r2, r2, #2
 8006792:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800679c:	7dfb      	ldrb	r3, [r7, #23]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	08006945 	.word	0x08006945
 80067ac:	0800680d 	.word	0x0800680d
 80067b0:	08006961 	.word	0x08006961
 80067b4:	080068b5 	.word	0x080068b5
 80067b8:	0800697d 	.word	0x0800697d

080067bc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067bc:	b480      	push	{r7}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr

080067d0 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80067d8:	bf00      	nop
 80067da:	370c      	adds	r7, #12
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr

080067e4 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80067ec:	bf00      	nop
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067f8:	b480      	push	{r7}
 80067fa:	b083      	sub	sp, #12
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006800:	bf00      	nop
 8006802:	370c      	adds	r7, #12
 8006804:	46bd      	mov	sp, r7
 8006806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680a:	4770      	bx	lr

0800680c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006818:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800681a:	f7fc f865 	bl	80028e8 <HAL_GetTick>
 800681e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0320 	and.w	r3, r3, #32
 800682a:	2b20      	cmp	r3, #32
 800682c:	d03c      	beq.n	80068a8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	685a      	ldr	r2, [r3, #4]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0220 	bic.w	r2, r2, #32
 800683c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10d      	bne.n	8006862 <SPI_DMAReceiveCplt+0x56>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800684e:	d108      	bne.n	8006862 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	685a      	ldr	r2, [r3, #4]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f022 0203 	bic.w	r2, r2, #3
 800685e:	605a      	str	r2, [r3, #4]
 8006860:	e007      	b.n	8006872 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685a      	ldr	r2, [r3, #4]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f022 0201 	bic.w	r2, r2, #1
 8006870:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006872:	68ba      	ldr	r2, [r7, #8]
 8006874:	2164      	movs	r1, #100	; 0x64
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f9be 	bl	8006bf8 <SPI_EndRxTransaction>
 800687c:	4603      	mov	r3, r0
 800687e:	2b00      	cmp	r3, #0
 8006880:	d002      	beq.n	8006888 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2200      	movs	r2, #0
 800688c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068a0:	68f8      	ldr	r0, [r7, #12]
 80068a2:	f7ff ffa9 	bl	80067f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068a6:	e002      	b.n	80068ae <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80068a8:	68f8      	ldr	r0, [r7, #12]
 80068aa:	f7fb f8ff 	bl	8001aac <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80068c2:	f7fc f811 	bl	80028e8 <HAL_GetTick>
 80068c6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0320 	and.w	r3, r3, #32
 80068d2:	2b20      	cmp	r3, #32
 80068d4:	d030      	beq.n	8006938 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685a      	ldr	r2, [r3, #4]
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f022 0220 	bic.w	r2, r2, #32
 80068e4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80068e6:	68ba      	ldr	r2, [r7, #8]
 80068e8:	2164      	movs	r1, #100	; 0x64
 80068ea:	68f8      	ldr	r0, [r7, #12]
 80068ec:	f000 f9dc 	bl	8006ca8 <SPI_EndRxTxTransaction>
 80068f0:	4603      	mov	r3, r0
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d005      	beq.n	8006902 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068fa:	f043 0220 	orr.w	r2, r3, #32
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0203 	bic.w	r2, r2, #3
 8006910:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2200      	movs	r2, #0
 8006916:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2200      	movs	r2, #0
 800691c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2201      	movs	r2, #1
 8006924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800692c:	2b00      	cmp	r3, #0
 800692e:	d003      	beq.n	8006938 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff61 	bl	80067f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006936:	e002      	b.n	800693e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f7ff ff3f 	bl	80067bc <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006950:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff ff3c 	bl	80067d0 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006958:	bf00      	nop
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}

08006960 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	b084      	sub	sp, #16
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800696c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800696e:	68f8      	ldr	r0, [r7, #12]
 8006970:	f7ff ff38 	bl	80067e4 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006974:	bf00      	nop
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}

0800697c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006988:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	685a      	ldr	r2, [r3, #4]
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f022 0203 	bic.w	r2, r2, #3
 8006998:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800699e:	f043 0210 	orr.w	r2, r3, #16
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2201      	movs	r2, #1
 80069aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f7ff ff22 	bl	80067f8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80069b4:	bf00      	nop
 80069b6:	3710      	adds	r7, #16
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	4613      	mov	r3, r2
 80069ca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80069cc:	f7fb ff8c 	bl	80028e8 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069d4:	1a9b      	subs	r3, r3, r2
 80069d6:	683a      	ldr	r2, [r7, #0]
 80069d8:	4413      	add	r3, r2
 80069da:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80069dc:	f7fb ff84 	bl	80028e8 <HAL_GetTick>
 80069e0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80069e2:	4b39      	ldr	r3, [pc, #228]	; (8006ac8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	015b      	lsls	r3, r3, #5
 80069e8:	0d1b      	lsrs	r3, r3, #20
 80069ea:	69fa      	ldr	r2, [r7, #28]
 80069ec:	fb02 f303 	mul.w	r3, r2, r3
 80069f0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069f2:	e054      	b.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069fa:	d050      	beq.n	8006a9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80069fc:	f7fb ff74 	bl	80028e8 <HAL_GetTick>
 8006a00:	4602      	mov	r2, r0
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	1ad3      	subs	r3, r2, r3
 8006a06:	69fa      	ldr	r2, [r7, #28]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d902      	bls.n	8006a12 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d13d      	bne.n	8006a8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a2a:	d111      	bne.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a34:	d004      	beq.n	8006a40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	689b      	ldr	r3, [r3, #8]
 8006a3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a3e:	d107      	bne.n	8006a50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a58:	d10f      	bne.n	8006a7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a68:	601a      	str	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006a8a:	2303      	movs	r3, #3
 8006a8c:	e017      	b.n	8006abe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d101      	bne.n	8006a98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006a94:	2300      	movs	r3, #0
 8006a96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	4013      	ands	r3, r2
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	bf0c      	ite	eq
 8006aae:	2301      	moveq	r3, #1
 8006ab0:	2300      	movne	r3, #0
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	79fb      	ldrb	r3, [r7, #7]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d19b      	bne.n	80069f4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006abc:	2300      	movs	r3, #0
}
 8006abe:	4618      	mov	r0, r3
 8006ac0:	3720      	adds	r7, #32
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	20000000 	.word	0x20000000

08006acc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b08a      	sub	sp, #40	; 0x28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006ade:	f7fb ff03 	bl	80028e8 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	1a9b      	subs	r3, r3, r2
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	4413      	add	r3, r2
 8006aec:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006aee:	f7fb fefb 	bl	80028e8 <HAL_GetTick>
 8006af2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	330c      	adds	r3, #12
 8006afa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006afc:	4b3d      	ldr	r3, [pc, #244]	; (8006bf4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	4613      	mov	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	4413      	add	r3, r2
 8006b06:	00da      	lsls	r2, r3, #3
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	0d1b      	lsrs	r3, r3, #20
 8006b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b0e:	fb02 f303 	mul.w	r3, r2, r3
 8006b12:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006b14:	e060      	b.n	8006bd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006b1c:	d107      	bne.n	8006b2e <SPI_WaitFifoStateUntilTimeout+0x62>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006b24:	69fb      	ldr	r3, [r7, #28]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006b2c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b34:	d050      	beq.n	8006bd8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006b36:	f7fb fed7 	bl	80028e8 <HAL_GetTick>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	1ad3      	subs	r3, r2, r3
 8006b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d902      	bls.n	8006b4c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d13d      	bne.n	8006bc8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685a      	ldr	r2, [r3, #4]
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006b5a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b64:	d111      	bne.n	8006b8a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b6e:	d004      	beq.n	8006b7a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b78:	d107      	bne.n	8006b8a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b88:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006b92:	d10f      	bne.n	8006bb4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ba2:	601a      	str	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bb2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e010      	b.n	8006bea <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d101      	bne.n	8006bd2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	3b01      	subs	r3, #1
 8006bd6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689a      	ldr	r2, [r3, #8]
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	4013      	ands	r3, r2
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d196      	bne.n	8006b16 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3728      	adds	r7, #40	; 0x28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
 8006bf2:	bf00      	nop
 8006bf4:	20000000 	.word	0x20000000

08006bf8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af02      	add	r7, sp, #8
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c0c:	d111      	bne.n	8006c32 <SPI_EndRxTransaction+0x3a>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	689b      	ldr	r3, [r3, #8]
 8006c12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c16:	d004      	beq.n	8006c22 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c20:	d107      	bne.n	8006c32 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	681a      	ldr	r2, [r3, #0]
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c30:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	2180      	movs	r1, #128	; 0x80
 8006c3c:	68f8      	ldr	r0, [r7, #12]
 8006c3e:	f7ff febd 	bl	80069bc <SPI_WaitFlagStateUntilTimeout>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d007      	beq.n	8006c58 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c4c:	f043 0220 	orr.w	r2, r3, #32
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006c54:	2303      	movs	r3, #3
 8006c56:	e023      	b.n	8006ca0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	685b      	ldr	r3, [r3, #4]
 8006c5c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c60:	d11d      	bne.n	8006c9e <SPI_EndRxTransaction+0xa6>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6a:	d004      	beq.n	8006c76 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c74:	d113      	bne.n	8006c9e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	9300      	str	r3, [sp, #0]
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f7ff ff22 	bl	8006acc <SPI_WaitFifoStateUntilTimeout>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d007      	beq.n	8006c9e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c92:	f043 0220 	orr.w	r2, r3, #32
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e000      	b.n	8006ca0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006c9e:	2300      	movs	r3, #0
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}

08006ca8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b086      	sub	sp, #24
 8006cac:	af02      	add	r7, sp, #8
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006cc0:	68f8      	ldr	r0, [r7, #12]
 8006cc2:	f7ff ff03 	bl	8006acc <SPI_WaitFifoStateUntilTimeout>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cd0:	f043 0220 	orr.w	r2, r3, #32
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cd8:	2303      	movs	r3, #3
 8006cda:	e027      	b.n	8006d2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	9300      	str	r3, [sp, #0]
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	2180      	movs	r1, #128	; 0x80
 8006ce6:	68f8      	ldr	r0, [r7, #12]
 8006ce8:	f7ff fe68 	bl	80069bc <SPI_WaitFlagStateUntilTimeout>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d007      	beq.n	8006d02 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cf6:	f043 0220 	orr.w	r2, r3, #32
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e014      	b.n	8006d2c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7ff fedc 	bl	8006acc <SPI_WaitFifoStateUntilTimeout>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d007      	beq.n	8006d2a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d1e:	f043 0220 	orr.w	r2, r3, #32
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e000      	b.n	8006d2c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3710      	adds	r7, #16
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b082      	sub	sp, #8
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d101      	bne.n	8006d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e049      	b.n	8006dda <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d106      	bne.n	8006d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f7fb fb3e 	bl	80023dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2202      	movs	r2, #2
 8006d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	4619      	mov	r1, r3
 8006d72:	4610      	mov	r0, r2
 8006d74:	f000 fb1e 	bl	80073b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2201      	movs	r2, #1
 8006d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
	...

08006de4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b085      	sub	sp, #20
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d001      	beq.n	8006dfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e047      	b.n	8006e8c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a23      	ldr	r2, [pc, #140]	; (8006e98 <HAL_TIM_Base_Start+0xb4>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d01d      	beq.n	8006e4a <HAL_TIM_Base_Start+0x66>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e16:	d018      	beq.n	8006e4a <HAL_TIM_Base_Start+0x66>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a1f      	ldr	r2, [pc, #124]	; (8006e9c <HAL_TIM_Base_Start+0xb8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d013      	beq.n	8006e4a <HAL_TIM_Base_Start+0x66>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a1e      	ldr	r2, [pc, #120]	; (8006ea0 <HAL_TIM_Base_Start+0xbc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d00e      	beq.n	8006e4a <HAL_TIM_Base_Start+0x66>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a1c      	ldr	r2, [pc, #112]	; (8006ea4 <HAL_TIM_Base_Start+0xc0>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d009      	beq.n	8006e4a <HAL_TIM_Base_Start+0x66>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a1b      	ldr	r2, [pc, #108]	; (8006ea8 <HAL_TIM_Base_Start+0xc4>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d004      	beq.n	8006e4a <HAL_TIM_Base_Start+0x66>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a19      	ldr	r2, [pc, #100]	; (8006eac <HAL_TIM_Base_Start+0xc8>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d115      	bne.n	8006e76 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689a      	ldr	r2, [r3, #8]
 8006e50:	4b17      	ldr	r3, [pc, #92]	; (8006eb0 <HAL_TIM_Base_Start+0xcc>)
 8006e52:	4013      	ands	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2b06      	cmp	r3, #6
 8006e5a:	d015      	beq.n	8006e88 <HAL_TIM_Base_Start+0xa4>
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e62:	d011      	beq.n	8006e88 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f042 0201 	orr.w	r2, r2, #1
 8006e72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e74:	e008      	b.n	8006e88 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f042 0201 	orr.w	r2, r2, #1
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e000      	b.n	8006e8a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e88:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr
 8006e98:	40012c00 	.word	0x40012c00
 8006e9c:	40000400 	.word	0x40000400
 8006ea0:	40000800 	.word	0x40000800
 8006ea4:	40000c00 	.word	0x40000c00
 8006ea8:	40013400 	.word	0x40013400
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	00010007 	.word	0x00010007

08006eb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	d001      	beq.n	8006ecc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e04f      	b.n	8006f6c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f042 0201 	orr.w	r2, r2, #1
 8006ee2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a23      	ldr	r2, [pc, #140]	; (8006f78 <HAL_TIM_Base_Start_IT+0xc4>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d01d      	beq.n	8006f2a <HAL_TIM_Base_Start_IT+0x76>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ef6:	d018      	beq.n	8006f2a <HAL_TIM_Base_Start_IT+0x76>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a1f      	ldr	r2, [pc, #124]	; (8006f7c <HAL_TIM_Base_Start_IT+0xc8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d013      	beq.n	8006f2a <HAL_TIM_Base_Start_IT+0x76>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a1e      	ldr	r2, [pc, #120]	; (8006f80 <HAL_TIM_Base_Start_IT+0xcc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d00e      	beq.n	8006f2a <HAL_TIM_Base_Start_IT+0x76>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	4a1c      	ldr	r2, [pc, #112]	; (8006f84 <HAL_TIM_Base_Start_IT+0xd0>)
 8006f12:	4293      	cmp	r3, r2
 8006f14:	d009      	beq.n	8006f2a <HAL_TIM_Base_Start_IT+0x76>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4a1b      	ldr	r2, [pc, #108]	; (8006f88 <HAL_TIM_Base_Start_IT+0xd4>)
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d004      	beq.n	8006f2a <HAL_TIM_Base_Start_IT+0x76>
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a19      	ldr	r2, [pc, #100]	; (8006f8c <HAL_TIM_Base_Start_IT+0xd8>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d115      	bne.n	8006f56 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689a      	ldr	r2, [r3, #8]
 8006f30:	4b17      	ldr	r3, [pc, #92]	; (8006f90 <HAL_TIM_Base_Start_IT+0xdc>)
 8006f32:	4013      	ands	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2b06      	cmp	r3, #6
 8006f3a:	d015      	beq.n	8006f68 <HAL_TIM_Base_Start_IT+0xb4>
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f42:	d011      	beq.n	8006f68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f042 0201 	orr.w	r2, r2, #1
 8006f52:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f54:	e008      	b.n	8006f68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f042 0201 	orr.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]
 8006f66:	e000      	b.n	8006f6a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f68:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	40012c00 	.word	0x40012c00
 8006f7c:	40000400 	.word	0x40000400
 8006f80:	40000800 	.word	0x40000800
 8006f84:	40000c00 	.word	0x40000c00
 8006f88:	40013400 	.word	0x40013400
 8006f8c:	40014000 	.word	0x40014000
 8006f90:	00010007 	.word	0x00010007

08006f94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	691b      	ldr	r3, [r3, #16]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	d122      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	68db      	ldr	r3, [r3, #12]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d11b      	bne.n	8006ff0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f06f 0202 	mvn.w	r2, #2
 8006fc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006fd6:	6878      	ldr	r0, [r7, #4]
 8006fd8:	f000 f9ce 	bl	8007378 <HAL_TIM_IC_CaptureCallback>
 8006fdc:	e005      	b.n	8006fea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	f000 f9c0 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f9d1 	bl	800738c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	691b      	ldr	r3, [r3, #16]
 8006ff6:	f003 0304 	and.w	r3, r3, #4
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	d122      	bne.n	8007044 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b04      	cmp	r3, #4
 800700a:	d11b      	bne.n	8007044 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f06f 0204 	mvn.w	r2, #4
 8007014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2202      	movs	r2, #2
 800701a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007026:	2b00      	cmp	r3, #0
 8007028:	d003      	beq.n	8007032 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9a4 	bl	8007378 <HAL_TIM_IC_CaptureCallback>
 8007030:	e005      	b.n	800703e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f996 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007038:	6878      	ldr	r0, [r7, #4]
 800703a:	f000 f9a7 	bl	800738c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2200      	movs	r2, #0
 8007042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	f003 0308 	and.w	r3, r3, #8
 800704e:	2b08      	cmp	r3, #8
 8007050:	d122      	bne.n	8007098 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68db      	ldr	r3, [r3, #12]
 8007058:	f003 0308 	and.w	r3, r3, #8
 800705c:	2b08      	cmp	r3, #8
 800705e:	d11b      	bne.n	8007098 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f06f 0208 	mvn.w	r2, #8
 8007068:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2204      	movs	r2, #4
 800706e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	f003 0303 	and.w	r3, r3, #3
 800707a:	2b00      	cmp	r3, #0
 800707c:	d003      	beq.n	8007086 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 f97a 	bl	8007378 <HAL_TIM_IC_CaptureCallback>
 8007084:	e005      	b.n	8007092 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f96c 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f97d 	bl	800738c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	691b      	ldr	r3, [r3, #16]
 800709e:	f003 0310 	and.w	r3, r3, #16
 80070a2:	2b10      	cmp	r3, #16
 80070a4:	d122      	bne.n	80070ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	68db      	ldr	r3, [r3, #12]
 80070ac:	f003 0310 	and.w	r3, r3, #16
 80070b0:	2b10      	cmp	r3, #16
 80070b2:	d11b      	bne.n	80070ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f06f 0210 	mvn.w	r2, #16
 80070bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2208      	movs	r2, #8
 80070c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	69db      	ldr	r3, [r3, #28]
 80070ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d003      	beq.n	80070da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f000 f950 	bl	8007378 <HAL_TIM_IC_CaptureCallback>
 80070d8:	e005      	b.n	80070e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f942 	bl	8007364 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f953 	bl	800738c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2200      	movs	r2, #0
 80070ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d10e      	bne.n	8007118 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	68db      	ldr	r3, [r3, #12]
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b01      	cmp	r3, #1
 8007106:	d107      	bne.n	8007118 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f06f 0201 	mvn.w	r2, #1
 8007110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fa f9ea 	bl	80014ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	691b      	ldr	r3, [r3, #16]
 800711e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007122:	2b80      	cmp	r3, #128	; 0x80
 8007124:	d10e      	bne.n	8007144 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007130:	2b80      	cmp	r3, #128	; 0x80
 8007132:	d107      	bne.n	8007144 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800713c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 fafe 	bl	8007740 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800714e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007152:	d10e      	bne.n	8007172 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800715e:	2b80      	cmp	r3, #128	; 0x80
 8007160:	d107      	bne.n	8007172 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800716a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 faf1 	bl	8007754 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800717c:	2b40      	cmp	r3, #64	; 0x40
 800717e:	d10e      	bne.n	800719e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800718a:	2b40      	cmp	r3, #64	; 0x40
 800718c:	d107      	bne.n	800719e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007196:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f000 f901 	bl	80073a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	691b      	ldr	r3, [r3, #16]
 80071a4:	f003 0320 	and.w	r3, r3, #32
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	d10e      	bne.n	80071ca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	f003 0320 	and.w	r3, r3, #32
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d107      	bne.n	80071ca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f06f 0220 	mvn.w	r2, #32
 80071c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fab1 	bl	800772c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80071ca:	bf00      	nop
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b084      	sub	sp, #16
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
 80071da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_TIM_ConfigClockSource+0x1c>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e0b6      	b.n	800735c <HAL_TIM_ConfigClockSource+0x18a>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2202      	movs	r2, #2
 80071fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	689b      	ldr	r3, [r3, #8]
 8007204:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800720c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007210:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007218:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68ba      	ldr	r2, [r7, #8]
 8007220:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800722a:	d03e      	beq.n	80072aa <HAL_TIM_ConfigClockSource+0xd8>
 800722c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007230:	f200 8087 	bhi.w	8007342 <HAL_TIM_ConfigClockSource+0x170>
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	f000 8086 	beq.w	8007348 <HAL_TIM_ConfigClockSource+0x176>
 800723c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007240:	d87f      	bhi.n	8007342 <HAL_TIM_ConfigClockSource+0x170>
 8007242:	2b70      	cmp	r3, #112	; 0x70
 8007244:	d01a      	beq.n	800727c <HAL_TIM_ConfigClockSource+0xaa>
 8007246:	2b70      	cmp	r3, #112	; 0x70
 8007248:	d87b      	bhi.n	8007342 <HAL_TIM_ConfigClockSource+0x170>
 800724a:	2b60      	cmp	r3, #96	; 0x60
 800724c:	d050      	beq.n	80072f0 <HAL_TIM_ConfigClockSource+0x11e>
 800724e:	2b60      	cmp	r3, #96	; 0x60
 8007250:	d877      	bhi.n	8007342 <HAL_TIM_ConfigClockSource+0x170>
 8007252:	2b50      	cmp	r3, #80	; 0x50
 8007254:	d03c      	beq.n	80072d0 <HAL_TIM_ConfigClockSource+0xfe>
 8007256:	2b50      	cmp	r3, #80	; 0x50
 8007258:	d873      	bhi.n	8007342 <HAL_TIM_ConfigClockSource+0x170>
 800725a:	2b40      	cmp	r3, #64	; 0x40
 800725c:	d058      	beq.n	8007310 <HAL_TIM_ConfigClockSource+0x13e>
 800725e:	2b40      	cmp	r3, #64	; 0x40
 8007260:	d86f      	bhi.n	8007342 <HAL_TIM_ConfigClockSource+0x170>
 8007262:	2b30      	cmp	r3, #48	; 0x30
 8007264:	d064      	beq.n	8007330 <HAL_TIM_ConfigClockSource+0x15e>
 8007266:	2b30      	cmp	r3, #48	; 0x30
 8007268:	d86b      	bhi.n	8007342 <HAL_TIM_ConfigClockSource+0x170>
 800726a:	2b20      	cmp	r3, #32
 800726c:	d060      	beq.n	8007330 <HAL_TIM_ConfigClockSource+0x15e>
 800726e:	2b20      	cmp	r3, #32
 8007270:	d867      	bhi.n	8007342 <HAL_TIM_ConfigClockSource+0x170>
 8007272:	2b00      	cmp	r3, #0
 8007274:	d05c      	beq.n	8007330 <HAL_TIM_ConfigClockSource+0x15e>
 8007276:	2b10      	cmp	r3, #16
 8007278:	d05a      	beq.n	8007330 <HAL_TIM_ConfigClockSource+0x15e>
 800727a:	e062      	b.n	8007342 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	6899      	ldr	r1, [r3, #8]
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f000 f9a6 	bl	80075dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800729e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	68ba      	ldr	r2, [r7, #8]
 80072a6:	609a      	str	r2, [r3, #8]
      break;
 80072a8:	e04f      	b.n	800734a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6818      	ldr	r0, [r3, #0]
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	6899      	ldr	r1, [r3, #8]
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f000 f98f 	bl	80075dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689a      	ldr	r2, [r3, #8]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80072cc:	609a      	str	r2, [r3, #8]
      break;
 80072ce:	e03c      	b.n	800734a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6818      	ldr	r0, [r3, #0]
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	6859      	ldr	r1, [r3, #4]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	68db      	ldr	r3, [r3, #12]
 80072dc:	461a      	mov	r2, r3
 80072de:	f000 f903 	bl	80074e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2150      	movs	r1, #80	; 0x50
 80072e8:	4618      	mov	r0, r3
 80072ea:	f000 f95c 	bl	80075a6 <TIM_ITRx_SetConfig>
      break;
 80072ee:	e02c      	b.n	800734a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6818      	ldr	r0, [r3, #0]
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	6859      	ldr	r1, [r3, #4]
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	461a      	mov	r2, r3
 80072fe:	f000 f922 	bl	8007546 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2160      	movs	r1, #96	; 0x60
 8007308:	4618      	mov	r0, r3
 800730a:	f000 f94c 	bl	80075a6 <TIM_ITRx_SetConfig>
      break;
 800730e:	e01c      	b.n	800734a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6818      	ldr	r0, [r3, #0]
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	6859      	ldr	r1, [r3, #4]
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	68db      	ldr	r3, [r3, #12]
 800731c:	461a      	mov	r2, r3
 800731e:	f000 f8e3 	bl	80074e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2140      	movs	r1, #64	; 0x40
 8007328:	4618      	mov	r0, r3
 800732a:	f000 f93c 	bl	80075a6 <TIM_ITRx_SetConfig>
      break;
 800732e:	e00c      	b.n	800734a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681a      	ldr	r2, [r3, #0]
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4619      	mov	r1, r3
 800733a:	4610      	mov	r0, r2
 800733c:	f000 f933 	bl	80075a6 <TIM_ITRx_SetConfig>
      break;
 8007340:	e003      	b.n	800734a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	73fb      	strb	r3, [r7, #15]
      break;
 8007346:	e000      	b.n	800734a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007348:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2201      	movs	r2, #1
 800734e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800735a:	7bfb      	ldrb	r3, [r7, #15]
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80073a8:	bf00      	nop
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b2:	4770      	bx	lr

080073b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b085      	sub	sp, #20
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	4a40      	ldr	r2, [pc, #256]	; (80074c8 <TIM_Base_SetConfig+0x114>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d013      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073d2:	d00f      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	4a3d      	ldr	r2, [pc, #244]	; (80074cc <TIM_Base_SetConfig+0x118>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d00b      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	4a3c      	ldr	r2, [pc, #240]	; (80074d0 <TIM_Base_SetConfig+0x11c>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d007      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a3b      	ldr	r2, [pc, #236]	; (80074d4 <TIM_Base_SetConfig+0x120>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d003      	beq.n	80073f4 <TIM_Base_SetConfig+0x40>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a3a      	ldr	r2, [pc, #232]	; (80074d8 <TIM_Base_SetConfig+0x124>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d108      	bne.n	8007406 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	4a2f      	ldr	r2, [pc, #188]	; (80074c8 <TIM_Base_SetConfig+0x114>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d01f      	beq.n	800744e <TIM_Base_SetConfig+0x9a>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007414:	d01b      	beq.n	800744e <TIM_Base_SetConfig+0x9a>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a2c      	ldr	r2, [pc, #176]	; (80074cc <TIM_Base_SetConfig+0x118>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d017      	beq.n	800744e <TIM_Base_SetConfig+0x9a>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a2b      	ldr	r2, [pc, #172]	; (80074d0 <TIM_Base_SetConfig+0x11c>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d013      	beq.n	800744e <TIM_Base_SetConfig+0x9a>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a2a      	ldr	r2, [pc, #168]	; (80074d4 <TIM_Base_SetConfig+0x120>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00f      	beq.n	800744e <TIM_Base_SetConfig+0x9a>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a29      	ldr	r2, [pc, #164]	; (80074d8 <TIM_Base_SetConfig+0x124>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d00b      	beq.n	800744e <TIM_Base_SetConfig+0x9a>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a28      	ldr	r2, [pc, #160]	; (80074dc <TIM_Base_SetConfig+0x128>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d007      	beq.n	800744e <TIM_Base_SetConfig+0x9a>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	4a27      	ldr	r2, [pc, #156]	; (80074e0 <TIM_Base_SetConfig+0x12c>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d003      	beq.n	800744e <TIM_Base_SetConfig+0x9a>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a26      	ldr	r2, [pc, #152]	; (80074e4 <TIM_Base_SetConfig+0x130>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d108      	bne.n	8007460 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	4313      	orrs	r3, r2
 800745e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	4313      	orrs	r3, r2
 800746c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	4a10      	ldr	r2, [pc, #64]	; (80074c8 <TIM_Base_SetConfig+0x114>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d00f      	beq.n	80074ac <TIM_Base_SetConfig+0xf8>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	4a12      	ldr	r2, [pc, #72]	; (80074d8 <TIM_Base_SetConfig+0x124>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00b      	beq.n	80074ac <TIM_Base_SetConfig+0xf8>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	4a11      	ldr	r2, [pc, #68]	; (80074dc <TIM_Base_SetConfig+0x128>)
 8007498:	4293      	cmp	r3, r2
 800749a:	d007      	beq.n	80074ac <TIM_Base_SetConfig+0xf8>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	4a10      	ldr	r2, [pc, #64]	; (80074e0 <TIM_Base_SetConfig+0x12c>)
 80074a0:	4293      	cmp	r3, r2
 80074a2:	d003      	beq.n	80074ac <TIM_Base_SetConfig+0xf8>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	4a0f      	ldr	r2, [pc, #60]	; (80074e4 <TIM_Base_SetConfig+0x130>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d103      	bne.n	80074b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	691a      	ldr	r2, [r3, #16]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	615a      	str	r2, [r3, #20]
}
 80074ba:	bf00      	nop
 80074bc:	3714      	adds	r7, #20
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop
 80074c8:	40012c00 	.word	0x40012c00
 80074cc:	40000400 	.word	0x40000400
 80074d0:	40000800 	.word	0x40000800
 80074d4:	40000c00 	.word	0x40000c00
 80074d8:	40013400 	.word	0x40013400
 80074dc:	40014000 	.word	0x40014000
 80074e0:	40014400 	.word	0x40014400
 80074e4:	40014800 	.word	0x40014800

080074e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b087      	sub	sp, #28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	60f8      	str	r0, [r7, #12]
 80074f0:	60b9      	str	r1, [r7, #8]
 80074f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
 80074fe:	f023 0201 	bic.w	r2, r3, #1
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	699b      	ldr	r3, [r3, #24]
 800750a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4313      	orrs	r3, r2
 800751c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	f023 030a 	bic.w	r3, r3, #10
 8007524:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	697a      	ldr	r2, [r7, #20]
 8007538:	621a      	str	r2, [r3, #32]
}
 800753a:	bf00      	nop
 800753c:	371c      	adds	r7, #28
 800753e:	46bd      	mov	sp, r7
 8007540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007544:	4770      	bx	lr

08007546 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007546:	b480      	push	{r7}
 8007548:	b087      	sub	sp, #28
 800754a:	af00      	add	r7, sp, #0
 800754c:	60f8      	str	r0, [r7, #12]
 800754e:	60b9      	str	r1, [r7, #8]
 8007550:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	f023 0210 	bic.w	r2, r3, #16
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007570:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	031b      	lsls	r3, r3, #12
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007582:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	693a      	ldr	r2, [r7, #16]
 8007598:	621a      	str	r2, [r3, #32]
}
 800759a:	bf00      	nop
 800759c:	371c      	adds	r7, #28
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr

080075a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075a6:	b480      	push	{r7}
 80075a8:	b085      	sub	sp, #20
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	6078      	str	r0, [r7, #4]
 80075ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075be:	683a      	ldr	r2, [r7, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4313      	orrs	r3, r2
 80075c4:	f043 0307 	orr.w	r3, r3, #7
 80075c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	68fa      	ldr	r2, [r7, #12]
 80075ce:	609a      	str	r2, [r3, #8]
}
 80075d0:	bf00      	nop
 80075d2:	3714      	adds	r7, #20
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075dc:	b480      	push	{r7}
 80075de:	b087      	sub	sp, #28
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	60f8      	str	r0, [r7, #12]
 80075e4:	60b9      	str	r1, [r7, #8]
 80075e6:	607a      	str	r2, [r7, #4]
 80075e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	021a      	lsls	r2, r3, #8
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	431a      	orrs	r2, r3
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	4313      	orrs	r3, r2
 8007604:	697a      	ldr	r2, [r7, #20]
 8007606:	4313      	orrs	r3, r2
 8007608:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	609a      	str	r2, [r3, #8]
}
 8007610:	bf00      	nop
 8007612:	371c      	adds	r7, #28
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800761c:	b480      	push	{r7}
 800761e:	b085      	sub	sp, #20
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800762c:	2b01      	cmp	r3, #1
 800762e:	d101      	bne.n	8007634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007630:	2302      	movs	r3, #2
 8007632:	e068      	b.n	8007706 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2201      	movs	r2, #1
 8007638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2202      	movs	r2, #2
 8007640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a2e      	ldr	r2, [pc, #184]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d004      	beq.n	8007668 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a2d      	ldr	r2, [pc, #180]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d108      	bne.n	800767a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800766e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	4313      	orrs	r3, r2
 8007678:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007680:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	4313      	orrs	r3, r2
 800768a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a1e      	ldr	r2, [pc, #120]	; (8007714 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d01d      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a6:	d018      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a1b      	ldr	r2, [pc, #108]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d013      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a1a      	ldr	r2, [pc, #104]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d00e      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a18      	ldr	r2, [pc, #96]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d009      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a13      	ldr	r2, [pc, #76]	; (8007718 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d004      	beq.n	80076da <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a14      	ldr	r2, [pc, #80]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d10c      	bne.n	80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	68ba      	ldr	r2, [r7, #8]
 80076e8:	4313      	orrs	r3, r2
 80076ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2200      	movs	r2, #0
 8007700:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40012c00 	.word	0x40012c00
 8007718:	40013400 	.word	0x40013400
 800771c:	40000400 	.word	0x40000400
 8007720:	40000800 	.word	0x40000800
 8007724:	40000c00 	.word	0x40000c00
 8007728:	40014000 	.word	0x40014000

0800772c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007734:	bf00      	nop
 8007736:	370c      	adds	r7, #12
 8007738:	46bd      	mov	sp, r7
 800773a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773e:	4770      	bx	lr

08007740 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007740:	b480      	push	{r7}
 8007742:	b083      	sub	sp, #12
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e040      	b.n	80077fc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800777e:	2b00      	cmp	r3, #0
 8007780:	d106      	bne.n	8007790 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7fa fe4a 	bl	8002424 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2224      	movs	r2, #36	; 0x24
 8007794:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	681a      	ldr	r2, [r3, #0]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 0201 	bic.w	r2, r2, #1
 80077a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fbc8 	bl	8007f3c <UART_SetConfig>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d101      	bne.n	80077b6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e022      	b.n	80077fc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d002      	beq.n	80077c4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fe74 	bl	80084ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	685a      	ldr	r2, [r3, #4]
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689a      	ldr	r2, [r3, #8]
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f042 0201 	orr.w	r2, r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fefb 	bl	80085f0 <UART_CheckIdleState>
 80077fa:	4603      	mov	r3, r0
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3708      	adds	r7, #8
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b08a      	sub	sp, #40	; 0x28
 8007808:	af00      	add	r7, sp, #0
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	4613      	mov	r3, r2
 8007810:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007816:	2b20      	cmp	r3, #32
 8007818:	d178      	bne.n	800790c <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_UART_Transmit_DMA+0x22>
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e071      	b.n	800790e <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_UART_Transmit_DMA+0x34>
 8007834:	2302      	movs	r3, #2
 8007836:	e06a      	b.n	800790e <HAL_UART_Transmit_DMA+0x10a>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	88fa      	ldrh	r2, [r7, #6]
 800784a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	88fa      	ldrh	r2, [r7, #6]
 8007852:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2221      	movs	r2, #33	; 0x21
 8007862:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007868:	2b00      	cmp	r3, #0
 800786a:	d02b      	beq.n	80078c4 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007870:	4a29      	ldr	r2, [pc, #164]	; (8007918 <HAL_UART_Transmit_DMA+0x114>)
 8007872:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007878:	4a28      	ldr	r2, [pc, #160]	; (800791c <HAL_UART_Transmit_DMA+0x118>)
 800787a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007880:	4a27      	ldr	r2, [pc, #156]	; (8007920 <HAL_UART_Transmit_DMA+0x11c>)
 8007882:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007888:	2200      	movs	r2, #0
 800788a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007894:	4619      	mov	r1, r3
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	3328      	adds	r3, #40	; 0x28
 800789c:	461a      	mov	r2, r3
 800789e:	88fb      	ldrh	r3, [r7, #6]
 80078a0:	f7fb fa1c 	bl	8002cdc <HAL_DMA_Start_IT>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00c      	beq.n	80078c4 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2210      	movs	r2, #16
 80078ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	2220      	movs	r2, #32
 80078be:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e024      	b.n	800790e <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	2240      	movs	r2, #64	; 0x40
 80078ca:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	3308      	adds	r3, #8
 80078da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	e853 3f00 	ldrex	r3, [r3]
 80078e2:	613b      	str	r3, [r7, #16]
   return(result);
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	3308      	adds	r3, #8
 80078f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078f4:	623a      	str	r2, [r7, #32]
 80078f6:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	69f9      	ldr	r1, [r7, #28]
 80078fa:	6a3a      	ldr	r2, [r7, #32]
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	61bb      	str	r3, [r7, #24]
   return(result);
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e5      	bne.n	80078d4 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	e000      	b.n	800790e <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800790c:	2302      	movs	r3, #2
  }
}
 800790e:	4618      	mov	r0, r3
 8007910:	3728      	adds	r7, #40	; 0x28
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	0800891d 	.word	0x0800891d
 800791c:	080089b7 	.word	0x080089b7
 8007920:	080089d3 	.word	0x080089d3

08007924 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b0ba      	sub	sp, #232	; 0xe8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	69db      	ldr	r3, [r3, #28]
 8007932:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689b      	ldr	r3, [r3, #8]
 8007946:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800794a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800794e:	f640 030f 	movw	r3, #2063	; 0x80f
 8007952:	4013      	ands	r3, r2
 8007954:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007958:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800795c:	2b00      	cmp	r3, #0
 800795e:	d115      	bne.n	800798c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007964:	f003 0320 	and.w	r3, r3, #32
 8007968:	2b00      	cmp	r3, #0
 800796a:	d00f      	beq.n	800798c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800796c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007970:	f003 0320 	and.w	r3, r3, #32
 8007974:	2b00      	cmp	r3, #0
 8007976:	d009      	beq.n	800798c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 82a6 	beq.w	8007ece <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	4798      	blx	r3
      }
      return;
 800798a:	e2a0      	b.n	8007ece <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800798c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007990:	2b00      	cmp	r3, #0
 8007992:	f000 8117 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007996:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d106      	bne.n	80079b0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079a2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079a6:	4b85      	ldr	r3, [pc, #532]	; (8007bbc <HAL_UART_IRQHandler+0x298>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	f000 810a 	beq.w	8007bc4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b4:	f003 0301 	and.w	r3, r3, #1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d011      	beq.n	80079e0 <HAL_UART_IRQHandler+0xbc>
 80079bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d00b      	beq.n	80079e0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	2201      	movs	r2, #1
 80079ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079d6:	f043 0201 	orr.w	r2, r3, #1
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d011      	beq.n	8007a10 <HAL_UART_IRQHandler+0xec>
 80079ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d00b      	beq.n	8007a10 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	2202      	movs	r2, #2
 80079fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a06:	f043 0204 	orr.w	r2, r3, #4
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a14:	f003 0304 	and.w	r3, r3, #4
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d011      	beq.n	8007a40 <HAL_UART_IRQHandler+0x11c>
 8007a1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00b      	beq.n	8007a40 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	2204      	movs	r2, #4
 8007a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a36:	f043 0202 	orr.w	r2, r3, #2
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a44:	f003 0308 	and.w	r3, r3, #8
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d017      	beq.n	8007a7c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a50:	f003 0320 	and.w	r3, r3, #32
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d105      	bne.n	8007a64 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2208      	movs	r2, #8
 8007a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a72:	f043 0208 	orr.w	r2, r3, #8
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d012      	beq.n	8007aae <HAL_UART_IRQHandler+0x18a>
 8007a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00c      	beq.n	8007aae <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a9c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa4:	f043 0220 	orr.w	r2, r3, #32
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 820c 	beq.w	8007ed2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007aba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abe:	f003 0320 	and.w	r3, r3, #32
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00d      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007ac6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aca:	f003 0320 	and.w	r3, r3, #32
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d007      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d005      	beq.n	8007b06 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007afa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007afe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d04f      	beq.n	8007ba6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 fea5 	bl	8008856 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b16:	2b40      	cmp	r3, #64	; 0x40
 8007b18:	d141      	bne.n	8007b9e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b28:	e853 3f00 	ldrex	r3, [r3]
 8007b2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	3308      	adds	r3, #8
 8007b42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d1d9      	bne.n	8007b1a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d013      	beq.n	8007b96 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b72:	4a13      	ldr	r2, [pc, #76]	; (8007bc0 <HAL_UART_IRQHandler+0x29c>)
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	f7fb f94c 	bl	8002e18 <HAL_DMA_Abort_IT>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d017      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8c:	687a      	ldr	r2, [r7, #4]
 8007b8e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007b90:	4610      	mov	r0, r2
 8007b92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b94:	e00f      	b.n	8007bb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f9ba 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b9c:	e00b      	b.n	8007bb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f000 f9b6 	bl	8007f10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba4:	e007      	b.n	8007bb6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f9b2 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2200      	movs	r2, #0
 8007bb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007bb4:	e18d      	b.n	8007ed2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb6:	bf00      	nop
    return;
 8007bb8:	e18b      	b.n	8007ed2 <HAL_UART_IRQHandler+0x5ae>
 8007bba:	bf00      	nop
 8007bbc:	04000120 	.word	0x04000120
 8007bc0:	08008a4f 	.word	0x08008a4f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f040 8146 	bne.w	8007e5a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bd2:	f003 0310 	and.w	r3, r3, #16
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	f000 813f 	beq.w	8007e5a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007be0:	f003 0310 	and.w	r3, r3, #16
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	f000 8138 	beq.w	8007e5a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2210      	movs	r2, #16
 8007bf0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfc:	2b40      	cmp	r3, #64	; 0x40
 8007bfe:	f040 80b4 	bne.w	8007d6a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c0e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 815f 	beq.w	8007ed6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c22:	429a      	cmp	r2, r3
 8007c24:	f080 8157 	bcs.w	8007ed6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c2e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	f040 8085 	bne.w	8007d4e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c50:	e853 3f00 	ldrex	r3, [r3]
 8007c54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	461a      	mov	r2, r3
 8007c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007c6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007c72:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c7e:	e841 2300 	strex	r3, r2, [r1]
 8007c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d1da      	bne.n	8007c44 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	3308      	adds	r3, #8
 8007c94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c98:	e853 3f00 	ldrex	r3, [r3]
 8007c9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ca0:	f023 0301 	bic.w	r3, r3, #1
 8007ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007cb2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cb6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e1      	bne.n	8007c8e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3308      	adds	r3, #8
 8007cd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007cda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ce0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	3308      	adds	r3, #8
 8007cea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007cee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007cf0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007cf4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e3      	bne.n	8007cca <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2220      	movs	r2, #32
 8007d06:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d16:	e853 3f00 	ldrex	r3, [r3]
 8007d1a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1e:	f023 0310 	bic.w	r3, r3, #16
 8007d22:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	461a      	mov	r2, r3
 8007d2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d30:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d32:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d36:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e4      	bne.n	8007d0e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	4618      	mov	r0, r3
 8007d4a:	f7fb f827 	bl	8002d9c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	1ad3      	subs	r3, r2, r3
 8007d5e:	b29b      	uxth	r3, r3
 8007d60:	4619      	mov	r1, r3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f8de 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d68:	e0b5      	b.n	8007ed6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d76:	b29b      	uxth	r3, r3
 8007d78:	1ad3      	subs	r3, r2, r3
 8007d7a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 80a7 	beq.w	8007eda <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007d8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	f000 80a2 	beq.w	8007eda <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d9e:	e853 3f00 	ldrex	r3, [r3]
 8007da2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007da6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007daa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007db8:	647b      	str	r3, [r7, #68]	; 0x44
 8007dba:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007dbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc0:	e841 2300 	strex	r3, r2, [r1]
 8007dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d1e4      	bne.n	8007d96 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd6:	e853 3f00 	ldrex	r3, [r3]
 8007dda:	623b      	str	r3, [r7, #32]
   return(result);
 8007ddc:	6a3b      	ldr	r3, [r7, #32]
 8007dde:	f023 0301 	bic.w	r3, r3, #1
 8007de2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	3308      	adds	r3, #8
 8007dec:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007df0:	633a      	str	r2, [r7, #48]	; 0x30
 8007df2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007df8:	e841 2300 	strex	r3, r2, [r1]
 8007dfc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1e3      	bne.n	8007dcc <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2220      	movs	r2, #32
 8007e08:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	69b9      	ldr	r1, [r7, #24]
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	617b      	str	r3, [r7, #20]
   return(result);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e4      	bne.n	8007e16 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f866 	bl	8007f24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e58:	e03f      	b.n	8007eda <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00e      	beq.n	8007e84 <HAL_UART_IRQHandler+0x560>
 8007e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007e7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f000 fe26 	bl	8008ace <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e82:	e02d      	b.n	8007ee0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d00e      	beq.n	8007eae <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d008      	beq.n	8007eae <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d01c      	beq.n	8007ede <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	4798      	blx	r3
    }
    return;
 8007eac:	e017      	b.n	8007ede <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d012      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x5bc>
 8007eba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00c      	beq.n	8007ee0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f000 fdd7 	bl	8008a7a <UART_EndTransmit_IT>
    return;
 8007ecc:	e008      	b.n	8007ee0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007ece:	bf00      	nop
 8007ed0:	e006      	b.n	8007ee0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007ed2:	bf00      	nop
 8007ed4:	e004      	b.n	8007ee0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007ed6:	bf00      	nop
 8007ed8:	e002      	b.n	8007ee0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007eda:	bf00      	nop
 8007edc:	e000      	b.n	8007ee0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007ede:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007ee0:	37e8      	adds	r7, #232	; 0xe8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop

08007ee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b083      	sub	sp, #12
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ef0:	bf00      	nop
 8007ef2:	370c      	adds	r7, #12
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr

08007efc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007efc:	b480      	push	{r7}
 8007efe:	b083      	sub	sp, #12
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f04:	bf00      	nop
 8007f06:	370c      	adds	r7, #12
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f18:	bf00      	nop
 8007f1a:	370c      	adds	r7, #12
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr

08007f24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f24:	b480      	push	{r7}
 8007f26:	b083      	sub	sp, #12
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f30:	bf00      	nop
 8007f32:	370c      	adds	r7, #12
 8007f34:	46bd      	mov	sp, r7
 8007f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3a:	4770      	bx	lr

08007f3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f40:	b08a      	sub	sp, #40	; 0x28
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	689a      	ldr	r2, [r3, #8]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	691b      	ldr	r3, [r3, #16]
 8007f54:	431a      	orrs	r2, r3
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	69db      	ldr	r3, [r3, #28]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	4ba4      	ldr	r3, [pc, #656]	; (80081fc <UART_SetConfig+0x2c0>)
 8007f6c:	4013      	ands	r3, r2
 8007f6e:	68fa      	ldr	r2, [r7, #12]
 8007f70:	6812      	ldr	r2, [r2, #0]
 8007f72:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f74:	430b      	orrs	r3, r1
 8007f76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	68da      	ldr	r2, [r3, #12]
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a99      	ldr	r2, [pc, #612]	; (8008200 <UART_SetConfig+0x2c4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d004      	beq.n	8007fa8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6a1b      	ldr	r3, [r3, #32]
 8007fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fa4:	4313      	orrs	r3, r2
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a90      	ldr	r2, [pc, #576]	; (8008204 <UART_SetConfig+0x2c8>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d126      	bne.n	8008014 <UART_SetConfig+0xd8>
 8007fc6:	4b90      	ldr	r3, [pc, #576]	; (8008208 <UART_SetConfig+0x2cc>)
 8007fc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d81b      	bhi.n	800800c <UART_SetConfig+0xd0>
 8007fd4:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <UART_SetConfig+0xa0>)
 8007fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fda:	bf00      	nop
 8007fdc:	08007fed 	.word	0x08007fed
 8007fe0:	08007ffd 	.word	0x08007ffd
 8007fe4:	08007ff5 	.word	0x08007ff5
 8007fe8:	08008005 	.word	0x08008005
 8007fec:	2301      	movs	r3, #1
 8007fee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ff2:	e116      	b.n	8008222 <UART_SetConfig+0x2e6>
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007ffa:	e112      	b.n	8008222 <UART_SetConfig+0x2e6>
 8007ffc:	2304      	movs	r3, #4
 8007ffe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008002:	e10e      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008004:	2308      	movs	r3, #8
 8008006:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800800a:	e10a      	b.n	8008222 <UART_SetConfig+0x2e6>
 800800c:	2310      	movs	r3, #16
 800800e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008012:	e106      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a7c      	ldr	r2, [pc, #496]	; (800820c <UART_SetConfig+0x2d0>)
 800801a:	4293      	cmp	r3, r2
 800801c:	d138      	bne.n	8008090 <UART_SetConfig+0x154>
 800801e:	4b7a      	ldr	r3, [pc, #488]	; (8008208 <UART_SetConfig+0x2cc>)
 8008020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008024:	f003 030c 	and.w	r3, r3, #12
 8008028:	2b0c      	cmp	r3, #12
 800802a:	d82d      	bhi.n	8008088 <UART_SetConfig+0x14c>
 800802c:	a201      	add	r2, pc, #4	; (adr r2, 8008034 <UART_SetConfig+0xf8>)
 800802e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008032:	bf00      	nop
 8008034:	08008069 	.word	0x08008069
 8008038:	08008089 	.word	0x08008089
 800803c:	08008089 	.word	0x08008089
 8008040:	08008089 	.word	0x08008089
 8008044:	08008079 	.word	0x08008079
 8008048:	08008089 	.word	0x08008089
 800804c:	08008089 	.word	0x08008089
 8008050:	08008089 	.word	0x08008089
 8008054:	08008071 	.word	0x08008071
 8008058:	08008089 	.word	0x08008089
 800805c:	08008089 	.word	0x08008089
 8008060:	08008089 	.word	0x08008089
 8008064:	08008081 	.word	0x08008081
 8008068:	2300      	movs	r3, #0
 800806a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800806e:	e0d8      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008070:	2302      	movs	r3, #2
 8008072:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008076:	e0d4      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008078:	2304      	movs	r3, #4
 800807a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800807e:	e0d0      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008080:	2308      	movs	r3, #8
 8008082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008086:	e0cc      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008088:	2310      	movs	r3, #16
 800808a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800808e:	e0c8      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a5e      	ldr	r2, [pc, #376]	; (8008210 <UART_SetConfig+0x2d4>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d125      	bne.n	80080e6 <UART_SetConfig+0x1aa>
 800809a:	4b5b      	ldr	r3, [pc, #364]	; (8008208 <UART_SetConfig+0x2cc>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080a4:	2b30      	cmp	r3, #48	; 0x30
 80080a6:	d016      	beq.n	80080d6 <UART_SetConfig+0x19a>
 80080a8:	2b30      	cmp	r3, #48	; 0x30
 80080aa:	d818      	bhi.n	80080de <UART_SetConfig+0x1a2>
 80080ac:	2b20      	cmp	r3, #32
 80080ae:	d00a      	beq.n	80080c6 <UART_SetConfig+0x18a>
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d814      	bhi.n	80080de <UART_SetConfig+0x1a2>
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d002      	beq.n	80080be <UART_SetConfig+0x182>
 80080b8:	2b10      	cmp	r3, #16
 80080ba:	d008      	beq.n	80080ce <UART_SetConfig+0x192>
 80080bc:	e00f      	b.n	80080de <UART_SetConfig+0x1a2>
 80080be:	2300      	movs	r3, #0
 80080c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080c4:	e0ad      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080c6:	2302      	movs	r3, #2
 80080c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080cc:	e0a9      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080ce:	2304      	movs	r3, #4
 80080d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080d4:	e0a5      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080d6:	2308      	movs	r3, #8
 80080d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080dc:	e0a1      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080de:	2310      	movs	r3, #16
 80080e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080e4:	e09d      	b.n	8008222 <UART_SetConfig+0x2e6>
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a4a      	ldr	r2, [pc, #296]	; (8008214 <UART_SetConfig+0x2d8>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d125      	bne.n	800813c <UART_SetConfig+0x200>
 80080f0:	4b45      	ldr	r3, [pc, #276]	; (8008208 <UART_SetConfig+0x2cc>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80080fa:	2bc0      	cmp	r3, #192	; 0xc0
 80080fc:	d016      	beq.n	800812c <UART_SetConfig+0x1f0>
 80080fe:	2bc0      	cmp	r3, #192	; 0xc0
 8008100:	d818      	bhi.n	8008134 <UART_SetConfig+0x1f8>
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d00a      	beq.n	800811c <UART_SetConfig+0x1e0>
 8008106:	2b80      	cmp	r3, #128	; 0x80
 8008108:	d814      	bhi.n	8008134 <UART_SetConfig+0x1f8>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d002      	beq.n	8008114 <UART_SetConfig+0x1d8>
 800810e:	2b40      	cmp	r3, #64	; 0x40
 8008110:	d008      	beq.n	8008124 <UART_SetConfig+0x1e8>
 8008112:	e00f      	b.n	8008134 <UART_SetConfig+0x1f8>
 8008114:	2300      	movs	r3, #0
 8008116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800811a:	e082      	b.n	8008222 <UART_SetConfig+0x2e6>
 800811c:	2302      	movs	r3, #2
 800811e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008122:	e07e      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008124:	2304      	movs	r3, #4
 8008126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800812a:	e07a      	b.n	8008222 <UART_SetConfig+0x2e6>
 800812c:	2308      	movs	r3, #8
 800812e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008132:	e076      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008134:	2310      	movs	r3, #16
 8008136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800813a:	e072      	b.n	8008222 <UART_SetConfig+0x2e6>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a35      	ldr	r2, [pc, #212]	; (8008218 <UART_SetConfig+0x2dc>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d12a      	bne.n	800819c <UART_SetConfig+0x260>
 8008146:	4b30      	ldr	r3, [pc, #192]	; (8008208 <UART_SetConfig+0x2cc>)
 8008148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008150:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008154:	d01a      	beq.n	800818c <UART_SetConfig+0x250>
 8008156:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800815a:	d81b      	bhi.n	8008194 <UART_SetConfig+0x258>
 800815c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008160:	d00c      	beq.n	800817c <UART_SetConfig+0x240>
 8008162:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008166:	d815      	bhi.n	8008194 <UART_SetConfig+0x258>
 8008168:	2b00      	cmp	r3, #0
 800816a:	d003      	beq.n	8008174 <UART_SetConfig+0x238>
 800816c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008170:	d008      	beq.n	8008184 <UART_SetConfig+0x248>
 8008172:	e00f      	b.n	8008194 <UART_SetConfig+0x258>
 8008174:	2300      	movs	r3, #0
 8008176:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800817a:	e052      	b.n	8008222 <UART_SetConfig+0x2e6>
 800817c:	2302      	movs	r3, #2
 800817e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008182:	e04e      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008184:	2304      	movs	r3, #4
 8008186:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800818a:	e04a      	b.n	8008222 <UART_SetConfig+0x2e6>
 800818c:	2308      	movs	r3, #8
 800818e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008192:	e046      	b.n	8008222 <UART_SetConfig+0x2e6>
 8008194:	2310      	movs	r3, #16
 8008196:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800819a:	e042      	b.n	8008222 <UART_SetConfig+0x2e6>
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a17      	ldr	r2, [pc, #92]	; (8008200 <UART_SetConfig+0x2c4>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d13a      	bne.n	800821c <UART_SetConfig+0x2e0>
 80081a6:	4b18      	ldr	r3, [pc, #96]	; (8008208 <UART_SetConfig+0x2cc>)
 80081a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081b4:	d01a      	beq.n	80081ec <UART_SetConfig+0x2b0>
 80081b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081ba:	d81b      	bhi.n	80081f4 <UART_SetConfig+0x2b8>
 80081bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081c0:	d00c      	beq.n	80081dc <UART_SetConfig+0x2a0>
 80081c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081c6:	d815      	bhi.n	80081f4 <UART_SetConfig+0x2b8>
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d003      	beq.n	80081d4 <UART_SetConfig+0x298>
 80081cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081d0:	d008      	beq.n	80081e4 <UART_SetConfig+0x2a8>
 80081d2:	e00f      	b.n	80081f4 <UART_SetConfig+0x2b8>
 80081d4:	2300      	movs	r3, #0
 80081d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081da:	e022      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081dc:	2302      	movs	r3, #2
 80081de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081e2:	e01e      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081e4:	2304      	movs	r3, #4
 80081e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081ea:	e01a      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081ec:	2308      	movs	r3, #8
 80081ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081f2:	e016      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081f4:	2310      	movs	r3, #16
 80081f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80081fa:	e012      	b.n	8008222 <UART_SetConfig+0x2e6>
 80081fc:	efff69f3 	.word	0xefff69f3
 8008200:	40008000 	.word	0x40008000
 8008204:	40013800 	.word	0x40013800
 8008208:	40021000 	.word	0x40021000
 800820c:	40004400 	.word	0x40004400
 8008210:	40004800 	.word	0x40004800
 8008214:	40004c00 	.word	0x40004c00
 8008218:	40005000 	.word	0x40005000
 800821c:	2310      	movs	r3, #16
 800821e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a9f      	ldr	r2, [pc, #636]	; (80084a4 <UART_SetConfig+0x568>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d17a      	bne.n	8008322 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800822c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008230:	2b08      	cmp	r3, #8
 8008232:	d824      	bhi.n	800827e <UART_SetConfig+0x342>
 8008234:	a201      	add	r2, pc, #4	; (adr r2, 800823c <UART_SetConfig+0x300>)
 8008236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800823a:	bf00      	nop
 800823c:	08008261 	.word	0x08008261
 8008240:	0800827f 	.word	0x0800827f
 8008244:	08008269 	.word	0x08008269
 8008248:	0800827f 	.word	0x0800827f
 800824c:	0800826f 	.word	0x0800826f
 8008250:	0800827f 	.word	0x0800827f
 8008254:	0800827f 	.word	0x0800827f
 8008258:	0800827f 	.word	0x0800827f
 800825c:	08008277 	.word	0x08008277
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008260:	f7fc fd60 	bl	8004d24 <HAL_RCC_GetPCLK1Freq>
 8008264:	61f8      	str	r0, [r7, #28]
        break;
 8008266:	e010      	b.n	800828a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008268:	4b8f      	ldr	r3, [pc, #572]	; (80084a8 <UART_SetConfig+0x56c>)
 800826a:	61fb      	str	r3, [r7, #28]
        break;
 800826c:	e00d      	b.n	800828a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800826e:	f7fc fcc1 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8008272:	61f8      	str	r0, [r7, #28]
        break;
 8008274:	e009      	b.n	800828a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827a:	61fb      	str	r3, [r7, #28]
        break;
 800827c:	e005      	b.n	800828a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800827e:	2300      	movs	r3, #0
 8008280:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008282:	2301      	movs	r3, #1
 8008284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008288:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800828a:	69fb      	ldr	r3, [r7, #28]
 800828c:	2b00      	cmp	r3, #0
 800828e:	f000 80fb 	beq.w	8008488 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	685a      	ldr	r2, [r3, #4]
 8008296:	4613      	mov	r3, r2
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	4413      	add	r3, r2
 800829c:	69fa      	ldr	r2, [r7, #28]
 800829e:	429a      	cmp	r2, r3
 80082a0:	d305      	bcc.n	80082ae <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80082a8:	69fa      	ldr	r2, [r7, #28]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d903      	bls.n	80082b6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80082b4:	e0e8      	b.n	8008488 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80082b6:	69fb      	ldr	r3, [r7, #28]
 80082b8:	2200      	movs	r2, #0
 80082ba:	461c      	mov	r4, r3
 80082bc:	4615      	mov	r5, r2
 80082be:	f04f 0200 	mov.w	r2, #0
 80082c2:	f04f 0300 	mov.w	r3, #0
 80082c6:	022b      	lsls	r3, r5, #8
 80082c8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80082cc:	0222      	lsls	r2, r4, #8
 80082ce:	68f9      	ldr	r1, [r7, #12]
 80082d0:	6849      	ldr	r1, [r1, #4]
 80082d2:	0849      	lsrs	r1, r1, #1
 80082d4:	2000      	movs	r0, #0
 80082d6:	4688      	mov	r8, r1
 80082d8:	4681      	mov	r9, r0
 80082da:	eb12 0a08 	adds.w	sl, r2, r8
 80082de:	eb43 0b09 	adc.w	fp, r3, r9
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	603b      	str	r3, [r7, #0]
 80082ea:	607a      	str	r2, [r7, #4]
 80082ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082f0:	4650      	mov	r0, sl
 80082f2:	4659      	mov	r1, fp
 80082f4:	f7f8 fca8 	bl	8000c48 <__aeabi_uldivmod>
 80082f8:	4602      	mov	r2, r0
 80082fa:	460b      	mov	r3, r1
 80082fc:	4613      	mov	r3, r2
 80082fe:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008300:	69bb      	ldr	r3, [r7, #24]
 8008302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008306:	d308      	bcc.n	800831a <UART_SetConfig+0x3de>
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830e:	d204      	bcs.n	800831a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	69ba      	ldr	r2, [r7, #24]
 8008316:	60da      	str	r2, [r3, #12]
 8008318:	e0b6      	b.n	8008488 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800831a:	2301      	movs	r3, #1
 800831c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008320:	e0b2      	b.n	8008488 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	69db      	ldr	r3, [r3, #28]
 8008326:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800832a:	d15e      	bne.n	80083ea <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800832c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008330:	2b08      	cmp	r3, #8
 8008332:	d828      	bhi.n	8008386 <UART_SetConfig+0x44a>
 8008334:	a201      	add	r2, pc, #4	; (adr r2, 800833c <UART_SetConfig+0x400>)
 8008336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800833a:	bf00      	nop
 800833c:	08008361 	.word	0x08008361
 8008340:	08008369 	.word	0x08008369
 8008344:	08008371 	.word	0x08008371
 8008348:	08008387 	.word	0x08008387
 800834c:	08008377 	.word	0x08008377
 8008350:	08008387 	.word	0x08008387
 8008354:	08008387 	.word	0x08008387
 8008358:	08008387 	.word	0x08008387
 800835c:	0800837f 	.word	0x0800837f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008360:	f7fc fce0 	bl	8004d24 <HAL_RCC_GetPCLK1Freq>
 8008364:	61f8      	str	r0, [r7, #28]
        break;
 8008366:	e014      	b.n	8008392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008368:	f7fc fcf2 	bl	8004d50 <HAL_RCC_GetPCLK2Freq>
 800836c:	61f8      	str	r0, [r7, #28]
        break;
 800836e:	e010      	b.n	8008392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008370:	4b4d      	ldr	r3, [pc, #308]	; (80084a8 <UART_SetConfig+0x56c>)
 8008372:	61fb      	str	r3, [r7, #28]
        break;
 8008374:	e00d      	b.n	8008392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008376:	f7fc fc3d 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 800837a:	61f8      	str	r0, [r7, #28]
        break;
 800837c:	e009      	b.n	8008392 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800837e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008382:	61fb      	str	r3, [r7, #28]
        break;
 8008384:	e005      	b.n	8008392 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008390:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d077      	beq.n	8008488 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008398:	69fb      	ldr	r3, [r7, #28]
 800839a:	005a      	lsls	r2, r3, #1
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	685b      	ldr	r3, [r3, #4]
 80083a0:	085b      	lsrs	r3, r3, #1
 80083a2:	441a      	add	r2, r3
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083ae:	69bb      	ldr	r3, [r7, #24]
 80083b0:	2b0f      	cmp	r3, #15
 80083b2:	d916      	bls.n	80083e2 <UART_SetConfig+0x4a6>
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083ba:	d212      	bcs.n	80083e2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	f023 030f 	bic.w	r3, r3, #15
 80083c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	085b      	lsrs	r3, r3, #1
 80083ca:	b29b      	uxth	r3, r3
 80083cc:	f003 0307 	and.w	r3, r3, #7
 80083d0:	b29a      	uxth	r2, r3
 80083d2:	8afb      	ldrh	r3, [r7, #22]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	8afa      	ldrh	r2, [r7, #22]
 80083de:	60da      	str	r2, [r3, #12]
 80083e0:	e052      	b.n	8008488 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80083e8:	e04e      	b.n	8008488 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80083ee:	2b08      	cmp	r3, #8
 80083f0:	d827      	bhi.n	8008442 <UART_SetConfig+0x506>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <UART_SetConfig+0x4bc>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	0800841d 	.word	0x0800841d
 80083fc:	08008425 	.word	0x08008425
 8008400:	0800842d 	.word	0x0800842d
 8008404:	08008443 	.word	0x08008443
 8008408:	08008433 	.word	0x08008433
 800840c:	08008443 	.word	0x08008443
 8008410:	08008443 	.word	0x08008443
 8008414:	08008443 	.word	0x08008443
 8008418:	0800843b 	.word	0x0800843b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800841c:	f7fc fc82 	bl	8004d24 <HAL_RCC_GetPCLK1Freq>
 8008420:	61f8      	str	r0, [r7, #28]
        break;
 8008422:	e014      	b.n	800844e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008424:	f7fc fc94 	bl	8004d50 <HAL_RCC_GetPCLK2Freq>
 8008428:	61f8      	str	r0, [r7, #28]
        break;
 800842a:	e010      	b.n	800844e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800842c:	4b1e      	ldr	r3, [pc, #120]	; (80084a8 <UART_SetConfig+0x56c>)
 800842e:	61fb      	str	r3, [r7, #28]
        break;
 8008430:	e00d      	b.n	800844e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008432:	f7fc fbdf 	bl	8004bf4 <HAL_RCC_GetSysClockFreq>
 8008436:	61f8      	str	r0, [r7, #28]
        break;
 8008438:	e009      	b.n	800844e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800843a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800843e:	61fb      	str	r3, [r7, #28]
        break;
 8008440:	e005      	b.n	800844e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8008442:	2300      	movs	r3, #0
 8008444:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008446:	2301      	movs	r3, #1
 8008448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800844c:	bf00      	nop
    }

    if (pclk != 0U)
 800844e:	69fb      	ldr	r3, [r7, #28]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d019      	beq.n	8008488 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	685b      	ldr	r3, [r3, #4]
 8008458:	085a      	lsrs	r2, r3, #1
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	441a      	add	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	685b      	ldr	r3, [r3, #4]
 8008462:	fbb2 f3f3 	udiv	r3, r2, r3
 8008466:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008468:	69bb      	ldr	r3, [r7, #24]
 800846a:	2b0f      	cmp	r3, #15
 800846c:	d909      	bls.n	8008482 <UART_SetConfig+0x546>
 800846e:	69bb      	ldr	r3, [r7, #24]
 8008470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008474:	d205      	bcs.n	8008482 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008476:	69bb      	ldr	r3, [r7, #24]
 8008478:	b29a      	uxth	r2, r3
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	60da      	str	r2, [r3, #12]
 8008480:	e002      	b.n	8008488 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2200      	movs	r2, #0
 800848c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2200      	movs	r2, #0
 8008492:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008494:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008498:	4618      	mov	r0, r3
 800849a:	3728      	adds	r7, #40	; 0x28
 800849c:	46bd      	mov	sp, r7
 800849e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084a2:	bf00      	nop
 80084a4:	40008000 	.word	0x40008000
 80084a8:	00f42400 	.word	0x00f42400

080084ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b083      	sub	sp, #12
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	f003 0301 	and.w	r3, r3, #1
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d00a      	beq.n	80084d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	430a      	orrs	r2, r1
 80084d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084da:	f003 0302 	and.w	r3, r3, #2
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d00a      	beq.n	80084f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	430a      	orrs	r2, r1
 80084f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084fc:	f003 0304 	and.w	r3, r3, #4
 8008500:	2b00      	cmp	r3, #0
 8008502:	d00a      	beq.n	800851a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	430a      	orrs	r2, r1
 8008518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	f003 0308 	and.w	r3, r3, #8
 8008522:	2b00      	cmp	r3, #0
 8008524:	d00a      	beq.n	800853c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	685b      	ldr	r3, [r3, #4]
 800852c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	430a      	orrs	r2, r1
 800853a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008540:	f003 0310 	and.w	r3, r3, #16
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00a      	beq.n	800855e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	430a      	orrs	r2, r1
 800855c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008562:	f003 0320 	and.w	r3, r3, #32
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	430a      	orrs	r2, r1
 800857e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008588:	2b00      	cmp	r3, #0
 800858a:	d01a      	beq.n	80085c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085aa:	d10a      	bne.n	80085c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	685b      	ldr	r3, [r3, #4]
 80085b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	605a      	str	r2, [r3, #4]
  }
}
 80085e4:	bf00      	nop
 80085e6:	370c      	adds	r7, #12
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af02      	add	r7, sp, #8
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008600:	f7fa f972 	bl	80028e8 <HAL_GetTick>
 8008604:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f003 0308 	and.w	r3, r3, #8
 8008610:	2b08      	cmp	r3, #8
 8008612:	d10e      	bne.n	8008632 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008614:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008618:	9300      	str	r3, [sp, #0]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 f82d 	bl	8008682 <UART_WaitOnFlagUntilTimeout>
 8008628:	4603      	mov	r3, r0
 800862a:	2b00      	cmp	r3, #0
 800862c:	d001      	beq.n	8008632 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800862e:	2303      	movs	r3, #3
 8008630:	e023      	b.n	800867a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f003 0304 	and.w	r3, r3, #4
 800863c:	2b04      	cmp	r3, #4
 800863e:	d10e      	bne.n	800865e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008640:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f000 f817 	bl	8008682 <UART_WaitOnFlagUntilTimeout>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800865a:	2303      	movs	r3, #3
 800865c:	e00d      	b.n	800867a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2220      	movs	r2, #32
 8008662:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2220      	movs	r2, #32
 8008668:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3710      	adds	r7, #16
 800867e:	46bd      	mov	sp, r7
 8008680:	bd80      	pop	{r7, pc}

08008682 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008682:	b580      	push	{r7, lr}
 8008684:	b09c      	sub	sp, #112	; 0x70
 8008686:	af00      	add	r7, sp, #0
 8008688:	60f8      	str	r0, [r7, #12]
 800868a:	60b9      	str	r1, [r7, #8]
 800868c:	603b      	str	r3, [r7, #0]
 800868e:	4613      	mov	r3, r2
 8008690:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008692:	e0a5      	b.n	80087e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008694:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800869a:	f000 80a1 	beq.w	80087e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800869e:	f7fa f923 	bl	80028e8 <HAL_GetTick>
 80086a2:	4602      	mov	r2, r0
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	1ad3      	subs	r3, r2, r3
 80086a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d302      	bcc.n	80086b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80086ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d13e      	bne.n	8008732 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086bc:	e853 3f00 	ldrex	r3, [r3]
 80086c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086c8:	667b      	str	r3, [r7, #100]	; 0x64
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	461a      	mov	r2, r3
 80086d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086da:	e841 2300 	strex	r3, r2, [r1]
 80086de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d1e6      	bne.n	80086b4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3308      	adds	r3, #8
 80086ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f0:	e853 3f00 	ldrex	r3, [r3]
 80086f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f8:	f023 0301 	bic.w	r3, r3, #1
 80086fc:	663b      	str	r3, [r7, #96]	; 0x60
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	3308      	adds	r3, #8
 8008704:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008706:	64ba      	str	r2, [r7, #72]	; 0x48
 8008708:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800870c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800870e:	e841 2300 	strex	r3, r2, [r1]
 8008712:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008716:	2b00      	cmp	r3, #0
 8008718:	d1e5      	bne.n	80086e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	2220      	movs	r2, #32
 800871e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2220      	movs	r2, #32
 8008724:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800872e:	2303      	movs	r3, #3
 8008730:	e067      	b.n	8008802 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b00      	cmp	r3, #0
 800873e:	d04f      	beq.n	80087e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800874a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800874e:	d147      	bne.n	80087e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008758:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008762:	e853 3f00 	ldrex	r3, [r3]
 8008766:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800876a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800876e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008778:	637b      	str	r3, [r7, #52]	; 0x34
 800877a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800877e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008780:	e841 2300 	strex	r3, r2, [r1]
 8008784:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008788:	2b00      	cmp	r3, #0
 800878a:	d1e6      	bne.n	800875a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3308      	adds	r3, #8
 8008792:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	e853 3f00 	ldrex	r3, [r3]
 800879a:	613b      	str	r3, [r7, #16]
   return(result);
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	f023 0301 	bic.w	r3, r3, #1
 80087a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	3308      	adds	r3, #8
 80087aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087ac:	623a      	str	r2, [r7, #32]
 80087ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b0:	69f9      	ldr	r1, [r7, #28]
 80087b2:	6a3a      	ldr	r2, [r7, #32]
 80087b4:	e841 2300 	strex	r3, r2, [r1]
 80087b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1e5      	bne.n	800878c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2220      	movs	r2, #32
 80087c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2220      	movs	r2, #32
 80087ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2220      	movs	r2, #32
 80087d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e010      	b.n	8008802 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	69da      	ldr	r2, [r3, #28]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	4013      	ands	r3, r2
 80087ea:	68ba      	ldr	r2, [r7, #8]
 80087ec:	429a      	cmp	r2, r3
 80087ee:	bf0c      	ite	eq
 80087f0:	2301      	moveq	r3, #1
 80087f2:	2300      	movne	r3, #0
 80087f4:	b2db      	uxtb	r3, r3
 80087f6:	461a      	mov	r2, r3
 80087f8:	79fb      	ldrb	r3, [r7, #7]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	f43f af4a 	beq.w	8008694 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008800:	2300      	movs	r3, #0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3770      	adds	r7, #112	; 0x70
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800880a:	b480      	push	{r7}
 800880c:	b089      	sub	sp, #36	; 0x24
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	e853 3f00 	ldrex	r3, [r3]
 800881e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008826:	61fb      	str	r3, [r7, #28]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	461a      	mov	r2, r3
 800882e:	69fb      	ldr	r3, [r7, #28]
 8008830:	61bb      	str	r3, [r7, #24]
 8008832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008834:	6979      	ldr	r1, [r7, #20]
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	e841 2300 	strex	r3, r2, [r1]
 800883c:	613b      	str	r3, [r7, #16]
   return(result);
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1e6      	bne.n	8008812 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2220      	movs	r2, #32
 8008848:	679a      	str	r2, [r3, #120]	; 0x78
}
 800884a:	bf00      	nop
 800884c:	3724      	adds	r7, #36	; 0x24
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr

08008856 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008856:	b480      	push	{r7}
 8008858:	b095      	sub	sp, #84	; 0x54
 800885a:	af00      	add	r7, sp, #0
 800885c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008866:	e853 3f00 	ldrex	r3, [r3]
 800886a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008872:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	461a      	mov	r2, r3
 800887a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800887c:	643b      	str	r3, [r7, #64]	; 0x40
 800887e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008880:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008882:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008884:	e841 2300 	strex	r3, r2, [r1]
 8008888:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800888a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800888c:	2b00      	cmp	r3, #0
 800888e:	d1e6      	bne.n	800885e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3308      	adds	r3, #8
 8008896:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	e853 3f00 	ldrex	r3, [r3]
 800889e:	61fb      	str	r3, [r7, #28]
   return(result);
 80088a0:	69fb      	ldr	r3, [r7, #28]
 80088a2:	f023 0301 	bic.w	r3, r3, #1
 80088a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	3308      	adds	r3, #8
 80088ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088b0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b8:	e841 2300 	strex	r3, r2, [r1]
 80088bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d1e5      	bne.n	8008890 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d118      	bne.n	80088fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	e853 3f00 	ldrex	r3, [r3]
 80088d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80088da:	68bb      	ldr	r3, [r7, #8]
 80088dc:	f023 0310 	bic.w	r3, r3, #16
 80088e0:	647b      	str	r3, [r7, #68]	; 0x44
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	461a      	mov	r2, r3
 80088e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088ea:	61bb      	str	r3, [r7, #24]
 80088ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ee:	6979      	ldr	r1, [r7, #20]
 80088f0:	69ba      	ldr	r2, [r7, #24]
 80088f2:	e841 2300 	strex	r3, r2, [r1]
 80088f6:	613b      	str	r3, [r7, #16]
   return(result);
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d1e6      	bne.n	80088cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2220      	movs	r2, #32
 8008902:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008910:	bf00      	nop
 8008912:	3754      	adds	r7, #84	; 0x54
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b090      	sub	sp, #64	; 0x40
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008928:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	f003 0320 	and.w	r3, r3, #32
 8008934:	2b00      	cmp	r3, #0
 8008936:	d137      	bne.n	80089a8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800893a:	2200      	movs	r2, #0
 800893c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3308      	adds	r3, #8
 8008946:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894a:	e853 3f00 	ldrex	r3, [r3]
 800894e:	623b      	str	r3, [r7, #32]
   return(result);
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008956:	63bb      	str	r3, [r7, #56]	; 0x38
 8008958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3308      	adds	r3, #8
 800895e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008960:	633a      	str	r2, [r7, #48]	; 0x30
 8008962:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008964:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008968:	e841 2300 	strex	r3, r2, [r1]
 800896c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800896e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008970:	2b00      	cmp	r3, #0
 8008972:	d1e5      	bne.n	8008940 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	e853 3f00 	ldrex	r3, [r3]
 8008980:	60fb      	str	r3, [r7, #12]
   return(result);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008988:	637b      	str	r3, [r7, #52]	; 0x34
 800898a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	461a      	mov	r2, r3
 8008990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008992:	61fb      	str	r3, [r7, #28]
 8008994:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008996:	69b9      	ldr	r1, [r7, #24]
 8008998:	69fa      	ldr	r2, [r7, #28]
 800899a:	e841 2300 	strex	r3, r2, [r1]
 800899e:	617b      	str	r3, [r7, #20]
   return(result);
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1e6      	bne.n	8008974 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089a6:	e002      	b.n	80089ae <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80089a8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80089aa:	f7ff fa9d 	bl	8007ee8 <HAL_UART_TxCpltCallback>
}
 80089ae:	bf00      	nop
 80089b0:	3740      	adds	r7, #64	; 0x40
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089c2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff fa99 	bl	8007efc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089ca:	bf00      	nop
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089de:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80089e0:	697b      	ldr	r3, [r7, #20]
 80089e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80089e4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ea:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089f6:	2b80      	cmp	r3, #128	; 0x80
 80089f8:	d109      	bne.n	8008a0e <UART_DMAError+0x3c>
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2b21      	cmp	r3, #33	; 0x21
 80089fe:	d106      	bne.n	8008a0e <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008a08:	6978      	ldr	r0, [r7, #20]
 8008a0a:	f7ff fefe 	bl	800880a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	689b      	ldr	r3, [r3, #8]
 8008a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a18:	2b40      	cmp	r3, #64	; 0x40
 8008a1a:	d109      	bne.n	8008a30 <UART_DMAError+0x5e>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2b22      	cmp	r3, #34	; 0x22
 8008a20:	d106      	bne.n	8008a30 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008a2a:	6978      	ldr	r0, [r7, #20]
 8008a2c:	f7ff ff13 	bl	8008856 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008a36:	f043 0210 	orr.w	r2, r3, #16
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a40:	6978      	ldr	r0, [r7, #20]
 8008a42:	f7ff fa65 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a46:	bf00      	nop
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}

08008a4e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a4e:	b580      	push	{r7, lr}
 8008a50:	b084      	sub	sp, #16
 8008a52:	af00      	add	r7, sp, #0
 8008a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a6c:	68f8      	ldr	r0, [r7, #12]
 8008a6e:	f7ff fa4f 	bl	8007f10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a72:	bf00      	nop
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b088      	sub	sp, #32
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	e853 3f00 	ldrex	r3, [r3]
 8008a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a96:	61fb      	str	r3, [r7, #28]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	69fb      	ldr	r3, [r7, #28]
 8008aa0:	61bb      	str	r3, [r7, #24]
 8008aa2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6979      	ldr	r1, [r7, #20]
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	613b      	str	r3, [r7, #16]
   return(result);
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e6      	bne.n	8008a82 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2200      	movs	r2, #0
 8008abe:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7ff fa11 	bl	8007ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ac6:	bf00      	nop
 8008ac8:	3720      	adds	r7, #32
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr
	...

08008ae4 <__errno>:
 8008ae4:	4b01      	ldr	r3, [pc, #4]	; (8008aec <__errno+0x8>)
 8008ae6:	6818      	ldr	r0, [r3, #0]
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	2000000c 	.word	0x2000000c

08008af0 <__libc_init_array>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	4d0d      	ldr	r5, [pc, #52]	; (8008b28 <__libc_init_array+0x38>)
 8008af4:	4c0d      	ldr	r4, [pc, #52]	; (8008b2c <__libc_init_array+0x3c>)
 8008af6:	1b64      	subs	r4, r4, r5
 8008af8:	10a4      	asrs	r4, r4, #2
 8008afa:	2600      	movs	r6, #0
 8008afc:	42a6      	cmp	r6, r4
 8008afe:	d109      	bne.n	8008b14 <__libc_init_array+0x24>
 8008b00:	4d0b      	ldr	r5, [pc, #44]	; (8008b30 <__libc_init_array+0x40>)
 8008b02:	4c0c      	ldr	r4, [pc, #48]	; (8008b34 <__libc_init_array+0x44>)
 8008b04:	f004 f99e 	bl	800ce44 <_init>
 8008b08:	1b64      	subs	r4, r4, r5
 8008b0a:	10a4      	asrs	r4, r4, #2
 8008b0c:	2600      	movs	r6, #0
 8008b0e:	42a6      	cmp	r6, r4
 8008b10:	d105      	bne.n	8008b1e <__libc_init_array+0x2e>
 8008b12:	bd70      	pop	{r4, r5, r6, pc}
 8008b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b18:	4798      	blx	r3
 8008b1a:	3601      	adds	r6, #1
 8008b1c:	e7ee      	b.n	8008afc <__libc_init_array+0xc>
 8008b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b22:	4798      	blx	r3
 8008b24:	3601      	adds	r6, #1
 8008b26:	e7f2      	b.n	8008b0e <__libc_init_array+0x1e>
 8008b28:	0800d4e0 	.word	0x0800d4e0
 8008b2c:	0800d4e0 	.word	0x0800d4e0
 8008b30:	0800d4e0 	.word	0x0800d4e0
 8008b34:	0800d4e4 	.word	0x0800d4e4

08008b38 <memset>:
 8008b38:	4402      	add	r2, r0
 8008b3a:	4603      	mov	r3, r0
 8008b3c:	4293      	cmp	r3, r2
 8008b3e:	d100      	bne.n	8008b42 <memset+0xa>
 8008b40:	4770      	bx	lr
 8008b42:	f803 1b01 	strb.w	r1, [r3], #1
 8008b46:	e7f9      	b.n	8008b3c <memset+0x4>

08008b48 <__cvt>:
 8008b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b4c:	ec55 4b10 	vmov	r4, r5, d0
 8008b50:	2d00      	cmp	r5, #0
 8008b52:	460e      	mov	r6, r1
 8008b54:	4619      	mov	r1, r3
 8008b56:	462b      	mov	r3, r5
 8008b58:	bfbb      	ittet	lt
 8008b5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b5e:	461d      	movlt	r5, r3
 8008b60:	2300      	movge	r3, #0
 8008b62:	232d      	movlt	r3, #45	; 0x2d
 8008b64:	700b      	strb	r3, [r1, #0]
 8008b66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b6c:	4691      	mov	r9, r2
 8008b6e:	f023 0820 	bic.w	r8, r3, #32
 8008b72:	bfbc      	itt	lt
 8008b74:	4622      	movlt	r2, r4
 8008b76:	4614      	movlt	r4, r2
 8008b78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b7c:	d005      	beq.n	8008b8a <__cvt+0x42>
 8008b7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b82:	d100      	bne.n	8008b86 <__cvt+0x3e>
 8008b84:	3601      	adds	r6, #1
 8008b86:	2102      	movs	r1, #2
 8008b88:	e000      	b.n	8008b8c <__cvt+0x44>
 8008b8a:	2103      	movs	r1, #3
 8008b8c:	ab03      	add	r3, sp, #12
 8008b8e:	9301      	str	r3, [sp, #4]
 8008b90:	ab02      	add	r3, sp, #8
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	ec45 4b10 	vmov	d0, r4, r5
 8008b98:	4653      	mov	r3, sl
 8008b9a:	4632      	mov	r2, r6
 8008b9c:	f000 fe00 	bl	80097a0 <_dtoa_r>
 8008ba0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ba4:	4607      	mov	r7, r0
 8008ba6:	d102      	bne.n	8008bae <__cvt+0x66>
 8008ba8:	f019 0f01 	tst.w	r9, #1
 8008bac:	d022      	beq.n	8008bf4 <__cvt+0xac>
 8008bae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008bb2:	eb07 0906 	add.w	r9, r7, r6
 8008bb6:	d110      	bne.n	8008bda <__cvt+0x92>
 8008bb8:	783b      	ldrb	r3, [r7, #0]
 8008bba:	2b30      	cmp	r3, #48	; 0x30
 8008bbc:	d10a      	bne.n	8008bd4 <__cvt+0x8c>
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	4620      	mov	r0, r4
 8008bc4:	4629      	mov	r1, r5
 8008bc6:	f7f7 ff7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008bca:	b918      	cbnz	r0, 8008bd4 <__cvt+0x8c>
 8008bcc:	f1c6 0601 	rsb	r6, r6, #1
 8008bd0:	f8ca 6000 	str.w	r6, [sl]
 8008bd4:	f8da 3000 	ldr.w	r3, [sl]
 8008bd8:	4499      	add	r9, r3
 8008bda:	2200      	movs	r2, #0
 8008bdc:	2300      	movs	r3, #0
 8008bde:	4620      	mov	r0, r4
 8008be0:	4629      	mov	r1, r5
 8008be2:	f7f7 ff71 	bl	8000ac8 <__aeabi_dcmpeq>
 8008be6:	b108      	cbz	r0, 8008bec <__cvt+0xa4>
 8008be8:	f8cd 900c 	str.w	r9, [sp, #12]
 8008bec:	2230      	movs	r2, #48	; 0x30
 8008bee:	9b03      	ldr	r3, [sp, #12]
 8008bf0:	454b      	cmp	r3, r9
 8008bf2:	d307      	bcc.n	8008c04 <__cvt+0xbc>
 8008bf4:	9b03      	ldr	r3, [sp, #12]
 8008bf6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bf8:	1bdb      	subs	r3, r3, r7
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	b004      	add	sp, #16
 8008c00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c04:	1c59      	adds	r1, r3, #1
 8008c06:	9103      	str	r1, [sp, #12]
 8008c08:	701a      	strb	r2, [r3, #0]
 8008c0a:	e7f0      	b.n	8008bee <__cvt+0xa6>

08008c0c <__exponent>:
 8008c0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c0e:	4603      	mov	r3, r0
 8008c10:	2900      	cmp	r1, #0
 8008c12:	bfb8      	it	lt
 8008c14:	4249      	neglt	r1, r1
 8008c16:	f803 2b02 	strb.w	r2, [r3], #2
 8008c1a:	bfb4      	ite	lt
 8008c1c:	222d      	movlt	r2, #45	; 0x2d
 8008c1e:	222b      	movge	r2, #43	; 0x2b
 8008c20:	2909      	cmp	r1, #9
 8008c22:	7042      	strb	r2, [r0, #1]
 8008c24:	dd2a      	ble.n	8008c7c <__exponent+0x70>
 8008c26:	f10d 0407 	add.w	r4, sp, #7
 8008c2a:	46a4      	mov	ip, r4
 8008c2c:	270a      	movs	r7, #10
 8008c2e:	46a6      	mov	lr, r4
 8008c30:	460a      	mov	r2, r1
 8008c32:	fb91 f6f7 	sdiv	r6, r1, r7
 8008c36:	fb07 1516 	mls	r5, r7, r6, r1
 8008c3a:	3530      	adds	r5, #48	; 0x30
 8008c3c:	2a63      	cmp	r2, #99	; 0x63
 8008c3e:	f104 34ff 	add.w	r4, r4, #4294967295
 8008c42:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008c46:	4631      	mov	r1, r6
 8008c48:	dcf1      	bgt.n	8008c2e <__exponent+0x22>
 8008c4a:	3130      	adds	r1, #48	; 0x30
 8008c4c:	f1ae 0502 	sub.w	r5, lr, #2
 8008c50:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c54:	1c44      	adds	r4, r0, #1
 8008c56:	4629      	mov	r1, r5
 8008c58:	4561      	cmp	r1, ip
 8008c5a:	d30a      	bcc.n	8008c72 <__exponent+0x66>
 8008c5c:	f10d 0209 	add.w	r2, sp, #9
 8008c60:	eba2 020e 	sub.w	r2, r2, lr
 8008c64:	4565      	cmp	r5, ip
 8008c66:	bf88      	it	hi
 8008c68:	2200      	movhi	r2, #0
 8008c6a:	4413      	add	r3, r2
 8008c6c:	1a18      	subs	r0, r3, r0
 8008c6e:	b003      	add	sp, #12
 8008c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c76:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c7a:	e7ed      	b.n	8008c58 <__exponent+0x4c>
 8008c7c:	2330      	movs	r3, #48	; 0x30
 8008c7e:	3130      	adds	r1, #48	; 0x30
 8008c80:	7083      	strb	r3, [r0, #2]
 8008c82:	70c1      	strb	r1, [r0, #3]
 8008c84:	1d03      	adds	r3, r0, #4
 8008c86:	e7f1      	b.n	8008c6c <__exponent+0x60>

08008c88 <_printf_float>:
 8008c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c8c:	ed2d 8b02 	vpush	{d8}
 8008c90:	b08d      	sub	sp, #52	; 0x34
 8008c92:	460c      	mov	r4, r1
 8008c94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c98:	4616      	mov	r6, r2
 8008c9a:	461f      	mov	r7, r3
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	f001 fd25 	bl	800a6ec <_localeconv_r>
 8008ca2:	f8d0 a000 	ldr.w	sl, [r0]
 8008ca6:	4650      	mov	r0, sl
 8008ca8:	f7f7 fa92 	bl	80001d0 <strlen>
 8008cac:	2300      	movs	r3, #0
 8008cae:	930a      	str	r3, [sp, #40]	; 0x28
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	9305      	str	r3, [sp, #20]
 8008cb4:	f8d8 3000 	ldr.w	r3, [r8]
 8008cb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008cbc:	3307      	adds	r3, #7
 8008cbe:	f023 0307 	bic.w	r3, r3, #7
 8008cc2:	f103 0208 	add.w	r2, r3, #8
 8008cc6:	f8c8 2000 	str.w	r2, [r8]
 8008cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cce:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008cd2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008cd6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008cda:	9307      	str	r3, [sp, #28]
 8008cdc:	f8cd 8018 	str.w	r8, [sp, #24]
 8008ce0:	ee08 0a10 	vmov	s16, r0
 8008ce4:	4b9f      	ldr	r3, [pc, #636]	; (8008f64 <_printf_float+0x2dc>)
 8008ce6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cea:	f04f 32ff 	mov.w	r2, #4294967295
 8008cee:	f7f7 ff1d 	bl	8000b2c <__aeabi_dcmpun>
 8008cf2:	bb88      	cbnz	r0, 8008d58 <_printf_float+0xd0>
 8008cf4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cf8:	4b9a      	ldr	r3, [pc, #616]	; (8008f64 <_printf_float+0x2dc>)
 8008cfa:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfe:	f7f7 fef7 	bl	8000af0 <__aeabi_dcmple>
 8008d02:	bb48      	cbnz	r0, 8008d58 <_printf_float+0xd0>
 8008d04:	2200      	movs	r2, #0
 8008d06:	2300      	movs	r3, #0
 8008d08:	4640      	mov	r0, r8
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	f7f7 fee6 	bl	8000adc <__aeabi_dcmplt>
 8008d10:	b110      	cbz	r0, 8008d18 <_printf_float+0x90>
 8008d12:	232d      	movs	r3, #45	; 0x2d
 8008d14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d18:	4b93      	ldr	r3, [pc, #588]	; (8008f68 <_printf_float+0x2e0>)
 8008d1a:	4894      	ldr	r0, [pc, #592]	; (8008f6c <_printf_float+0x2e4>)
 8008d1c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008d20:	bf94      	ite	ls
 8008d22:	4698      	movls	r8, r3
 8008d24:	4680      	movhi	r8, r0
 8008d26:	2303      	movs	r3, #3
 8008d28:	6123      	str	r3, [r4, #16]
 8008d2a:	9b05      	ldr	r3, [sp, #20]
 8008d2c:	f023 0204 	bic.w	r2, r3, #4
 8008d30:	6022      	str	r2, [r4, #0]
 8008d32:	f04f 0900 	mov.w	r9, #0
 8008d36:	9700      	str	r7, [sp, #0]
 8008d38:	4633      	mov	r3, r6
 8008d3a:	aa0b      	add	r2, sp, #44	; 0x2c
 8008d3c:	4621      	mov	r1, r4
 8008d3e:	4628      	mov	r0, r5
 8008d40:	f000 f9d8 	bl	80090f4 <_printf_common>
 8008d44:	3001      	adds	r0, #1
 8008d46:	f040 8090 	bne.w	8008e6a <_printf_float+0x1e2>
 8008d4a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d4e:	b00d      	add	sp, #52	; 0x34
 8008d50:	ecbd 8b02 	vpop	{d8}
 8008d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d58:	4642      	mov	r2, r8
 8008d5a:	464b      	mov	r3, r9
 8008d5c:	4640      	mov	r0, r8
 8008d5e:	4649      	mov	r1, r9
 8008d60:	f7f7 fee4 	bl	8000b2c <__aeabi_dcmpun>
 8008d64:	b140      	cbz	r0, 8008d78 <_printf_float+0xf0>
 8008d66:	464b      	mov	r3, r9
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	bfbc      	itt	lt
 8008d6c:	232d      	movlt	r3, #45	; 0x2d
 8008d6e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d72:	487f      	ldr	r0, [pc, #508]	; (8008f70 <_printf_float+0x2e8>)
 8008d74:	4b7f      	ldr	r3, [pc, #508]	; (8008f74 <_printf_float+0x2ec>)
 8008d76:	e7d1      	b.n	8008d1c <_printf_float+0x94>
 8008d78:	6863      	ldr	r3, [r4, #4]
 8008d7a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d7e:	9206      	str	r2, [sp, #24]
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	d13f      	bne.n	8008e04 <_printf_float+0x17c>
 8008d84:	2306      	movs	r3, #6
 8008d86:	6063      	str	r3, [r4, #4]
 8008d88:	9b05      	ldr	r3, [sp, #20]
 8008d8a:	6861      	ldr	r1, [r4, #4]
 8008d8c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d90:	2300      	movs	r3, #0
 8008d92:	9303      	str	r3, [sp, #12]
 8008d94:	ab0a      	add	r3, sp, #40	; 0x28
 8008d96:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d9a:	ab09      	add	r3, sp, #36	; 0x24
 8008d9c:	ec49 8b10 	vmov	d0, r8, r9
 8008da0:	9300      	str	r3, [sp, #0]
 8008da2:	6022      	str	r2, [r4, #0]
 8008da4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008da8:	4628      	mov	r0, r5
 8008daa:	f7ff fecd 	bl	8008b48 <__cvt>
 8008dae:	9b06      	ldr	r3, [sp, #24]
 8008db0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008db2:	2b47      	cmp	r3, #71	; 0x47
 8008db4:	4680      	mov	r8, r0
 8008db6:	d108      	bne.n	8008dca <_printf_float+0x142>
 8008db8:	1cc8      	adds	r0, r1, #3
 8008dba:	db02      	blt.n	8008dc2 <_printf_float+0x13a>
 8008dbc:	6863      	ldr	r3, [r4, #4]
 8008dbe:	4299      	cmp	r1, r3
 8008dc0:	dd41      	ble.n	8008e46 <_printf_float+0x1be>
 8008dc2:	f1ab 0b02 	sub.w	fp, fp, #2
 8008dc6:	fa5f fb8b 	uxtb.w	fp, fp
 8008dca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008dce:	d820      	bhi.n	8008e12 <_printf_float+0x18a>
 8008dd0:	3901      	subs	r1, #1
 8008dd2:	465a      	mov	r2, fp
 8008dd4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008dd8:	9109      	str	r1, [sp, #36]	; 0x24
 8008dda:	f7ff ff17 	bl	8008c0c <__exponent>
 8008dde:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008de0:	1813      	adds	r3, r2, r0
 8008de2:	2a01      	cmp	r2, #1
 8008de4:	4681      	mov	r9, r0
 8008de6:	6123      	str	r3, [r4, #16]
 8008de8:	dc02      	bgt.n	8008df0 <_printf_float+0x168>
 8008dea:	6822      	ldr	r2, [r4, #0]
 8008dec:	07d2      	lsls	r2, r2, #31
 8008dee:	d501      	bpl.n	8008df4 <_printf_float+0x16c>
 8008df0:	3301      	adds	r3, #1
 8008df2:	6123      	str	r3, [r4, #16]
 8008df4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d09c      	beq.n	8008d36 <_printf_float+0xae>
 8008dfc:	232d      	movs	r3, #45	; 0x2d
 8008dfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e02:	e798      	b.n	8008d36 <_printf_float+0xae>
 8008e04:	9a06      	ldr	r2, [sp, #24]
 8008e06:	2a47      	cmp	r2, #71	; 0x47
 8008e08:	d1be      	bne.n	8008d88 <_printf_float+0x100>
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d1bc      	bne.n	8008d88 <_printf_float+0x100>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e7b9      	b.n	8008d86 <_printf_float+0xfe>
 8008e12:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008e16:	d118      	bne.n	8008e4a <_printf_float+0x1c2>
 8008e18:	2900      	cmp	r1, #0
 8008e1a:	6863      	ldr	r3, [r4, #4]
 8008e1c:	dd0b      	ble.n	8008e36 <_printf_float+0x1ae>
 8008e1e:	6121      	str	r1, [r4, #16]
 8008e20:	b913      	cbnz	r3, 8008e28 <_printf_float+0x1a0>
 8008e22:	6822      	ldr	r2, [r4, #0]
 8008e24:	07d0      	lsls	r0, r2, #31
 8008e26:	d502      	bpl.n	8008e2e <_printf_float+0x1a6>
 8008e28:	3301      	adds	r3, #1
 8008e2a:	440b      	add	r3, r1
 8008e2c:	6123      	str	r3, [r4, #16]
 8008e2e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008e30:	f04f 0900 	mov.w	r9, #0
 8008e34:	e7de      	b.n	8008df4 <_printf_float+0x16c>
 8008e36:	b913      	cbnz	r3, 8008e3e <_printf_float+0x1b6>
 8008e38:	6822      	ldr	r2, [r4, #0]
 8008e3a:	07d2      	lsls	r2, r2, #31
 8008e3c:	d501      	bpl.n	8008e42 <_printf_float+0x1ba>
 8008e3e:	3302      	adds	r3, #2
 8008e40:	e7f4      	b.n	8008e2c <_printf_float+0x1a4>
 8008e42:	2301      	movs	r3, #1
 8008e44:	e7f2      	b.n	8008e2c <_printf_float+0x1a4>
 8008e46:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	db05      	blt.n	8008e5c <_printf_float+0x1d4>
 8008e50:	6823      	ldr	r3, [r4, #0]
 8008e52:	6121      	str	r1, [r4, #16]
 8008e54:	07d8      	lsls	r0, r3, #31
 8008e56:	d5ea      	bpl.n	8008e2e <_printf_float+0x1a6>
 8008e58:	1c4b      	adds	r3, r1, #1
 8008e5a:	e7e7      	b.n	8008e2c <_printf_float+0x1a4>
 8008e5c:	2900      	cmp	r1, #0
 8008e5e:	bfd4      	ite	le
 8008e60:	f1c1 0202 	rsble	r2, r1, #2
 8008e64:	2201      	movgt	r2, #1
 8008e66:	4413      	add	r3, r2
 8008e68:	e7e0      	b.n	8008e2c <_printf_float+0x1a4>
 8008e6a:	6823      	ldr	r3, [r4, #0]
 8008e6c:	055a      	lsls	r2, r3, #21
 8008e6e:	d407      	bmi.n	8008e80 <_printf_float+0x1f8>
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	4642      	mov	r2, r8
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	d12c      	bne.n	8008ed8 <_printf_float+0x250>
 8008e7e:	e764      	b.n	8008d4a <_printf_float+0xc2>
 8008e80:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e84:	f240 80e0 	bls.w	8009048 <_printf_float+0x3c0>
 8008e88:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f7f7 fe1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d034      	beq.n	8008f02 <_printf_float+0x27a>
 8008e98:	4a37      	ldr	r2, [pc, #220]	; (8008f78 <_printf_float+0x2f0>)
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	4631      	mov	r1, r6
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	47b8      	blx	r7
 8008ea2:	3001      	adds	r0, #1
 8008ea4:	f43f af51 	beq.w	8008d4a <_printf_float+0xc2>
 8008ea8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008eac:	429a      	cmp	r2, r3
 8008eae:	db02      	blt.n	8008eb6 <_printf_float+0x22e>
 8008eb0:	6823      	ldr	r3, [r4, #0]
 8008eb2:	07d8      	lsls	r0, r3, #31
 8008eb4:	d510      	bpl.n	8008ed8 <_printf_float+0x250>
 8008eb6:	ee18 3a10 	vmov	r3, s16
 8008eba:	4652      	mov	r2, sl
 8008ebc:	4631      	mov	r1, r6
 8008ebe:	4628      	mov	r0, r5
 8008ec0:	47b8      	blx	r7
 8008ec2:	3001      	adds	r0, #1
 8008ec4:	f43f af41 	beq.w	8008d4a <_printf_float+0xc2>
 8008ec8:	f04f 0800 	mov.w	r8, #0
 8008ecc:	f104 091a 	add.w	r9, r4, #26
 8008ed0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ed2:	3b01      	subs	r3, #1
 8008ed4:	4543      	cmp	r3, r8
 8008ed6:	dc09      	bgt.n	8008eec <_printf_float+0x264>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	079b      	lsls	r3, r3, #30
 8008edc:	f100 8105 	bmi.w	80090ea <_printf_float+0x462>
 8008ee0:	68e0      	ldr	r0, [r4, #12]
 8008ee2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ee4:	4298      	cmp	r0, r3
 8008ee6:	bfb8      	it	lt
 8008ee8:	4618      	movlt	r0, r3
 8008eea:	e730      	b.n	8008d4e <_printf_float+0xc6>
 8008eec:	2301      	movs	r3, #1
 8008eee:	464a      	mov	r2, r9
 8008ef0:	4631      	mov	r1, r6
 8008ef2:	4628      	mov	r0, r5
 8008ef4:	47b8      	blx	r7
 8008ef6:	3001      	adds	r0, #1
 8008ef8:	f43f af27 	beq.w	8008d4a <_printf_float+0xc2>
 8008efc:	f108 0801 	add.w	r8, r8, #1
 8008f00:	e7e6      	b.n	8008ed0 <_printf_float+0x248>
 8008f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dc39      	bgt.n	8008f7c <_printf_float+0x2f4>
 8008f08:	4a1b      	ldr	r2, [pc, #108]	; (8008f78 <_printf_float+0x2f0>)
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	4631      	mov	r1, r6
 8008f0e:	4628      	mov	r0, r5
 8008f10:	47b8      	blx	r7
 8008f12:	3001      	adds	r0, #1
 8008f14:	f43f af19 	beq.w	8008d4a <_printf_float+0xc2>
 8008f18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	d102      	bne.n	8008f26 <_printf_float+0x29e>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	07d9      	lsls	r1, r3, #31
 8008f24:	d5d8      	bpl.n	8008ed8 <_printf_float+0x250>
 8008f26:	ee18 3a10 	vmov	r3, s16
 8008f2a:	4652      	mov	r2, sl
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4628      	mov	r0, r5
 8008f30:	47b8      	blx	r7
 8008f32:	3001      	adds	r0, #1
 8008f34:	f43f af09 	beq.w	8008d4a <_printf_float+0xc2>
 8008f38:	f04f 0900 	mov.w	r9, #0
 8008f3c:	f104 0a1a 	add.w	sl, r4, #26
 8008f40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f42:	425b      	negs	r3, r3
 8008f44:	454b      	cmp	r3, r9
 8008f46:	dc01      	bgt.n	8008f4c <_printf_float+0x2c4>
 8008f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f4a:	e792      	b.n	8008e72 <_printf_float+0x1ea>
 8008f4c:	2301      	movs	r3, #1
 8008f4e:	4652      	mov	r2, sl
 8008f50:	4631      	mov	r1, r6
 8008f52:	4628      	mov	r0, r5
 8008f54:	47b8      	blx	r7
 8008f56:	3001      	adds	r0, #1
 8008f58:	f43f aef7 	beq.w	8008d4a <_printf_float+0xc2>
 8008f5c:	f109 0901 	add.w	r9, r9, #1
 8008f60:	e7ee      	b.n	8008f40 <_printf_float+0x2b8>
 8008f62:	bf00      	nop
 8008f64:	7fefffff 	.word	0x7fefffff
 8008f68:	0800ceb8 	.word	0x0800ceb8
 8008f6c:	0800cebc 	.word	0x0800cebc
 8008f70:	0800cec4 	.word	0x0800cec4
 8008f74:	0800cec0 	.word	0x0800cec0
 8008f78:	0800cec8 	.word	0x0800cec8
 8008f7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f80:	429a      	cmp	r2, r3
 8008f82:	bfa8      	it	ge
 8008f84:	461a      	movge	r2, r3
 8008f86:	2a00      	cmp	r2, #0
 8008f88:	4691      	mov	r9, r2
 8008f8a:	dc37      	bgt.n	8008ffc <_printf_float+0x374>
 8008f8c:	f04f 0b00 	mov.w	fp, #0
 8008f90:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f94:	f104 021a 	add.w	r2, r4, #26
 8008f98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f9a:	9305      	str	r3, [sp, #20]
 8008f9c:	eba3 0309 	sub.w	r3, r3, r9
 8008fa0:	455b      	cmp	r3, fp
 8008fa2:	dc33      	bgt.n	800900c <_printf_float+0x384>
 8008fa4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fa8:	429a      	cmp	r2, r3
 8008faa:	db3b      	blt.n	8009024 <_printf_float+0x39c>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	07da      	lsls	r2, r3, #31
 8008fb0:	d438      	bmi.n	8009024 <_printf_float+0x39c>
 8008fb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fb4:	9a05      	ldr	r2, [sp, #20]
 8008fb6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008fb8:	1a9a      	subs	r2, r3, r2
 8008fba:	eba3 0901 	sub.w	r9, r3, r1
 8008fbe:	4591      	cmp	r9, r2
 8008fc0:	bfa8      	it	ge
 8008fc2:	4691      	movge	r9, r2
 8008fc4:	f1b9 0f00 	cmp.w	r9, #0
 8008fc8:	dc35      	bgt.n	8009036 <_printf_float+0x3ae>
 8008fca:	f04f 0800 	mov.w	r8, #0
 8008fce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008fd2:	f104 0a1a 	add.w	sl, r4, #26
 8008fd6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008fda:	1a9b      	subs	r3, r3, r2
 8008fdc:	eba3 0309 	sub.w	r3, r3, r9
 8008fe0:	4543      	cmp	r3, r8
 8008fe2:	f77f af79 	ble.w	8008ed8 <_printf_float+0x250>
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	4652      	mov	r2, sl
 8008fea:	4631      	mov	r1, r6
 8008fec:	4628      	mov	r0, r5
 8008fee:	47b8      	blx	r7
 8008ff0:	3001      	adds	r0, #1
 8008ff2:	f43f aeaa 	beq.w	8008d4a <_printf_float+0xc2>
 8008ff6:	f108 0801 	add.w	r8, r8, #1
 8008ffa:	e7ec      	b.n	8008fd6 <_printf_float+0x34e>
 8008ffc:	4613      	mov	r3, r2
 8008ffe:	4631      	mov	r1, r6
 8009000:	4642      	mov	r2, r8
 8009002:	4628      	mov	r0, r5
 8009004:	47b8      	blx	r7
 8009006:	3001      	adds	r0, #1
 8009008:	d1c0      	bne.n	8008f8c <_printf_float+0x304>
 800900a:	e69e      	b.n	8008d4a <_printf_float+0xc2>
 800900c:	2301      	movs	r3, #1
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	9205      	str	r2, [sp, #20]
 8009014:	47b8      	blx	r7
 8009016:	3001      	adds	r0, #1
 8009018:	f43f ae97 	beq.w	8008d4a <_printf_float+0xc2>
 800901c:	9a05      	ldr	r2, [sp, #20]
 800901e:	f10b 0b01 	add.w	fp, fp, #1
 8009022:	e7b9      	b.n	8008f98 <_printf_float+0x310>
 8009024:	ee18 3a10 	vmov	r3, s16
 8009028:	4652      	mov	r2, sl
 800902a:	4631      	mov	r1, r6
 800902c:	4628      	mov	r0, r5
 800902e:	47b8      	blx	r7
 8009030:	3001      	adds	r0, #1
 8009032:	d1be      	bne.n	8008fb2 <_printf_float+0x32a>
 8009034:	e689      	b.n	8008d4a <_printf_float+0xc2>
 8009036:	9a05      	ldr	r2, [sp, #20]
 8009038:	464b      	mov	r3, r9
 800903a:	4442      	add	r2, r8
 800903c:	4631      	mov	r1, r6
 800903e:	4628      	mov	r0, r5
 8009040:	47b8      	blx	r7
 8009042:	3001      	adds	r0, #1
 8009044:	d1c1      	bne.n	8008fca <_printf_float+0x342>
 8009046:	e680      	b.n	8008d4a <_printf_float+0xc2>
 8009048:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800904a:	2a01      	cmp	r2, #1
 800904c:	dc01      	bgt.n	8009052 <_printf_float+0x3ca>
 800904e:	07db      	lsls	r3, r3, #31
 8009050:	d538      	bpl.n	80090c4 <_printf_float+0x43c>
 8009052:	2301      	movs	r3, #1
 8009054:	4642      	mov	r2, r8
 8009056:	4631      	mov	r1, r6
 8009058:	4628      	mov	r0, r5
 800905a:	47b8      	blx	r7
 800905c:	3001      	adds	r0, #1
 800905e:	f43f ae74 	beq.w	8008d4a <_printf_float+0xc2>
 8009062:	ee18 3a10 	vmov	r3, s16
 8009066:	4652      	mov	r2, sl
 8009068:	4631      	mov	r1, r6
 800906a:	4628      	mov	r0, r5
 800906c:	47b8      	blx	r7
 800906e:	3001      	adds	r0, #1
 8009070:	f43f ae6b 	beq.w	8008d4a <_printf_float+0xc2>
 8009074:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009078:	2200      	movs	r2, #0
 800907a:	2300      	movs	r3, #0
 800907c:	f7f7 fd24 	bl	8000ac8 <__aeabi_dcmpeq>
 8009080:	b9d8      	cbnz	r0, 80090ba <_printf_float+0x432>
 8009082:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009084:	f108 0201 	add.w	r2, r8, #1
 8009088:	3b01      	subs	r3, #1
 800908a:	4631      	mov	r1, r6
 800908c:	4628      	mov	r0, r5
 800908e:	47b8      	blx	r7
 8009090:	3001      	adds	r0, #1
 8009092:	d10e      	bne.n	80090b2 <_printf_float+0x42a>
 8009094:	e659      	b.n	8008d4a <_printf_float+0xc2>
 8009096:	2301      	movs	r3, #1
 8009098:	4652      	mov	r2, sl
 800909a:	4631      	mov	r1, r6
 800909c:	4628      	mov	r0, r5
 800909e:	47b8      	blx	r7
 80090a0:	3001      	adds	r0, #1
 80090a2:	f43f ae52 	beq.w	8008d4a <_printf_float+0xc2>
 80090a6:	f108 0801 	add.w	r8, r8, #1
 80090aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090ac:	3b01      	subs	r3, #1
 80090ae:	4543      	cmp	r3, r8
 80090b0:	dcf1      	bgt.n	8009096 <_printf_float+0x40e>
 80090b2:	464b      	mov	r3, r9
 80090b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80090b8:	e6dc      	b.n	8008e74 <_printf_float+0x1ec>
 80090ba:	f04f 0800 	mov.w	r8, #0
 80090be:	f104 0a1a 	add.w	sl, r4, #26
 80090c2:	e7f2      	b.n	80090aa <_printf_float+0x422>
 80090c4:	2301      	movs	r3, #1
 80090c6:	4642      	mov	r2, r8
 80090c8:	e7df      	b.n	800908a <_printf_float+0x402>
 80090ca:	2301      	movs	r3, #1
 80090cc:	464a      	mov	r2, r9
 80090ce:	4631      	mov	r1, r6
 80090d0:	4628      	mov	r0, r5
 80090d2:	47b8      	blx	r7
 80090d4:	3001      	adds	r0, #1
 80090d6:	f43f ae38 	beq.w	8008d4a <_printf_float+0xc2>
 80090da:	f108 0801 	add.w	r8, r8, #1
 80090de:	68e3      	ldr	r3, [r4, #12]
 80090e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80090e2:	1a5b      	subs	r3, r3, r1
 80090e4:	4543      	cmp	r3, r8
 80090e6:	dcf0      	bgt.n	80090ca <_printf_float+0x442>
 80090e8:	e6fa      	b.n	8008ee0 <_printf_float+0x258>
 80090ea:	f04f 0800 	mov.w	r8, #0
 80090ee:	f104 0919 	add.w	r9, r4, #25
 80090f2:	e7f4      	b.n	80090de <_printf_float+0x456>

080090f4 <_printf_common>:
 80090f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090f8:	4616      	mov	r6, r2
 80090fa:	4699      	mov	r9, r3
 80090fc:	688a      	ldr	r2, [r1, #8]
 80090fe:	690b      	ldr	r3, [r1, #16]
 8009100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009104:	4293      	cmp	r3, r2
 8009106:	bfb8      	it	lt
 8009108:	4613      	movlt	r3, r2
 800910a:	6033      	str	r3, [r6, #0]
 800910c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009110:	4607      	mov	r7, r0
 8009112:	460c      	mov	r4, r1
 8009114:	b10a      	cbz	r2, 800911a <_printf_common+0x26>
 8009116:	3301      	adds	r3, #1
 8009118:	6033      	str	r3, [r6, #0]
 800911a:	6823      	ldr	r3, [r4, #0]
 800911c:	0699      	lsls	r1, r3, #26
 800911e:	bf42      	ittt	mi
 8009120:	6833      	ldrmi	r3, [r6, #0]
 8009122:	3302      	addmi	r3, #2
 8009124:	6033      	strmi	r3, [r6, #0]
 8009126:	6825      	ldr	r5, [r4, #0]
 8009128:	f015 0506 	ands.w	r5, r5, #6
 800912c:	d106      	bne.n	800913c <_printf_common+0x48>
 800912e:	f104 0a19 	add.w	sl, r4, #25
 8009132:	68e3      	ldr	r3, [r4, #12]
 8009134:	6832      	ldr	r2, [r6, #0]
 8009136:	1a9b      	subs	r3, r3, r2
 8009138:	42ab      	cmp	r3, r5
 800913a:	dc26      	bgt.n	800918a <_printf_common+0x96>
 800913c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009140:	1e13      	subs	r3, r2, #0
 8009142:	6822      	ldr	r2, [r4, #0]
 8009144:	bf18      	it	ne
 8009146:	2301      	movne	r3, #1
 8009148:	0692      	lsls	r2, r2, #26
 800914a:	d42b      	bmi.n	80091a4 <_printf_common+0xb0>
 800914c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009150:	4649      	mov	r1, r9
 8009152:	4638      	mov	r0, r7
 8009154:	47c0      	blx	r8
 8009156:	3001      	adds	r0, #1
 8009158:	d01e      	beq.n	8009198 <_printf_common+0xa4>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	68e5      	ldr	r5, [r4, #12]
 800915e:	6832      	ldr	r2, [r6, #0]
 8009160:	f003 0306 	and.w	r3, r3, #6
 8009164:	2b04      	cmp	r3, #4
 8009166:	bf08      	it	eq
 8009168:	1aad      	subeq	r5, r5, r2
 800916a:	68a3      	ldr	r3, [r4, #8]
 800916c:	6922      	ldr	r2, [r4, #16]
 800916e:	bf0c      	ite	eq
 8009170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009174:	2500      	movne	r5, #0
 8009176:	4293      	cmp	r3, r2
 8009178:	bfc4      	itt	gt
 800917a:	1a9b      	subgt	r3, r3, r2
 800917c:	18ed      	addgt	r5, r5, r3
 800917e:	2600      	movs	r6, #0
 8009180:	341a      	adds	r4, #26
 8009182:	42b5      	cmp	r5, r6
 8009184:	d11a      	bne.n	80091bc <_printf_common+0xc8>
 8009186:	2000      	movs	r0, #0
 8009188:	e008      	b.n	800919c <_printf_common+0xa8>
 800918a:	2301      	movs	r3, #1
 800918c:	4652      	mov	r2, sl
 800918e:	4649      	mov	r1, r9
 8009190:	4638      	mov	r0, r7
 8009192:	47c0      	blx	r8
 8009194:	3001      	adds	r0, #1
 8009196:	d103      	bne.n	80091a0 <_printf_common+0xac>
 8009198:	f04f 30ff 	mov.w	r0, #4294967295
 800919c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a0:	3501      	adds	r5, #1
 80091a2:	e7c6      	b.n	8009132 <_printf_common+0x3e>
 80091a4:	18e1      	adds	r1, r4, r3
 80091a6:	1c5a      	adds	r2, r3, #1
 80091a8:	2030      	movs	r0, #48	; 0x30
 80091aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091ae:	4422      	add	r2, r4
 80091b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091b8:	3302      	adds	r3, #2
 80091ba:	e7c7      	b.n	800914c <_printf_common+0x58>
 80091bc:	2301      	movs	r3, #1
 80091be:	4622      	mov	r2, r4
 80091c0:	4649      	mov	r1, r9
 80091c2:	4638      	mov	r0, r7
 80091c4:	47c0      	blx	r8
 80091c6:	3001      	adds	r0, #1
 80091c8:	d0e6      	beq.n	8009198 <_printf_common+0xa4>
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7d9      	b.n	8009182 <_printf_common+0x8e>
	...

080091d0 <_printf_i>:
 80091d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091d4:	7e0f      	ldrb	r7, [r1, #24]
 80091d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80091d8:	2f78      	cmp	r7, #120	; 0x78
 80091da:	4691      	mov	r9, r2
 80091dc:	4680      	mov	r8, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	469a      	mov	sl, r3
 80091e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80091e6:	d807      	bhi.n	80091f8 <_printf_i+0x28>
 80091e8:	2f62      	cmp	r7, #98	; 0x62
 80091ea:	d80a      	bhi.n	8009202 <_printf_i+0x32>
 80091ec:	2f00      	cmp	r7, #0
 80091ee:	f000 80d8 	beq.w	80093a2 <_printf_i+0x1d2>
 80091f2:	2f58      	cmp	r7, #88	; 0x58
 80091f4:	f000 80a3 	beq.w	800933e <_printf_i+0x16e>
 80091f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009200:	e03a      	b.n	8009278 <_printf_i+0xa8>
 8009202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009206:	2b15      	cmp	r3, #21
 8009208:	d8f6      	bhi.n	80091f8 <_printf_i+0x28>
 800920a:	a101      	add	r1, pc, #4	; (adr r1, 8009210 <_printf_i+0x40>)
 800920c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009210:	08009269 	.word	0x08009269
 8009214:	0800927d 	.word	0x0800927d
 8009218:	080091f9 	.word	0x080091f9
 800921c:	080091f9 	.word	0x080091f9
 8009220:	080091f9 	.word	0x080091f9
 8009224:	080091f9 	.word	0x080091f9
 8009228:	0800927d 	.word	0x0800927d
 800922c:	080091f9 	.word	0x080091f9
 8009230:	080091f9 	.word	0x080091f9
 8009234:	080091f9 	.word	0x080091f9
 8009238:	080091f9 	.word	0x080091f9
 800923c:	08009389 	.word	0x08009389
 8009240:	080092ad 	.word	0x080092ad
 8009244:	0800936b 	.word	0x0800936b
 8009248:	080091f9 	.word	0x080091f9
 800924c:	080091f9 	.word	0x080091f9
 8009250:	080093ab 	.word	0x080093ab
 8009254:	080091f9 	.word	0x080091f9
 8009258:	080092ad 	.word	0x080092ad
 800925c:	080091f9 	.word	0x080091f9
 8009260:	080091f9 	.word	0x080091f9
 8009264:	08009373 	.word	0x08009373
 8009268:	682b      	ldr	r3, [r5, #0]
 800926a:	1d1a      	adds	r2, r3, #4
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	602a      	str	r2, [r5, #0]
 8009270:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009278:	2301      	movs	r3, #1
 800927a:	e0a3      	b.n	80093c4 <_printf_i+0x1f4>
 800927c:	6820      	ldr	r0, [r4, #0]
 800927e:	6829      	ldr	r1, [r5, #0]
 8009280:	0606      	lsls	r6, r0, #24
 8009282:	f101 0304 	add.w	r3, r1, #4
 8009286:	d50a      	bpl.n	800929e <_printf_i+0xce>
 8009288:	680e      	ldr	r6, [r1, #0]
 800928a:	602b      	str	r3, [r5, #0]
 800928c:	2e00      	cmp	r6, #0
 800928e:	da03      	bge.n	8009298 <_printf_i+0xc8>
 8009290:	232d      	movs	r3, #45	; 0x2d
 8009292:	4276      	negs	r6, r6
 8009294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009298:	485e      	ldr	r0, [pc, #376]	; (8009414 <_printf_i+0x244>)
 800929a:	230a      	movs	r3, #10
 800929c:	e019      	b.n	80092d2 <_printf_i+0x102>
 800929e:	680e      	ldr	r6, [r1, #0]
 80092a0:	602b      	str	r3, [r5, #0]
 80092a2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80092a6:	bf18      	it	ne
 80092a8:	b236      	sxthne	r6, r6
 80092aa:	e7ef      	b.n	800928c <_printf_i+0xbc>
 80092ac:	682b      	ldr	r3, [r5, #0]
 80092ae:	6820      	ldr	r0, [r4, #0]
 80092b0:	1d19      	adds	r1, r3, #4
 80092b2:	6029      	str	r1, [r5, #0]
 80092b4:	0601      	lsls	r1, r0, #24
 80092b6:	d501      	bpl.n	80092bc <_printf_i+0xec>
 80092b8:	681e      	ldr	r6, [r3, #0]
 80092ba:	e002      	b.n	80092c2 <_printf_i+0xf2>
 80092bc:	0646      	lsls	r6, r0, #25
 80092be:	d5fb      	bpl.n	80092b8 <_printf_i+0xe8>
 80092c0:	881e      	ldrh	r6, [r3, #0]
 80092c2:	4854      	ldr	r0, [pc, #336]	; (8009414 <_printf_i+0x244>)
 80092c4:	2f6f      	cmp	r7, #111	; 0x6f
 80092c6:	bf0c      	ite	eq
 80092c8:	2308      	moveq	r3, #8
 80092ca:	230a      	movne	r3, #10
 80092cc:	2100      	movs	r1, #0
 80092ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092d2:	6865      	ldr	r5, [r4, #4]
 80092d4:	60a5      	str	r5, [r4, #8]
 80092d6:	2d00      	cmp	r5, #0
 80092d8:	bfa2      	ittt	ge
 80092da:	6821      	ldrge	r1, [r4, #0]
 80092dc:	f021 0104 	bicge.w	r1, r1, #4
 80092e0:	6021      	strge	r1, [r4, #0]
 80092e2:	b90e      	cbnz	r6, 80092e8 <_printf_i+0x118>
 80092e4:	2d00      	cmp	r5, #0
 80092e6:	d04d      	beq.n	8009384 <_printf_i+0x1b4>
 80092e8:	4615      	mov	r5, r2
 80092ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80092ee:	fb03 6711 	mls	r7, r3, r1, r6
 80092f2:	5dc7      	ldrb	r7, [r0, r7]
 80092f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092f8:	4637      	mov	r7, r6
 80092fa:	42bb      	cmp	r3, r7
 80092fc:	460e      	mov	r6, r1
 80092fe:	d9f4      	bls.n	80092ea <_printf_i+0x11a>
 8009300:	2b08      	cmp	r3, #8
 8009302:	d10b      	bne.n	800931c <_printf_i+0x14c>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	07de      	lsls	r6, r3, #31
 8009308:	d508      	bpl.n	800931c <_printf_i+0x14c>
 800930a:	6923      	ldr	r3, [r4, #16]
 800930c:	6861      	ldr	r1, [r4, #4]
 800930e:	4299      	cmp	r1, r3
 8009310:	bfde      	ittt	le
 8009312:	2330      	movle	r3, #48	; 0x30
 8009314:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009318:	f105 35ff 	addle.w	r5, r5, #4294967295
 800931c:	1b52      	subs	r2, r2, r5
 800931e:	6122      	str	r2, [r4, #16]
 8009320:	f8cd a000 	str.w	sl, [sp]
 8009324:	464b      	mov	r3, r9
 8009326:	aa03      	add	r2, sp, #12
 8009328:	4621      	mov	r1, r4
 800932a:	4640      	mov	r0, r8
 800932c:	f7ff fee2 	bl	80090f4 <_printf_common>
 8009330:	3001      	adds	r0, #1
 8009332:	d14c      	bne.n	80093ce <_printf_i+0x1fe>
 8009334:	f04f 30ff 	mov.w	r0, #4294967295
 8009338:	b004      	add	sp, #16
 800933a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800933e:	4835      	ldr	r0, [pc, #212]	; (8009414 <_printf_i+0x244>)
 8009340:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009344:	6829      	ldr	r1, [r5, #0]
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	f851 6b04 	ldr.w	r6, [r1], #4
 800934c:	6029      	str	r1, [r5, #0]
 800934e:	061d      	lsls	r5, r3, #24
 8009350:	d514      	bpl.n	800937c <_printf_i+0x1ac>
 8009352:	07df      	lsls	r7, r3, #31
 8009354:	bf44      	itt	mi
 8009356:	f043 0320 	orrmi.w	r3, r3, #32
 800935a:	6023      	strmi	r3, [r4, #0]
 800935c:	b91e      	cbnz	r6, 8009366 <_printf_i+0x196>
 800935e:	6823      	ldr	r3, [r4, #0]
 8009360:	f023 0320 	bic.w	r3, r3, #32
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	2310      	movs	r3, #16
 8009368:	e7b0      	b.n	80092cc <_printf_i+0xfc>
 800936a:	6823      	ldr	r3, [r4, #0]
 800936c:	f043 0320 	orr.w	r3, r3, #32
 8009370:	6023      	str	r3, [r4, #0]
 8009372:	2378      	movs	r3, #120	; 0x78
 8009374:	4828      	ldr	r0, [pc, #160]	; (8009418 <_printf_i+0x248>)
 8009376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800937a:	e7e3      	b.n	8009344 <_printf_i+0x174>
 800937c:	0659      	lsls	r1, r3, #25
 800937e:	bf48      	it	mi
 8009380:	b2b6      	uxthmi	r6, r6
 8009382:	e7e6      	b.n	8009352 <_printf_i+0x182>
 8009384:	4615      	mov	r5, r2
 8009386:	e7bb      	b.n	8009300 <_printf_i+0x130>
 8009388:	682b      	ldr	r3, [r5, #0]
 800938a:	6826      	ldr	r6, [r4, #0]
 800938c:	6961      	ldr	r1, [r4, #20]
 800938e:	1d18      	adds	r0, r3, #4
 8009390:	6028      	str	r0, [r5, #0]
 8009392:	0635      	lsls	r5, r6, #24
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	d501      	bpl.n	800939c <_printf_i+0x1cc>
 8009398:	6019      	str	r1, [r3, #0]
 800939a:	e002      	b.n	80093a2 <_printf_i+0x1d2>
 800939c:	0670      	lsls	r0, r6, #25
 800939e:	d5fb      	bpl.n	8009398 <_printf_i+0x1c8>
 80093a0:	8019      	strh	r1, [r3, #0]
 80093a2:	2300      	movs	r3, #0
 80093a4:	6123      	str	r3, [r4, #16]
 80093a6:	4615      	mov	r5, r2
 80093a8:	e7ba      	b.n	8009320 <_printf_i+0x150>
 80093aa:	682b      	ldr	r3, [r5, #0]
 80093ac:	1d1a      	adds	r2, r3, #4
 80093ae:	602a      	str	r2, [r5, #0]
 80093b0:	681d      	ldr	r5, [r3, #0]
 80093b2:	6862      	ldr	r2, [r4, #4]
 80093b4:	2100      	movs	r1, #0
 80093b6:	4628      	mov	r0, r5
 80093b8:	f7f6 ff12 	bl	80001e0 <memchr>
 80093bc:	b108      	cbz	r0, 80093c2 <_printf_i+0x1f2>
 80093be:	1b40      	subs	r0, r0, r5
 80093c0:	6060      	str	r0, [r4, #4]
 80093c2:	6863      	ldr	r3, [r4, #4]
 80093c4:	6123      	str	r3, [r4, #16]
 80093c6:	2300      	movs	r3, #0
 80093c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093cc:	e7a8      	b.n	8009320 <_printf_i+0x150>
 80093ce:	6923      	ldr	r3, [r4, #16]
 80093d0:	462a      	mov	r2, r5
 80093d2:	4649      	mov	r1, r9
 80093d4:	4640      	mov	r0, r8
 80093d6:	47d0      	blx	sl
 80093d8:	3001      	adds	r0, #1
 80093da:	d0ab      	beq.n	8009334 <_printf_i+0x164>
 80093dc:	6823      	ldr	r3, [r4, #0]
 80093de:	079b      	lsls	r3, r3, #30
 80093e0:	d413      	bmi.n	800940a <_printf_i+0x23a>
 80093e2:	68e0      	ldr	r0, [r4, #12]
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	4298      	cmp	r0, r3
 80093e8:	bfb8      	it	lt
 80093ea:	4618      	movlt	r0, r3
 80093ec:	e7a4      	b.n	8009338 <_printf_i+0x168>
 80093ee:	2301      	movs	r3, #1
 80093f0:	4632      	mov	r2, r6
 80093f2:	4649      	mov	r1, r9
 80093f4:	4640      	mov	r0, r8
 80093f6:	47d0      	blx	sl
 80093f8:	3001      	adds	r0, #1
 80093fa:	d09b      	beq.n	8009334 <_printf_i+0x164>
 80093fc:	3501      	adds	r5, #1
 80093fe:	68e3      	ldr	r3, [r4, #12]
 8009400:	9903      	ldr	r1, [sp, #12]
 8009402:	1a5b      	subs	r3, r3, r1
 8009404:	42ab      	cmp	r3, r5
 8009406:	dcf2      	bgt.n	80093ee <_printf_i+0x21e>
 8009408:	e7eb      	b.n	80093e2 <_printf_i+0x212>
 800940a:	2500      	movs	r5, #0
 800940c:	f104 0619 	add.w	r6, r4, #25
 8009410:	e7f5      	b.n	80093fe <_printf_i+0x22e>
 8009412:	bf00      	nop
 8009414:	0800ceca 	.word	0x0800ceca
 8009418:	0800cedb 	.word	0x0800cedb

0800941c <_puts_r>:
 800941c:	b570      	push	{r4, r5, r6, lr}
 800941e:	460e      	mov	r6, r1
 8009420:	4605      	mov	r5, r0
 8009422:	b118      	cbz	r0, 800942c <_puts_r+0x10>
 8009424:	6983      	ldr	r3, [r0, #24]
 8009426:	b90b      	cbnz	r3, 800942c <_puts_r+0x10>
 8009428:	f001 f8c2 	bl	800a5b0 <__sinit>
 800942c:	69ab      	ldr	r3, [r5, #24]
 800942e:	68ac      	ldr	r4, [r5, #8]
 8009430:	b913      	cbnz	r3, 8009438 <_puts_r+0x1c>
 8009432:	4628      	mov	r0, r5
 8009434:	f001 f8bc 	bl	800a5b0 <__sinit>
 8009438:	4b2c      	ldr	r3, [pc, #176]	; (80094ec <_puts_r+0xd0>)
 800943a:	429c      	cmp	r4, r3
 800943c:	d120      	bne.n	8009480 <_puts_r+0x64>
 800943e:	686c      	ldr	r4, [r5, #4]
 8009440:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009442:	07db      	lsls	r3, r3, #31
 8009444:	d405      	bmi.n	8009452 <_puts_r+0x36>
 8009446:	89a3      	ldrh	r3, [r4, #12]
 8009448:	0598      	lsls	r0, r3, #22
 800944a:	d402      	bmi.n	8009452 <_puts_r+0x36>
 800944c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800944e:	f001 f952 	bl	800a6f6 <__retarget_lock_acquire_recursive>
 8009452:	89a3      	ldrh	r3, [r4, #12]
 8009454:	0719      	lsls	r1, r3, #28
 8009456:	d51d      	bpl.n	8009494 <_puts_r+0x78>
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	b1db      	cbz	r3, 8009494 <_puts_r+0x78>
 800945c:	3e01      	subs	r6, #1
 800945e:	68a3      	ldr	r3, [r4, #8]
 8009460:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009464:	3b01      	subs	r3, #1
 8009466:	60a3      	str	r3, [r4, #8]
 8009468:	bb39      	cbnz	r1, 80094ba <_puts_r+0x9e>
 800946a:	2b00      	cmp	r3, #0
 800946c:	da38      	bge.n	80094e0 <_puts_r+0xc4>
 800946e:	4622      	mov	r2, r4
 8009470:	210a      	movs	r1, #10
 8009472:	4628      	mov	r0, r5
 8009474:	f000 f848 	bl	8009508 <__swbuf_r>
 8009478:	3001      	adds	r0, #1
 800947a:	d011      	beq.n	80094a0 <_puts_r+0x84>
 800947c:	250a      	movs	r5, #10
 800947e:	e011      	b.n	80094a4 <_puts_r+0x88>
 8009480:	4b1b      	ldr	r3, [pc, #108]	; (80094f0 <_puts_r+0xd4>)
 8009482:	429c      	cmp	r4, r3
 8009484:	d101      	bne.n	800948a <_puts_r+0x6e>
 8009486:	68ac      	ldr	r4, [r5, #8]
 8009488:	e7da      	b.n	8009440 <_puts_r+0x24>
 800948a:	4b1a      	ldr	r3, [pc, #104]	; (80094f4 <_puts_r+0xd8>)
 800948c:	429c      	cmp	r4, r3
 800948e:	bf08      	it	eq
 8009490:	68ec      	ldreq	r4, [r5, #12]
 8009492:	e7d5      	b.n	8009440 <_puts_r+0x24>
 8009494:	4621      	mov	r1, r4
 8009496:	4628      	mov	r0, r5
 8009498:	f000 f888 	bl	80095ac <__swsetup_r>
 800949c:	2800      	cmp	r0, #0
 800949e:	d0dd      	beq.n	800945c <_puts_r+0x40>
 80094a0:	f04f 35ff 	mov.w	r5, #4294967295
 80094a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80094a6:	07da      	lsls	r2, r3, #31
 80094a8:	d405      	bmi.n	80094b6 <_puts_r+0x9a>
 80094aa:	89a3      	ldrh	r3, [r4, #12]
 80094ac:	059b      	lsls	r3, r3, #22
 80094ae:	d402      	bmi.n	80094b6 <_puts_r+0x9a>
 80094b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80094b2:	f001 f921 	bl	800a6f8 <__retarget_lock_release_recursive>
 80094b6:	4628      	mov	r0, r5
 80094b8:	bd70      	pop	{r4, r5, r6, pc}
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	da04      	bge.n	80094c8 <_puts_r+0xac>
 80094be:	69a2      	ldr	r2, [r4, #24]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	dc06      	bgt.n	80094d2 <_puts_r+0xb6>
 80094c4:	290a      	cmp	r1, #10
 80094c6:	d004      	beq.n	80094d2 <_puts_r+0xb6>
 80094c8:	6823      	ldr	r3, [r4, #0]
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	6022      	str	r2, [r4, #0]
 80094ce:	7019      	strb	r1, [r3, #0]
 80094d0:	e7c5      	b.n	800945e <_puts_r+0x42>
 80094d2:	4622      	mov	r2, r4
 80094d4:	4628      	mov	r0, r5
 80094d6:	f000 f817 	bl	8009508 <__swbuf_r>
 80094da:	3001      	adds	r0, #1
 80094dc:	d1bf      	bne.n	800945e <_puts_r+0x42>
 80094de:	e7df      	b.n	80094a0 <_puts_r+0x84>
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	250a      	movs	r5, #10
 80094e4:	1c5a      	adds	r2, r3, #1
 80094e6:	6022      	str	r2, [r4, #0]
 80094e8:	701d      	strb	r5, [r3, #0]
 80094ea:	e7db      	b.n	80094a4 <_puts_r+0x88>
 80094ec:	0800cf9c 	.word	0x0800cf9c
 80094f0:	0800cfbc 	.word	0x0800cfbc
 80094f4:	0800cf7c 	.word	0x0800cf7c

080094f8 <puts>:
 80094f8:	4b02      	ldr	r3, [pc, #8]	; (8009504 <puts+0xc>)
 80094fa:	4601      	mov	r1, r0
 80094fc:	6818      	ldr	r0, [r3, #0]
 80094fe:	f7ff bf8d 	b.w	800941c <_puts_r>
 8009502:	bf00      	nop
 8009504:	2000000c 	.word	0x2000000c

08009508 <__swbuf_r>:
 8009508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800950a:	460e      	mov	r6, r1
 800950c:	4614      	mov	r4, r2
 800950e:	4605      	mov	r5, r0
 8009510:	b118      	cbz	r0, 800951a <__swbuf_r+0x12>
 8009512:	6983      	ldr	r3, [r0, #24]
 8009514:	b90b      	cbnz	r3, 800951a <__swbuf_r+0x12>
 8009516:	f001 f84b 	bl	800a5b0 <__sinit>
 800951a:	4b21      	ldr	r3, [pc, #132]	; (80095a0 <__swbuf_r+0x98>)
 800951c:	429c      	cmp	r4, r3
 800951e:	d12b      	bne.n	8009578 <__swbuf_r+0x70>
 8009520:	686c      	ldr	r4, [r5, #4]
 8009522:	69a3      	ldr	r3, [r4, #24]
 8009524:	60a3      	str	r3, [r4, #8]
 8009526:	89a3      	ldrh	r3, [r4, #12]
 8009528:	071a      	lsls	r2, r3, #28
 800952a:	d52f      	bpl.n	800958c <__swbuf_r+0x84>
 800952c:	6923      	ldr	r3, [r4, #16]
 800952e:	b36b      	cbz	r3, 800958c <__swbuf_r+0x84>
 8009530:	6923      	ldr	r3, [r4, #16]
 8009532:	6820      	ldr	r0, [r4, #0]
 8009534:	1ac0      	subs	r0, r0, r3
 8009536:	6963      	ldr	r3, [r4, #20]
 8009538:	b2f6      	uxtb	r6, r6
 800953a:	4283      	cmp	r3, r0
 800953c:	4637      	mov	r7, r6
 800953e:	dc04      	bgt.n	800954a <__swbuf_r+0x42>
 8009540:	4621      	mov	r1, r4
 8009542:	4628      	mov	r0, r5
 8009544:	f000 ffa0 	bl	800a488 <_fflush_r>
 8009548:	bb30      	cbnz	r0, 8009598 <__swbuf_r+0x90>
 800954a:	68a3      	ldr	r3, [r4, #8]
 800954c:	3b01      	subs	r3, #1
 800954e:	60a3      	str	r3, [r4, #8]
 8009550:	6823      	ldr	r3, [r4, #0]
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	6022      	str	r2, [r4, #0]
 8009556:	701e      	strb	r6, [r3, #0]
 8009558:	6963      	ldr	r3, [r4, #20]
 800955a:	3001      	adds	r0, #1
 800955c:	4283      	cmp	r3, r0
 800955e:	d004      	beq.n	800956a <__swbuf_r+0x62>
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	07db      	lsls	r3, r3, #31
 8009564:	d506      	bpl.n	8009574 <__swbuf_r+0x6c>
 8009566:	2e0a      	cmp	r6, #10
 8009568:	d104      	bne.n	8009574 <__swbuf_r+0x6c>
 800956a:	4621      	mov	r1, r4
 800956c:	4628      	mov	r0, r5
 800956e:	f000 ff8b 	bl	800a488 <_fflush_r>
 8009572:	b988      	cbnz	r0, 8009598 <__swbuf_r+0x90>
 8009574:	4638      	mov	r0, r7
 8009576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009578:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <__swbuf_r+0x9c>)
 800957a:	429c      	cmp	r4, r3
 800957c:	d101      	bne.n	8009582 <__swbuf_r+0x7a>
 800957e:	68ac      	ldr	r4, [r5, #8]
 8009580:	e7cf      	b.n	8009522 <__swbuf_r+0x1a>
 8009582:	4b09      	ldr	r3, [pc, #36]	; (80095a8 <__swbuf_r+0xa0>)
 8009584:	429c      	cmp	r4, r3
 8009586:	bf08      	it	eq
 8009588:	68ec      	ldreq	r4, [r5, #12]
 800958a:	e7ca      	b.n	8009522 <__swbuf_r+0x1a>
 800958c:	4621      	mov	r1, r4
 800958e:	4628      	mov	r0, r5
 8009590:	f000 f80c 	bl	80095ac <__swsetup_r>
 8009594:	2800      	cmp	r0, #0
 8009596:	d0cb      	beq.n	8009530 <__swbuf_r+0x28>
 8009598:	f04f 37ff 	mov.w	r7, #4294967295
 800959c:	e7ea      	b.n	8009574 <__swbuf_r+0x6c>
 800959e:	bf00      	nop
 80095a0:	0800cf9c 	.word	0x0800cf9c
 80095a4:	0800cfbc 	.word	0x0800cfbc
 80095a8:	0800cf7c 	.word	0x0800cf7c

080095ac <__swsetup_r>:
 80095ac:	4b32      	ldr	r3, [pc, #200]	; (8009678 <__swsetup_r+0xcc>)
 80095ae:	b570      	push	{r4, r5, r6, lr}
 80095b0:	681d      	ldr	r5, [r3, #0]
 80095b2:	4606      	mov	r6, r0
 80095b4:	460c      	mov	r4, r1
 80095b6:	b125      	cbz	r5, 80095c2 <__swsetup_r+0x16>
 80095b8:	69ab      	ldr	r3, [r5, #24]
 80095ba:	b913      	cbnz	r3, 80095c2 <__swsetup_r+0x16>
 80095bc:	4628      	mov	r0, r5
 80095be:	f000 fff7 	bl	800a5b0 <__sinit>
 80095c2:	4b2e      	ldr	r3, [pc, #184]	; (800967c <__swsetup_r+0xd0>)
 80095c4:	429c      	cmp	r4, r3
 80095c6:	d10f      	bne.n	80095e8 <__swsetup_r+0x3c>
 80095c8:	686c      	ldr	r4, [r5, #4]
 80095ca:	89a3      	ldrh	r3, [r4, #12]
 80095cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095d0:	0719      	lsls	r1, r3, #28
 80095d2:	d42c      	bmi.n	800962e <__swsetup_r+0x82>
 80095d4:	06dd      	lsls	r5, r3, #27
 80095d6:	d411      	bmi.n	80095fc <__swsetup_r+0x50>
 80095d8:	2309      	movs	r3, #9
 80095da:	6033      	str	r3, [r6, #0]
 80095dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095e0:	81a3      	strh	r3, [r4, #12]
 80095e2:	f04f 30ff 	mov.w	r0, #4294967295
 80095e6:	e03e      	b.n	8009666 <__swsetup_r+0xba>
 80095e8:	4b25      	ldr	r3, [pc, #148]	; (8009680 <__swsetup_r+0xd4>)
 80095ea:	429c      	cmp	r4, r3
 80095ec:	d101      	bne.n	80095f2 <__swsetup_r+0x46>
 80095ee:	68ac      	ldr	r4, [r5, #8]
 80095f0:	e7eb      	b.n	80095ca <__swsetup_r+0x1e>
 80095f2:	4b24      	ldr	r3, [pc, #144]	; (8009684 <__swsetup_r+0xd8>)
 80095f4:	429c      	cmp	r4, r3
 80095f6:	bf08      	it	eq
 80095f8:	68ec      	ldreq	r4, [r5, #12]
 80095fa:	e7e6      	b.n	80095ca <__swsetup_r+0x1e>
 80095fc:	0758      	lsls	r0, r3, #29
 80095fe:	d512      	bpl.n	8009626 <__swsetup_r+0x7a>
 8009600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009602:	b141      	cbz	r1, 8009616 <__swsetup_r+0x6a>
 8009604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009608:	4299      	cmp	r1, r3
 800960a:	d002      	beq.n	8009612 <__swsetup_r+0x66>
 800960c:	4630      	mov	r0, r6
 800960e:	f001 fc89 	bl	800af24 <_free_r>
 8009612:	2300      	movs	r3, #0
 8009614:	6363      	str	r3, [r4, #52]	; 0x34
 8009616:	89a3      	ldrh	r3, [r4, #12]
 8009618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800961c:	81a3      	strh	r3, [r4, #12]
 800961e:	2300      	movs	r3, #0
 8009620:	6063      	str	r3, [r4, #4]
 8009622:	6923      	ldr	r3, [r4, #16]
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	89a3      	ldrh	r3, [r4, #12]
 8009628:	f043 0308 	orr.w	r3, r3, #8
 800962c:	81a3      	strh	r3, [r4, #12]
 800962e:	6923      	ldr	r3, [r4, #16]
 8009630:	b94b      	cbnz	r3, 8009646 <__swsetup_r+0x9a>
 8009632:	89a3      	ldrh	r3, [r4, #12]
 8009634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800963c:	d003      	beq.n	8009646 <__swsetup_r+0x9a>
 800963e:	4621      	mov	r1, r4
 8009640:	4630      	mov	r0, r6
 8009642:	f001 f87f 	bl	800a744 <__smakebuf_r>
 8009646:	89a0      	ldrh	r0, [r4, #12]
 8009648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800964c:	f010 0301 	ands.w	r3, r0, #1
 8009650:	d00a      	beq.n	8009668 <__swsetup_r+0xbc>
 8009652:	2300      	movs	r3, #0
 8009654:	60a3      	str	r3, [r4, #8]
 8009656:	6963      	ldr	r3, [r4, #20]
 8009658:	425b      	negs	r3, r3
 800965a:	61a3      	str	r3, [r4, #24]
 800965c:	6923      	ldr	r3, [r4, #16]
 800965e:	b943      	cbnz	r3, 8009672 <__swsetup_r+0xc6>
 8009660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009664:	d1ba      	bne.n	80095dc <__swsetup_r+0x30>
 8009666:	bd70      	pop	{r4, r5, r6, pc}
 8009668:	0781      	lsls	r1, r0, #30
 800966a:	bf58      	it	pl
 800966c:	6963      	ldrpl	r3, [r4, #20]
 800966e:	60a3      	str	r3, [r4, #8]
 8009670:	e7f4      	b.n	800965c <__swsetup_r+0xb0>
 8009672:	2000      	movs	r0, #0
 8009674:	e7f7      	b.n	8009666 <__swsetup_r+0xba>
 8009676:	bf00      	nop
 8009678:	2000000c 	.word	0x2000000c
 800967c:	0800cf9c 	.word	0x0800cf9c
 8009680:	0800cfbc 	.word	0x0800cfbc
 8009684:	0800cf7c 	.word	0x0800cf7c

08009688 <quorem>:
 8009688:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800968c:	6903      	ldr	r3, [r0, #16]
 800968e:	690c      	ldr	r4, [r1, #16]
 8009690:	42a3      	cmp	r3, r4
 8009692:	4607      	mov	r7, r0
 8009694:	f2c0 8081 	blt.w	800979a <quorem+0x112>
 8009698:	3c01      	subs	r4, #1
 800969a:	f101 0814 	add.w	r8, r1, #20
 800969e:	f100 0514 	add.w	r5, r0, #20
 80096a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80096a6:	9301      	str	r3, [sp, #4]
 80096a8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80096ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80096b0:	3301      	adds	r3, #1
 80096b2:	429a      	cmp	r2, r3
 80096b4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80096b8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80096bc:	fbb2 f6f3 	udiv	r6, r2, r3
 80096c0:	d331      	bcc.n	8009726 <quorem+0x9e>
 80096c2:	f04f 0e00 	mov.w	lr, #0
 80096c6:	4640      	mov	r0, r8
 80096c8:	46ac      	mov	ip, r5
 80096ca:	46f2      	mov	sl, lr
 80096cc:	f850 2b04 	ldr.w	r2, [r0], #4
 80096d0:	b293      	uxth	r3, r2
 80096d2:	fb06 e303 	mla	r3, r6, r3, lr
 80096d6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80096da:	b29b      	uxth	r3, r3
 80096dc:	ebaa 0303 	sub.w	r3, sl, r3
 80096e0:	f8dc a000 	ldr.w	sl, [ip]
 80096e4:	0c12      	lsrs	r2, r2, #16
 80096e6:	fa13 f38a 	uxtah	r3, r3, sl
 80096ea:	fb06 e202 	mla	r2, r6, r2, lr
 80096ee:	9300      	str	r3, [sp, #0]
 80096f0:	9b00      	ldr	r3, [sp, #0]
 80096f2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80096f6:	b292      	uxth	r2, r2
 80096f8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80096fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009700:	f8bd 3000 	ldrh.w	r3, [sp]
 8009704:	4581      	cmp	r9, r0
 8009706:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800970a:	f84c 3b04 	str.w	r3, [ip], #4
 800970e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009712:	d2db      	bcs.n	80096cc <quorem+0x44>
 8009714:	f855 300b 	ldr.w	r3, [r5, fp]
 8009718:	b92b      	cbnz	r3, 8009726 <quorem+0x9e>
 800971a:	9b01      	ldr	r3, [sp, #4]
 800971c:	3b04      	subs	r3, #4
 800971e:	429d      	cmp	r5, r3
 8009720:	461a      	mov	r2, r3
 8009722:	d32e      	bcc.n	8009782 <quorem+0xfa>
 8009724:	613c      	str	r4, [r7, #16]
 8009726:	4638      	mov	r0, r7
 8009728:	f001 fae4 	bl	800acf4 <__mcmp>
 800972c:	2800      	cmp	r0, #0
 800972e:	db24      	blt.n	800977a <quorem+0xf2>
 8009730:	3601      	adds	r6, #1
 8009732:	4628      	mov	r0, r5
 8009734:	f04f 0c00 	mov.w	ip, #0
 8009738:	f858 2b04 	ldr.w	r2, [r8], #4
 800973c:	f8d0 e000 	ldr.w	lr, [r0]
 8009740:	b293      	uxth	r3, r2
 8009742:	ebac 0303 	sub.w	r3, ip, r3
 8009746:	0c12      	lsrs	r2, r2, #16
 8009748:	fa13 f38e 	uxtah	r3, r3, lr
 800974c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009750:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009754:	b29b      	uxth	r3, r3
 8009756:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800975a:	45c1      	cmp	r9, r8
 800975c:	f840 3b04 	str.w	r3, [r0], #4
 8009760:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009764:	d2e8      	bcs.n	8009738 <quorem+0xb0>
 8009766:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800976a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800976e:	b922      	cbnz	r2, 800977a <quorem+0xf2>
 8009770:	3b04      	subs	r3, #4
 8009772:	429d      	cmp	r5, r3
 8009774:	461a      	mov	r2, r3
 8009776:	d30a      	bcc.n	800978e <quorem+0x106>
 8009778:	613c      	str	r4, [r7, #16]
 800977a:	4630      	mov	r0, r6
 800977c:	b003      	add	sp, #12
 800977e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009782:	6812      	ldr	r2, [r2, #0]
 8009784:	3b04      	subs	r3, #4
 8009786:	2a00      	cmp	r2, #0
 8009788:	d1cc      	bne.n	8009724 <quorem+0x9c>
 800978a:	3c01      	subs	r4, #1
 800978c:	e7c7      	b.n	800971e <quorem+0x96>
 800978e:	6812      	ldr	r2, [r2, #0]
 8009790:	3b04      	subs	r3, #4
 8009792:	2a00      	cmp	r2, #0
 8009794:	d1f0      	bne.n	8009778 <quorem+0xf0>
 8009796:	3c01      	subs	r4, #1
 8009798:	e7eb      	b.n	8009772 <quorem+0xea>
 800979a:	2000      	movs	r0, #0
 800979c:	e7ee      	b.n	800977c <quorem+0xf4>
	...

080097a0 <_dtoa_r>:
 80097a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097a4:	ed2d 8b04 	vpush	{d8-d9}
 80097a8:	ec57 6b10 	vmov	r6, r7, d0
 80097ac:	b093      	sub	sp, #76	; 0x4c
 80097ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80097b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80097b4:	9106      	str	r1, [sp, #24]
 80097b6:	ee10 aa10 	vmov	sl, s0
 80097ba:	4604      	mov	r4, r0
 80097bc:	9209      	str	r2, [sp, #36]	; 0x24
 80097be:	930c      	str	r3, [sp, #48]	; 0x30
 80097c0:	46bb      	mov	fp, r7
 80097c2:	b975      	cbnz	r5, 80097e2 <_dtoa_r+0x42>
 80097c4:	2010      	movs	r0, #16
 80097c6:	f000 fffd 	bl	800a7c4 <malloc>
 80097ca:	4602      	mov	r2, r0
 80097cc:	6260      	str	r0, [r4, #36]	; 0x24
 80097ce:	b920      	cbnz	r0, 80097da <_dtoa_r+0x3a>
 80097d0:	4ba7      	ldr	r3, [pc, #668]	; (8009a70 <_dtoa_r+0x2d0>)
 80097d2:	21ea      	movs	r1, #234	; 0xea
 80097d4:	48a7      	ldr	r0, [pc, #668]	; (8009a74 <_dtoa_r+0x2d4>)
 80097d6:	f001 fe45 	bl	800b464 <__assert_func>
 80097da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80097de:	6005      	str	r5, [r0, #0]
 80097e0:	60c5      	str	r5, [r0, #12]
 80097e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097e4:	6819      	ldr	r1, [r3, #0]
 80097e6:	b151      	cbz	r1, 80097fe <_dtoa_r+0x5e>
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	604a      	str	r2, [r1, #4]
 80097ec:	2301      	movs	r3, #1
 80097ee:	4093      	lsls	r3, r2
 80097f0:	608b      	str	r3, [r1, #8]
 80097f2:	4620      	mov	r0, r4
 80097f4:	f001 f83c 	bl	800a870 <_Bfree>
 80097f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80097fa:	2200      	movs	r2, #0
 80097fc:	601a      	str	r2, [r3, #0]
 80097fe:	1e3b      	subs	r3, r7, #0
 8009800:	bfaa      	itet	ge
 8009802:	2300      	movge	r3, #0
 8009804:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009808:	f8c8 3000 	strge.w	r3, [r8]
 800980c:	4b9a      	ldr	r3, [pc, #616]	; (8009a78 <_dtoa_r+0x2d8>)
 800980e:	bfbc      	itt	lt
 8009810:	2201      	movlt	r2, #1
 8009812:	f8c8 2000 	strlt.w	r2, [r8]
 8009816:	ea33 030b 	bics.w	r3, r3, fp
 800981a:	d11b      	bne.n	8009854 <_dtoa_r+0xb4>
 800981c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800981e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009822:	6013      	str	r3, [r2, #0]
 8009824:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009828:	4333      	orrs	r3, r6
 800982a:	f000 8592 	beq.w	800a352 <_dtoa_r+0xbb2>
 800982e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009830:	b963      	cbnz	r3, 800984c <_dtoa_r+0xac>
 8009832:	4b92      	ldr	r3, [pc, #584]	; (8009a7c <_dtoa_r+0x2dc>)
 8009834:	e022      	b.n	800987c <_dtoa_r+0xdc>
 8009836:	4b92      	ldr	r3, [pc, #584]	; (8009a80 <_dtoa_r+0x2e0>)
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	3308      	adds	r3, #8
 800983c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800983e:	6013      	str	r3, [r2, #0]
 8009840:	9801      	ldr	r0, [sp, #4]
 8009842:	b013      	add	sp, #76	; 0x4c
 8009844:	ecbd 8b04 	vpop	{d8-d9}
 8009848:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984c:	4b8b      	ldr	r3, [pc, #556]	; (8009a7c <_dtoa_r+0x2dc>)
 800984e:	9301      	str	r3, [sp, #4]
 8009850:	3303      	adds	r3, #3
 8009852:	e7f3      	b.n	800983c <_dtoa_r+0x9c>
 8009854:	2200      	movs	r2, #0
 8009856:	2300      	movs	r3, #0
 8009858:	4650      	mov	r0, sl
 800985a:	4659      	mov	r1, fp
 800985c:	f7f7 f934 	bl	8000ac8 <__aeabi_dcmpeq>
 8009860:	ec4b ab19 	vmov	d9, sl, fp
 8009864:	4680      	mov	r8, r0
 8009866:	b158      	cbz	r0, 8009880 <_dtoa_r+0xe0>
 8009868:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800986a:	2301      	movs	r3, #1
 800986c:	6013      	str	r3, [r2, #0]
 800986e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009870:	2b00      	cmp	r3, #0
 8009872:	f000 856b 	beq.w	800a34c <_dtoa_r+0xbac>
 8009876:	4883      	ldr	r0, [pc, #524]	; (8009a84 <_dtoa_r+0x2e4>)
 8009878:	6018      	str	r0, [r3, #0]
 800987a:	1e43      	subs	r3, r0, #1
 800987c:	9301      	str	r3, [sp, #4]
 800987e:	e7df      	b.n	8009840 <_dtoa_r+0xa0>
 8009880:	ec4b ab10 	vmov	d0, sl, fp
 8009884:	aa10      	add	r2, sp, #64	; 0x40
 8009886:	a911      	add	r1, sp, #68	; 0x44
 8009888:	4620      	mov	r0, r4
 800988a:	f001 fad9 	bl	800ae40 <__d2b>
 800988e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009892:	ee08 0a10 	vmov	s16, r0
 8009896:	2d00      	cmp	r5, #0
 8009898:	f000 8084 	beq.w	80099a4 <_dtoa_r+0x204>
 800989c:	ee19 3a90 	vmov	r3, s19
 80098a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80098a8:	4656      	mov	r6, sl
 80098aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80098ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80098b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80098b6:	4b74      	ldr	r3, [pc, #464]	; (8009a88 <_dtoa_r+0x2e8>)
 80098b8:	2200      	movs	r2, #0
 80098ba:	4630      	mov	r0, r6
 80098bc:	4639      	mov	r1, r7
 80098be:	f7f6 fce3 	bl	8000288 <__aeabi_dsub>
 80098c2:	a365      	add	r3, pc, #404	; (adr r3, 8009a58 <_dtoa_r+0x2b8>)
 80098c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c8:	f7f6 fe96 	bl	80005f8 <__aeabi_dmul>
 80098cc:	a364      	add	r3, pc, #400	; (adr r3, 8009a60 <_dtoa_r+0x2c0>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	f7f6 fcdb 	bl	800028c <__adddf3>
 80098d6:	4606      	mov	r6, r0
 80098d8:	4628      	mov	r0, r5
 80098da:	460f      	mov	r7, r1
 80098dc:	f7f6 fe22 	bl	8000524 <__aeabi_i2d>
 80098e0:	a361      	add	r3, pc, #388	; (adr r3, 8009a68 <_dtoa_r+0x2c8>)
 80098e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e6:	f7f6 fe87 	bl	80005f8 <__aeabi_dmul>
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	4630      	mov	r0, r6
 80098f0:	4639      	mov	r1, r7
 80098f2:	f7f6 fccb 	bl	800028c <__adddf3>
 80098f6:	4606      	mov	r6, r0
 80098f8:	460f      	mov	r7, r1
 80098fa:	f7f7 f92d 	bl	8000b58 <__aeabi_d2iz>
 80098fe:	2200      	movs	r2, #0
 8009900:	9000      	str	r0, [sp, #0]
 8009902:	2300      	movs	r3, #0
 8009904:	4630      	mov	r0, r6
 8009906:	4639      	mov	r1, r7
 8009908:	f7f7 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800990c:	b150      	cbz	r0, 8009924 <_dtoa_r+0x184>
 800990e:	9800      	ldr	r0, [sp, #0]
 8009910:	f7f6 fe08 	bl	8000524 <__aeabi_i2d>
 8009914:	4632      	mov	r2, r6
 8009916:	463b      	mov	r3, r7
 8009918:	f7f7 f8d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800991c:	b910      	cbnz	r0, 8009924 <_dtoa_r+0x184>
 800991e:	9b00      	ldr	r3, [sp, #0]
 8009920:	3b01      	subs	r3, #1
 8009922:	9300      	str	r3, [sp, #0]
 8009924:	9b00      	ldr	r3, [sp, #0]
 8009926:	2b16      	cmp	r3, #22
 8009928:	d85a      	bhi.n	80099e0 <_dtoa_r+0x240>
 800992a:	9a00      	ldr	r2, [sp, #0]
 800992c:	4b57      	ldr	r3, [pc, #348]	; (8009a8c <_dtoa_r+0x2ec>)
 800992e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009936:	ec51 0b19 	vmov	r0, r1, d9
 800993a:	f7f7 f8cf 	bl	8000adc <__aeabi_dcmplt>
 800993e:	2800      	cmp	r0, #0
 8009940:	d050      	beq.n	80099e4 <_dtoa_r+0x244>
 8009942:	9b00      	ldr	r3, [sp, #0]
 8009944:	3b01      	subs	r3, #1
 8009946:	9300      	str	r3, [sp, #0]
 8009948:	2300      	movs	r3, #0
 800994a:	930b      	str	r3, [sp, #44]	; 0x2c
 800994c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800994e:	1b5d      	subs	r5, r3, r5
 8009950:	1e6b      	subs	r3, r5, #1
 8009952:	9305      	str	r3, [sp, #20]
 8009954:	bf45      	ittet	mi
 8009956:	f1c5 0301 	rsbmi	r3, r5, #1
 800995a:	9304      	strmi	r3, [sp, #16]
 800995c:	2300      	movpl	r3, #0
 800995e:	2300      	movmi	r3, #0
 8009960:	bf4c      	ite	mi
 8009962:	9305      	strmi	r3, [sp, #20]
 8009964:	9304      	strpl	r3, [sp, #16]
 8009966:	9b00      	ldr	r3, [sp, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	db3d      	blt.n	80099e8 <_dtoa_r+0x248>
 800996c:	9b05      	ldr	r3, [sp, #20]
 800996e:	9a00      	ldr	r2, [sp, #0]
 8009970:	920a      	str	r2, [sp, #40]	; 0x28
 8009972:	4413      	add	r3, r2
 8009974:	9305      	str	r3, [sp, #20]
 8009976:	2300      	movs	r3, #0
 8009978:	9307      	str	r3, [sp, #28]
 800997a:	9b06      	ldr	r3, [sp, #24]
 800997c:	2b09      	cmp	r3, #9
 800997e:	f200 8089 	bhi.w	8009a94 <_dtoa_r+0x2f4>
 8009982:	2b05      	cmp	r3, #5
 8009984:	bfc4      	itt	gt
 8009986:	3b04      	subgt	r3, #4
 8009988:	9306      	strgt	r3, [sp, #24]
 800998a:	9b06      	ldr	r3, [sp, #24]
 800998c:	f1a3 0302 	sub.w	r3, r3, #2
 8009990:	bfcc      	ite	gt
 8009992:	2500      	movgt	r5, #0
 8009994:	2501      	movle	r5, #1
 8009996:	2b03      	cmp	r3, #3
 8009998:	f200 8087 	bhi.w	8009aaa <_dtoa_r+0x30a>
 800999c:	e8df f003 	tbb	[pc, r3]
 80099a0:	59383a2d 	.word	0x59383a2d
 80099a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80099a8:	441d      	add	r5, r3
 80099aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80099ae:	2b20      	cmp	r3, #32
 80099b0:	bfc1      	itttt	gt
 80099b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80099b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80099ba:	fa0b f303 	lslgt.w	r3, fp, r3
 80099be:	fa26 f000 	lsrgt.w	r0, r6, r0
 80099c2:	bfda      	itte	le
 80099c4:	f1c3 0320 	rsble	r3, r3, #32
 80099c8:	fa06 f003 	lslle.w	r0, r6, r3
 80099cc:	4318      	orrgt	r0, r3
 80099ce:	f7f6 fd99 	bl	8000504 <__aeabi_ui2d>
 80099d2:	2301      	movs	r3, #1
 80099d4:	4606      	mov	r6, r0
 80099d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80099da:	3d01      	subs	r5, #1
 80099dc:	930e      	str	r3, [sp, #56]	; 0x38
 80099de:	e76a      	b.n	80098b6 <_dtoa_r+0x116>
 80099e0:	2301      	movs	r3, #1
 80099e2:	e7b2      	b.n	800994a <_dtoa_r+0x1aa>
 80099e4:	900b      	str	r0, [sp, #44]	; 0x2c
 80099e6:	e7b1      	b.n	800994c <_dtoa_r+0x1ac>
 80099e8:	9b04      	ldr	r3, [sp, #16]
 80099ea:	9a00      	ldr	r2, [sp, #0]
 80099ec:	1a9b      	subs	r3, r3, r2
 80099ee:	9304      	str	r3, [sp, #16]
 80099f0:	4253      	negs	r3, r2
 80099f2:	9307      	str	r3, [sp, #28]
 80099f4:	2300      	movs	r3, #0
 80099f6:	930a      	str	r3, [sp, #40]	; 0x28
 80099f8:	e7bf      	b.n	800997a <_dtoa_r+0x1da>
 80099fa:	2300      	movs	r3, #0
 80099fc:	9308      	str	r3, [sp, #32]
 80099fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	dc55      	bgt.n	8009ab0 <_dtoa_r+0x310>
 8009a04:	2301      	movs	r3, #1
 8009a06:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009a0a:	461a      	mov	r2, r3
 8009a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8009a0e:	e00c      	b.n	8009a2a <_dtoa_r+0x28a>
 8009a10:	2301      	movs	r3, #1
 8009a12:	e7f3      	b.n	80099fc <_dtoa_r+0x25c>
 8009a14:	2300      	movs	r3, #0
 8009a16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a18:	9308      	str	r3, [sp, #32]
 8009a1a:	9b00      	ldr	r3, [sp, #0]
 8009a1c:	4413      	add	r3, r2
 8009a1e:	9302      	str	r3, [sp, #8]
 8009a20:	3301      	adds	r3, #1
 8009a22:	2b01      	cmp	r3, #1
 8009a24:	9303      	str	r3, [sp, #12]
 8009a26:	bfb8      	it	lt
 8009a28:	2301      	movlt	r3, #1
 8009a2a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009a2c:	2200      	movs	r2, #0
 8009a2e:	6042      	str	r2, [r0, #4]
 8009a30:	2204      	movs	r2, #4
 8009a32:	f102 0614 	add.w	r6, r2, #20
 8009a36:	429e      	cmp	r6, r3
 8009a38:	6841      	ldr	r1, [r0, #4]
 8009a3a:	d93d      	bls.n	8009ab8 <_dtoa_r+0x318>
 8009a3c:	4620      	mov	r0, r4
 8009a3e:	f000 fed7 	bl	800a7f0 <_Balloc>
 8009a42:	9001      	str	r0, [sp, #4]
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d13b      	bne.n	8009ac0 <_dtoa_r+0x320>
 8009a48:	4b11      	ldr	r3, [pc, #68]	; (8009a90 <_dtoa_r+0x2f0>)
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009a50:	e6c0      	b.n	80097d4 <_dtoa_r+0x34>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e7df      	b.n	8009a16 <_dtoa_r+0x276>
 8009a56:	bf00      	nop
 8009a58:	636f4361 	.word	0x636f4361
 8009a5c:	3fd287a7 	.word	0x3fd287a7
 8009a60:	8b60c8b3 	.word	0x8b60c8b3
 8009a64:	3fc68a28 	.word	0x3fc68a28
 8009a68:	509f79fb 	.word	0x509f79fb
 8009a6c:	3fd34413 	.word	0x3fd34413
 8009a70:	0800cef9 	.word	0x0800cef9
 8009a74:	0800cf10 	.word	0x0800cf10
 8009a78:	7ff00000 	.word	0x7ff00000
 8009a7c:	0800cef5 	.word	0x0800cef5
 8009a80:	0800ceec 	.word	0x0800ceec
 8009a84:	0800cec9 	.word	0x0800cec9
 8009a88:	3ff80000 	.word	0x3ff80000
 8009a8c:	0800d060 	.word	0x0800d060
 8009a90:	0800cf6b 	.word	0x0800cf6b
 8009a94:	2501      	movs	r5, #1
 8009a96:	2300      	movs	r3, #0
 8009a98:	9306      	str	r3, [sp, #24]
 8009a9a:	9508      	str	r5, [sp, #32]
 8009a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009aa0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2312      	movs	r3, #18
 8009aa8:	e7b0      	b.n	8009a0c <_dtoa_r+0x26c>
 8009aaa:	2301      	movs	r3, #1
 8009aac:	9308      	str	r3, [sp, #32]
 8009aae:	e7f5      	b.n	8009a9c <_dtoa_r+0x2fc>
 8009ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ab2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009ab6:	e7b8      	b.n	8009a2a <_dtoa_r+0x28a>
 8009ab8:	3101      	adds	r1, #1
 8009aba:	6041      	str	r1, [r0, #4]
 8009abc:	0052      	lsls	r2, r2, #1
 8009abe:	e7b8      	b.n	8009a32 <_dtoa_r+0x292>
 8009ac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ac2:	9a01      	ldr	r2, [sp, #4]
 8009ac4:	601a      	str	r2, [r3, #0]
 8009ac6:	9b03      	ldr	r3, [sp, #12]
 8009ac8:	2b0e      	cmp	r3, #14
 8009aca:	f200 809d 	bhi.w	8009c08 <_dtoa_r+0x468>
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	f000 809a 	beq.w	8009c08 <_dtoa_r+0x468>
 8009ad4:	9b00      	ldr	r3, [sp, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	dd32      	ble.n	8009b40 <_dtoa_r+0x3a0>
 8009ada:	4ab7      	ldr	r2, [pc, #732]	; (8009db8 <_dtoa_r+0x618>)
 8009adc:	f003 030f 	and.w	r3, r3, #15
 8009ae0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009ae4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ae8:	9b00      	ldr	r3, [sp, #0]
 8009aea:	05d8      	lsls	r0, r3, #23
 8009aec:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009af0:	d516      	bpl.n	8009b20 <_dtoa_r+0x380>
 8009af2:	4bb2      	ldr	r3, [pc, #712]	; (8009dbc <_dtoa_r+0x61c>)
 8009af4:	ec51 0b19 	vmov	r0, r1, d9
 8009af8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009afc:	f7f6 fea6 	bl	800084c <__aeabi_ddiv>
 8009b00:	f007 070f 	and.w	r7, r7, #15
 8009b04:	4682      	mov	sl, r0
 8009b06:	468b      	mov	fp, r1
 8009b08:	2503      	movs	r5, #3
 8009b0a:	4eac      	ldr	r6, [pc, #688]	; (8009dbc <_dtoa_r+0x61c>)
 8009b0c:	b957      	cbnz	r7, 8009b24 <_dtoa_r+0x384>
 8009b0e:	4642      	mov	r2, r8
 8009b10:	464b      	mov	r3, r9
 8009b12:	4650      	mov	r0, sl
 8009b14:	4659      	mov	r1, fp
 8009b16:	f7f6 fe99 	bl	800084c <__aeabi_ddiv>
 8009b1a:	4682      	mov	sl, r0
 8009b1c:	468b      	mov	fp, r1
 8009b1e:	e028      	b.n	8009b72 <_dtoa_r+0x3d2>
 8009b20:	2502      	movs	r5, #2
 8009b22:	e7f2      	b.n	8009b0a <_dtoa_r+0x36a>
 8009b24:	07f9      	lsls	r1, r7, #31
 8009b26:	d508      	bpl.n	8009b3a <_dtoa_r+0x39a>
 8009b28:	4640      	mov	r0, r8
 8009b2a:	4649      	mov	r1, r9
 8009b2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009b30:	f7f6 fd62 	bl	80005f8 <__aeabi_dmul>
 8009b34:	3501      	adds	r5, #1
 8009b36:	4680      	mov	r8, r0
 8009b38:	4689      	mov	r9, r1
 8009b3a:	107f      	asrs	r7, r7, #1
 8009b3c:	3608      	adds	r6, #8
 8009b3e:	e7e5      	b.n	8009b0c <_dtoa_r+0x36c>
 8009b40:	f000 809b 	beq.w	8009c7a <_dtoa_r+0x4da>
 8009b44:	9b00      	ldr	r3, [sp, #0]
 8009b46:	4f9d      	ldr	r7, [pc, #628]	; (8009dbc <_dtoa_r+0x61c>)
 8009b48:	425e      	negs	r6, r3
 8009b4a:	4b9b      	ldr	r3, [pc, #620]	; (8009db8 <_dtoa_r+0x618>)
 8009b4c:	f006 020f 	and.w	r2, r6, #15
 8009b50:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b58:	ec51 0b19 	vmov	r0, r1, d9
 8009b5c:	f7f6 fd4c 	bl	80005f8 <__aeabi_dmul>
 8009b60:	1136      	asrs	r6, r6, #4
 8009b62:	4682      	mov	sl, r0
 8009b64:	468b      	mov	fp, r1
 8009b66:	2300      	movs	r3, #0
 8009b68:	2502      	movs	r5, #2
 8009b6a:	2e00      	cmp	r6, #0
 8009b6c:	d17a      	bne.n	8009c64 <_dtoa_r+0x4c4>
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1d3      	bne.n	8009b1a <_dtoa_r+0x37a>
 8009b72:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	f000 8082 	beq.w	8009c7e <_dtoa_r+0x4de>
 8009b7a:	4b91      	ldr	r3, [pc, #580]	; (8009dc0 <_dtoa_r+0x620>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	4650      	mov	r0, sl
 8009b80:	4659      	mov	r1, fp
 8009b82:	f7f6 ffab 	bl	8000adc <__aeabi_dcmplt>
 8009b86:	2800      	cmp	r0, #0
 8009b88:	d079      	beq.n	8009c7e <_dtoa_r+0x4de>
 8009b8a:	9b03      	ldr	r3, [sp, #12]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d076      	beq.n	8009c7e <_dtoa_r+0x4de>
 8009b90:	9b02      	ldr	r3, [sp, #8]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	dd36      	ble.n	8009c04 <_dtoa_r+0x464>
 8009b96:	9b00      	ldr	r3, [sp, #0]
 8009b98:	4650      	mov	r0, sl
 8009b9a:	4659      	mov	r1, fp
 8009b9c:	1e5f      	subs	r7, r3, #1
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	4b88      	ldr	r3, [pc, #544]	; (8009dc4 <_dtoa_r+0x624>)
 8009ba2:	f7f6 fd29 	bl	80005f8 <__aeabi_dmul>
 8009ba6:	9e02      	ldr	r6, [sp, #8]
 8009ba8:	4682      	mov	sl, r0
 8009baa:	468b      	mov	fp, r1
 8009bac:	3501      	adds	r5, #1
 8009bae:	4628      	mov	r0, r5
 8009bb0:	f7f6 fcb8 	bl	8000524 <__aeabi_i2d>
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	465b      	mov	r3, fp
 8009bb8:	f7f6 fd1e 	bl	80005f8 <__aeabi_dmul>
 8009bbc:	4b82      	ldr	r3, [pc, #520]	; (8009dc8 <_dtoa_r+0x628>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	f7f6 fb64 	bl	800028c <__adddf3>
 8009bc4:	46d0      	mov	r8, sl
 8009bc6:	46d9      	mov	r9, fp
 8009bc8:	4682      	mov	sl, r0
 8009bca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009bce:	2e00      	cmp	r6, #0
 8009bd0:	d158      	bne.n	8009c84 <_dtoa_r+0x4e4>
 8009bd2:	4b7e      	ldr	r3, [pc, #504]	; (8009dcc <_dtoa_r+0x62c>)
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	4640      	mov	r0, r8
 8009bd8:	4649      	mov	r1, r9
 8009bda:	f7f6 fb55 	bl	8000288 <__aeabi_dsub>
 8009bde:	4652      	mov	r2, sl
 8009be0:	465b      	mov	r3, fp
 8009be2:	4680      	mov	r8, r0
 8009be4:	4689      	mov	r9, r1
 8009be6:	f7f6 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 8009bea:	2800      	cmp	r0, #0
 8009bec:	f040 8295 	bne.w	800a11a <_dtoa_r+0x97a>
 8009bf0:	4652      	mov	r2, sl
 8009bf2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009bf6:	4640      	mov	r0, r8
 8009bf8:	4649      	mov	r1, r9
 8009bfa:	f7f6 ff6f 	bl	8000adc <__aeabi_dcmplt>
 8009bfe:	2800      	cmp	r0, #0
 8009c00:	f040 8289 	bne.w	800a116 <_dtoa_r+0x976>
 8009c04:	ec5b ab19 	vmov	sl, fp, d9
 8009c08:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	f2c0 8148 	blt.w	8009ea0 <_dtoa_r+0x700>
 8009c10:	9a00      	ldr	r2, [sp, #0]
 8009c12:	2a0e      	cmp	r2, #14
 8009c14:	f300 8144 	bgt.w	8009ea0 <_dtoa_r+0x700>
 8009c18:	4b67      	ldr	r3, [pc, #412]	; (8009db8 <_dtoa_r+0x618>)
 8009c1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f280 80d5 	bge.w	8009dd4 <_dtoa_r+0x634>
 8009c2a:	9b03      	ldr	r3, [sp, #12]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	f300 80d1 	bgt.w	8009dd4 <_dtoa_r+0x634>
 8009c32:	f040 826f 	bne.w	800a114 <_dtoa_r+0x974>
 8009c36:	4b65      	ldr	r3, [pc, #404]	; (8009dcc <_dtoa_r+0x62c>)
 8009c38:	2200      	movs	r2, #0
 8009c3a:	4640      	mov	r0, r8
 8009c3c:	4649      	mov	r1, r9
 8009c3e:	f7f6 fcdb 	bl	80005f8 <__aeabi_dmul>
 8009c42:	4652      	mov	r2, sl
 8009c44:	465b      	mov	r3, fp
 8009c46:	f7f6 ff5d 	bl	8000b04 <__aeabi_dcmpge>
 8009c4a:	9e03      	ldr	r6, [sp, #12]
 8009c4c:	4637      	mov	r7, r6
 8009c4e:	2800      	cmp	r0, #0
 8009c50:	f040 8245 	bne.w	800a0de <_dtoa_r+0x93e>
 8009c54:	9d01      	ldr	r5, [sp, #4]
 8009c56:	2331      	movs	r3, #49	; 0x31
 8009c58:	f805 3b01 	strb.w	r3, [r5], #1
 8009c5c:	9b00      	ldr	r3, [sp, #0]
 8009c5e:	3301      	adds	r3, #1
 8009c60:	9300      	str	r3, [sp, #0]
 8009c62:	e240      	b.n	800a0e6 <_dtoa_r+0x946>
 8009c64:	07f2      	lsls	r2, r6, #31
 8009c66:	d505      	bpl.n	8009c74 <_dtoa_r+0x4d4>
 8009c68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c6c:	f7f6 fcc4 	bl	80005f8 <__aeabi_dmul>
 8009c70:	3501      	adds	r5, #1
 8009c72:	2301      	movs	r3, #1
 8009c74:	1076      	asrs	r6, r6, #1
 8009c76:	3708      	adds	r7, #8
 8009c78:	e777      	b.n	8009b6a <_dtoa_r+0x3ca>
 8009c7a:	2502      	movs	r5, #2
 8009c7c:	e779      	b.n	8009b72 <_dtoa_r+0x3d2>
 8009c7e:	9f00      	ldr	r7, [sp, #0]
 8009c80:	9e03      	ldr	r6, [sp, #12]
 8009c82:	e794      	b.n	8009bae <_dtoa_r+0x40e>
 8009c84:	9901      	ldr	r1, [sp, #4]
 8009c86:	4b4c      	ldr	r3, [pc, #304]	; (8009db8 <_dtoa_r+0x618>)
 8009c88:	4431      	add	r1, r6
 8009c8a:	910d      	str	r1, [sp, #52]	; 0x34
 8009c8c:	9908      	ldr	r1, [sp, #32]
 8009c8e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009c92:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009c96:	2900      	cmp	r1, #0
 8009c98:	d043      	beq.n	8009d22 <_dtoa_r+0x582>
 8009c9a:	494d      	ldr	r1, [pc, #308]	; (8009dd0 <_dtoa_r+0x630>)
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	f7f6 fdd5 	bl	800084c <__aeabi_ddiv>
 8009ca2:	4652      	mov	r2, sl
 8009ca4:	465b      	mov	r3, fp
 8009ca6:	f7f6 faef 	bl	8000288 <__aeabi_dsub>
 8009caa:	9d01      	ldr	r5, [sp, #4]
 8009cac:	4682      	mov	sl, r0
 8009cae:	468b      	mov	fp, r1
 8009cb0:	4649      	mov	r1, r9
 8009cb2:	4640      	mov	r0, r8
 8009cb4:	f7f6 ff50 	bl	8000b58 <__aeabi_d2iz>
 8009cb8:	4606      	mov	r6, r0
 8009cba:	f7f6 fc33 	bl	8000524 <__aeabi_i2d>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	4640      	mov	r0, r8
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	f7f6 fadf 	bl	8000288 <__aeabi_dsub>
 8009cca:	3630      	adds	r6, #48	; 0x30
 8009ccc:	f805 6b01 	strb.w	r6, [r5], #1
 8009cd0:	4652      	mov	r2, sl
 8009cd2:	465b      	mov	r3, fp
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	4689      	mov	r9, r1
 8009cd8:	f7f6 ff00 	bl	8000adc <__aeabi_dcmplt>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d163      	bne.n	8009da8 <_dtoa_r+0x608>
 8009ce0:	4642      	mov	r2, r8
 8009ce2:	464b      	mov	r3, r9
 8009ce4:	4936      	ldr	r1, [pc, #216]	; (8009dc0 <_dtoa_r+0x620>)
 8009ce6:	2000      	movs	r0, #0
 8009ce8:	f7f6 face 	bl	8000288 <__aeabi_dsub>
 8009cec:	4652      	mov	r2, sl
 8009cee:	465b      	mov	r3, fp
 8009cf0:	f7f6 fef4 	bl	8000adc <__aeabi_dcmplt>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	f040 80b5 	bne.w	8009e64 <_dtoa_r+0x6c4>
 8009cfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009cfc:	429d      	cmp	r5, r3
 8009cfe:	d081      	beq.n	8009c04 <_dtoa_r+0x464>
 8009d00:	4b30      	ldr	r3, [pc, #192]	; (8009dc4 <_dtoa_r+0x624>)
 8009d02:	2200      	movs	r2, #0
 8009d04:	4650      	mov	r0, sl
 8009d06:	4659      	mov	r1, fp
 8009d08:	f7f6 fc76 	bl	80005f8 <__aeabi_dmul>
 8009d0c:	4b2d      	ldr	r3, [pc, #180]	; (8009dc4 <_dtoa_r+0x624>)
 8009d0e:	4682      	mov	sl, r0
 8009d10:	468b      	mov	fp, r1
 8009d12:	4640      	mov	r0, r8
 8009d14:	4649      	mov	r1, r9
 8009d16:	2200      	movs	r2, #0
 8009d18:	f7f6 fc6e 	bl	80005f8 <__aeabi_dmul>
 8009d1c:	4680      	mov	r8, r0
 8009d1e:	4689      	mov	r9, r1
 8009d20:	e7c6      	b.n	8009cb0 <_dtoa_r+0x510>
 8009d22:	4650      	mov	r0, sl
 8009d24:	4659      	mov	r1, fp
 8009d26:	f7f6 fc67 	bl	80005f8 <__aeabi_dmul>
 8009d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d2c:	9d01      	ldr	r5, [sp, #4]
 8009d2e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d30:	4682      	mov	sl, r0
 8009d32:	468b      	mov	fp, r1
 8009d34:	4649      	mov	r1, r9
 8009d36:	4640      	mov	r0, r8
 8009d38:	f7f6 ff0e 	bl	8000b58 <__aeabi_d2iz>
 8009d3c:	4606      	mov	r6, r0
 8009d3e:	f7f6 fbf1 	bl	8000524 <__aeabi_i2d>
 8009d42:	3630      	adds	r6, #48	; 0x30
 8009d44:	4602      	mov	r2, r0
 8009d46:	460b      	mov	r3, r1
 8009d48:	4640      	mov	r0, r8
 8009d4a:	4649      	mov	r1, r9
 8009d4c:	f7f6 fa9c 	bl	8000288 <__aeabi_dsub>
 8009d50:	f805 6b01 	strb.w	r6, [r5], #1
 8009d54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d56:	429d      	cmp	r5, r3
 8009d58:	4680      	mov	r8, r0
 8009d5a:	4689      	mov	r9, r1
 8009d5c:	f04f 0200 	mov.w	r2, #0
 8009d60:	d124      	bne.n	8009dac <_dtoa_r+0x60c>
 8009d62:	4b1b      	ldr	r3, [pc, #108]	; (8009dd0 <_dtoa_r+0x630>)
 8009d64:	4650      	mov	r0, sl
 8009d66:	4659      	mov	r1, fp
 8009d68:	f7f6 fa90 	bl	800028c <__adddf3>
 8009d6c:	4602      	mov	r2, r0
 8009d6e:	460b      	mov	r3, r1
 8009d70:	4640      	mov	r0, r8
 8009d72:	4649      	mov	r1, r9
 8009d74:	f7f6 fed0 	bl	8000b18 <__aeabi_dcmpgt>
 8009d78:	2800      	cmp	r0, #0
 8009d7a:	d173      	bne.n	8009e64 <_dtoa_r+0x6c4>
 8009d7c:	4652      	mov	r2, sl
 8009d7e:	465b      	mov	r3, fp
 8009d80:	4913      	ldr	r1, [pc, #76]	; (8009dd0 <_dtoa_r+0x630>)
 8009d82:	2000      	movs	r0, #0
 8009d84:	f7f6 fa80 	bl	8000288 <__aeabi_dsub>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	4649      	mov	r1, r9
 8009d90:	f7f6 fea4 	bl	8000adc <__aeabi_dcmplt>
 8009d94:	2800      	cmp	r0, #0
 8009d96:	f43f af35 	beq.w	8009c04 <_dtoa_r+0x464>
 8009d9a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009d9c:	1e6b      	subs	r3, r5, #1
 8009d9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009da0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009da4:	2b30      	cmp	r3, #48	; 0x30
 8009da6:	d0f8      	beq.n	8009d9a <_dtoa_r+0x5fa>
 8009da8:	9700      	str	r7, [sp, #0]
 8009daa:	e049      	b.n	8009e40 <_dtoa_r+0x6a0>
 8009dac:	4b05      	ldr	r3, [pc, #20]	; (8009dc4 <_dtoa_r+0x624>)
 8009dae:	f7f6 fc23 	bl	80005f8 <__aeabi_dmul>
 8009db2:	4680      	mov	r8, r0
 8009db4:	4689      	mov	r9, r1
 8009db6:	e7bd      	b.n	8009d34 <_dtoa_r+0x594>
 8009db8:	0800d060 	.word	0x0800d060
 8009dbc:	0800d038 	.word	0x0800d038
 8009dc0:	3ff00000 	.word	0x3ff00000
 8009dc4:	40240000 	.word	0x40240000
 8009dc8:	401c0000 	.word	0x401c0000
 8009dcc:	40140000 	.word	0x40140000
 8009dd0:	3fe00000 	.word	0x3fe00000
 8009dd4:	9d01      	ldr	r5, [sp, #4]
 8009dd6:	4656      	mov	r6, sl
 8009dd8:	465f      	mov	r7, fp
 8009dda:	4642      	mov	r2, r8
 8009ddc:	464b      	mov	r3, r9
 8009dde:	4630      	mov	r0, r6
 8009de0:	4639      	mov	r1, r7
 8009de2:	f7f6 fd33 	bl	800084c <__aeabi_ddiv>
 8009de6:	f7f6 feb7 	bl	8000b58 <__aeabi_d2iz>
 8009dea:	4682      	mov	sl, r0
 8009dec:	f7f6 fb9a 	bl	8000524 <__aeabi_i2d>
 8009df0:	4642      	mov	r2, r8
 8009df2:	464b      	mov	r3, r9
 8009df4:	f7f6 fc00 	bl	80005f8 <__aeabi_dmul>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4630      	mov	r0, r6
 8009dfe:	4639      	mov	r1, r7
 8009e00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009e04:	f7f6 fa40 	bl	8000288 <__aeabi_dsub>
 8009e08:	f805 6b01 	strb.w	r6, [r5], #1
 8009e0c:	9e01      	ldr	r6, [sp, #4]
 8009e0e:	9f03      	ldr	r7, [sp, #12]
 8009e10:	1bae      	subs	r6, r5, r6
 8009e12:	42b7      	cmp	r7, r6
 8009e14:	4602      	mov	r2, r0
 8009e16:	460b      	mov	r3, r1
 8009e18:	d135      	bne.n	8009e86 <_dtoa_r+0x6e6>
 8009e1a:	f7f6 fa37 	bl	800028c <__adddf3>
 8009e1e:	4642      	mov	r2, r8
 8009e20:	464b      	mov	r3, r9
 8009e22:	4606      	mov	r6, r0
 8009e24:	460f      	mov	r7, r1
 8009e26:	f7f6 fe77 	bl	8000b18 <__aeabi_dcmpgt>
 8009e2a:	b9d0      	cbnz	r0, 8009e62 <_dtoa_r+0x6c2>
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	464b      	mov	r3, r9
 8009e30:	4630      	mov	r0, r6
 8009e32:	4639      	mov	r1, r7
 8009e34:	f7f6 fe48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e38:	b110      	cbz	r0, 8009e40 <_dtoa_r+0x6a0>
 8009e3a:	f01a 0f01 	tst.w	sl, #1
 8009e3e:	d110      	bne.n	8009e62 <_dtoa_r+0x6c2>
 8009e40:	4620      	mov	r0, r4
 8009e42:	ee18 1a10 	vmov	r1, s16
 8009e46:	f000 fd13 	bl	800a870 <_Bfree>
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	9800      	ldr	r0, [sp, #0]
 8009e4e:	702b      	strb	r3, [r5, #0]
 8009e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e52:	3001      	adds	r0, #1
 8009e54:	6018      	str	r0, [r3, #0]
 8009e56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	f43f acf1 	beq.w	8009840 <_dtoa_r+0xa0>
 8009e5e:	601d      	str	r5, [r3, #0]
 8009e60:	e4ee      	b.n	8009840 <_dtoa_r+0xa0>
 8009e62:	9f00      	ldr	r7, [sp, #0]
 8009e64:	462b      	mov	r3, r5
 8009e66:	461d      	mov	r5, r3
 8009e68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009e6c:	2a39      	cmp	r2, #57	; 0x39
 8009e6e:	d106      	bne.n	8009e7e <_dtoa_r+0x6de>
 8009e70:	9a01      	ldr	r2, [sp, #4]
 8009e72:	429a      	cmp	r2, r3
 8009e74:	d1f7      	bne.n	8009e66 <_dtoa_r+0x6c6>
 8009e76:	9901      	ldr	r1, [sp, #4]
 8009e78:	2230      	movs	r2, #48	; 0x30
 8009e7a:	3701      	adds	r7, #1
 8009e7c:	700a      	strb	r2, [r1, #0]
 8009e7e:	781a      	ldrb	r2, [r3, #0]
 8009e80:	3201      	adds	r2, #1
 8009e82:	701a      	strb	r2, [r3, #0]
 8009e84:	e790      	b.n	8009da8 <_dtoa_r+0x608>
 8009e86:	4ba6      	ldr	r3, [pc, #664]	; (800a120 <_dtoa_r+0x980>)
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f7f6 fbb5 	bl	80005f8 <__aeabi_dmul>
 8009e8e:	2200      	movs	r2, #0
 8009e90:	2300      	movs	r3, #0
 8009e92:	4606      	mov	r6, r0
 8009e94:	460f      	mov	r7, r1
 8009e96:	f7f6 fe17 	bl	8000ac8 <__aeabi_dcmpeq>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d09d      	beq.n	8009dda <_dtoa_r+0x63a>
 8009e9e:	e7cf      	b.n	8009e40 <_dtoa_r+0x6a0>
 8009ea0:	9a08      	ldr	r2, [sp, #32]
 8009ea2:	2a00      	cmp	r2, #0
 8009ea4:	f000 80d7 	beq.w	800a056 <_dtoa_r+0x8b6>
 8009ea8:	9a06      	ldr	r2, [sp, #24]
 8009eaa:	2a01      	cmp	r2, #1
 8009eac:	f300 80ba 	bgt.w	800a024 <_dtoa_r+0x884>
 8009eb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009eb2:	2a00      	cmp	r2, #0
 8009eb4:	f000 80b2 	beq.w	800a01c <_dtoa_r+0x87c>
 8009eb8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009ebc:	9e07      	ldr	r6, [sp, #28]
 8009ebe:	9d04      	ldr	r5, [sp, #16]
 8009ec0:	9a04      	ldr	r2, [sp, #16]
 8009ec2:	441a      	add	r2, r3
 8009ec4:	9204      	str	r2, [sp, #16]
 8009ec6:	9a05      	ldr	r2, [sp, #20]
 8009ec8:	2101      	movs	r1, #1
 8009eca:	441a      	add	r2, r3
 8009ecc:	4620      	mov	r0, r4
 8009ece:	9205      	str	r2, [sp, #20]
 8009ed0:	f000 fd86 	bl	800a9e0 <__i2b>
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	2d00      	cmp	r5, #0
 8009ed8:	dd0c      	ble.n	8009ef4 <_dtoa_r+0x754>
 8009eda:	9b05      	ldr	r3, [sp, #20]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	dd09      	ble.n	8009ef4 <_dtoa_r+0x754>
 8009ee0:	42ab      	cmp	r3, r5
 8009ee2:	9a04      	ldr	r2, [sp, #16]
 8009ee4:	bfa8      	it	ge
 8009ee6:	462b      	movge	r3, r5
 8009ee8:	1ad2      	subs	r2, r2, r3
 8009eea:	9204      	str	r2, [sp, #16]
 8009eec:	9a05      	ldr	r2, [sp, #20]
 8009eee:	1aed      	subs	r5, r5, r3
 8009ef0:	1ad3      	subs	r3, r2, r3
 8009ef2:	9305      	str	r3, [sp, #20]
 8009ef4:	9b07      	ldr	r3, [sp, #28]
 8009ef6:	b31b      	cbz	r3, 8009f40 <_dtoa_r+0x7a0>
 8009ef8:	9b08      	ldr	r3, [sp, #32]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	f000 80af 	beq.w	800a05e <_dtoa_r+0x8be>
 8009f00:	2e00      	cmp	r6, #0
 8009f02:	dd13      	ble.n	8009f2c <_dtoa_r+0x78c>
 8009f04:	4639      	mov	r1, r7
 8009f06:	4632      	mov	r2, r6
 8009f08:	4620      	mov	r0, r4
 8009f0a:	f000 fe29 	bl	800ab60 <__pow5mult>
 8009f0e:	ee18 2a10 	vmov	r2, s16
 8009f12:	4601      	mov	r1, r0
 8009f14:	4607      	mov	r7, r0
 8009f16:	4620      	mov	r0, r4
 8009f18:	f000 fd78 	bl	800aa0c <__multiply>
 8009f1c:	ee18 1a10 	vmov	r1, s16
 8009f20:	4680      	mov	r8, r0
 8009f22:	4620      	mov	r0, r4
 8009f24:	f000 fca4 	bl	800a870 <_Bfree>
 8009f28:	ee08 8a10 	vmov	s16, r8
 8009f2c:	9b07      	ldr	r3, [sp, #28]
 8009f2e:	1b9a      	subs	r2, r3, r6
 8009f30:	d006      	beq.n	8009f40 <_dtoa_r+0x7a0>
 8009f32:	ee18 1a10 	vmov	r1, s16
 8009f36:	4620      	mov	r0, r4
 8009f38:	f000 fe12 	bl	800ab60 <__pow5mult>
 8009f3c:	ee08 0a10 	vmov	s16, r0
 8009f40:	2101      	movs	r1, #1
 8009f42:	4620      	mov	r0, r4
 8009f44:	f000 fd4c 	bl	800a9e0 <__i2b>
 8009f48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	4606      	mov	r6, r0
 8009f4e:	f340 8088 	ble.w	800a062 <_dtoa_r+0x8c2>
 8009f52:	461a      	mov	r2, r3
 8009f54:	4601      	mov	r1, r0
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 fe02 	bl	800ab60 <__pow5mult>
 8009f5c:	9b06      	ldr	r3, [sp, #24]
 8009f5e:	2b01      	cmp	r3, #1
 8009f60:	4606      	mov	r6, r0
 8009f62:	f340 8081 	ble.w	800a068 <_dtoa_r+0x8c8>
 8009f66:	f04f 0800 	mov.w	r8, #0
 8009f6a:	6933      	ldr	r3, [r6, #16]
 8009f6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009f70:	6918      	ldr	r0, [r3, #16]
 8009f72:	f000 fce5 	bl	800a940 <__hi0bits>
 8009f76:	f1c0 0020 	rsb	r0, r0, #32
 8009f7a:	9b05      	ldr	r3, [sp, #20]
 8009f7c:	4418      	add	r0, r3
 8009f7e:	f010 001f 	ands.w	r0, r0, #31
 8009f82:	f000 8092 	beq.w	800a0aa <_dtoa_r+0x90a>
 8009f86:	f1c0 0320 	rsb	r3, r0, #32
 8009f8a:	2b04      	cmp	r3, #4
 8009f8c:	f340 808a 	ble.w	800a0a4 <_dtoa_r+0x904>
 8009f90:	f1c0 001c 	rsb	r0, r0, #28
 8009f94:	9b04      	ldr	r3, [sp, #16]
 8009f96:	4403      	add	r3, r0
 8009f98:	9304      	str	r3, [sp, #16]
 8009f9a:	9b05      	ldr	r3, [sp, #20]
 8009f9c:	4403      	add	r3, r0
 8009f9e:	4405      	add	r5, r0
 8009fa0:	9305      	str	r3, [sp, #20]
 8009fa2:	9b04      	ldr	r3, [sp, #16]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	dd07      	ble.n	8009fb8 <_dtoa_r+0x818>
 8009fa8:	ee18 1a10 	vmov	r1, s16
 8009fac:	461a      	mov	r2, r3
 8009fae:	4620      	mov	r0, r4
 8009fb0:	f000 fe30 	bl	800ac14 <__lshift>
 8009fb4:	ee08 0a10 	vmov	s16, r0
 8009fb8:	9b05      	ldr	r3, [sp, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	dd05      	ble.n	8009fca <_dtoa_r+0x82a>
 8009fbe:	4631      	mov	r1, r6
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f000 fe26 	bl	800ac14 <__lshift>
 8009fc8:	4606      	mov	r6, r0
 8009fca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d06e      	beq.n	800a0ae <_dtoa_r+0x90e>
 8009fd0:	ee18 0a10 	vmov	r0, s16
 8009fd4:	4631      	mov	r1, r6
 8009fd6:	f000 fe8d 	bl	800acf4 <__mcmp>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	da67      	bge.n	800a0ae <_dtoa_r+0x90e>
 8009fde:	9b00      	ldr	r3, [sp, #0]
 8009fe0:	3b01      	subs	r3, #1
 8009fe2:	ee18 1a10 	vmov	r1, s16
 8009fe6:	9300      	str	r3, [sp, #0]
 8009fe8:	220a      	movs	r2, #10
 8009fea:	2300      	movs	r3, #0
 8009fec:	4620      	mov	r0, r4
 8009fee:	f000 fc61 	bl	800a8b4 <__multadd>
 8009ff2:	9b08      	ldr	r3, [sp, #32]
 8009ff4:	ee08 0a10 	vmov	s16, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	f000 81b1 	beq.w	800a360 <_dtoa_r+0xbc0>
 8009ffe:	2300      	movs	r3, #0
 800a000:	4639      	mov	r1, r7
 800a002:	220a      	movs	r2, #10
 800a004:	4620      	mov	r0, r4
 800a006:	f000 fc55 	bl	800a8b4 <__multadd>
 800a00a:	9b02      	ldr	r3, [sp, #8]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	4607      	mov	r7, r0
 800a010:	f300 808e 	bgt.w	800a130 <_dtoa_r+0x990>
 800a014:	9b06      	ldr	r3, [sp, #24]
 800a016:	2b02      	cmp	r3, #2
 800a018:	dc51      	bgt.n	800a0be <_dtoa_r+0x91e>
 800a01a:	e089      	b.n	800a130 <_dtoa_r+0x990>
 800a01c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a01e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a022:	e74b      	b.n	8009ebc <_dtoa_r+0x71c>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	1e5e      	subs	r6, r3, #1
 800a028:	9b07      	ldr	r3, [sp, #28]
 800a02a:	42b3      	cmp	r3, r6
 800a02c:	bfbf      	itttt	lt
 800a02e:	9b07      	ldrlt	r3, [sp, #28]
 800a030:	9607      	strlt	r6, [sp, #28]
 800a032:	1af2      	sublt	r2, r6, r3
 800a034:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a036:	bfb6      	itet	lt
 800a038:	189b      	addlt	r3, r3, r2
 800a03a:	1b9e      	subge	r6, r3, r6
 800a03c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a03e:	9b03      	ldr	r3, [sp, #12]
 800a040:	bfb8      	it	lt
 800a042:	2600      	movlt	r6, #0
 800a044:	2b00      	cmp	r3, #0
 800a046:	bfb7      	itett	lt
 800a048:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a04c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a050:	1a9d      	sublt	r5, r3, r2
 800a052:	2300      	movlt	r3, #0
 800a054:	e734      	b.n	8009ec0 <_dtoa_r+0x720>
 800a056:	9e07      	ldr	r6, [sp, #28]
 800a058:	9d04      	ldr	r5, [sp, #16]
 800a05a:	9f08      	ldr	r7, [sp, #32]
 800a05c:	e73b      	b.n	8009ed6 <_dtoa_r+0x736>
 800a05e:	9a07      	ldr	r2, [sp, #28]
 800a060:	e767      	b.n	8009f32 <_dtoa_r+0x792>
 800a062:	9b06      	ldr	r3, [sp, #24]
 800a064:	2b01      	cmp	r3, #1
 800a066:	dc18      	bgt.n	800a09a <_dtoa_r+0x8fa>
 800a068:	f1ba 0f00 	cmp.w	sl, #0
 800a06c:	d115      	bne.n	800a09a <_dtoa_r+0x8fa>
 800a06e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a072:	b993      	cbnz	r3, 800a09a <_dtoa_r+0x8fa>
 800a074:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a078:	0d1b      	lsrs	r3, r3, #20
 800a07a:	051b      	lsls	r3, r3, #20
 800a07c:	b183      	cbz	r3, 800a0a0 <_dtoa_r+0x900>
 800a07e:	9b04      	ldr	r3, [sp, #16]
 800a080:	3301      	adds	r3, #1
 800a082:	9304      	str	r3, [sp, #16]
 800a084:	9b05      	ldr	r3, [sp, #20]
 800a086:	3301      	adds	r3, #1
 800a088:	9305      	str	r3, [sp, #20]
 800a08a:	f04f 0801 	mov.w	r8, #1
 800a08e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a090:	2b00      	cmp	r3, #0
 800a092:	f47f af6a 	bne.w	8009f6a <_dtoa_r+0x7ca>
 800a096:	2001      	movs	r0, #1
 800a098:	e76f      	b.n	8009f7a <_dtoa_r+0x7da>
 800a09a:	f04f 0800 	mov.w	r8, #0
 800a09e:	e7f6      	b.n	800a08e <_dtoa_r+0x8ee>
 800a0a0:	4698      	mov	r8, r3
 800a0a2:	e7f4      	b.n	800a08e <_dtoa_r+0x8ee>
 800a0a4:	f43f af7d 	beq.w	8009fa2 <_dtoa_r+0x802>
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	301c      	adds	r0, #28
 800a0ac:	e772      	b.n	8009f94 <_dtoa_r+0x7f4>
 800a0ae:	9b03      	ldr	r3, [sp, #12]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	dc37      	bgt.n	800a124 <_dtoa_r+0x984>
 800a0b4:	9b06      	ldr	r3, [sp, #24]
 800a0b6:	2b02      	cmp	r3, #2
 800a0b8:	dd34      	ble.n	800a124 <_dtoa_r+0x984>
 800a0ba:	9b03      	ldr	r3, [sp, #12]
 800a0bc:	9302      	str	r3, [sp, #8]
 800a0be:	9b02      	ldr	r3, [sp, #8]
 800a0c0:	b96b      	cbnz	r3, 800a0de <_dtoa_r+0x93e>
 800a0c2:	4631      	mov	r1, r6
 800a0c4:	2205      	movs	r2, #5
 800a0c6:	4620      	mov	r0, r4
 800a0c8:	f000 fbf4 	bl	800a8b4 <__multadd>
 800a0cc:	4601      	mov	r1, r0
 800a0ce:	4606      	mov	r6, r0
 800a0d0:	ee18 0a10 	vmov	r0, s16
 800a0d4:	f000 fe0e 	bl	800acf4 <__mcmp>
 800a0d8:	2800      	cmp	r0, #0
 800a0da:	f73f adbb 	bgt.w	8009c54 <_dtoa_r+0x4b4>
 800a0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0e0:	9d01      	ldr	r5, [sp, #4]
 800a0e2:	43db      	mvns	r3, r3
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	f04f 0800 	mov.w	r8, #0
 800a0ea:	4631      	mov	r1, r6
 800a0ec:	4620      	mov	r0, r4
 800a0ee:	f000 fbbf 	bl	800a870 <_Bfree>
 800a0f2:	2f00      	cmp	r7, #0
 800a0f4:	f43f aea4 	beq.w	8009e40 <_dtoa_r+0x6a0>
 800a0f8:	f1b8 0f00 	cmp.w	r8, #0
 800a0fc:	d005      	beq.n	800a10a <_dtoa_r+0x96a>
 800a0fe:	45b8      	cmp	r8, r7
 800a100:	d003      	beq.n	800a10a <_dtoa_r+0x96a>
 800a102:	4641      	mov	r1, r8
 800a104:	4620      	mov	r0, r4
 800a106:	f000 fbb3 	bl	800a870 <_Bfree>
 800a10a:	4639      	mov	r1, r7
 800a10c:	4620      	mov	r0, r4
 800a10e:	f000 fbaf 	bl	800a870 <_Bfree>
 800a112:	e695      	b.n	8009e40 <_dtoa_r+0x6a0>
 800a114:	2600      	movs	r6, #0
 800a116:	4637      	mov	r7, r6
 800a118:	e7e1      	b.n	800a0de <_dtoa_r+0x93e>
 800a11a:	9700      	str	r7, [sp, #0]
 800a11c:	4637      	mov	r7, r6
 800a11e:	e599      	b.n	8009c54 <_dtoa_r+0x4b4>
 800a120:	40240000 	.word	0x40240000
 800a124:	9b08      	ldr	r3, [sp, #32]
 800a126:	2b00      	cmp	r3, #0
 800a128:	f000 80ca 	beq.w	800a2c0 <_dtoa_r+0xb20>
 800a12c:	9b03      	ldr	r3, [sp, #12]
 800a12e:	9302      	str	r3, [sp, #8]
 800a130:	2d00      	cmp	r5, #0
 800a132:	dd05      	ble.n	800a140 <_dtoa_r+0x9a0>
 800a134:	4639      	mov	r1, r7
 800a136:	462a      	mov	r2, r5
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 fd6b 	bl	800ac14 <__lshift>
 800a13e:	4607      	mov	r7, r0
 800a140:	f1b8 0f00 	cmp.w	r8, #0
 800a144:	d05b      	beq.n	800a1fe <_dtoa_r+0xa5e>
 800a146:	6879      	ldr	r1, [r7, #4]
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 fb51 	bl	800a7f0 <_Balloc>
 800a14e:	4605      	mov	r5, r0
 800a150:	b928      	cbnz	r0, 800a15e <_dtoa_r+0x9be>
 800a152:	4b87      	ldr	r3, [pc, #540]	; (800a370 <_dtoa_r+0xbd0>)
 800a154:	4602      	mov	r2, r0
 800a156:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a15a:	f7ff bb3b 	b.w	80097d4 <_dtoa_r+0x34>
 800a15e:	693a      	ldr	r2, [r7, #16]
 800a160:	3202      	adds	r2, #2
 800a162:	0092      	lsls	r2, r2, #2
 800a164:	f107 010c 	add.w	r1, r7, #12
 800a168:	300c      	adds	r0, #12
 800a16a:	f000 fb33 	bl	800a7d4 <memcpy>
 800a16e:	2201      	movs	r2, #1
 800a170:	4629      	mov	r1, r5
 800a172:	4620      	mov	r0, r4
 800a174:	f000 fd4e 	bl	800ac14 <__lshift>
 800a178:	9b01      	ldr	r3, [sp, #4]
 800a17a:	f103 0901 	add.w	r9, r3, #1
 800a17e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a182:	4413      	add	r3, r2
 800a184:	9305      	str	r3, [sp, #20]
 800a186:	f00a 0301 	and.w	r3, sl, #1
 800a18a:	46b8      	mov	r8, r7
 800a18c:	9304      	str	r3, [sp, #16]
 800a18e:	4607      	mov	r7, r0
 800a190:	4631      	mov	r1, r6
 800a192:	ee18 0a10 	vmov	r0, s16
 800a196:	f7ff fa77 	bl	8009688 <quorem>
 800a19a:	4641      	mov	r1, r8
 800a19c:	9002      	str	r0, [sp, #8]
 800a19e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1a2:	ee18 0a10 	vmov	r0, s16
 800a1a6:	f000 fda5 	bl	800acf4 <__mcmp>
 800a1aa:	463a      	mov	r2, r7
 800a1ac:	9003      	str	r0, [sp, #12]
 800a1ae:	4631      	mov	r1, r6
 800a1b0:	4620      	mov	r0, r4
 800a1b2:	f000 fdbb 	bl	800ad2c <__mdiff>
 800a1b6:	68c2      	ldr	r2, [r0, #12]
 800a1b8:	f109 3bff 	add.w	fp, r9, #4294967295
 800a1bc:	4605      	mov	r5, r0
 800a1be:	bb02      	cbnz	r2, 800a202 <_dtoa_r+0xa62>
 800a1c0:	4601      	mov	r1, r0
 800a1c2:	ee18 0a10 	vmov	r0, s16
 800a1c6:	f000 fd95 	bl	800acf4 <__mcmp>
 800a1ca:	4602      	mov	r2, r0
 800a1cc:	4629      	mov	r1, r5
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	9207      	str	r2, [sp, #28]
 800a1d2:	f000 fb4d 	bl	800a870 <_Bfree>
 800a1d6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a1da:	ea43 0102 	orr.w	r1, r3, r2
 800a1de:	9b04      	ldr	r3, [sp, #16]
 800a1e0:	430b      	orrs	r3, r1
 800a1e2:	464d      	mov	r5, r9
 800a1e4:	d10f      	bne.n	800a206 <_dtoa_r+0xa66>
 800a1e6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a1ea:	d02a      	beq.n	800a242 <_dtoa_r+0xaa2>
 800a1ec:	9b03      	ldr	r3, [sp, #12]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	dd02      	ble.n	800a1f8 <_dtoa_r+0xa58>
 800a1f2:	9b02      	ldr	r3, [sp, #8]
 800a1f4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a1f8:	f88b a000 	strb.w	sl, [fp]
 800a1fc:	e775      	b.n	800a0ea <_dtoa_r+0x94a>
 800a1fe:	4638      	mov	r0, r7
 800a200:	e7ba      	b.n	800a178 <_dtoa_r+0x9d8>
 800a202:	2201      	movs	r2, #1
 800a204:	e7e2      	b.n	800a1cc <_dtoa_r+0xa2c>
 800a206:	9b03      	ldr	r3, [sp, #12]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	db04      	blt.n	800a216 <_dtoa_r+0xa76>
 800a20c:	9906      	ldr	r1, [sp, #24]
 800a20e:	430b      	orrs	r3, r1
 800a210:	9904      	ldr	r1, [sp, #16]
 800a212:	430b      	orrs	r3, r1
 800a214:	d122      	bne.n	800a25c <_dtoa_r+0xabc>
 800a216:	2a00      	cmp	r2, #0
 800a218:	ddee      	ble.n	800a1f8 <_dtoa_r+0xa58>
 800a21a:	ee18 1a10 	vmov	r1, s16
 800a21e:	2201      	movs	r2, #1
 800a220:	4620      	mov	r0, r4
 800a222:	f000 fcf7 	bl	800ac14 <__lshift>
 800a226:	4631      	mov	r1, r6
 800a228:	ee08 0a10 	vmov	s16, r0
 800a22c:	f000 fd62 	bl	800acf4 <__mcmp>
 800a230:	2800      	cmp	r0, #0
 800a232:	dc03      	bgt.n	800a23c <_dtoa_r+0xa9c>
 800a234:	d1e0      	bne.n	800a1f8 <_dtoa_r+0xa58>
 800a236:	f01a 0f01 	tst.w	sl, #1
 800a23a:	d0dd      	beq.n	800a1f8 <_dtoa_r+0xa58>
 800a23c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a240:	d1d7      	bne.n	800a1f2 <_dtoa_r+0xa52>
 800a242:	2339      	movs	r3, #57	; 0x39
 800a244:	f88b 3000 	strb.w	r3, [fp]
 800a248:	462b      	mov	r3, r5
 800a24a:	461d      	mov	r5, r3
 800a24c:	3b01      	subs	r3, #1
 800a24e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a252:	2a39      	cmp	r2, #57	; 0x39
 800a254:	d071      	beq.n	800a33a <_dtoa_r+0xb9a>
 800a256:	3201      	adds	r2, #1
 800a258:	701a      	strb	r2, [r3, #0]
 800a25a:	e746      	b.n	800a0ea <_dtoa_r+0x94a>
 800a25c:	2a00      	cmp	r2, #0
 800a25e:	dd07      	ble.n	800a270 <_dtoa_r+0xad0>
 800a260:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a264:	d0ed      	beq.n	800a242 <_dtoa_r+0xaa2>
 800a266:	f10a 0301 	add.w	r3, sl, #1
 800a26a:	f88b 3000 	strb.w	r3, [fp]
 800a26e:	e73c      	b.n	800a0ea <_dtoa_r+0x94a>
 800a270:	9b05      	ldr	r3, [sp, #20]
 800a272:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a276:	4599      	cmp	r9, r3
 800a278:	d047      	beq.n	800a30a <_dtoa_r+0xb6a>
 800a27a:	ee18 1a10 	vmov	r1, s16
 800a27e:	2300      	movs	r3, #0
 800a280:	220a      	movs	r2, #10
 800a282:	4620      	mov	r0, r4
 800a284:	f000 fb16 	bl	800a8b4 <__multadd>
 800a288:	45b8      	cmp	r8, r7
 800a28a:	ee08 0a10 	vmov	s16, r0
 800a28e:	f04f 0300 	mov.w	r3, #0
 800a292:	f04f 020a 	mov.w	r2, #10
 800a296:	4641      	mov	r1, r8
 800a298:	4620      	mov	r0, r4
 800a29a:	d106      	bne.n	800a2aa <_dtoa_r+0xb0a>
 800a29c:	f000 fb0a 	bl	800a8b4 <__multadd>
 800a2a0:	4680      	mov	r8, r0
 800a2a2:	4607      	mov	r7, r0
 800a2a4:	f109 0901 	add.w	r9, r9, #1
 800a2a8:	e772      	b.n	800a190 <_dtoa_r+0x9f0>
 800a2aa:	f000 fb03 	bl	800a8b4 <__multadd>
 800a2ae:	4639      	mov	r1, r7
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	220a      	movs	r2, #10
 800a2b6:	4620      	mov	r0, r4
 800a2b8:	f000 fafc 	bl	800a8b4 <__multadd>
 800a2bc:	4607      	mov	r7, r0
 800a2be:	e7f1      	b.n	800a2a4 <_dtoa_r+0xb04>
 800a2c0:	9b03      	ldr	r3, [sp, #12]
 800a2c2:	9302      	str	r3, [sp, #8]
 800a2c4:	9d01      	ldr	r5, [sp, #4]
 800a2c6:	ee18 0a10 	vmov	r0, s16
 800a2ca:	4631      	mov	r1, r6
 800a2cc:	f7ff f9dc 	bl	8009688 <quorem>
 800a2d0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a2d4:	9b01      	ldr	r3, [sp, #4]
 800a2d6:	f805 ab01 	strb.w	sl, [r5], #1
 800a2da:	1aea      	subs	r2, r5, r3
 800a2dc:	9b02      	ldr	r3, [sp, #8]
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	dd09      	ble.n	800a2f6 <_dtoa_r+0xb56>
 800a2e2:	ee18 1a10 	vmov	r1, s16
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	220a      	movs	r2, #10
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 fae2 	bl	800a8b4 <__multadd>
 800a2f0:	ee08 0a10 	vmov	s16, r0
 800a2f4:	e7e7      	b.n	800a2c6 <_dtoa_r+0xb26>
 800a2f6:	9b02      	ldr	r3, [sp, #8]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	bfc8      	it	gt
 800a2fc:	461d      	movgt	r5, r3
 800a2fe:	9b01      	ldr	r3, [sp, #4]
 800a300:	bfd8      	it	le
 800a302:	2501      	movle	r5, #1
 800a304:	441d      	add	r5, r3
 800a306:	f04f 0800 	mov.w	r8, #0
 800a30a:	ee18 1a10 	vmov	r1, s16
 800a30e:	2201      	movs	r2, #1
 800a310:	4620      	mov	r0, r4
 800a312:	f000 fc7f 	bl	800ac14 <__lshift>
 800a316:	4631      	mov	r1, r6
 800a318:	ee08 0a10 	vmov	s16, r0
 800a31c:	f000 fcea 	bl	800acf4 <__mcmp>
 800a320:	2800      	cmp	r0, #0
 800a322:	dc91      	bgt.n	800a248 <_dtoa_r+0xaa8>
 800a324:	d102      	bne.n	800a32c <_dtoa_r+0xb8c>
 800a326:	f01a 0f01 	tst.w	sl, #1
 800a32a:	d18d      	bne.n	800a248 <_dtoa_r+0xaa8>
 800a32c:	462b      	mov	r3, r5
 800a32e:	461d      	mov	r5, r3
 800a330:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a334:	2a30      	cmp	r2, #48	; 0x30
 800a336:	d0fa      	beq.n	800a32e <_dtoa_r+0xb8e>
 800a338:	e6d7      	b.n	800a0ea <_dtoa_r+0x94a>
 800a33a:	9a01      	ldr	r2, [sp, #4]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d184      	bne.n	800a24a <_dtoa_r+0xaaa>
 800a340:	9b00      	ldr	r3, [sp, #0]
 800a342:	3301      	adds	r3, #1
 800a344:	9300      	str	r3, [sp, #0]
 800a346:	2331      	movs	r3, #49	; 0x31
 800a348:	7013      	strb	r3, [r2, #0]
 800a34a:	e6ce      	b.n	800a0ea <_dtoa_r+0x94a>
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <_dtoa_r+0xbd4>)
 800a34e:	f7ff ba95 	b.w	800987c <_dtoa_r+0xdc>
 800a352:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a354:	2b00      	cmp	r3, #0
 800a356:	f47f aa6e 	bne.w	8009836 <_dtoa_r+0x96>
 800a35a:	4b07      	ldr	r3, [pc, #28]	; (800a378 <_dtoa_r+0xbd8>)
 800a35c:	f7ff ba8e 	b.w	800987c <_dtoa_r+0xdc>
 800a360:	9b02      	ldr	r3, [sp, #8]
 800a362:	2b00      	cmp	r3, #0
 800a364:	dcae      	bgt.n	800a2c4 <_dtoa_r+0xb24>
 800a366:	9b06      	ldr	r3, [sp, #24]
 800a368:	2b02      	cmp	r3, #2
 800a36a:	f73f aea8 	bgt.w	800a0be <_dtoa_r+0x91e>
 800a36e:	e7a9      	b.n	800a2c4 <_dtoa_r+0xb24>
 800a370:	0800cf6b 	.word	0x0800cf6b
 800a374:	0800cec8 	.word	0x0800cec8
 800a378:	0800ceec 	.word	0x0800ceec

0800a37c <__sflush_r>:
 800a37c:	898a      	ldrh	r2, [r1, #12]
 800a37e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a382:	4605      	mov	r5, r0
 800a384:	0710      	lsls	r0, r2, #28
 800a386:	460c      	mov	r4, r1
 800a388:	d458      	bmi.n	800a43c <__sflush_r+0xc0>
 800a38a:	684b      	ldr	r3, [r1, #4]
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	dc05      	bgt.n	800a39c <__sflush_r+0x20>
 800a390:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a392:	2b00      	cmp	r3, #0
 800a394:	dc02      	bgt.n	800a39c <__sflush_r+0x20>
 800a396:	2000      	movs	r0, #0
 800a398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a39c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a39e:	2e00      	cmp	r6, #0
 800a3a0:	d0f9      	beq.n	800a396 <__sflush_r+0x1a>
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3a8:	682f      	ldr	r7, [r5, #0]
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	d032      	beq.n	800a414 <__sflush_r+0x98>
 800a3ae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	075a      	lsls	r2, r3, #29
 800a3b4:	d505      	bpl.n	800a3c2 <__sflush_r+0x46>
 800a3b6:	6863      	ldr	r3, [r4, #4]
 800a3b8:	1ac0      	subs	r0, r0, r3
 800a3ba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3bc:	b10b      	cbz	r3, 800a3c2 <__sflush_r+0x46>
 800a3be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3c0:	1ac0      	subs	r0, r0, r3
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	4602      	mov	r2, r0
 800a3c6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3c8:	6a21      	ldr	r1, [r4, #32]
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	47b0      	blx	r6
 800a3ce:	1c43      	adds	r3, r0, #1
 800a3d0:	89a3      	ldrh	r3, [r4, #12]
 800a3d2:	d106      	bne.n	800a3e2 <__sflush_r+0x66>
 800a3d4:	6829      	ldr	r1, [r5, #0]
 800a3d6:	291d      	cmp	r1, #29
 800a3d8:	d82c      	bhi.n	800a434 <__sflush_r+0xb8>
 800a3da:	4a2a      	ldr	r2, [pc, #168]	; (800a484 <__sflush_r+0x108>)
 800a3dc:	40ca      	lsrs	r2, r1
 800a3de:	07d6      	lsls	r6, r2, #31
 800a3e0:	d528      	bpl.n	800a434 <__sflush_r+0xb8>
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	6062      	str	r2, [r4, #4]
 800a3e6:	04d9      	lsls	r1, r3, #19
 800a3e8:	6922      	ldr	r2, [r4, #16]
 800a3ea:	6022      	str	r2, [r4, #0]
 800a3ec:	d504      	bpl.n	800a3f8 <__sflush_r+0x7c>
 800a3ee:	1c42      	adds	r2, r0, #1
 800a3f0:	d101      	bne.n	800a3f6 <__sflush_r+0x7a>
 800a3f2:	682b      	ldr	r3, [r5, #0]
 800a3f4:	b903      	cbnz	r3, 800a3f8 <__sflush_r+0x7c>
 800a3f6:	6560      	str	r0, [r4, #84]	; 0x54
 800a3f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3fa:	602f      	str	r7, [r5, #0]
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	d0ca      	beq.n	800a396 <__sflush_r+0x1a>
 800a400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a404:	4299      	cmp	r1, r3
 800a406:	d002      	beq.n	800a40e <__sflush_r+0x92>
 800a408:	4628      	mov	r0, r5
 800a40a:	f000 fd8b 	bl	800af24 <_free_r>
 800a40e:	2000      	movs	r0, #0
 800a410:	6360      	str	r0, [r4, #52]	; 0x34
 800a412:	e7c1      	b.n	800a398 <__sflush_r+0x1c>
 800a414:	6a21      	ldr	r1, [r4, #32]
 800a416:	2301      	movs	r3, #1
 800a418:	4628      	mov	r0, r5
 800a41a:	47b0      	blx	r6
 800a41c:	1c41      	adds	r1, r0, #1
 800a41e:	d1c7      	bne.n	800a3b0 <__sflush_r+0x34>
 800a420:	682b      	ldr	r3, [r5, #0]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d0c4      	beq.n	800a3b0 <__sflush_r+0x34>
 800a426:	2b1d      	cmp	r3, #29
 800a428:	d001      	beq.n	800a42e <__sflush_r+0xb2>
 800a42a:	2b16      	cmp	r3, #22
 800a42c:	d101      	bne.n	800a432 <__sflush_r+0xb6>
 800a42e:	602f      	str	r7, [r5, #0]
 800a430:	e7b1      	b.n	800a396 <__sflush_r+0x1a>
 800a432:	89a3      	ldrh	r3, [r4, #12]
 800a434:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a438:	81a3      	strh	r3, [r4, #12]
 800a43a:	e7ad      	b.n	800a398 <__sflush_r+0x1c>
 800a43c:	690f      	ldr	r7, [r1, #16]
 800a43e:	2f00      	cmp	r7, #0
 800a440:	d0a9      	beq.n	800a396 <__sflush_r+0x1a>
 800a442:	0793      	lsls	r3, r2, #30
 800a444:	680e      	ldr	r6, [r1, #0]
 800a446:	bf08      	it	eq
 800a448:	694b      	ldreq	r3, [r1, #20]
 800a44a:	600f      	str	r7, [r1, #0]
 800a44c:	bf18      	it	ne
 800a44e:	2300      	movne	r3, #0
 800a450:	eba6 0807 	sub.w	r8, r6, r7
 800a454:	608b      	str	r3, [r1, #8]
 800a456:	f1b8 0f00 	cmp.w	r8, #0
 800a45a:	dd9c      	ble.n	800a396 <__sflush_r+0x1a>
 800a45c:	6a21      	ldr	r1, [r4, #32]
 800a45e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a460:	4643      	mov	r3, r8
 800a462:	463a      	mov	r2, r7
 800a464:	4628      	mov	r0, r5
 800a466:	47b0      	blx	r6
 800a468:	2800      	cmp	r0, #0
 800a46a:	dc06      	bgt.n	800a47a <__sflush_r+0xfe>
 800a46c:	89a3      	ldrh	r3, [r4, #12]
 800a46e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a472:	81a3      	strh	r3, [r4, #12]
 800a474:	f04f 30ff 	mov.w	r0, #4294967295
 800a478:	e78e      	b.n	800a398 <__sflush_r+0x1c>
 800a47a:	4407      	add	r7, r0
 800a47c:	eba8 0800 	sub.w	r8, r8, r0
 800a480:	e7e9      	b.n	800a456 <__sflush_r+0xda>
 800a482:	bf00      	nop
 800a484:	20400001 	.word	0x20400001

0800a488 <_fflush_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	690b      	ldr	r3, [r1, #16]
 800a48c:	4605      	mov	r5, r0
 800a48e:	460c      	mov	r4, r1
 800a490:	b913      	cbnz	r3, 800a498 <_fflush_r+0x10>
 800a492:	2500      	movs	r5, #0
 800a494:	4628      	mov	r0, r5
 800a496:	bd38      	pop	{r3, r4, r5, pc}
 800a498:	b118      	cbz	r0, 800a4a2 <_fflush_r+0x1a>
 800a49a:	6983      	ldr	r3, [r0, #24]
 800a49c:	b90b      	cbnz	r3, 800a4a2 <_fflush_r+0x1a>
 800a49e:	f000 f887 	bl	800a5b0 <__sinit>
 800a4a2:	4b14      	ldr	r3, [pc, #80]	; (800a4f4 <_fflush_r+0x6c>)
 800a4a4:	429c      	cmp	r4, r3
 800a4a6:	d11b      	bne.n	800a4e0 <_fflush_r+0x58>
 800a4a8:	686c      	ldr	r4, [r5, #4]
 800a4aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d0ef      	beq.n	800a492 <_fflush_r+0xa>
 800a4b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4b4:	07d0      	lsls	r0, r2, #31
 800a4b6:	d404      	bmi.n	800a4c2 <_fflush_r+0x3a>
 800a4b8:	0599      	lsls	r1, r3, #22
 800a4ba:	d402      	bmi.n	800a4c2 <_fflush_r+0x3a>
 800a4bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4be:	f000 f91a 	bl	800a6f6 <__retarget_lock_acquire_recursive>
 800a4c2:	4628      	mov	r0, r5
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	f7ff ff59 	bl	800a37c <__sflush_r>
 800a4ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a4cc:	07da      	lsls	r2, r3, #31
 800a4ce:	4605      	mov	r5, r0
 800a4d0:	d4e0      	bmi.n	800a494 <_fflush_r+0xc>
 800a4d2:	89a3      	ldrh	r3, [r4, #12]
 800a4d4:	059b      	lsls	r3, r3, #22
 800a4d6:	d4dd      	bmi.n	800a494 <_fflush_r+0xc>
 800a4d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4da:	f000 f90d 	bl	800a6f8 <__retarget_lock_release_recursive>
 800a4de:	e7d9      	b.n	800a494 <_fflush_r+0xc>
 800a4e0:	4b05      	ldr	r3, [pc, #20]	; (800a4f8 <_fflush_r+0x70>)
 800a4e2:	429c      	cmp	r4, r3
 800a4e4:	d101      	bne.n	800a4ea <_fflush_r+0x62>
 800a4e6:	68ac      	ldr	r4, [r5, #8]
 800a4e8:	e7df      	b.n	800a4aa <_fflush_r+0x22>
 800a4ea:	4b04      	ldr	r3, [pc, #16]	; (800a4fc <_fflush_r+0x74>)
 800a4ec:	429c      	cmp	r4, r3
 800a4ee:	bf08      	it	eq
 800a4f0:	68ec      	ldreq	r4, [r5, #12]
 800a4f2:	e7da      	b.n	800a4aa <_fflush_r+0x22>
 800a4f4:	0800cf9c 	.word	0x0800cf9c
 800a4f8:	0800cfbc 	.word	0x0800cfbc
 800a4fc:	0800cf7c 	.word	0x0800cf7c

0800a500 <std>:
 800a500:	2300      	movs	r3, #0
 800a502:	b510      	push	{r4, lr}
 800a504:	4604      	mov	r4, r0
 800a506:	e9c0 3300 	strd	r3, r3, [r0]
 800a50a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a50e:	6083      	str	r3, [r0, #8]
 800a510:	8181      	strh	r1, [r0, #12]
 800a512:	6643      	str	r3, [r0, #100]	; 0x64
 800a514:	81c2      	strh	r2, [r0, #14]
 800a516:	6183      	str	r3, [r0, #24]
 800a518:	4619      	mov	r1, r3
 800a51a:	2208      	movs	r2, #8
 800a51c:	305c      	adds	r0, #92	; 0x5c
 800a51e:	f7fe fb0b 	bl	8008b38 <memset>
 800a522:	4b05      	ldr	r3, [pc, #20]	; (800a538 <std+0x38>)
 800a524:	6263      	str	r3, [r4, #36]	; 0x24
 800a526:	4b05      	ldr	r3, [pc, #20]	; (800a53c <std+0x3c>)
 800a528:	62a3      	str	r3, [r4, #40]	; 0x28
 800a52a:	4b05      	ldr	r3, [pc, #20]	; (800a540 <std+0x40>)
 800a52c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a52e:	4b05      	ldr	r3, [pc, #20]	; (800a544 <std+0x44>)
 800a530:	6224      	str	r4, [r4, #32]
 800a532:	6323      	str	r3, [r4, #48]	; 0x30
 800a534:	bd10      	pop	{r4, pc}
 800a536:	bf00      	nop
 800a538:	0800b3b9 	.word	0x0800b3b9
 800a53c:	0800b3db 	.word	0x0800b3db
 800a540:	0800b413 	.word	0x0800b413
 800a544:	0800b437 	.word	0x0800b437

0800a548 <_cleanup_r>:
 800a548:	4901      	ldr	r1, [pc, #4]	; (800a550 <_cleanup_r+0x8>)
 800a54a:	f000 b8af 	b.w	800a6ac <_fwalk_reent>
 800a54e:	bf00      	nop
 800a550:	0800a489 	.word	0x0800a489

0800a554 <__sfmoreglue>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	2268      	movs	r2, #104	; 0x68
 800a558:	1e4d      	subs	r5, r1, #1
 800a55a:	4355      	muls	r5, r2
 800a55c:	460e      	mov	r6, r1
 800a55e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a562:	f000 fd4b 	bl	800affc <_malloc_r>
 800a566:	4604      	mov	r4, r0
 800a568:	b140      	cbz	r0, 800a57c <__sfmoreglue+0x28>
 800a56a:	2100      	movs	r1, #0
 800a56c:	e9c0 1600 	strd	r1, r6, [r0]
 800a570:	300c      	adds	r0, #12
 800a572:	60a0      	str	r0, [r4, #8]
 800a574:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a578:	f7fe fade 	bl	8008b38 <memset>
 800a57c:	4620      	mov	r0, r4
 800a57e:	bd70      	pop	{r4, r5, r6, pc}

0800a580 <__sfp_lock_acquire>:
 800a580:	4801      	ldr	r0, [pc, #4]	; (800a588 <__sfp_lock_acquire+0x8>)
 800a582:	f000 b8b8 	b.w	800a6f6 <__retarget_lock_acquire_recursive>
 800a586:	bf00      	nop
 800a588:	200004f1 	.word	0x200004f1

0800a58c <__sfp_lock_release>:
 800a58c:	4801      	ldr	r0, [pc, #4]	; (800a594 <__sfp_lock_release+0x8>)
 800a58e:	f000 b8b3 	b.w	800a6f8 <__retarget_lock_release_recursive>
 800a592:	bf00      	nop
 800a594:	200004f1 	.word	0x200004f1

0800a598 <__sinit_lock_acquire>:
 800a598:	4801      	ldr	r0, [pc, #4]	; (800a5a0 <__sinit_lock_acquire+0x8>)
 800a59a:	f000 b8ac 	b.w	800a6f6 <__retarget_lock_acquire_recursive>
 800a59e:	bf00      	nop
 800a5a0:	200004f2 	.word	0x200004f2

0800a5a4 <__sinit_lock_release>:
 800a5a4:	4801      	ldr	r0, [pc, #4]	; (800a5ac <__sinit_lock_release+0x8>)
 800a5a6:	f000 b8a7 	b.w	800a6f8 <__retarget_lock_release_recursive>
 800a5aa:	bf00      	nop
 800a5ac:	200004f2 	.word	0x200004f2

0800a5b0 <__sinit>:
 800a5b0:	b510      	push	{r4, lr}
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	f7ff fff0 	bl	800a598 <__sinit_lock_acquire>
 800a5b8:	69a3      	ldr	r3, [r4, #24]
 800a5ba:	b11b      	cbz	r3, 800a5c4 <__sinit+0x14>
 800a5bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5c0:	f7ff bff0 	b.w	800a5a4 <__sinit_lock_release>
 800a5c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5c8:	6523      	str	r3, [r4, #80]	; 0x50
 800a5ca:	4b13      	ldr	r3, [pc, #76]	; (800a618 <__sinit+0x68>)
 800a5cc:	4a13      	ldr	r2, [pc, #76]	; (800a61c <__sinit+0x6c>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a5d2:	42a3      	cmp	r3, r4
 800a5d4:	bf04      	itt	eq
 800a5d6:	2301      	moveq	r3, #1
 800a5d8:	61a3      	streq	r3, [r4, #24]
 800a5da:	4620      	mov	r0, r4
 800a5dc:	f000 f820 	bl	800a620 <__sfp>
 800a5e0:	6060      	str	r0, [r4, #4]
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 f81c 	bl	800a620 <__sfp>
 800a5e8:	60a0      	str	r0, [r4, #8]
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 f818 	bl	800a620 <__sfp>
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	60e0      	str	r0, [r4, #12]
 800a5f4:	2104      	movs	r1, #4
 800a5f6:	6860      	ldr	r0, [r4, #4]
 800a5f8:	f7ff ff82 	bl	800a500 <std>
 800a5fc:	68a0      	ldr	r0, [r4, #8]
 800a5fe:	2201      	movs	r2, #1
 800a600:	2109      	movs	r1, #9
 800a602:	f7ff ff7d 	bl	800a500 <std>
 800a606:	68e0      	ldr	r0, [r4, #12]
 800a608:	2202      	movs	r2, #2
 800a60a:	2112      	movs	r1, #18
 800a60c:	f7ff ff78 	bl	800a500 <std>
 800a610:	2301      	movs	r3, #1
 800a612:	61a3      	str	r3, [r4, #24]
 800a614:	e7d2      	b.n	800a5bc <__sinit+0xc>
 800a616:	bf00      	nop
 800a618:	0800ceb4 	.word	0x0800ceb4
 800a61c:	0800a549 	.word	0x0800a549

0800a620 <__sfp>:
 800a620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a622:	4607      	mov	r7, r0
 800a624:	f7ff ffac 	bl	800a580 <__sfp_lock_acquire>
 800a628:	4b1e      	ldr	r3, [pc, #120]	; (800a6a4 <__sfp+0x84>)
 800a62a:	681e      	ldr	r6, [r3, #0]
 800a62c:	69b3      	ldr	r3, [r6, #24]
 800a62e:	b913      	cbnz	r3, 800a636 <__sfp+0x16>
 800a630:	4630      	mov	r0, r6
 800a632:	f7ff ffbd 	bl	800a5b0 <__sinit>
 800a636:	3648      	adds	r6, #72	; 0x48
 800a638:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a63c:	3b01      	subs	r3, #1
 800a63e:	d503      	bpl.n	800a648 <__sfp+0x28>
 800a640:	6833      	ldr	r3, [r6, #0]
 800a642:	b30b      	cbz	r3, 800a688 <__sfp+0x68>
 800a644:	6836      	ldr	r6, [r6, #0]
 800a646:	e7f7      	b.n	800a638 <__sfp+0x18>
 800a648:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a64c:	b9d5      	cbnz	r5, 800a684 <__sfp+0x64>
 800a64e:	4b16      	ldr	r3, [pc, #88]	; (800a6a8 <__sfp+0x88>)
 800a650:	60e3      	str	r3, [r4, #12]
 800a652:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a656:	6665      	str	r5, [r4, #100]	; 0x64
 800a658:	f000 f84c 	bl	800a6f4 <__retarget_lock_init_recursive>
 800a65c:	f7ff ff96 	bl	800a58c <__sfp_lock_release>
 800a660:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a664:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a668:	6025      	str	r5, [r4, #0]
 800a66a:	61a5      	str	r5, [r4, #24]
 800a66c:	2208      	movs	r2, #8
 800a66e:	4629      	mov	r1, r5
 800a670:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a674:	f7fe fa60 	bl	8008b38 <memset>
 800a678:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a67c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a680:	4620      	mov	r0, r4
 800a682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a684:	3468      	adds	r4, #104	; 0x68
 800a686:	e7d9      	b.n	800a63c <__sfp+0x1c>
 800a688:	2104      	movs	r1, #4
 800a68a:	4638      	mov	r0, r7
 800a68c:	f7ff ff62 	bl	800a554 <__sfmoreglue>
 800a690:	4604      	mov	r4, r0
 800a692:	6030      	str	r0, [r6, #0]
 800a694:	2800      	cmp	r0, #0
 800a696:	d1d5      	bne.n	800a644 <__sfp+0x24>
 800a698:	f7ff ff78 	bl	800a58c <__sfp_lock_release>
 800a69c:	230c      	movs	r3, #12
 800a69e:	603b      	str	r3, [r7, #0]
 800a6a0:	e7ee      	b.n	800a680 <__sfp+0x60>
 800a6a2:	bf00      	nop
 800a6a4:	0800ceb4 	.word	0x0800ceb4
 800a6a8:	ffff0001 	.word	0xffff0001

0800a6ac <_fwalk_reent>:
 800a6ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6b0:	4606      	mov	r6, r0
 800a6b2:	4688      	mov	r8, r1
 800a6b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6b8:	2700      	movs	r7, #0
 800a6ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6be:	f1b9 0901 	subs.w	r9, r9, #1
 800a6c2:	d505      	bpl.n	800a6d0 <_fwalk_reent+0x24>
 800a6c4:	6824      	ldr	r4, [r4, #0]
 800a6c6:	2c00      	cmp	r4, #0
 800a6c8:	d1f7      	bne.n	800a6ba <_fwalk_reent+0xe>
 800a6ca:	4638      	mov	r0, r7
 800a6cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6d0:	89ab      	ldrh	r3, [r5, #12]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d907      	bls.n	800a6e6 <_fwalk_reent+0x3a>
 800a6d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a6da:	3301      	adds	r3, #1
 800a6dc:	d003      	beq.n	800a6e6 <_fwalk_reent+0x3a>
 800a6de:	4629      	mov	r1, r5
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	47c0      	blx	r8
 800a6e4:	4307      	orrs	r7, r0
 800a6e6:	3568      	adds	r5, #104	; 0x68
 800a6e8:	e7e9      	b.n	800a6be <_fwalk_reent+0x12>
	...

0800a6ec <_localeconv_r>:
 800a6ec:	4800      	ldr	r0, [pc, #0]	; (800a6f0 <_localeconv_r+0x4>)
 800a6ee:	4770      	bx	lr
 800a6f0:	20000160 	.word	0x20000160

0800a6f4 <__retarget_lock_init_recursive>:
 800a6f4:	4770      	bx	lr

0800a6f6 <__retarget_lock_acquire_recursive>:
 800a6f6:	4770      	bx	lr

0800a6f8 <__retarget_lock_release_recursive>:
 800a6f8:	4770      	bx	lr

0800a6fa <__swhatbuf_r>:
 800a6fa:	b570      	push	{r4, r5, r6, lr}
 800a6fc:	460e      	mov	r6, r1
 800a6fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a702:	2900      	cmp	r1, #0
 800a704:	b096      	sub	sp, #88	; 0x58
 800a706:	4614      	mov	r4, r2
 800a708:	461d      	mov	r5, r3
 800a70a:	da08      	bge.n	800a71e <__swhatbuf_r+0x24>
 800a70c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a710:	2200      	movs	r2, #0
 800a712:	602a      	str	r2, [r5, #0]
 800a714:	061a      	lsls	r2, r3, #24
 800a716:	d410      	bmi.n	800a73a <__swhatbuf_r+0x40>
 800a718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a71c:	e00e      	b.n	800a73c <__swhatbuf_r+0x42>
 800a71e:	466a      	mov	r2, sp
 800a720:	f000 fee0 	bl	800b4e4 <_fstat_r>
 800a724:	2800      	cmp	r0, #0
 800a726:	dbf1      	blt.n	800a70c <__swhatbuf_r+0x12>
 800a728:	9a01      	ldr	r2, [sp, #4]
 800a72a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a72e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a732:	425a      	negs	r2, r3
 800a734:	415a      	adcs	r2, r3
 800a736:	602a      	str	r2, [r5, #0]
 800a738:	e7ee      	b.n	800a718 <__swhatbuf_r+0x1e>
 800a73a:	2340      	movs	r3, #64	; 0x40
 800a73c:	2000      	movs	r0, #0
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	b016      	add	sp, #88	; 0x58
 800a742:	bd70      	pop	{r4, r5, r6, pc}

0800a744 <__smakebuf_r>:
 800a744:	898b      	ldrh	r3, [r1, #12]
 800a746:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a748:	079d      	lsls	r5, r3, #30
 800a74a:	4606      	mov	r6, r0
 800a74c:	460c      	mov	r4, r1
 800a74e:	d507      	bpl.n	800a760 <__smakebuf_r+0x1c>
 800a750:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a754:	6023      	str	r3, [r4, #0]
 800a756:	6123      	str	r3, [r4, #16]
 800a758:	2301      	movs	r3, #1
 800a75a:	6163      	str	r3, [r4, #20]
 800a75c:	b002      	add	sp, #8
 800a75e:	bd70      	pop	{r4, r5, r6, pc}
 800a760:	ab01      	add	r3, sp, #4
 800a762:	466a      	mov	r2, sp
 800a764:	f7ff ffc9 	bl	800a6fa <__swhatbuf_r>
 800a768:	9900      	ldr	r1, [sp, #0]
 800a76a:	4605      	mov	r5, r0
 800a76c:	4630      	mov	r0, r6
 800a76e:	f000 fc45 	bl	800affc <_malloc_r>
 800a772:	b948      	cbnz	r0, 800a788 <__smakebuf_r+0x44>
 800a774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a778:	059a      	lsls	r2, r3, #22
 800a77a:	d4ef      	bmi.n	800a75c <__smakebuf_r+0x18>
 800a77c:	f023 0303 	bic.w	r3, r3, #3
 800a780:	f043 0302 	orr.w	r3, r3, #2
 800a784:	81a3      	strh	r3, [r4, #12]
 800a786:	e7e3      	b.n	800a750 <__smakebuf_r+0xc>
 800a788:	4b0d      	ldr	r3, [pc, #52]	; (800a7c0 <__smakebuf_r+0x7c>)
 800a78a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a78c:	89a3      	ldrh	r3, [r4, #12]
 800a78e:	6020      	str	r0, [r4, #0]
 800a790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a794:	81a3      	strh	r3, [r4, #12]
 800a796:	9b00      	ldr	r3, [sp, #0]
 800a798:	6163      	str	r3, [r4, #20]
 800a79a:	9b01      	ldr	r3, [sp, #4]
 800a79c:	6120      	str	r0, [r4, #16]
 800a79e:	b15b      	cbz	r3, 800a7b8 <__smakebuf_r+0x74>
 800a7a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f000 feaf 	bl	800b508 <_isatty_r>
 800a7aa:	b128      	cbz	r0, 800a7b8 <__smakebuf_r+0x74>
 800a7ac:	89a3      	ldrh	r3, [r4, #12]
 800a7ae:	f023 0303 	bic.w	r3, r3, #3
 800a7b2:	f043 0301 	orr.w	r3, r3, #1
 800a7b6:	81a3      	strh	r3, [r4, #12]
 800a7b8:	89a0      	ldrh	r0, [r4, #12]
 800a7ba:	4305      	orrs	r5, r0
 800a7bc:	81a5      	strh	r5, [r4, #12]
 800a7be:	e7cd      	b.n	800a75c <__smakebuf_r+0x18>
 800a7c0:	0800a549 	.word	0x0800a549

0800a7c4 <malloc>:
 800a7c4:	4b02      	ldr	r3, [pc, #8]	; (800a7d0 <malloc+0xc>)
 800a7c6:	4601      	mov	r1, r0
 800a7c8:	6818      	ldr	r0, [r3, #0]
 800a7ca:	f000 bc17 	b.w	800affc <_malloc_r>
 800a7ce:	bf00      	nop
 800a7d0:	2000000c 	.word	0x2000000c

0800a7d4 <memcpy>:
 800a7d4:	440a      	add	r2, r1
 800a7d6:	4291      	cmp	r1, r2
 800a7d8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a7dc:	d100      	bne.n	800a7e0 <memcpy+0xc>
 800a7de:	4770      	bx	lr
 800a7e0:	b510      	push	{r4, lr}
 800a7e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a7ea:	4291      	cmp	r1, r2
 800a7ec:	d1f9      	bne.n	800a7e2 <memcpy+0xe>
 800a7ee:	bd10      	pop	{r4, pc}

0800a7f0 <_Balloc>:
 800a7f0:	b570      	push	{r4, r5, r6, lr}
 800a7f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a7f4:	4604      	mov	r4, r0
 800a7f6:	460d      	mov	r5, r1
 800a7f8:	b976      	cbnz	r6, 800a818 <_Balloc+0x28>
 800a7fa:	2010      	movs	r0, #16
 800a7fc:	f7ff ffe2 	bl	800a7c4 <malloc>
 800a800:	4602      	mov	r2, r0
 800a802:	6260      	str	r0, [r4, #36]	; 0x24
 800a804:	b920      	cbnz	r0, 800a810 <_Balloc+0x20>
 800a806:	4b18      	ldr	r3, [pc, #96]	; (800a868 <_Balloc+0x78>)
 800a808:	4818      	ldr	r0, [pc, #96]	; (800a86c <_Balloc+0x7c>)
 800a80a:	2166      	movs	r1, #102	; 0x66
 800a80c:	f000 fe2a 	bl	800b464 <__assert_func>
 800a810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a814:	6006      	str	r6, [r0, #0]
 800a816:	60c6      	str	r6, [r0, #12]
 800a818:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a81a:	68f3      	ldr	r3, [r6, #12]
 800a81c:	b183      	cbz	r3, 800a840 <_Balloc+0x50>
 800a81e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a820:	68db      	ldr	r3, [r3, #12]
 800a822:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a826:	b9b8      	cbnz	r0, 800a858 <_Balloc+0x68>
 800a828:	2101      	movs	r1, #1
 800a82a:	fa01 f605 	lsl.w	r6, r1, r5
 800a82e:	1d72      	adds	r2, r6, #5
 800a830:	0092      	lsls	r2, r2, #2
 800a832:	4620      	mov	r0, r4
 800a834:	f000 fb60 	bl	800aef8 <_calloc_r>
 800a838:	b160      	cbz	r0, 800a854 <_Balloc+0x64>
 800a83a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a83e:	e00e      	b.n	800a85e <_Balloc+0x6e>
 800a840:	2221      	movs	r2, #33	; 0x21
 800a842:	2104      	movs	r1, #4
 800a844:	4620      	mov	r0, r4
 800a846:	f000 fb57 	bl	800aef8 <_calloc_r>
 800a84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a84c:	60f0      	str	r0, [r6, #12]
 800a84e:	68db      	ldr	r3, [r3, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d1e4      	bne.n	800a81e <_Balloc+0x2e>
 800a854:	2000      	movs	r0, #0
 800a856:	bd70      	pop	{r4, r5, r6, pc}
 800a858:	6802      	ldr	r2, [r0, #0]
 800a85a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a85e:	2300      	movs	r3, #0
 800a860:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a864:	e7f7      	b.n	800a856 <_Balloc+0x66>
 800a866:	bf00      	nop
 800a868:	0800cef9 	.word	0x0800cef9
 800a86c:	0800cfdc 	.word	0x0800cfdc

0800a870 <_Bfree>:
 800a870:	b570      	push	{r4, r5, r6, lr}
 800a872:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a874:	4605      	mov	r5, r0
 800a876:	460c      	mov	r4, r1
 800a878:	b976      	cbnz	r6, 800a898 <_Bfree+0x28>
 800a87a:	2010      	movs	r0, #16
 800a87c:	f7ff ffa2 	bl	800a7c4 <malloc>
 800a880:	4602      	mov	r2, r0
 800a882:	6268      	str	r0, [r5, #36]	; 0x24
 800a884:	b920      	cbnz	r0, 800a890 <_Bfree+0x20>
 800a886:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <_Bfree+0x3c>)
 800a888:	4809      	ldr	r0, [pc, #36]	; (800a8b0 <_Bfree+0x40>)
 800a88a:	218a      	movs	r1, #138	; 0x8a
 800a88c:	f000 fdea 	bl	800b464 <__assert_func>
 800a890:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a894:	6006      	str	r6, [r0, #0]
 800a896:	60c6      	str	r6, [r0, #12]
 800a898:	b13c      	cbz	r4, 800a8aa <_Bfree+0x3a>
 800a89a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a89c:	6862      	ldr	r2, [r4, #4]
 800a89e:	68db      	ldr	r3, [r3, #12]
 800a8a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8a4:	6021      	str	r1, [r4, #0]
 800a8a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}
 800a8ac:	0800cef9 	.word	0x0800cef9
 800a8b0:	0800cfdc 	.word	0x0800cfdc

0800a8b4 <__multadd>:
 800a8b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b8:	690d      	ldr	r5, [r1, #16]
 800a8ba:	4607      	mov	r7, r0
 800a8bc:	460c      	mov	r4, r1
 800a8be:	461e      	mov	r6, r3
 800a8c0:	f101 0c14 	add.w	ip, r1, #20
 800a8c4:	2000      	movs	r0, #0
 800a8c6:	f8dc 3000 	ldr.w	r3, [ip]
 800a8ca:	b299      	uxth	r1, r3
 800a8cc:	fb02 6101 	mla	r1, r2, r1, r6
 800a8d0:	0c1e      	lsrs	r6, r3, #16
 800a8d2:	0c0b      	lsrs	r3, r1, #16
 800a8d4:	fb02 3306 	mla	r3, r2, r6, r3
 800a8d8:	b289      	uxth	r1, r1
 800a8da:	3001      	adds	r0, #1
 800a8dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a8e0:	4285      	cmp	r5, r0
 800a8e2:	f84c 1b04 	str.w	r1, [ip], #4
 800a8e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a8ea:	dcec      	bgt.n	800a8c6 <__multadd+0x12>
 800a8ec:	b30e      	cbz	r6, 800a932 <__multadd+0x7e>
 800a8ee:	68a3      	ldr	r3, [r4, #8]
 800a8f0:	42ab      	cmp	r3, r5
 800a8f2:	dc19      	bgt.n	800a928 <__multadd+0x74>
 800a8f4:	6861      	ldr	r1, [r4, #4]
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	3101      	adds	r1, #1
 800a8fa:	f7ff ff79 	bl	800a7f0 <_Balloc>
 800a8fe:	4680      	mov	r8, r0
 800a900:	b928      	cbnz	r0, 800a90e <__multadd+0x5a>
 800a902:	4602      	mov	r2, r0
 800a904:	4b0c      	ldr	r3, [pc, #48]	; (800a938 <__multadd+0x84>)
 800a906:	480d      	ldr	r0, [pc, #52]	; (800a93c <__multadd+0x88>)
 800a908:	21b5      	movs	r1, #181	; 0xb5
 800a90a:	f000 fdab 	bl	800b464 <__assert_func>
 800a90e:	6922      	ldr	r2, [r4, #16]
 800a910:	3202      	adds	r2, #2
 800a912:	f104 010c 	add.w	r1, r4, #12
 800a916:	0092      	lsls	r2, r2, #2
 800a918:	300c      	adds	r0, #12
 800a91a:	f7ff ff5b 	bl	800a7d4 <memcpy>
 800a91e:	4621      	mov	r1, r4
 800a920:	4638      	mov	r0, r7
 800a922:	f7ff ffa5 	bl	800a870 <_Bfree>
 800a926:	4644      	mov	r4, r8
 800a928:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a92c:	3501      	adds	r5, #1
 800a92e:	615e      	str	r6, [r3, #20]
 800a930:	6125      	str	r5, [r4, #16]
 800a932:	4620      	mov	r0, r4
 800a934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a938:	0800cf6b 	.word	0x0800cf6b
 800a93c:	0800cfdc 	.word	0x0800cfdc

0800a940 <__hi0bits>:
 800a940:	0c03      	lsrs	r3, r0, #16
 800a942:	041b      	lsls	r3, r3, #16
 800a944:	b9d3      	cbnz	r3, 800a97c <__hi0bits+0x3c>
 800a946:	0400      	lsls	r0, r0, #16
 800a948:	2310      	movs	r3, #16
 800a94a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a94e:	bf04      	itt	eq
 800a950:	0200      	lsleq	r0, r0, #8
 800a952:	3308      	addeq	r3, #8
 800a954:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a958:	bf04      	itt	eq
 800a95a:	0100      	lsleq	r0, r0, #4
 800a95c:	3304      	addeq	r3, #4
 800a95e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a962:	bf04      	itt	eq
 800a964:	0080      	lsleq	r0, r0, #2
 800a966:	3302      	addeq	r3, #2
 800a968:	2800      	cmp	r0, #0
 800a96a:	db05      	blt.n	800a978 <__hi0bits+0x38>
 800a96c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a970:	f103 0301 	add.w	r3, r3, #1
 800a974:	bf08      	it	eq
 800a976:	2320      	moveq	r3, #32
 800a978:	4618      	mov	r0, r3
 800a97a:	4770      	bx	lr
 800a97c:	2300      	movs	r3, #0
 800a97e:	e7e4      	b.n	800a94a <__hi0bits+0xa>

0800a980 <__lo0bits>:
 800a980:	6803      	ldr	r3, [r0, #0]
 800a982:	f013 0207 	ands.w	r2, r3, #7
 800a986:	4601      	mov	r1, r0
 800a988:	d00b      	beq.n	800a9a2 <__lo0bits+0x22>
 800a98a:	07da      	lsls	r2, r3, #31
 800a98c:	d423      	bmi.n	800a9d6 <__lo0bits+0x56>
 800a98e:	0798      	lsls	r0, r3, #30
 800a990:	bf49      	itett	mi
 800a992:	085b      	lsrmi	r3, r3, #1
 800a994:	089b      	lsrpl	r3, r3, #2
 800a996:	2001      	movmi	r0, #1
 800a998:	600b      	strmi	r3, [r1, #0]
 800a99a:	bf5c      	itt	pl
 800a99c:	600b      	strpl	r3, [r1, #0]
 800a99e:	2002      	movpl	r0, #2
 800a9a0:	4770      	bx	lr
 800a9a2:	b298      	uxth	r0, r3
 800a9a4:	b9a8      	cbnz	r0, 800a9d2 <__lo0bits+0x52>
 800a9a6:	0c1b      	lsrs	r3, r3, #16
 800a9a8:	2010      	movs	r0, #16
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	b90a      	cbnz	r2, 800a9b2 <__lo0bits+0x32>
 800a9ae:	3008      	adds	r0, #8
 800a9b0:	0a1b      	lsrs	r3, r3, #8
 800a9b2:	071a      	lsls	r2, r3, #28
 800a9b4:	bf04      	itt	eq
 800a9b6:	091b      	lsreq	r3, r3, #4
 800a9b8:	3004      	addeq	r0, #4
 800a9ba:	079a      	lsls	r2, r3, #30
 800a9bc:	bf04      	itt	eq
 800a9be:	089b      	lsreq	r3, r3, #2
 800a9c0:	3002      	addeq	r0, #2
 800a9c2:	07da      	lsls	r2, r3, #31
 800a9c4:	d403      	bmi.n	800a9ce <__lo0bits+0x4e>
 800a9c6:	085b      	lsrs	r3, r3, #1
 800a9c8:	f100 0001 	add.w	r0, r0, #1
 800a9cc:	d005      	beq.n	800a9da <__lo0bits+0x5a>
 800a9ce:	600b      	str	r3, [r1, #0]
 800a9d0:	4770      	bx	lr
 800a9d2:	4610      	mov	r0, r2
 800a9d4:	e7e9      	b.n	800a9aa <__lo0bits+0x2a>
 800a9d6:	2000      	movs	r0, #0
 800a9d8:	4770      	bx	lr
 800a9da:	2020      	movs	r0, #32
 800a9dc:	4770      	bx	lr
	...

0800a9e0 <__i2b>:
 800a9e0:	b510      	push	{r4, lr}
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	2101      	movs	r1, #1
 800a9e6:	f7ff ff03 	bl	800a7f0 <_Balloc>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	b928      	cbnz	r0, 800a9fa <__i2b+0x1a>
 800a9ee:	4b05      	ldr	r3, [pc, #20]	; (800aa04 <__i2b+0x24>)
 800a9f0:	4805      	ldr	r0, [pc, #20]	; (800aa08 <__i2b+0x28>)
 800a9f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a9f6:	f000 fd35 	bl	800b464 <__assert_func>
 800a9fa:	2301      	movs	r3, #1
 800a9fc:	6144      	str	r4, [r0, #20]
 800a9fe:	6103      	str	r3, [r0, #16]
 800aa00:	bd10      	pop	{r4, pc}
 800aa02:	bf00      	nop
 800aa04:	0800cf6b 	.word	0x0800cf6b
 800aa08:	0800cfdc 	.word	0x0800cfdc

0800aa0c <__multiply>:
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa10:	4691      	mov	r9, r2
 800aa12:	690a      	ldr	r2, [r1, #16]
 800aa14:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	bfb8      	it	lt
 800aa1c:	460b      	movlt	r3, r1
 800aa1e:	460c      	mov	r4, r1
 800aa20:	bfbc      	itt	lt
 800aa22:	464c      	movlt	r4, r9
 800aa24:	4699      	movlt	r9, r3
 800aa26:	6927      	ldr	r7, [r4, #16]
 800aa28:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa2c:	68a3      	ldr	r3, [r4, #8]
 800aa2e:	6861      	ldr	r1, [r4, #4]
 800aa30:	eb07 060a 	add.w	r6, r7, sl
 800aa34:	42b3      	cmp	r3, r6
 800aa36:	b085      	sub	sp, #20
 800aa38:	bfb8      	it	lt
 800aa3a:	3101      	addlt	r1, #1
 800aa3c:	f7ff fed8 	bl	800a7f0 <_Balloc>
 800aa40:	b930      	cbnz	r0, 800aa50 <__multiply+0x44>
 800aa42:	4602      	mov	r2, r0
 800aa44:	4b44      	ldr	r3, [pc, #272]	; (800ab58 <__multiply+0x14c>)
 800aa46:	4845      	ldr	r0, [pc, #276]	; (800ab5c <__multiply+0x150>)
 800aa48:	f240 115d 	movw	r1, #349	; 0x15d
 800aa4c:	f000 fd0a 	bl	800b464 <__assert_func>
 800aa50:	f100 0514 	add.w	r5, r0, #20
 800aa54:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa58:	462b      	mov	r3, r5
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	4543      	cmp	r3, r8
 800aa5e:	d321      	bcc.n	800aaa4 <__multiply+0x98>
 800aa60:	f104 0314 	add.w	r3, r4, #20
 800aa64:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa68:	f109 0314 	add.w	r3, r9, #20
 800aa6c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa70:	9202      	str	r2, [sp, #8]
 800aa72:	1b3a      	subs	r2, r7, r4
 800aa74:	3a15      	subs	r2, #21
 800aa76:	f022 0203 	bic.w	r2, r2, #3
 800aa7a:	3204      	adds	r2, #4
 800aa7c:	f104 0115 	add.w	r1, r4, #21
 800aa80:	428f      	cmp	r7, r1
 800aa82:	bf38      	it	cc
 800aa84:	2204      	movcc	r2, #4
 800aa86:	9201      	str	r2, [sp, #4]
 800aa88:	9a02      	ldr	r2, [sp, #8]
 800aa8a:	9303      	str	r3, [sp, #12]
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	d80c      	bhi.n	800aaaa <__multiply+0x9e>
 800aa90:	2e00      	cmp	r6, #0
 800aa92:	dd03      	ble.n	800aa9c <__multiply+0x90>
 800aa94:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d05a      	beq.n	800ab52 <__multiply+0x146>
 800aa9c:	6106      	str	r6, [r0, #16]
 800aa9e:	b005      	add	sp, #20
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa4:	f843 2b04 	str.w	r2, [r3], #4
 800aaa8:	e7d8      	b.n	800aa5c <__multiply+0x50>
 800aaaa:	f8b3 a000 	ldrh.w	sl, [r3]
 800aaae:	f1ba 0f00 	cmp.w	sl, #0
 800aab2:	d024      	beq.n	800aafe <__multiply+0xf2>
 800aab4:	f104 0e14 	add.w	lr, r4, #20
 800aab8:	46a9      	mov	r9, r5
 800aaba:	f04f 0c00 	mov.w	ip, #0
 800aabe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aac2:	f8d9 1000 	ldr.w	r1, [r9]
 800aac6:	fa1f fb82 	uxth.w	fp, r2
 800aaca:	b289      	uxth	r1, r1
 800aacc:	fb0a 110b 	mla	r1, sl, fp, r1
 800aad0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800aad4:	f8d9 2000 	ldr.w	r2, [r9]
 800aad8:	4461      	add	r1, ip
 800aada:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aade:	fb0a c20b 	mla	r2, sl, fp, ip
 800aae2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800aae6:	b289      	uxth	r1, r1
 800aae8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800aaec:	4577      	cmp	r7, lr
 800aaee:	f849 1b04 	str.w	r1, [r9], #4
 800aaf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800aaf6:	d8e2      	bhi.n	800aabe <__multiply+0xb2>
 800aaf8:	9a01      	ldr	r2, [sp, #4]
 800aafa:	f845 c002 	str.w	ip, [r5, r2]
 800aafe:	9a03      	ldr	r2, [sp, #12]
 800ab00:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab04:	3304      	adds	r3, #4
 800ab06:	f1b9 0f00 	cmp.w	r9, #0
 800ab0a:	d020      	beq.n	800ab4e <__multiply+0x142>
 800ab0c:	6829      	ldr	r1, [r5, #0]
 800ab0e:	f104 0c14 	add.w	ip, r4, #20
 800ab12:	46ae      	mov	lr, r5
 800ab14:	f04f 0a00 	mov.w	sl, #0
 800ab18:	f8bc b000 	ldrh.w	fp, [ip]
 800ab1c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab20:	fb09 220b 	mla	r2, r9, fp, r2
 800ab24:	4492      	add	sl, r2
 800ab26:	b289      	uxth	r1, r1
 800ab28:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab2c:	f84e 1b04 	str.w	r1, [lr], #4
 800ab30:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab34:	f8be 1000 	ldrh.w	r1, [lr]
 800ab38:	0c12      	lsrs	r2, r2, #16
 800ab3a:	fb09 1102 	mla	r1, r9, r2, r1
 800ab3e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab42:	4567      	cmp	r7, ip
 800ab44:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab48:	d8e6      	bhi.n	800ab18 <__multiply+0x10c>
 800ab4a:	9a01      	ldr	r2, [sp, #4]
 800ab4c:	50a9      	str	r1, [r5, r2]
 800ab4e:	3504      	adds	r5, #4
 800ab50:	e79a      	b.n	800aa88 <__multiply+0x7c>
 800ab52:	3e01      	subs	r6, #1
 800ab54:	e79c      	b.n	800aa90 <__multiply+0x84>
 800ab56:	bf00      	nop
 800ab58:	0800cf6b 	.word	0x0800cf6b
 800ab5c:	0800cfdc 	.word	0x0800cfdc

0800ab60 <__pow5mult>:
 800ab60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab64:	4615      	mov	r5, r2
 800ab66:	f012 0203 	ands.w	r2, r2, #3
 800ab6a:	4606      	mov	r6, r0
 800ab6c:	460f      	mov	r7, r1
 800ab6e:	d007      	beq.n	800ab80 <__pow5mult+0x20>
 800ab70:	4c25      	ldr	r4, [pc, #148]	; (800ac08 <__pow5mult+0xa8>)
 800ab72:	3a01      	subs	r2, #1
 800ab74:	2300      	movs	r3, #0
 800ab76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab7a:	f7ff fe9b 	bl	800a8b4 <__multadd>
 800ab7e:	4607      	mov	r7, r0
 800ab80:	10ad      	asrs	r5, r5, #2
 800ab82:	d03d      	beq.n	800ac00 <__pow5mult+0xa0>
 800ab84:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab86:	b97c      	cbnz	r4, 800aba8 <__pow5mult+0x48>
 800ab88:	2010      	movs	r0, #16
 800ab8a:	f7ff fe1b 	bl	800a7c4 <malloc>
 800ab8e:	4602      	mov	r2, r0
 800ab90:	6270      	str	r0, [r6, #36]	; 0x24
 800ab92:	b928      	cbnz	r0, 800aba0 <__pow5mult+0x40>
 800ab94:	4b1d      	ldr	r3, [pc, #116]	; (800ac0c <__pow5mult+0xac>)
 800ab96:	481e      	ldr	r0, [pc, #120]	; (800ac10 <__pow5mult+0xb0>)
 800ab98:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab9c:	f000 fc62 	bl	800b464 <__assert_func>
 800aba0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aba4:	6004      	str	r4, [r0, #0]
 800aba6:	60c4      	str	r4, [r0, #12]
 800aba8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abb0:	b94c      	cbnz	r4, 800abc6 <__pow5mult+0x66>
 800abb2:	f240 2171 	movw	r1, #625	; 0x271
 800abb6:	4630      	mov	r0, r6
 800abb8:	f7ff ff12 	bl	800a9e0 <__i2b>
 800abbc:	2300      	movs	r3, #0
 800abbe:	f8c8 0008 	str.w	r0, [r8, #8]
 800abc2:	4604      	mov	r4, r0
 800abc4:	6003      	str	r3, [r0, #0]
 800abc6:	f04f 0900 	mov.w	r9, #0
 800abca:	07eb      	lsls	r3, r5, #31
 800abcc:	d50a      	bpl.n	800abe4 <__pow5mult+0x84>
 800abce:	4639      	mov	r1, r7
 800abd0:	4622      	mov	r2, r4
 800abd2:	4630      	mov	r0, r6
 800abd4:	f7ff ff1a 	bl	800aa0c <__multiply>
 800abd8:	4639      	mov	r1, r7
 800abda:	4680      	mov	r8, r0
 800abdc:	4630      	mov	r0, r6
 800abde:	f7ff fe47 	bl	800a870 <_Bfree>
 800abe2:	4647      	mov	r7, r8
 800abe4:	106d      	asrs	r5, r5, #1
 800abe6:	d00b      	beq.n	800ac00 <__pow5mult+0xa0>
 800abe8:	6820      	ldr	r0, [r4, #0]
 800abea:	b938      	cbnz	r0, 800abfc <__pow5mult+0x9c>
 800abec:	4622      	mov	r2, r4
 800abee:	4621      	mov	r1, r4
 800abf0:	4630      	mov	r0, r6
 800abf2:	f7ff ff0b 	bl	800aa0c <__multiply>
 800abf6:	6020      	str	r0, [r4, #0]
 800abf8:	f8c0 9000 	str.w	r9, [r0]
 800abfc:	4604      	mov	r4, r0
 800abfe:	e7e4      	b.n	800abca <__pow5mult+0x6a>
 800ac00:	4638      	mov	r0, r7
 800ac02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac06:	bf00      	nop
 800ac08:	0800d128 	.word	0x0800d128
 800ac0c:	0800cef9 	.word	0x0800cef9
 800ac10:	0800cfdc 	.word	0x0800cfdc

0800ac14 <__lshift>:
 800ac14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac18:	460c      	mov	r4, r1
 800ac1a:	6849      	ldr	r1, [r1, #4]
 800ac1c:	6923      	ldr	r3, [r4, #16]
 800ac1e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac22:	68a3      	ldr	r3, [r4, #8]
 800ac24:	4607      	mov	r7, r0
 800ac26:	4691      	mov	r9, r2
 800ac28:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac2c:	f108 0601 	add.w	r6, r8, #1
 800ac30:	42b3      	cmp	r3, r6
 800ac32:	db0b      	blt.n	800ac4c <__lshift+0x38>
 800ac34:	4638      	mov	r0, r7
 800ac36:	f7ff fddb 	bl	800a7f0 <_Balloc>
 800ac3a:	4605      	mov	r5, r0
 800ac3c:	b948      	cbnz	r0, 800ac52 <__lshift+0x3e>
 800ac3e:	4602      	mov	r2, r0
 800ac40:	4b2a      	ldr	r3, [pc, #168]	; (800acec <__lshift+0xd8>)
 800ac42:	482b      	ldr	r0, [pc, #172]	; (800acf0 <__lshift+0xdc>)
 800ac44:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac48:	f000 fc0c 	bl	800b464 <__assert_func>
 800ac4c:	3101      	adds	r1, #1
 800ac4e:	005b      	lsls	r3, r3, #1
 800ac50:	e7ee      	b.n	800ac30 <__lshift+0x1c>
 800ac52:	2300      	movs	r3, #0
 800ac54:	f100 0114 	add.w	r1, r0, #20
 800ac58:	f100 0210 	add.w	r2, r0, #16
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	4553      	cmp	r3, sl
 800ac60:	db37      	blt.n	800acd2 <__lshift+0xbe>
 800ac62:	6920      	ldr	r0, [r4, #16]
 800ac64:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac68:	f104 0314 	add.w	r3, r4, #20
 800ac6c:	f019 091f 	ands.w	r9, r9, #31
 800ac70:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ac78:	d02f      	beq.n	800acda <__lshift+0xc6>
 800ac7a:	f1c9 0e20 	rsb	lr, r9, #32
 800ac7e:	468a      	mov	sl, r1
 800ac80:	f04f 0c00 	mov.w	ip, #0
 800ac84:	681a      	ldr	r2, [r3, #0]
 800ac86:	fa02 f209 	lsl.w	r2, r2, r9
 800ac8a:	ea42 020c 	orr.w	r2, r2, ip
 800ac8e:	f84a 2b04 	str.w	r2, [sl], #4
 800ac92:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac96:	4298      	cmp	r0, r3
 800ac98:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ac9c:	d8f2      	bhi.n	800ac84 <__lshift+0x70>
 800ac9e:	1b03      	subs	r3, r0, r4
 800aca0:	3b15      	subs	r3, #21
 800aca2:	f023 0303 	bic.w	r3, r3, #3
 800aca6:	3304      	adds	r3, #4
 800aca8:	f104 0215 	add.w	r2, r4, #21
 800acac:	4290      	cmp	r0, r2
 800acae:	bf38      	it	cc
 800acb0:	2304      	movcc	r3, #4
 800acb2:	f841 c003 	str.w	ip, [r1, r3]
 800acb6:	f1bc 0f00 	cmp.w	ip, #0
 800acba:	d001      	beq.n	800acc0 <__lshift+0xac>
 800acbc:	f108 0602 	add.w	r6, r8, #2
 800acc0:	3e01      	subs	r6, #1
 800acc2:	4638      	mov	r0, r7
 800acc4:	612e      	str	r6, [r5, #16]
 800acc6:	4621      	mov	r1, r4
 800acc8:	f7ff fdd2 	bl	800a870 <_Bfree>
 800accc:	4628      	mov	r0, r5
 800acce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800acd6:	3301      	adds	r3, #1
 800acd8:	e7c1      	b.n	800ac5e <__lshift+0x4a>
 800acda:	3904      	subs	r1, #4
 800acdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ace0:	f841 2f04 	str.w	r2, [r1, #4]!
 800ace4:	4298      	cmp	r0, r3
 800ace6:	d8f9      	bhi.n	800acdc <__lshift+0xc8>
 800ace8:	e7ea      	b.n	800acc0 <__lshift+0xac>
 800acea:	bf00      	nop
 800acec:	0800cf6b 	.word	0x0800cf6b
 800acf0:	0800cfdc 	.word	0x0800cfdc

0800acf4 <__mcmp>:
 800acf4:	b530      	push	{r4, r5, lr}
 800acf6:	6902      	ldr	r2, [r0, #16]
 800acf8:	690c      	ldr	r4, [r1, #16]
 800acfa:	1b12      	subs	r2, r2, r4
 800acfc:	d10e      	bne.n	800ad1c <__mcmp+0x28>
 800acfe:	f100 0314 	add.w	r3, r0, #20
 800ad02:	3114      	adds	r1, #20
 800ad04:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad08:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad0c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad10:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad14:	42a5      	cmp	r5, r4
 800ad16:	d003      	beq.n	800ad20 <__mcmp+0x2c>
 800ad18:	d305      	bcc.n	800ad26 <__mcmp+0x32>
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	bd30      	pop	{r4, r5, pc}
 800ad20:	4283      	cmp	r3, r0
 800ad22:	d3f3      	bcc.n	800ad0c <__mcmp+0x18>
 800ad24:	e7fa      	b.n	800ad1c <__mcmp+0x28>
 800ad26:	f04f 32ff 	mov.w	r2, #4294967295
 800ad2a:	e7f7      	b.n	800ad1c <__mcmp+0x28>

0800ad2c <__mdiff>:
 800ad2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad30:	460c      	mov	r4, r1
 800ad32:	4606      	mov	r6, r0
 800ad34:	4611      	mov	r1, r2
 800ad36:	4620      	mov	r0, r4
 800ad38:	4690      	mov	r8, r2
 800ad3a:	f7ff ffdb 	bl	800acf4 <__mcmp>
 800ad3e:	1e05      	subs	r5, r0, #0
 800ad40:	d110      	bne.n	800ad64 <__mdiff+0x38>
 800ad42:	4629      	mov	r1, r5
 800ad44:	4630      	mov	r0, r6
 800ad46:	f7ff fd53 	bl	800a7f0 <_Balloc>
 800ad4a:	b930      	cbnz	r0, 800ad5a <__mdiff+0x2e>
 800ad4c:	4b3a      	ldr	r3, [pc, #232]	; (800ae38 <__mdiff+0x10c>)
 800ad4e:	4602      	mov	r2, r0
 800ad50:	f240 2132 	movw	r1, #562	; 0x232
 800ad54:	4839      	ldr	r0, [pc, #228]	; (800ae3c <__mdiff+0x110>)
 800ad56:	f000 fb85 	bl	800b464 <__assert_func>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad64:	bfa4      	itt	ge
 800ad66:	4643      	movge	r3, r8
 800ad68:	46a0      	movge	r8, r4
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad70:	bfa6      	itte	ge
 800ad72:	461c      	movge	r4, r3
 800ad74:	2500      	movge	r5, #0
 800ad76:	2501      	movlt	r5, #1
 800ad78:	f7ff fd3a 	bl	800a7f0 <_Balloc>
 800ad7c:	b920      	cbnz	r0, 800ad88 <__mdiff+0x5c>
 800ad7e:	4b2e      	ldr	r3, [pc, #184]	; (800ae38 <__mdiff+0x10c>)
 800ad80:	4602      	mov	r2, r0
 800ad82:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad86:	e7e5      	b.n	800ad54 <__mdiff+0x28>
 800ad88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ad8c:	6926      	ldr	r6, [r4, #16]
 800ad8e:	60c5      	str	r5, [r0, #12]
 800ad90:	f104 0914 	add.w	r9, r4, #20
 800ad94:	f108 0514 	add.w	r5, r8, #20
 800ad98:	f100 0e14 	add.w	lr, r0, #20
 800ad9c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ada0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ada4:	f108 0210 	add.w	r2, r8, #16
 800ada8:	46f2      	mov	sl, lr
 800adaa:	2100      	movs	r1, #0
 800adac:	f859 3b04 	ldr.w	r3, [r9], #4
 800adb0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800adb4:	fa1f f883 	uxth.w	r8, r3
 800adb8:	fa11 f18b 	uxtah	r1, r1, fp
 800adbc:	0c1b      	lsrs	r3, r3, #16
 800adbe:	eba1 0808 	sub.w	r8, r1, r8
 800adc2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adc6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800adca:	fa1f f888 	uxth.w	r8, r8
 800adce:	1419      	asrs	r1, r3, #16
 800add0:	454e      	cmp	r6, r9
 800add2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800add6:	f84a 3b04 	str.w	r3, [sl], #4
 800adda:	d8e7      	bhi.n	800adac <__mdiff+0x80>
 800addc:	1b33      	subs	r3, r6, r4
 800adde:	3b15      	subs	r3, #21
 800ade0:	f023 0303 	bic.w	r3, r3, #3
 800ade4:	3304      	adds	r3, #4
 800ade6:	3415      	adds	r4, #21
 800ade8:	42a6      	cmp	r6, r4
 800adea:	bf38      	it	cc
 800adec:	2304      	movcc	r3, #4
 800adee:	441d      	add	r5, r3
 800adf0:	4473      	add	r3, lr
 800adf2:	469e      	mov	lr, r3
 800adf4:	462e      	mov	r6, r5
 800adf6:	4566      	cmp	r6, ip
 800adf8:	d30e      	bcc.n	800ae18 <__mdiff+0xec>
 800adfa:	f10c 0203 	add.w	r2, ip, #3
 800adfe:	1b52      	subs	r2, r2, r5
 800ae00:	f022 0203 	bic.w	r2, r2, #3
 800ae04:	3d03      	subs	r5, #3
 800ae06:	45ac      	cmp	ip, r5
 800ae08:	bf38      	it	cc
 800ae0a:	2200      	movcc	r2, #0
 800ae0c:	441a      	add	r2, r3
 800ae0e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae12:	b17b      	cbz	r3, 800ae34 <__mdiff+0x108>
 800ae14:	6107      	str	r7, [r0, #16]
 800ae16:	e7a3      	b.n	800ad60 <__mdiff+0x34>
 800ae18:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae1c:	fa11 f288 	uxtah	r2, r1, r8
 800ae20:	1414      	asrs	r4, r2, #16
 800ae22:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae26:	b292      	uxth	r2, r2
 800ae28:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae2c:	f84e 2b04 	str.w	r2, [lr], #4
 800ae30:	1421      	asrs	r1, r4, #16
 800ae32:	e7e0      	b.n	800adf6 <__mdiff+0xca>
 800ae34:	3f01      	subs	r7, #1
 800ae36:	e7ea      	b.n	800ae0e <__mdiff+0xe2>
 800ae38:	0800cf6b 	.word	0x0800cf6b
 800ae3c:	0800cfdc 	.word	0x0800cfdc

0800ae40 <__d2b>:
 800ae40:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae44:	4689      	mov	r9, r1
 800ae46:	2101      	movs	r1, #1
 800ae48:	ec57 6b10 	vmov	r6, r7, d0
 800ae4c:	4690      	mov	r8, r2
 800ae4e:	f7ff fccf 	bl	800a7f0 <_Balloc>
 800ae52:	4604      	mov	r4, r0
 800ae54:	b930      	cbnz	r0, 800ae64 <__d2b+0x24>
 800ae56:	4602      	mov	r2, r0
 800ae58:	4b25      	ldr	r3, [pc, #148]	; (800aef0 <__d2b+0xb0>)
 800ae5a:	4826      	ldr	r0, [pc, #152]	; (800aef4 <__d2b+0xb4>)
 800ae5c:	f240 310a 	movw	r1, #778	; 0x30a
 800ae60:	f000 fb00 	bl	800b464 <__assert_func>
 800ae64:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae68:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae6c:	bb35      	cbnz	r5, 800aebc <__d2b+0x7c>
 800ae6e:	2e00      	cmp	r6, #0
 800ae70:	9301      	str	r3, [sp, #4]
 800ae72:	d028      	beq.n	800aec6 <__d2b+0x86>
 800ae74:	4668      	mov	r0, sp
 800ae76:	9600      	str	r6, [sp, #0]
 800ae78:	f7ff fd82 	bl	800a980 <__lo0bits>
 800ae7c:	9900      	ldr	r1, [sp, #0]
 800ae7e:	b300      	cbz	r0, 800aec2 <__d2b+0x82>
 800ae80:	9a01      	ldr	r2, [sp, #4]
 800ae82:	f1c0 0320 	rsb	r3, r0, #32
 800ae86:	fa02 f303 	lsl.w	r3, r2, r3
 800ae8a:	430b      	orrs	r3, r1
 800ae8c:	40c2      	lsrs	r2, r0
 800ae8e:	6163      	str	r3, [r4, #20]
 800ae90:	9201      	str	r2, [sp, #4]
 800ae92:	9b01      	ldr	r3, [sp, #4]
 800ae94:	61a3      	str	r3, [r4, #24]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	bf14      	ite	ne
 800ae9a:	2202      	movne	r2, #2
 800ae9c:	2201      	moveq	r2, #1
 800ae9e:	6122      	str	r2, [r4, #16]
 800aea0:	b1d5      	cbz	r5, 800aed8 <__d2b+0x98>
 800aea2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aea6:	4405      	add	r5, r0
 800aea8:	f8c9 5000 	str.w	r5, [r9]
 800aeac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aeb0:	f8c8 0000 	str.w	r0, [r8]
 800aeb4:	4620      	mov	r0, r4
 800aeb6:	b003      	add	sp, #12
 800aeb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aebc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aec0:	e7d5      	b.n	800ae6e <__d2b+0x2e>
 800aec2:	6161      	str	r1, [r4, #20]
 800aec4:	e7e5      	b.n	800ae92 <__d2b+0x52>
 800aec6:	a801      	add	r0, sp, #4
 800aec8:	f7ff fd5a 	bl	800a980 <__lo0bits>
 800aecc:	9b01      	ldr	r3, [sp, #4]
 800aece:	6163      	str	r3, [r4, #20]
 800aed0:	2201      	movs	r2, #1
 800aed2:	6122      	str	r2, [r4, #16]
 800aed4:	3020      	adds	r0, #32
 800aed6:	e7e3      	b.n	800aea0 <__d2b+0x60>
 800aed8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aedc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aee0:	f8c9 0000 	str.w	r0, [r9]
 800aee4:	6918      	ldr	r0, [r3, #16]
 800aee6:	f7ff fd2b 	bl	800a940 <__hi0bits>
 800aeea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aeee:	e7df      	b.n	800aeb0 <__d2b+0x70>
 800aef0:	0800cf6b 	.word	0x0800cf6b
 800aef4:	0800cfdc 	.word	0x0800cfdc

0800aef8 <_calloc_r>:
 800aef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aefa:	fba1 2402 	umull	r2, r4, r1, r2
 800aefe:	b94c      	cbnz	r4, 800af14 <_calloc_r+0x1c>
 800af00:	4611      	mov	r1, r2
 800af02:	9201      	str	r2, [sp, #4]
 800af04:	f000 f87a 	bl	800affc <_malloc_r>
 800af08:	9a01      	ldr	r2, [sp, #4]
 800af0a:	4605      	mov	r5, r0
 800af0c:	b930      	cbnz	r0, 800af1c <_calloc_r+0x24>
 800af0e:	4628      	mov	r0, r5
 800af10:	b003      	add	sp, #12
 800af12:	bd30      	pop	{r4, r5, pc}
 800af14:	220c      	movs	r2, #12
 800af16:	6002      	str	r2, [r0, #0]
 800af18:	2500      	movs	r5, #0
 800af1a:	e7f8      	b.n	800af0e <_calloc_r+0x16>
 800af1c:	4621      	mov	r1, r4
 800af1e:	f7fd fe0b 	bl	8008b38 <memset>
 800af22:	e7f4      	b.n	800af0e <_calloc_r+0x16>

0800af24 <_free_r>:
 800af24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af26:	2900      	cmp	r1, #0
 800af28:	d044      	beq.n	800afb4 <_free_r+0x90>
 800af2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af2e:	9001      	str	r0, [sp, #4]
 800af30:	2b00      	cmp	r3, #0
 800af32:	f1a1 0404 	sub.w	r4, r1, #4
 800af36:	bfb8      	it	lt
 800af38:	18e4      	addlt	r4, r4, r3
 800af3a:	f000 fb19 	bl	800b570 <__malloc_lock>
 800af3e:	4a1e      	ldr	r2, [pc, #120]	; (800afb8 <_free_r+0x94>)
 800af40:	9801      	ldr	r0, [sp, #4]
 800af42:	6813      	ldr	r3, [r2, #0]
 800af44:	b933      	cbnz	r3, 800af54 <_free_r+0x30>
 800af46:	6063      	str	r3, [r4, #4]
 800af48:	6014      	str	r4, [r2, #0]
 800af4a:	b003      	add	sp, #12
 800af4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af50:	f000 bb14 	b.w	800b57c <__malloc_unlock>
 800af54:	42a3      	cmp	r3, r4
 800af56:	d908      	bls.n	800af6a <_free_r+0x46>
 800af58:	6825      	ldr	r5, [r4, #0]
 800af5a:	1961      	adds	r1, r4, r5
 800af5c:	428b      	cmp	r3, r1
 800af5e:	bf01      	itttt	eq
 800af60:	6819      	ldreq	r1, [r3, #0]
 800af62:	685b      	ldreq	r3, [r3, #4]
 800af64:	1949      	addeq	r1, r1, r5
 800af66:	6021      	streq	r1, [r4, #0]
 800af68:	e7ed      	b.n	800af46 <_free_r+0x22>
 800af6a:	461a      	mov	r2, r3
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	b10b      	cbz	r3, 800af74 <_free_r+0x50>
 800af70:	42a3      	cmp	r3, r4
 800af72:	d9fa      	bls.n	800af6a <_free_r+0x46>
 800af74:	6811      	ldr	r1, [r2, #0]
 800af76:	1855      	adds	r5, r2, r1
 800af78:	42a5      	cmp	r5, r4
 800af7a:	d10b      	bne.n	800af94 <_free_r+0x70>
 800af7c:	6824      	ldr	r4, [r4, #0]
 800af7e:	4421      	add	r1, r4
 800af80:	1854      	adds	r4, r2, r1
 800af82:	42a3      	cmp	r3, r4
 800af84:	6011      	str	r1, [r2, #0]
 800af86:	d1e0      	bne.n	800af4a <_free_r+0x26>
 800af88:	681c      	ldr	r4, [r3, #0]
 800af8a:	685b      	ldr	r3, [r3, #4]
 800af8c:	6053      	str	r3, [r2, #4]
 800af8e:	4421      	add	r1, r4
 800af90:	6011      	str	r1, [r2, #0]
 800af92:	e7da      	b.n	800af4a <_free_r+0x26>
 800af94:	d902      	bls.n	800af9c <_free_r+0x78>
 800af96:	230c      	movs	r3, #12
 800af98:	6003      	str	r3, [r0, #0]
 800af9a:	e7d6      	b.n	800af4a <_free_r+0x26>
 800af9c:	6825      	ldr	r5, [r4, #0]
 800af9e:	1961      	adds	r1, r4, r5
 800afa0:	428b      	cmp	r3, r1
 800afa2:	bf04      	itt	eq
 800afa4:	6819      	ldreq	r1, [r3, #0]
 800afa6:	685b      	ldreq	r3, [r3, #4]
 800afa8:	6063      	str	r3, [r4, #4]
 800afaa:	bf04      	itt	eq
 800afac:	1949      	addeq	r1, r1, r5
 800afae:	6021      	streq	r1, [r4, #0]
 800afb0:	6054      	str	r4, [r2, #4]
 800afb2:	e7ca      	b.n	800af4a <_free_r+0x26>
 800afb4:	b003      	add	sp, #12
 800afb6:	bd30      	pop	{r4, r5, pc}
 800afb8:	200004f4 	.word	0x200004f4

0800afbc <sbrk_aligned>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	4e0e      	ldr	r6, [pc, #56]	; (800aff8 <sbrk_aligned+0x3c>)
 800afc0:	460c      	mov	r4, r1
 800afc2:	6831      	ldr	r1, [r6, #0]
 800afc4:	4605      	mov	r5, r0
 800afc6:	b911      	cbnz	r1, 800afce <sbrk_aligned+0x12>
 800afc8:	f000 f9e6 	bl	800b398 <_sbrk_r>
 800afcc:	6030      	str	r0, [r6, #0]
 800afce:	4621      	mov	r1, r4
 800afd0:	4628      	mov	r0, r5
 800afd2:	f000 f9e1 	bl	800b398 <_sbrk_r>
 800afd6:	1c43      	adds	r3, r0, #1
 800afd8:	d00a      	beq.n	800aff0 <sbrk_aligned+0x34>
 800afda:	1cc4      	adds	r4, r0, #3
 800afdc:	f024 0403 	bic.w	r4, r4, #3
 800afe0:	42a0      	cmp	r0, r4
 800afe2:	d007      	beq.n	800aff4 <sbrk_aligned+0x38>
 800afe4:	1a21      	subs	r1, r4, r0
 800afe6:	4628      	mov	r0, r5
 800afe8:	f000 f9d6 	bl	800b398 <_sbrk_r>
 800afec:	3001      	adds	r0, #1
 800afee:	d101      	bne.n	800aff4 <sbrk_aligned+0x38>
 800aff0:	f04f 34ff 	mov.w	r4, #4294967295
 800aff4:	4620      	mov	r0, r4
 800aff6:	bd70      	pop	{r4, r5, r6, pc}
 800aff8:	200004f8 	.word	0x200004f8

0800affc <_malloc_r>:
 800affc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b000:	1ccd      	adds	r5, r1, #3
 800b002:	f025 0503 	bic.w	r5, r5, #3
 800b006:	3508      	adds	r5, #8
 800b008:	2d0c      	cmp	r5, #12
 800b00a:	bf38      	it	cc
 800b00c:	250c      	movcc	r5, #12
 800b00e:	2d00      	cmp	r5, #0
 800b010:	4607      	mov	r7, r0
 800b012:	db01      	blt.n	800b018 <_malloc_r+0x1c>
 800b014:	42a9      	cmp	r1, r5
 800b016:	d905      	bls.n	800b024 <_malloc_r+0x28>
 800b018:	230c      	movs	r3, #12
 800b01a:	603b      	str	r3, [r7, #0]
 800b01c:	2600      	movs	r6, #0
 800b01e:	4630      	mov	r0, r6
 800b020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b024:	4e2e      	ldr	r6, [pc, #184]	; (800b0e0 <_malloc_r+0xe4>)
 800b026:	f000 faa3 	bl	800b570 <__malloc_lock>
 800b02a:	6833      	ldr	r3, [r6, #0]
 800b02c:	461c      	mov	r4, r3
 800b02e:	bb34      	cbnz	r4, 800b07e <_malloc_r+0x82>
 800b030:	4629      	mov	r1, r5
 800b032:	4638      	mov	r0, r7
 800b034:	f7ff ffc2 	bl	800afbc <sbrk_aligned>
 800b038:	1c43      	adds	r3, r0, #1
 800b03a:	4604      	mov	r4, r0
 800b03c:	d14d      	bne.n	800b0da <_malloc_r+0xde>
 800b03e:	6834      	ldr	r4, [r6, #0]
 800b040:	4626      	mov	r6, r4
 800b042:	2e00      	cmp	r6, #0
 800b044:	d140      	bne.n	800b0c8 <_malloc_r+0xcc>
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	4631      	mov	r1, r6
 800b04a:	4638      	mov	r0, r7
 800b04c:	eb04 0803 	add.w	r8, r4, r3
 800b050:	f000 f9a2 	bl	800b398 <_sbrk_r>
 800b054:	4580      	cmp	r8, r0
 800b056:	d13a      	bne.n	800b0ce <_malloc_r+0xd2>
 800b058:	6821      	ldr	r1, [r4, #0]
 800b05a:	3503      	adds	r5, #3
 800b05c:	1a6d      	subs	r5, r5, r1
 800b05e:	f025 0503 	bic.w	r5, r5, #3
 800b062:	3508      	adds	r5, #8
 800b064:	2d0c      	cmp	r5, #12
 800b066:	bf38      	it	cc
 800b068:	250c      	movcc	r5, #12
 800b06a:	4629      	mov	r1, r5
 800b06c:	4638      	mov	r0, r7
 800b06e:	f7ff ffa5 	bl	800afbc <sbrk_aligned>
 800b072:	3001      	adds	r0, #1
 800b074:	d02b      	beq.n	800b0ce <_malloc_r+0xd2>
 800b076:	6823      	ldr	r3, [r4, #0]
 800b078:	442b      	add	r3, r5
 800b07a:	6023      	str	r3, [r4, #0]
 800b07c:	e00e      	b.n	800b09c <_malloc_r+0xa0>
 800b07e:	6822      	ldr	r2, [r4, #0]
 800b080:	1b52      	subs	r2, r2, r5
 800b082:	d41e      	bmi.n	800b0c2 <_malloc_r+0xc6>
 800b084:	2a0b      	cmp	r2, #11
 800b086:	d916      	bls.n	800b0b6 <_malloc_r+0xba>
 800b088:	1961      	adds	r1, r4, r5
 800b08a:	42a3      	cmp	r3, r4
 800b08c:	6025      	str	r5, [r4, #0]
 800b08e:	bf18      	it	ne
 800b090:	6059      	strne	r1, [r3, #4]
 800b092:	6863      	ldr	r3, [r4, #4]
 800b094:	bf08      	it	eq
 800b096:	6031      	streq	r1, [r6, #0]
 800b098:	5162      	str	r2, [r4, r5]
 800b09a:	604b      	str	r3, [r1, #4]
 800b09c:	4638      	mov	r0, r7
 800b09e:	f104 060b 	add.w	r6, r4, #11
 800b0a2:	f000 fa6b 	bl	800b57c <__malloc_unlock>
 800b0a6:	f026 0607 	bic.w	r6, r6, #7
 800b0aa:	1d23      	adds	r3, r4, #4
 800b0ac:	1af2      	subs	r2, r6, r3
 800b0ae:	d0b6      	beq.n	800b01e <_malloc_r+0x22>
 800b0b0:	1b9b      	subs	r3, r3, r6
 800b0b2:	50a3      	str	r3, [r4, r2]
 800b0b4:	e7b3      	b.n	800b01e <_malloc_r+0x22>
 800b0b6:	6862      	ldr	r2, [r4, #4]
 800b0b8:	42a3      	cmp	r3, r4
 800b0ba:	bf0c      	ite	eq
 800b0bc:	6032      	streq	r2, [r6, #0]
 800b0be:	605a      	strne	r2, [r3, #4]
 800b0c0:	e7ec      	b.n	800b09c <_malloc_r+0xa0>
 800b0c2:	4623      	mov	r3, r4
 800b0c4:	6864      	ldr	r4, [r4, #4]
 800b0c6:	e7b2      	b.n	800b02e <_malloc_r+0x32>
 800b0c8:	4634      	mov	r4, r6
 800b0ca:	6876      	ldr	r6, [r6, #4]
 800b0cc:	e7b9      	b.n	800b042 <_malloc_r+0x46>
 800b0ce:	230c      	movs	r3, #12
 800b0d0:	603b      	str	r3, [r7, #0]
 800b0d2:	4638      	mov	r0, r7
 800b0d4:	f000 fa52 	bl	800b57c <__malloc_unlock>
 800b0d8:	e7a1      	b.n	800b01e <_malloc_r+0x22>
 800b0da:	6025      	str	r5, [r4, #0]
 800b0dc:	e7de      	b.n	800b09c <_malloc_r+0xa0>
 800b0de:	bf00      	nop
 800b0e0:	200004f4 	.word	0x200004f4

0800b0e4 <__sfputc_r>:
 800b0e4:	6893      	ldr	r3, [r2, #8]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	b410      	push	{r4}
 800b0ec:	6093      	str	r3, [r2, #8]
 800b0ee:	da08      	bge.n	800b102 <__sfputc_r+0x1e>
 800b0f0:	6994      	ldr	r4, [r2, #24]
 800b0f2:	42a3      	cmp	r3, r4
 800b0f4:	db01      	blt.n	800b0fa <__sfputc_r+0x16>
 800b0f6:	290a      	cmp	r1, #10
 800b0f8:	d103      	bne.n	800b102 <__sfputc_r+0x1e>
 800b0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0fe:	f7fe ba03 	b.w	8009508 <__swbuf_r>
 800b102:	6813      	ldr	r3, [r2, #0]
 800b104:	1c58      	adds	r0, r3, #1
 800b106:	6010      	str	r0, [r2, #0]
 800b108:	7019      	strb	r1, [r3, #0]
 800b10a:	4608      	mov	r0, r1
 800b10c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b110:	4770      	bx	lr

0800b112 <__sfputs_r>:
 800b112:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b114:	4606      	mov	r6, r0
 800b116:	460f      	mov	r7, r1
 800b118:	4614      	mov	r4, r2
 800b11a:	18d5      	adds	r5, r2, r3
 800b11c:	42ac      	cmp	r4, r5
 800b11e:	d101      	bne.n	800b124 <__sfputs_r+0x12>
 800b120:	2000      	movs	r0, #0
 800b122:	e007      	b.n	800b134 <__sfputs_r+0x22>
 800b124:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b128:	463a      	mov	r2, r7
 800b12a:	4630      	mov	r0, r6
 800b12c:	f7ff ffda 	bl	800b0e4 <__sfputc_r>
 800b130:	1c43      	adds	r3, r0, #1
 800b132:	d1f3      	bne.n	800b11c <__sfputs_r+0xa>
 800b134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b138 <_vfiprintf_r>:
 800b138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b13c:	460d      	mov	r5, r1
 800b13e:	b09d      	sub	sp, #116	; 0x74
 800b140:	4614      	mov	r4, r2
 800b142:	4698      	mov	r8, r3
 800b144:	4606      	mov	r6, r0
 800b146:	b118      	cbz	r0, 800b150 <_vfiprintf_r+0x18>
 800b148:	6983      	ldr	r3, [r0, #24]
 800b14a:	b90b      	cbnz	r3, 800b150 <_vfiprintf_r+0x18>
 800b14c:	f7ff fa30 	bl	800a5b0 <__sinit>
 800b150:	4b89      	ldr	r3, [pc, #548]	; (800b378 <_vfiprintf_r+0x240>)
 800b152:	429d      	cmp	r5, r3
 800b154:	d11b      	bne.n	800b18e <_vfiprintf_r+0x56>
 800b156:	6875      	ldr	r5, [r6, #4]
 800b158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b15a:	07d9      	lsls	r1, r3, #31
 800b15c:	d405      	bmi.n	800b16a <_vfiprintf_r+0x32>
 800b15e:	89ab      	ldrh	r3, [r5, #12]
 800b160:	059a      	lsls	r2, r3, #22
 800b162:	d402      	bmi.n	800b16a <_vfiprintf_r+0x32>
 800b164:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b166:	f7ff fac6 	bl	800a6f6 <__retarget_lock_acquire_recursive>
 800b16a:	89ab      	ldrh	r3, [r5, #12]
 800b16c:	071b      	lsls	r3, r3, #28
 800b16e:	d501      	bpl.n	800b174 <_vfiprintf_r+0x3c>
 800b170:	692b      	ldr	r3, [r5, #16]
 800b172:	b9eb      	cbnz	r3, 800b1b0 <_vfiprintf_r+0x78>
 800b174:	4629      	mov	r1, r5
 800b176:	4630      	mov	r0, r6
 800b178:	f7fe fa18 	bl	80095ac <__swsetup_r>
 800b17c:	b1c0      	cbz	r0, 800b1b0 <_vfiprintf_r+0x78>
 800b17e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b180:	07dc      	lsls	r4, r3, #31
 800b182:	d50e      	bpl.n	800b1a2 <_vfiprintf_r+0x6a>
 800b184:	f04f 30ff 	mov.w	r0, #4294967295
 800b188:	b01d      	add	sp, #116	; 0x74
 800b18a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b18e:	4b7b      	ldr	r3, [pc, #492]	; (800b37c <_vfiprintf_r+0x244>)
 800b190:	429d      	cmp	r5, r3
 800b192:	d101      	bne.n	800b198 <_vfiprintf_r+0x60>
 800b194:	68b5      	ldr	r5, [r6, #8]
 800b196:	e7df      	b.n	800b158 <_vfiprintf_r+0x20>
 800b198:	4b79      	ldr	r3, [pc, #484]	; (800b380 <_vfiprintf_r+0x248>)
 800b19a:	429d      	cmp	r5, r3
 800b19c:	bf08      	it	eq
 800b19e:	68f5      	ldreq	r5, [r6, #12]
 800b1a0:	e7da      	b.n	800b158 <_vfiprintf_r+0x20>
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	0598      	lsls	r0, r3, #22
 800b1a6:	d4ed      	bmi.n	800b184 <_vfiprintf_r+0x4c>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1aa:	f7ff faa5 	bl	800a6f8 <__retarget_lock_release_recursive>
 800b1ae:	e7e9      	b.n	800b184 <_vfiprintf_r+0x4c>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b1b4:	2320      	movs	r3, #32
 800b1b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1be:	2330      	movs	r3, #48	; 0x30
 800b1c0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b384 <_vfiprintf_r+0x24c>
 800b1c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1c8:	f04f 0901 	mov.w	r9, #1
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	469a      	mov	sl, r3
 800b1d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1d4:	b10a      	cbz	r2, 800b1da <_vfiprintf_r+0xa2>
 800b1d6:	2a25      	cmp	r2, #37	; 0x25
 800b1d8:	d1f9      	bne.n	800b1ce <_vfiprintf_r+0x96>
 800b1da:	ebba 0b04 	subs.w	fp, sl, r4
 800b1de:	d00b      	beq.n	800b1f8 <_vfiprintf_r+0xc0>
 800b1e0:	465b      	mov	r3, fp
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f7ff ff93 	bl	800b112 <__sfputs_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f000 80aa 	beq.w	800b346 <_vfiprintf_r+0x20e>
 800b1f2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1f4:	445a      	add	r2, fp
 800b1f6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 80a2 	beq.w	800b346 <_vfiprintf_r+0x20e>
 800b202:	2300      	movs	r3, #0
 800b204:	f04f 32ff 	mov.w	r2, #4294967295
 800b208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b20c:	f10a 0a01 	add.w	sl, sl, #1
 800b210:	9304      	str	r3, [sp, #16]
 800b212:	9307      	str	r3, [sp, #28]
 800b214:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b218:	931a      	str	r3, [sp, #104]	; 0x68
 800b21a:	4654      	mov	r4, sl
 800b21c:	2205      	movs	r2, #5
 800b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b222:	4858      	ldr	r0, [pc, #352]	; (800b384 <_vfiprintf_r+0x24c>)
 800b224:	f7f4 ffdc 	bl	80001e0 <memchr>
 800b228:	9a04      	ldr	r2, [sp, #16]
 800b22a:	b9d8      	cbnz	r0, 800b264 <_vfiprintf_r+0x12c>
 800b22c:	06d1      	lsls	r1, r2, #27
 800b22e:	bf44      	itt	mi
 800b230:	2320      	movmi	r3, #32
 800b232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b236:	0713      	lsls	r3, r2, #28
 800b238:	bf44      	itt	mi
 800b23a:	232b      	movmi	r3, #43	; 0x2b
 800b23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b240:	f89a 3000 	ldrb.w	r3, [sl]
 800b244:	2b2a      	cmp	r3, #42	; 0x2a
 800b246:	d015      	beq.n	800b274 <_vfiprintf_r+0x13c>
 800b248:	9a07      	ldr	r2, [sp, #28]
 800b24a:	4654      	mov	r4, sl
 800b24c:	2000      	movs	r0, #0
 800b24e:	f04f 0c0a 	mov.w	ip, #10
 800b252:	4621      	mov	r1, r4
 800b254:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b258:	3b30      	subs	r3, #48	; 0x30
 800b25a:	2b09      	cmp	r3, #9
 800b25c:	d94e      	bls.n	800b2fc <_vfiprintf_r+0x1c4>
 800b25e:	b1b0      	cbz	r0, 800b28e <_vfiprintf_r+0x156>
 800b260:	9207      	str	r2, [sp, #28]
 800b262:	e014      	b.n	800b28e <_vfiprintf_r+0x156>
 800b264:	eba0 0308 	sub.w	r3, r0, r8
 800b268:	fa09 f303 	lsl.w	r3, r9, r3
 800b26c:	4313      	orrs	r3, r2
 800b26e:	9304      	str	r3, [sp, #16]
 800b270:	46a2      	mov	sl, r4
 800b272:	e7d2      	b.n	800b21a <_vfiprintf_r+0xe2>
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	1d19      	adds	r1, r3, #4
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	9103      	str	r1, [sp, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	bfbb      	ittet	lt
 800b280:	425b      	neglt	r3, r3
 800b282:	f042 0202 	orrlt.w	r2, r2, #2
 800b286:	9307      	strge	r3, [sp, #28]
 800b288:	9307      	strlt	r3, [sp, #28]
 800b28a:	bfb8      	it	lt
 800b28c:	9204      	strlt	r2, [sp, #16]
 800b28e:	7823      	ldrb	r3, [r4, #0]
 800b290:	2b2e      	cmp	r3, #46	; 0x2e
 800b292:	d10c      	bne.n	800b2ae <_vfiprintf_r+0x176>
 800b294:	7863      	ldrb	r3, [r4, #1]
 800b296:	2b2a      	cmp	r3, #42	; 0x2a
 800b298:	d135      	bne.n	800b306 <_vfiprintf_r+0x1ce>
 800b29a:	9b03      	ldr	r3, [sp, #12]
 800b29c:	1d1a      	adds	r2, r3, #4
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	9203      	str	r2, [sp, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	bfb8      	it	lt
 800b2a6:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2aa:	3402      	adds	r4, #2
 800b2ac:	9305      	str	r3, [sp, #20]
 800b2ae:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b394 <_vfiprintf_r+0x25c>
 800b2b2:	7821      	ldrb	r1, [r4, #0]
 800b2b4:	2203      	movs	r2, #3
 800b2b6:	4650      	mov	r0, sl
 800b2b8:	f7f4 ff92 	bl	80001e0 <memchr>
 800b2bc:	b140      	cbz	r0, 800b2d0 <_vfiprintf_r+0x198>
 800b2be:	2340      	movs	r3, #64	; 0x40
 800b2c0:	eba0 000a 	sub.w	r0, r0, sl
 800b2c4:	fa03 f000 	lsl.w	r0, r3, r0
 800b2c8:	9b04      	ldr	r3, [sp, #16]
 800b2ca:	4303      	orrs	r3, r0
 800b2cc:	3401      	adds	r4, #1
 800b2ce:	9304      	str	r3, [sp, #16]
 800b2d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2d4:	482c      	ldr	r0, [pc, #176]	; (800b388 <_vfiprintf_r+0x250>)
 800b2d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b2da:	2206      	movs	r2, #6
 800b2dc:	f7f4 ff80 	bl	80001e0 <memchr>
 800b2e0:	2800      	cmp	r0, #0
 800b2e2:	d03f      	beq.n	800b364 <_vfiprintf_r+0x22c>
 800b2e4:	4b29      	ldr	r3, [pc, #164]	; (800b38c <_vfiprintf_r+0x254>)
 800b2e6:	bb1b      	cbnz	r3, 800b330 <_vfiprintf_r+0x1f8>
 800b2e8:	9b03      	ldr	r3, [sp, #12]
 800b2ea:	3307      	adds	r3, #7
 800b2ec:	f023 0307 	bic.w	r3, r3, #7
 800b2f0:	3308      	adds	r3, #8
 800b2f2:	9303      	str	r3, [sp, #12]
 800b2f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2f6:	443b      	add	r3, r7
 800b2f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2fa:	e767      	b.n	800b1cc <_vfiprintf_r+0x94>
 800b2fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b300:	460c      	mov	r4, r1
 800b302:	2001      	movs	r0, #1
 800b304:	e7a5      	b.n	800b252 <_vfiprintf_r+0x11a>
 800b306:	2300      	movs	r3, #0
 800b308:	3401      	adds	r4, #1
 800b30a:	9305      	str	r3, [sp, #20]
 800b30c:	4619      	mov	r1, r3
 800b30e:	f04f 0c0a 	mov.w	ip, #10
 800b312:	4620      	mov	r0, r4
 800b314:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b318:	3a30      	subs	r2, #48	; 0x30
 800b31a:	2a09      	cmp	r2, #9
 800b31c:	d903      	bls.n	800b326 <_vfiprintf_r+0x1ee>
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0c5      	beq.n	800b2ae <_vfiprintf_r+0x176>
 800b322:	9105      	str	r1, [sp, #20]
 800b324:	e7c3      	b.n	800b2ae <_vfiprintf_r+0x176>
 800b326:	fb0c 2101 	mla	r1, ip, r1, r2
 800b32a:	4604      	mov	r4, r0
 800b32c:	2301      	movs	r3, #1
 800b32e:	e7f0      	b.n	800b312 <_vfiprintf_r+0x1da>
 800b330:	ab03      	add	r3, sp, #12
 800b332:	9300      	str	r3, [sp, #0]
 800b334:	462a      	mov	r2, r5
 800b336:	4b16      	ldr	r3, [pc, #88]	; (800b390 <_vfiprintf_r+0x258>)
 800b338:	a904      	add	r1, sp, #16
 800b33a:	4630      	mov	r0, r6
 800b33c:	f7fd fca4 	bl	8008c88 <_printf_float>
 800b340:	4607      	mov	r7, r0
 800b342:	1c78      	adds	r0, r7, #1
 800b344:	d1d6      	bne.n	800b2f4 <_vfiprintf_r+0x1bc>
 800b346:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b348:	07d9      	lsls	r1, r3, #31
 800b34a:	d405      	bmi.n	800b358 <_vfiprintf_r+0x220>
 800b34c:	89ab      	ldrh	r3, [r5, #12]
 800b34e:	059a      	lsls	r2, r3, #22
 800b350:	d402      	bmi.n	800b358 <_vfiprintf_r+0x220>
 800b352:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b354:	f7ff f9d0 	bl	800a6f8 <__retarget_lock_release_recursive>
 800b358:	89ab      	ldrh	r3, [r5, #12]
 800b35a:	065b      	lsls	r3, r3, #25
 800b35c:	f53f af12 	bmi.w	800b184 <_vfiprintf_r+0x4c>
 800b360:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b362:	e711      	b.n	800b188 <_vfiprintf_r+0x50>
 800b364:	ab03      	add	r3, sp, #12
 800b366:	9300      	str	r3, [sp, #0]
 800b368:	462a      	mov	r2, r5
 800b36a:	4b09      	ldr	r3, [pc, #36]	; (800b390 <_vfiprintf_r+0x258>)
 800b36c:	a904      	add	r1, sp, #16
 800b36e:	4630      	mov	r0, r6
 800b370:	f7fd ff2e 	bl	80091d0 <_printf_i>
 800b374:	e7e4      	b.n	800b340 <_vfiprintf_r+0x208>
 800b376:	bf00      	nop
 800b378:	0800cf9c 	.word	0x0800cf9c
 800b37c:	0800cfbc 	.word	0x0800cfbc
 800b380:	0800cf7c 	.word	0x0800cf7c
 800b384:	0800d134 	.word	0x0800d134
 800b388:	0800d13e 	.word	0x0800d13e
 800b38c:	08008c89 	.word	0x08008c89
 800b390:	0800b113 	.word	0x0800b113
 800b394:	0800d13a 	.word	0x0800d13a

0800b398 <_sbrk_r>:
 800b398:	b538      	push	{r3, r4, r5, lr}
 800b39a:	4d06      	ldr	r5, [pc, #24]	; (800b3b4 <_sbrk_r+0x1c>)
 800b39c:	2300      	movs	r3, #0
 800b39e:	4604      	mov	r4, r0
 800b3a0:	4608      	mov	r0, r1
 800b3a2:	602b      	str	r3, [r5, #0]
 800b3a4:	f7f7 f9be 	bl	8002724 <_sbrk>
 800b3a8:	1c43      	adds	r3, r0, #1
 800b3aa:	d102      	bne.n	800b3b2 <_sbrk_r+0x1a>
 800b3ac:	682b      	ldr	r3, [r5, #0]
 800b3ae:	b103      	cbz	r3, 800b3b2 <_sbrk_r+0x1a>
 800b3b0:	6023      	str	r3, [r4, #0]
 800b3b2:	bd38      	pop	{r3, r4, r5, pc}
 800b3b4:	200004fc 	.word	0x200004fc

0800b3b8 <__sread>:
 800b3b8:	b510      	push	{r4, lr}
 800b3ba:	460c      	mov	r4, r1
 800b3bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3c0:	f000 f8e2 	bl	800b588 <_read_r>
 800b3c4:	2800      	cmp	r0, #0
 800b3c6:	bfab      	itete	ge
 800b3c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b3cc:	181b      	addge	r3, r3, r0
 800b3ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3d2:	bfac      	ite	ge
 800b3d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b3d6:	81a3      	strhlt	r3, [r4, #12]
 800b3d8:	bd10      	pop	{r4, pc}

0800b3da <__swrite>:
 800b3da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3de:	461f      	mov	r7, r3
 800b3e0:	898b      	ldrh	r3, [r1, #12]
 800b3e2:	05db      	lsls	r3, r3, #23
 800b3e4:	4605      	mov	r5, r0
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	4616      	mov	r6, r2
 800b3ea:	d505      	bpl.n	800b3f8 <__swrite+0x1e>
 800b3ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3f0:	2302      	movs	r3, #2
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f000 f898 	bl	800b528 <_lseek_r>
 800b3f8:	89a3      	ldrh	r3, [r4, #12]
 800b3fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b402:	81a3      	strh	r3, [r4, #12]
 800b404:	4632      	mov	r2, r6
 800b406:	463b      	mov	r3, r7
 800b408:	4628      	mov	r0, r5
 800b40a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b40e:	f000 b817 	b.w	800b440 <_write_r>

0800b412 <__sseek>:
 800b412:	b510      	push	{r4, lr}
 800b414:	460c      	mov	r4, r1
 800b416:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41a:	f000 f885 	bl	800b528 <_lseek_r>
 800b41e:	1c43      	adds	r3, r0, #1
 800b420:	89a3      	ldrh	r3, [r4, #12]
 800b422:	bf15      	itete	ne
 800b424:	6560      	strne	r0, [r4, #84]	; 0x54
 800b426:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b42a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b42e:	81a3      	strheq	r3, [r4, #12]
 800b430:	bf18      	it	ne
 800b432:	81a3      	strhne	r3, [r4, #12]
 800b434:	bd10      	pop	{r4, pc}

0800b436 <__sclose>:
 800b436:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b43a:	f000 b831 	b.w	800b4a0 <_close_r>
	...

0800b440 <_write_r>:
 800b440:	b538      	push	{r3, r4, r5, lr}
 800b442:	4d07      	ldr	r5, [pc, #28]	; (800b460 <_write_r+0x20>)
 800b444:	4604      	mov	r4, r0
 800b446:	4608      	mov	r0, r1
 800b448:	4611      	mov	r1, r2
 800b44a:	2200      	movs	r2, #0
 800b44c:	602a      	str	r2, [r5, #0]
 800b44e:	461a      	mov	r2, r3
 800b450:	f7f6 f830 	bl	80014b4 <_write>
 800b454:	1c43      	adds	r3, r0, #1
 800b456:	d102      	bne.n	800b45e <_write_r+0x1e>
 800b458:	682b      	ldr	r3, [r5, #0]
 800b45a:	b103      	cbz	r3, 800b45e <_write_r+0x1e>
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
 800b460:	200004fc 	.word	0x200004fc

0800b464 <__assert_func>:
 800b464:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b466:	4614      	mov	r4, r2
 800b468:	461a      	mov	r2, r3
 800b46a:	4b09      	ldr	r3, [pc, #36]	; (800b490 <__assert_func+0x2c>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	4605      	mov	r5, r0
 800b470:	68d8      	ldr	r0, [r3, #12]
 800b472:	b14c      	cbz	r4, 800b488 <__assert_func+0x24>
 800b474:	4b07      	ldr	r3, [pc, #28]	; (800b494 <__assert_func+0x30>)
 800b476:	9100      	str	r1, [sp, #0]
 800b478:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b47c:	4906      	ldr	r1, [pc, #24]	; (800b498 <__assert_func+0x34>)
 800b47e:	462b      	mov	r3, r5
 800b480:	f000 f81e 	bl	800b4c0 <fiprintf>
 800b484:	f000 f89f 	bl	800b5c6 <abort>
 800b488:	4b04      	ldr	r3, [pc, #16]	; (800b49c <__assert_func+0x38>)
 800b48a:	461c      	mov	r4, r3
 800b48c:	e7f3      	b.n	800b476 <__assert_func+0x12>
 800b48e:	bf00      	nop
 800b490:	2000000c 	.word	0x2000000c
 800b494:	0800d145 	.word	0x0800d145
 800b498:	0800d152 	.word	0x0800d152
 800b49c:	0800d180 	.word	0x0800d180

0800b4a0 <_close_r>:
 800b4a0:	b538      	push	{r3, r4, r5, lr}
 800b4a2:	4d06      	ldr	r5, [pc, #24]	; (800b4bc <_close_r+0x1c>)
 800b4a4:	2300      	movs	r3, #0
 800b4a6:	4604      	mov	r4, r0
 800b4a8:	4608      	mov	r0, r1
 800b4aa:	602b      	str	r3, [r5, #0]
 800b4ac:	f7f7 f905 	bl	80026ba <_close>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	d102      	bne.n	800b4ba <_close_r+0x1a>
 800b4b4:	682b      	ldr	r3, [r5, #0]
 800b4b6:	b103      	cbz	r3, 800b4ba <_close_r+0x1a>
 800b4b8:	6023      	str	r3, [r4, #0]
 800b4ba:	bd38      	pop	{r3, r4, r5, pc}
 800b4bc:	200004fc 	.word	0x200004fc

0800b4c0 <fiprintf>:
 800b4c0:	b40e      	push	{r1, r2, r3}
 800b4c2:	b503      	push	{r0, r1, lr}
 800b4c4:	4601      	mov	r1, r0
 800b4c6:	ab03      	add	r3, sp, #12
 800b4c8:	4805      	ldr	r0, [pc, #20]	; (800b4e0 <fiprintf+0x20>)
 800b4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4ce:	6800      	ldr	r0, [r0, #0]
 800b4d0:	9301      	str	r3, [sp, #4]
 800b4d2:	f7ff fe31 	bl	800b138 <_vfiprintf_r>
 800b4d6:	b002      	add	sp, #8
 800b4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b4dc:	b003      	add	sp, #12
 800b4de:	4770      	bx	lr
 800b4e0:	2000000c 	.word	0x2000000c

0800b4e4 <_fstat_r>:
 800b4e4:	b538      	push	{r3, r4, r5, lr}
 800b4e6:	4d07      	ldr	r5, [pc, #28]	; (800b504 <_fstat_r+0x20>)
 800b4e8:	2300      	movs	r3, #0
 800b4ea:	4604      	mov	r4, r0
 800b4ec:	4608      	mov	r0, r1
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	602b      	str	r3, [r5, #0]
 800b4f2:	f7f7 f8ee 	bl	80026d2 <_fstat>
 800b4f6:	1c43      	adds	r3, r0, #1
 800b4f8:	d102      	bne.n	800b500 <_fstat_r+0x1c>
 800b4fa:	682b      	ldr	r3, [r5, #0]
 800b4fc:	b103      	cbz	r3, 800b500 <_fstat_r+0x1c>
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	bd38      	pop	{r3, r4, r5, pc}
 800b502:	bf00      	nop
 800b504:	200004fc 	.word	0x200004fc

0800b508 <_isatty_r>:
 800b508:	b538      	push	{r3, r4, r5, lr}
 800b50a:	4d06      	ldr	r5, [pc, #24]	; (800b524 <_isatty_r+0x1c>)
 800b50c:	2300      	movs	r3, #0
 800b50e:	4604      	mov	r4, r0
 800b510:	4608      	mov	r0, r1
 800b512:	602b      	str	r3, [r5, #0]
 800b514:	f7f7 f8ed 	bl	80026f2 <_isatty>
 800b518:	1c43      	adds	r3, r0, #1
 800b51a:	d102      	bne.n	800b522 <_isatty_r+0x1a>
 800b51c:	682b      	ldr	r3, [r5, #0]
 800b51e:	b103      	cbz	r3, 800b522 <_isatty_r+0x1a>
 800b520:	6023      	str	r3, [r4, #0]
 800b522:	bd38      	pop	{r3, r4, r5, pc}
 800b524:	200004fc 	.word	0x200004fc

0800b528 <_lseek_r>:
 800b528:	b538      	push	{r3, r4, r5, lr}
 800b52a:	4d07      	ldr	r5, [pc, #28]	; (800b548 <_lseek_r+0x20>)
 800b52c:	4604      	mov	r4, r0
 800b52e:	4608      	mov	r0, r1
 800b530:	4611      	mov	r1, r2
 800b532:	2200      	movs	r2, #0
 800b534:	602a      	str	r2, [r5, #0]
 800b536:	461a      	mov	r2, r3
 800b538:	f7f7 f8e6 	bl	8002708 <_lseek>
 800b53c:	1c43      	adds	r3, r0, #1
 800b53e:	d102      	bne.n	800b546 <_lseek_r+0x1e>
 800b540:	682b      	ldr	r3, [r5, #0]
 800b542:	b103      	cbz	r3, 800b546 <_lseek_r+0x1e>
 800b544:	6023      	str	r3, [r4, #0]
 800b546:	bd38      	pop	{r3, r4, r5, pc}
 800b548:	200004fc 	.word	0x200004fc

0800b54c <__ascii_mbtowc>:
 800b54c:	b082      	sub	sp, #8
 800b54e:	b901      	cbnz	r1, 800b552 <__ascii_mbtowc+0x6>
 800b550:	a901      	add	r1, sp, #4
 800b552:	b142      	cbz	r2, 800b566 <__ascii_mbtowc+0x1a>
 800b554:	b14b      	cbz	r3, 800b56a <__ascii_mbtowc+0x1e>
 800b556:	7813      	ldrb	r3, [r2, #0]
 800b558:	600b      	str	r3, [r1, #0]
 800b55a:	7812      	ldrb	r2, [r2, #0]
 800b55c:	1e10      	subs	r0, r2, #0
 800b55e:	bf18      	it	ne
 800b560:	2001      	movne	r0, #1
 800b562:	b002      	add	sp, #8
 800b564:	4770      	bx	lr
 800b566:	4610      	mov	r0, r2
 800b568:	e7fb      	b.n	800b562 <__ascii_mbtowc+0x16>
 800b56a:	f06f 0001 	mvn.w	r0, #1
 800b56e:	e7f8      	b.n	800b562 <__ascii_mbtowc+0x16>

0800b570 <__malloc_lock>:
 800b570:	4801      	ldr	r0, [pc, #4]	; (800b578 <__malloc_lock+0x8>)
 800b572:	f7ff b8c0 	b.w	800a6f6 <__retarget_lock_acquire_recursive>
 800b576:	bf00      	nop
 800b578:	200004f0 	.word	0x200004f0

0800b57c <__malloc_unlock>:
 800b57c:	4801      	ldr	r0, [pc, #4]	; (800b584 <__malloc_unlock+0x8>)
 800b57e:	f7ff b8bb 	b.w	800a6f8 <__retarget_lock_release_recursive>
 800b582:	bf00      	nop
 800b584:	200004f0 	.word	0x200004f0

0800b588 <_read_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4d07      	ldr	r5, [pc, #28]	; (800b5a8 <_read_r+0x20>)
 800b58c:	4604      	mov	r4, r0
 800b58e:	4608      	mov	r0, r1
 800b590:	4611      	mov	r1, r2
 800b592:	2200      	movs	r2, #0
 800b594:	602a      	str	r2, [r5, #0]
 800b596:	461a      	mov	r2, r3
 800b598:	f7f7 f872 	bl	8002680 <_read>
 800b59c:	1c43      	adds	r3, r0, #1
 800b59e:	d102      	bne.n	800b5a6 <_read_r+0x1e>
 800b5a0:	682b      	ldr	r3, [r5, #0]
 800b5a2:	b103      	cbz	r3, 800b5a6 <_read_r+0x1e>
 800b5a4:	6023      	str	r3, [r4, #0]
 800b5a6:	bd38      	pop	{r3, r4, r5, pc}
 800b5a8:	200004fc 	.word	0x200004fc

0800b5ac <__ascii_wctomb>:
 800b5ac:	b149      	cbz	r1, 800b5c2 <__ascii_wctomb+0x16>
 800b5ae:	2aff      	cmp	r2, #255	; 0xff
 800b5b0:	bf85      	ittet	hi
 800b5b2:	238a      	movhi	r3, #138	; 0x8a
 800b5b4:	6003      	strhi	r3, [r0, #0]
 800b5b6:	700a      	strbls	r2, [r1, #0]
 800b5b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800b5bc:	bf98      	it	ls
 800b5be:	2001      	movls	r0, #1
 800b5c0:	4770      	bx	lr
 800b5c2:	4608      	mov	r0, r1
 800b5c4:	4770      	bx	lr

0800b5c6 <abort>:
 800b5c6:	b508      	push	{r3, lr}
 800b5c8:	2006      	movs	r0, #6
 800b5ca:	f000 f82b 	bl	800b624 <raise>
 800b5ce:	2001      	movs	r0, #1
 800b5d0:	f7f7 f84c 	bl	800266c <_exit>

0800b5d4 <_raise_r>:
 800b5d4:	291f      	cmp	r1, #31
 800b5d6:	b538      	push	{r3, r4, r5, lr}
 800b5d8:	4604      	mov	r4, r0
 800b5da:	460d      	mov	r5, r1
 800b5dc:	d904      	bls.n	800b5e8 <_raise_r+0x14>
 800b5de:	2316      	movs	r3, #22
 800b5e0:	6003      	str	r3, [r0, #0]
 800b5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b5ea:	b112      	cbz	r2, 800b5f2 <_raise_r+0x1e>
 800b5ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b5f0:	b94b      	cbnz	r3, 800b606 <_raise_r+0x32>
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f000 f830 	bl	800b658 <_getpid_r>
 800b5f8:	462a      	mov	r2, r5
 800b5fa:	4601      	mov	r1, r0
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b602:	f000 b817 	b.w	800b634 <_kill_r>
 800b606:	2b01      	cmp	r3, #1
 800b608:	d00a      	beq.n	800b620 <_raise_r+0x4c>
 800b60a:	1c59      	adds	r1, r3, #1
 800b60c:	d103      	bne.n	800b616 <_raise_r+0x42>
 800b60e:	2316      	movs	r3, #22
 800b610:	6003      	str	r3, [r0, #0]
 800b612:	2001      	movs	r0, #1
 800b614:	e7e7      	b.n	800b5e6 <_raise_r+0x12>
 800b616:	2400      	movs	r4, #0
 800b618:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b61c:	4628      	mov	r0, r5
 800b61e:	4798      	blx	r3
 800b620:	2000      	movs	r0, #0
 800b622:	e7e0      	b.n	800b5e6 <_raise_r+0x12>

0800b624 <raise>:
 800b624:	4b02      	ldr	r3, [pc, #8]	; (800b630 <raise+0xc>)
 800b626:	4601      	mov	r1, r0
 800b628:	6818      	ldr	r0, [r3, #0]
 800b62a:	f7ff bfd3 	b.w	800b5d4 <_raise_r>
 800b62e:	bf00      	nop
 800b630:	2000000c 	.word	0x2000000c

0800b634 <_kill_r>:
 800b634:	b538      	push	{r3, r4, r5, lr}
 800b636:	4d07      	ldr	r5, [pc, #28]	; (800b654 <_kill_r+0x20>)
 800b638:	2300      	movs	r3, #0
 800b63a:	4604      	mov	r4, r0
 800b63c:	4608      	mov	r0, r1
 800b63e:	4611      	mov	r1, r2
 800b640:	602b      	str	r3, [r5, #0]
 800b642:	f7f7 f803 	bl	800264c <_kill>
 800b646:	1c43      	adds	r3, r0, #1
 800b648:	d102      	bne.n	800b650 <_kill_r+0x1c>
 800b64a:	682b      	ldr	r3, [r5, #0]
 800b64c:	b103      	cbz	r3, 800b650 <_kill_r+0x1c>
 800b64e:	6023      	str	r3, [r4, #0]
 800b650:	bd38      	pop	{r3, r4, r5, pc}
 800b652:	bf00      	nop
 800b654:	200004fc 	.word	0x200004fc

0800b658 <_getpid_r>:
 800b658:	f7f6 bff0 	b.w	800263c <_getpid>
 800b65c:	0000      	movs	r0, r0
	...

0800b660 <cos>:
 800b660:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b662:	ec53 2b10 	vmov	r2, r3, d0
 800b666:	4826      	ldr	r0, [pc, #152]	; (800b700 <cos+0xa0>)
 800b668:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b66c:	4281      	cmp	r1, r0
 800b66e:	dc06      	bgt.n	800b67e <cos+0x1e>
 800b670:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b6f8 <cos+0x98>
 800b674:	b005      	add	sp, #20
 800b676:	f85d eb04 	ldr.w	lr, [sp], #4
 800b67a:	f000 bc59 	b.w	800bf30 <__kernel_cos>
 800b67e:	4821      	ldr	r0, [pc, #132]	; (800b704 <cos+0xa4>)
 800b680:	4281      	cmp	r1, r0
 800b682:	dd09      	ble.n	800b698 <cos+0x38>
 800b684:	ee10 0a10 	vmov	r0, s0
 800b688:	4619      	mov	r1, r3
 800b68a:	f7f4 fdfd 	bl	8000288 <__aeabi_dsub>
 800b68e:	ec41 0b10 	vmov	d0, r0, r1
 800b692:	b005      	add	sp, #20
 800b694:	f85d fb04 	ldr.w	pc, [sp], #4
 800b698:	4668      	mov	r0, sp
 800b69a:	f000 f989 	bl	800b9b0 <__ieee754_rem_pio2>
 800b69e:	f000 0003 	and.w	r0, r0, #3
 800b6a2:	2801      	cmp	r0, #1
 800b6a4:	d00b      	beq.n	800b6be <cos+0x5e>
 800b6a6:	2802      	cmp	r0, #2
 800b6a8:	d016      	beq.n	800b6d8 <cos+0x78>
 800b6aa:	b9e0      	cbnz	r0, 800b6e6 <cos+0x86>
 800b6ac:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6b0:	ed9d 0b00 	vldr	d0, [sp]
 800b6b4:	f000 fc3c 	bl	800bf30 <__kernel_cos>
 800b6b8:	ec51 0b10 	vmov	r0, r1, d0
 800b6bc:	e7e7      	b.n	800b68e <cos+0x2e>
 800b6be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6c2:	ed9d 0b00 	vldr	d0, [sp]
 800b6c6:	f001 f84b 	bl	800c760 <__kernel_sin>
 800b6ca:	ec53 2b10 	vmov	r2, r3, d0
 800b6ce:	ee10 0a10 	vmov	r0, s0
 800b6d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b6d6:	e7da      	b.n	800b68e <cos+0x2e>
 800b6d8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6dc:	ed9d 0b00 	vldr	d0, [sp]
 800b6e0:	f000 fc26 	bl	800bf30 <__kernel_cos>
 800b6e4:	e7f1      	b.n	800b6ca <cos+0x6a>
 800b6e6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b6ea:	ed9d 0b00 	vldr	d0, [sp]
 800b6ee:	2001      	movs	r0, #1
 800b6f0:	f001 f836 	bl	800c760 <__kernel_sin>
 800b6f4:	e7e0      	b.n	800b6b8 <cos+0x58>
 800b6f6:	bf00      	nop
	...
 800b700:	3fe921fb 	.word	0x3fe921fb
 800b704:	7fefffff 	.word	0x7fefffff

0800b708 <sin>:
 800b708:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b70a:	ec53 2b10 	vmov	r2, r3, d0
 800b70e:	4828      	ldr	r0, [pc, #160]	; (800b7b0 <sin+0xa8>)
 800b710:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b714:	4281      	cmp	r1, r0
 800b716:	dc07      	bgt.n	800b728 <sin+0x20>
 800b718:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b7a8 <sin+0xa0>
 800b71c:	2000      	movs	r0, #0
 800b71e:	b005      	add	sp, #20
 800b720:	f85d eb04 	ldr.w	lr, [sp], #4
 800b724:	f001 b81c 	b.w	800c760 <__kernel_sin>
 800b728:	4822      	ldr	r0, [pc, #136]	; (800b7b4 <sin+0xac>)
 800b72a:	4281      	cmp	r1, r0
 800b72c:	dd09      	ble.n	800b742 <sin+0x3a>
 800b72e:	ee10 0a10 	vmov	r0, s0
 800b732:	4619      	mov	r1, r3
 800b734:	f7f4 fda8 	bl	8000288 <__aeabi_dsub>
 800b738:	ec41 0b10 	vmov	d0, r0, r1
 800b73c:	b005      	add	sp, #20
 800b73e:	f85d fb04 	ldr.w	pc, [sp], #4
 800b742:	4668      	mov	r0, sp
 800b744:	f000 f934 	bl	800b9b0 <__ieee754_rem_pio2>
 800b748:	f000 0003 	and.w	r0, r0, #3
 800b74c:	2801      	cmp	r0, #1
 800b74e:	d00c      	beq.n	800b76a <sin+0x62>
 800b750:	2802      	cmp	r0, #2
 800b752:	d011      	beq.n	800b778 <sin+0x70>
 800b754:	b9f0      	cbnz	r0, 800b794 <sin+0x8c>
 800b756:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b75a:	ed9d 0b00 	vldr	d0, [sp]
 800b75e:	2001      	movs	r0, #1
 800b760:	f000 fffe 	bl	800c760 <__kernel_sin>
 800b764:	ec51 0b10 	vmov	r0, r1, d0
 800b768:	e7e6      	b.n	800b738 <sin+0x30>
 800b76a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b76e:	ed9d 0b00 	vldr	d0, [sp]
 800b772:	f000 fbdd 	bl	800bf30 <__kernel_cos>
 800b776:	e7f5      	b.n	800b764 <sin+0x5c>
 800b778:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b77c:	ed9d 0b00 	vldr	d0, [sp]
 800b780:	2001      	movs	r0, #1
 800b782:	f000 ffed 	bl	800c760 <__kernel_sin>
 800b786:	ec53 2b10 	vmov	r2, r3, d0
 800b78a:	ee10 0a10 	vmov	r0, s0
 800b78e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b792:	e7d1      	b.n	800b738 <sin+0x30>
 800b794:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b798:	ed9d 0b00 	vldr	d0, [sp]
 800b79c:	f000 fbc8 	bl	800bf30 <__kernel_cos>
 800b7a0:	e7f1      	b.n	800b786 <sin+0x7e>
 800b7a2:	bf00      	nop
 800b7a4:	f3af 8000 	nop.w
	...
 800b7b0:	3fe921fb 	.word	0x3fe921fb
 800b7b4:	7fefffff 	.word	0x7fefffff

0800b7b8 <atan2>:
 800b7b8:	f000 b82e 	b.w	800b818 <__ieee754_atan2>

0800b7bc <sqrt>:
 800b7bc:	b538      	push	{r3, r4, r5, lr}
 800b7be:	ed2d 8b02 	vpush	{d8}
 800b7c2:	ec55 4b10 	vmov	r4, r5, d0
 800b7c6:	f000 faff 	bl	800bdc8 <__ieee754_sqrt>
 800b7ca:	4622      	mov	r2, r4
 800b7cc:	462b      	mov	r3, r5
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	4629      	mov	r1, r5
 800b7d2:	eeb0 8a40 	vmov.f32	s16, s0
 800b7d6:	eef0 8a60 	vmov.f32	s17, s1
 800b7da:	f7f5 f9a7 	bl	8000b2c <__aeabi_dcmpun>
 800b7de:	b990      	cbnz	r0, 800b806 <sqrt+0x4a>
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	4629      	mov	r1, r5
 800b7e8:	f7f5 f978 	bl	8000adc <__aeabi_dcmplt>
 800b7ec:	b158      	cbz	r0, 800b806 <sqrt+0x4a>
 800b7ee:	f7fd f979 	bl	8008ae4 <__errno>
 800b7f2:	2321      	movs	r3, #33	; 0x21
 800b7f4:	6003      	str	r3, [r0, #0]
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	4610      	mov	r0, r2
 800b7fc:	4619      	mov	r1, r3
 800b7fe:	f7f5 f825 	bl	800084c <__aeabi_ddiv>
 800b802:	ec41 0b18 	vmov	d8, r0, r1
 800b806:	eeb0 0a48 	vmov.f32	s0, s16
 800b80a:	eef0 0a68 	vmov.f32	s1, s17
 800b80e:	ecbd 8b02 	vpop	{d8}
 800b812:	bd38      	pop	{r3, r4, r5, pc}
 800b814:	0000      	movs	r0, r0
	...

0800b818 <__ieee754_atan2>:
 800b818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b81c:	ec57 6b11 	vmov	r6, r7, d1
 800b820:	4273      	negs	r3, r6
 800b822:	f8df e184 	ldr.w	lr, [pc, #388]	; 800b9a8 <__ieee754_atan2+0x190>
 800b826:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800b82a:	4333      	orrs	r3, r6
 800b82c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b830:	4573      	cmp	r3, lr
 800b832:	ec51 0b10 	vmov	r0, r1, d0
 800b836:	ee11 8a10 	vmov	r8, s2
 800b83a:	d80a      	bhi.n	800b852 <__ieee754_atan2+0x3a>
 800b83c:	4244      	negs	r4, r0
 800b83e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b842:	4304      	orrs	r4, r0
 800b844:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b848:	4574      	cmp	r4, lr
 800b84a:	ee10 9a10 	vmov	r9, s0
 800b84e:	468c      	mov	ip, r1
 800b850:	d907      	bls.n	800b862 <__ieee754_atan2+0x4a>
 800b852:	4632      	mov	r2, r6
 800b854:	463b      	mov	r3, r7
 800b856:	f7f4 fd19 	bl	800028c <__adddf3>
 800b85a:	ec41 0b10 	vmov	d0, r0, r1
 800b85e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b862:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800b866:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b86a:	4334      	orrs	r4, r6
 800b86c:	d103      	bne.n	800b876 <__ieee754_atan2+0x5e>
 800b86e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b872:	f001 b835 	b.w	800c8e0 <atan>
 800b876:	17bc      	asrs	r4, r7, #30
 800b878:	f004 0402 	and.w	r4, r4, #2
 800b87c:	ea53 0909 	orrs.w	r9, r3, r9
 800b880:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b884:	d107      	bne.n	800b896 <__ieee754_atan2+0x7e>
 800b886:	2c02      	cmp	r4, #2
 800b888:	d060      	beq.n	800b94c <__ieee754_atan2+0x134>
 800b88a:	2c03      	cmp	r4, #3
 800b88c:	d1e5      	bne.n	800b85a <__ieee754_atan2+0x42>
 800b88e:	a142      	add	r1, pc, #264	; (adr r1, 800b998 <__ieee754_atan2+0x180>)
 800b890:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b894:	e7e1      	b.n	800b85a <__ieee754_atan2+0x42>
 800b896:	ea52 0808 	orrs.w	r8, r2, r8
 800b89a:	d106      	bne.n	800b8aa <__ieee754_atan2+0x92>
 800b89c:	f1bc 0f00 	cmp.w	ip, #0
 800b8a0:	da5f      	bge.n	800b962 <__ieee754_atan2+0x14a>
 800b8a2:	a13f      	add	r1, pc, #252	; (adr r1, 800b9a0 <__ieee754_atan2+0x188>)
 800b8a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b8a8:	e7d7      	b.n	800b85a <__ieee754_atan2+0x42>
 800b8aa:	4572      	cmp	r2, lr
 800b8ac:	d10f      	bne.n	800b8ce <__ieee754_atan2+0xb6>
 800b8ae:	4293      	cmp	r3, r2
 800b8b0:	f104 34ff 	add.w	r4, r4, #4294967295
 800b8b4:	d107      	bne.n	800b8c6 <__ieee754_atan2+0xae>
 800b8b6:	2c02      	cmp	r4, #2
 800b8b8:	d84c      	bhi.n	800b954 <__ieee754_atan2+0x13c>
 800b8ba:	4b35      	ldr	r3, [pc, #212]	; (800b990 <__ieee754_atan2+0x178>)
 800b8bc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800b8c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b8c4:	e7c9      	b.n	800b85a <__ieee754_atan2+0x42>
 800b8c6:	2c02      	cmp	r4, #2
 800b8c8:	d848      	bhi.n	800b95c <__ieee754_atan2+0x144>
 800b8ca:	4b32      	ldr	r3, [pc, #200]	; (800b994 <__ieee754_atan2+0x17c>)
 800b8cc:	e7f6      	b.n	800b8bc <__ieee754_atan2+0xa4>
 800b8ce:	4573      	cmp	r3, lr
 800b8d0:	d0e4      	beq.n	800b89c <__ieee754_atan2+0x84>
 800b8d2:	1a9b      	subs	r3, r3, r2
 800b8d4:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800b8d8:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b8dc:	da1e      	bge.n	800b91c <__ieee754_atan2+0x104>
 800b8de:	2f00      	cmp	r7, #0
 800b8e0:	da01      	bge.n	800b8e6 <__ieee754_atan2+0xce>
 800b8e2:	323c      	adds	r2, #60	; 0x3c
 800b8e4:	db1e      	blt.n	800b924 <__ieee754_atan2+0x10c>
 800b8e6:	4632      	mov	r2, r6
 800b8e8:	463b      	mov	r3, r7
 800b8ea:	f7f4 ffaf 	bl	800084c <__aeabi_ddiv>
 800b8ee:	ec41 0b10 	vmov	d0, r0, r1
 800b8f2:	f001 f995 	bl	800cc20 <fabs>
 800b8f6:	f000 fff3 	bl	800c8e0 <atan>
 800b8fa:	ec51 0b10 	vmov	r0, r1, d0
 800b8fe:	2c01      	cmp	r4, #1
 800b900:	d013      	beq.n	800b92a <__ieee754_atan2+0x112>
 800b902:	2c02      	cmp	r4, #2
 800b904:	d015      	beq.n	800b932 <__ieee754_atan2+0x11a>
 800b906:	2c00      	cmp	r4, #0
 800b908:	d0a7      	beq.n	800b85a <__ieee754_atan2+0x42>
 800b90a:	a319      	add	r3, pc, #100	; (adr r3, 800b970 <__ieee754_atan2+0x158>)
 800b90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b910:	f7f4 fcba 	bl	8000288 <__aeabi_dsub>
 800b914:	a318      	add	r3, pc, #96	; (adr r3, 800b978 <__ieee754_atan2+0x160>)
 800b916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b91a:	e014      	b.n	800b946 <__ieee754_atan2+0x12e>
 800b91c:	a118      	add	r1, pc, #96	; (adr r1, 800b980 <__ieee754_atan2+0x168>)
 800b91e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b922:	e7ec      	b.n	800b8fe <__ieee754_atan2+0xe6>
 800b924:	2000      	movs	r0, #0
 800b926:	2100      	movs	r1, #0
 800b928:	e7e9      	b.n	800b8fe <__ieee754_atan2+0xe6>
 800b92a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b92e:	4619      	mov	r1, r3
 800b930:	e793      	b.n	800b85a <__ieee754_atan2+0x42>
 800b932:	a30f      	add	r3, pc, #60	; (adr r3, 800b970 <__ieee754_atan2+0x158>)
 800b934:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b938:	f7f4 fca6 	bl	8000288 <__aeabi_dsub>
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	a10d      	add	r1, pc, #52	; (adr r1, 800b978 <__ieee754_atan2+0x160>)
 800b942:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b946:	f7f4 fc9f 	bl	8000288 <__aeabi_dsub>
 800b94a:	e786      	b.n	800b85a <__ieee754_atan2+0x42>
 800b94c:	a10a      	add	r1, pc, #40	; (adr r1, 800b978 <__ieee754_atan2+0x160>)
 800b94e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b952:	e782      	b.n	800b85a <__ieee754_atan2+0x42>
 800b954:	a10c      	add	r1, pc, #48	; (adr r1, 800b988 <__ieee754_atan2+0x170>)
 800b956:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b95a:	e77e      	b.n	800b85a <__ieee754_atan2+0x42>
 800b95c:	2000      	movs	r0, #0
 800b95e:	2100      	movs	r1, #0
 800b960:	e77b      	b.n	800b85a <__ieee754_atan2+0x42>
 800b962:	a107      	add	r1, pc, #28	; (adr r1, 800b980 <__ieee754_atan2+0x168>)
 800b964:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b968:	e777      	b.n	800b85a <__ieee754_atan2+0x42>
 800b96a:	bf00      	nop
 800b96c:	f3af 8000 	nop.w
 800b970:	33145c07 	.word	0x33145c07
 800b974:	3ca1a626 	.word	0x3ca1a626
 800b978:	54442d18 	.word	0x54442d18
 800b97c:	400921fb 	.word	0x400921fb
 800b980:	54442d18 	.word	0x54442d18
 800b984:	3ff921fb 	.word	0x3ff921fb
 800b988:	54442d18 	.word	0x54442d18
 800b98c:	3fe921fb 	.word	0x3fe921fb
 800b990:	0800d290 	.word	0x0800d290
 800b994:	0800d2a8 	.word	0x0800d2a8
 800b998:	54442d18 	.word	0x54442d18
 800b99c:	c00921fb 	.word	0xc00921fb
 800b9a0:	54442d18 	.word	0x54442d18
 800b9a4:	bff921fb 	.word	0xbff921fb
 800b9a8:	7ff00000 	.word	0x7ff00000
 800b9ac:	00000000 	.word	0x00000000

0800b9b0 <__ieee754_rem_pio2>:
 800b9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9b4:	ed2d 8b02 	vpush	{d8}
 800b9b8:	ec55 4b10 	vmov	r4, r5, d0
 800b9bc:	4bca      	ldr	r3, [pc, #808]	; (800bce8 <__ieee754_rem_pio2+0x338>)
 800b9be:	b08b      	sub	sp, #44	; 0x2c
 800b9c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b9c4:	4598      	cmp	r8, r3
 800b9c6:	4682      	mov	sl, r0
 800b9c8:	9502      	str	r5, [sp, #8]
 800b9ca:	dc08      	bgt.n	800b9de <__ieee754_rem_pio2+0x2e>
 800b9cc:	2200      	movs	r2, #0
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	ed80 0b00 	vstr	d0, [r0]
 800b9d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b9d8:	f04f 0b00 	mov.w	fp, #0
 800b9dc:	e028      	b.n	800ba30 <__ieee754_rem_pio2+0x80>
 800b9de:	4bc3      	ldr	r3, [pc, #780]	; (800bcec <__ieee754_rem_pio2+0x33c>)
 800b9e0:	4598      	cmp	r8, r3
 800b9e2:	dc78      	bgt.n	800bad6 <__ieee754_rem_pio2+0x126>
 800b9e4:	9b02      	ldr	r3, [sp, #8]
 800b9e6:	4ec2      	ldr	r6, [pc, #776]	; (800bcf0 <__ieee754_rem_pio2+0x340>)
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	ee10 0a10 	vmov	r0, s0
 800b9ee:	a3b0      	add	r3, pc, #704	; (adr r3, 800bcb0 <__ieee754_rem_pio2+0x300>)
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	dd39      	ble.n	800ba6c <__ieee754_rem_pio2+0xbc>
 800b9f8:	f7f4 fc46 	bl	8000288 <__aeabi_dsub>
 800b9fc:	45b0      	cmp	r8, r6
 800b9fe:	4604      	mov	r4, r0
 800ba00:	460d      	mov	r5, r1
 800ba02:	d01b      	beq.n	800ba3c <__ieee754_rem_pio2+0x8c>
 800ba04:	a3ac      	add	r3, pc, #688	; (adr r3, 800bcb8 <__ieee754_rem_pio2+0x308>)
 800ba06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba0a:	f7f4 fc3d 	bl	8000288 <__aeabi_dsub>
 800ba0e:	4602      	mov	r2, r0
 800ba10:	460b      	mov	r3, r1
 800ba12:	e9ca 2300 	strd	r2, r3, [sl]
 800ba16:	4620      	mov	r0, r4
 800ba18:	4629      	mov	r1, r5
 800ba1a:	f7f4 fc35 	bl	8000288 <__aeabi_dsub>
 800ba1e:	a3a6      	add	r3, pc, #664	; (adr r3, 800bcb8 <__ieee754_rem_pio2+0x308>)
 800ba20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba24:	f7f4 fc30 	bl	8000288 <__aeabi_dsub>
 800ba28:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ba2c:	f04f 0b01 	mov.w	fp, #1
 800ba30:	4658      	mov	r0, fp
 800ba32:	b00b      	add	sp, #44	; 0x2c
 800ba34:	ecbd 8b02 	vpop	{d8}
 800ba38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba3c:	a3a0      	add	r3, pc, #640	; (adr r3, 800bcc0 <__ieee754_rem_pio2+0x310>)
 800ba3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba42:	f7f4 fc21 	bl	8000288 <__aeabi_dsub>
 800ba46:	a3a0      	add	r3, pc, #640	; (adr r3, 800bcc8 <__ieee754_rem_pio2+0x318>)
 800ba48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4c:	4604      	mov	r4, r0
 800ba4e:	460d      	mov	r5, r1
 800ba50:	f7f4 fc1a 	bl	8000288 <__aeabi_dsub>
 800ba54:	4602      	mov	r2, r0
 800ba56:	460b      	mov	r3, r1
 800ba58:	e9ca 2300 	strd	r2, r3, [sl]
 800ba5c:	4620      	mov	r0, r4
 800ba5e:	4629      	mov	r1, r5
 800ba60:	f7f4 fc12 	bl	8000288 <__aeabi_dsub>
 800ba64:	a398      	add	r3, pc, #608	; (adr r3, 800bcc8 <__ieee754_rem_pio2+0x318>)
 800ba66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba6a:	e7db      	b.n	800ba24 <__ieee754_rem_pio2+0x74>
 800ba6c:	f7f4 fc0e 	bl	800028c <__adddf3>
 800ba70:	45b0      	cmp	r8, r6
 800ba72:	4604      	mov	r4, r0
 800ba74:	460d      	mov	r5, r1
 800ba76:	d016      	beq.n	800baa6 <__ieee754_rem_pio2+0xf6>
 800ba78:	a38f      	add	r3, pc, #572	; (adr r3, 800bcb8 <__ieee754_rem_pio2+0x308>)
 800ba7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7e:	f7f4 fc05 	bl	800028c <__adddf3>
 800ba82:	4602      	mov	r2, r0
 800ba84:	460b      	mov	r3, r1
 800ba86:	e9ca 2300 	strd	r2, r3, [sl]
 800ba8a:	4620      	mov	r0, r4
 800ba8c:	4629      	mov	r1, r5
 800ba8e:	f7f4 fbfb 	bl	8000288 <__aeabi_dsub>
 800ba92:	a389      	add	r3, pc, #548	; (adr r3, 800bcb8 <__ieee754_rem_pio2+0x308>)
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f7f4 fbf8 	bl	800028c <__adddf3>
 800ba9c:	f04f 3bff 	mov.w	fp, #4294967295
 800baa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800baa4:	e7c4      	b.n	800ba30 <__ieee754_rem_pio2+0x80>
 800baa6:	a386      	add	r3, pc, #536	; (adr r3, 800bcc0 <__ieee754_rem_pio2+0x310>)
 800baa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baac:	f7f4 fbee 	bl	800028c <__adddf3>
 800bab0:	a385      	add	r3, pc, #532	; (adr r3, 800bcc8 <__ieee754_rem_pio2+0x318>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	4604      	mov	r4, r0
 800bab8:	460d      	mov	r5, r1
 800baba:	f7f4 fbe7 	bl	800028c <__adddf3>
 800babe:	4602      	mov	r2, r0
 800bac0:	460b      	mov	r3, r1
 800bac2:	e9ca 2300 	strd	r2, r3, [sl]
 800bac6:	4620      	mov	r0, r4
 800bac8:	4629      	mov	r1, r5
 800baca:	f7f4 fbdd 	bl	8000288 <__aeabi_dsub>
 800bace:	a37e      	add	r3, pc, #504	; (adr r3, 800bcc8 <__ieee754_rem_pio2+0x318>)
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	e7e0      	b.n	800ba98 <__ieee754_rem_pio2+0xe8>
 800bad6:	4b87      	ldr	r3, [pc, #540]	; (800bcf4 <__ieee754_rem_pio2+0x344>)
 800bad8:	4598      	cmp	r8, r3
 800bada:	f300 80d9 	bgt.w	800bc90 <__ieee754_rem_pio2+0x2e0>
 800bade:	f001 f89f 	bl	800cc20 <fabs>
 800bae2:	ec55 4b10 	vmov	r4, r5, d0
 800bae6:	ee10 0a10 	vmov	r0, s0
 800baea:	a379      	add	r3, pc, #484	; (adr r3, 800bcd0 <__ieee754_rem_pio2+0x320>)
 800baec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baf0:	4629      	mov	r1, r5
 800baf2:	f7f4 fd81 	bl	80005f8 <__aeabi_dmul>
 800baf6:	4b80      	ldr	r3, [pc, #512]	; (800bcf8 <__ieee754_rem_pio2+0x348>)
 800baf8:	2200      	movs	r2, #0
 800bafa:	f7f4 fbc7 	bl	800028c <__adddf3>
 800bafe:	f7f5 f82b 	bl	8000b58 <__aeabi_d2iz>
 800bb02:	4683      	mov	fp, r0
 800bb04:	f7f4 fd0e 	bl	8000524 <__aeabi_i2d>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	ec43 2b18 	vmov	d8, r2, r3
 800bb10:	a367      	add	r3, pc, #412	; (adr r3, 800bcb0 <__ieee754_rem_pio2+0x300>)
 800bb12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb16:	f7f4 fd6f 	bl	80005f8 <__aeabi_dmul>
 800bb1a:	4602      	mov	r2, r0
 800bb1c:	460b      	mov	r3, r1
 800bb1e:	4620      	mov	r0, r4
 800bb20:	4629      	mov	r1, r5
 800bb22:	f7f4 fbb1 	bl	8000288 <__aeabi_dsub>
 800bb26:	a364      	add	r3, pc, #400	; (adr r3, 800bcb8 <__ieee754_rem_pio2+0x308>)
 800bb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb2c:	4606      	mov	r6, r0
 800bb2e:	460f      	mov	r7, r1
 800bb30:	ec51 0b18 	vmov	r0, r1, d8
 800bb34:	f7f4 fd60 	bl	80005f8 <__aeabi_dmul>
 800bb38:	f1bb 0f1f 	cmp.w	fp, #31
 800bb3c:	4604      	mov	r4, r0
 800bb3e:	460d      	mov	r5, r1
 800bb40:	dc0d      	bgt.n	800bb5e <__ieee754_rem_pio2+0x1ae>
 800bb42:	4b6e      	ldr	r3, [pc, #440]	; (800bcfc <__ieee754_rem_pio2+0x34c>)
 800bb44:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bb48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb4c:	4543      	cmp	r3, r8
 800bb4e:	d006      	beq.n	800bb5e <__ieee754_rem_pio2+0x1ae>
 800bb50:	4622      	mov	r2, r4
 800bb52:	462b      	mov	r3, r5
 800bb54:	4630      	mov	r0, r6
 800bb56:	4639      	mov	r1, r7
 800bb58:	f7f4 fb96 	bl	8000288 <__aeabi_dsub>
 800bb5c:	e00f      	b.n	800bb7e <__ieee754_rem_pio2+0x1ce>
 800bb5e:	462b      	mov	r3, r5
 800bb60:	4622      	mov	r2, r4
 800bb62:	4630      	mov	r0, r6
 800bb64:	4639      	mov	r1, r7
 800bb66:	f7f4 fb8f 	bl	8000288 <__aeabi_dsub>
 800bb6a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bb6e:	9303      	str	r3, [sp, #12]
 800bb70:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bb74:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bb78:	f1b8 0f10 	cmp.w	r8, #16
 800bb7c:	dc02      	bgt.n	800bb84 <__ieee754_rem_pio2+0x1d4>
 800bb7e:	e9ca 0100 	strd	r0, r1, [sl]
 800bb82:	e039      	b.n	800bbf8 <__ieee754_rem_pio2+0x248>
 800bb84:	a34e      	add	r3, pc, #312	; (adr r3, 800bcc0 <__ieee754_rem_pio2+0x310>)
 800bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8a:	ec51 0b18 	vmov	r0, r1, d8
 800bb8e:	f7f4 fd33 	bl	80005f8 <__aeabi_dmul>
 800bb92:	4604      	mov	r4, r0
 800bb94:	460d      	mov	r5, r1
 800bb96:	4602      	mov	r2, r0
 800bb98:	460b      	mov	r3, r1
 800bb9a:	4630      	mov	r0, r6
 800bb9c:	4639      	mov	r1, r7
 800bb9e:	f7f4 fb73 	bl	8000288 <__aeabi_dsub>
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	4680      	mov	r8, r0
 800bba8:	4689      	mov	r9, r1
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	f7f4 fb6b 	bl	8000288 <__aeabi_dsub>
 800bbb2:	4622      	mov	r2, r4
 800bbb4:	462b      	mov	r3, r5
 800bbb6:	f7f4 fb67 	bl	8000288 <__aeabi_dsub>
 800bbba:	a343      	add	r3, pc, #268	; (adr r3, 800bcc8 <__ieee754_rem_pio2+0x318>)
 800bbbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbc0:	4604      	mov	r4, r0
 800bbc2:	460d      	mov	r5, r1
 800bbc4:	ec51 0b18 	vmov	r0, r1, d8
 800bbc8:	f7f4 fd16 	bl	80005f8 <__aeabi_dmul>
 800bbcc:	4622      	mov	r2, r4
 800bbce:	462b      	mov	r3, r5
 800bbd0:	f7f4 fb5a 	bl	8000288 <__aeabi_dsub>
 800bbd4:	4602      	mov	r2, r0
 800bbd6:	460b      	mov	r3, r1
 800bbd8:	4604      	mov	r4, r0
 800bbda:	460d      	mov	r5, r1
 800bbdc:	4640      	mov	r0, r8
 800bbde:	4649      	mov	r1, r9
 800bbe0:	f7f4 fb52 	bl	8000288 <__aeabi_dsub>
 800bbe4:	9a03      	ldr	r2, [sp, #12]
 800bbe6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bbea:	1ad3      	subs	r3, r2, r3
 800bbec:	2b31      	cmp	r3, #49	; 0x31
 800bbee:	dc24      	bgt.n	800bc3a <__ieee754_rem_pio2+0x28a>
 800bbf0:	e9ca 0100 	strd	r0, r1, [sl]
 800bbf4:	4646      	mov	r6, r8
 800bbf6:	464f      	mov	r7, r9
 800bbf8:	e9da 8900 	ldrd	r8, r9, [sl]
 800bbfc:	4630      	mov	r0, r6
 800bbfe:	4642      	mov	r2, r8
 800bc00:	464b      	mov	r3, r9
 800bc02:	4639      	mov	r1, r7
 800bc04:	f7f4 fb40 	bl	8000288 <__aeabi_dsub>
 800bc08:	462b      	mov	r3, r5
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	f7f4 fb3c 	bl	8000288 <__aeabi_dsub>
 800bc10:	9b02      	ldr	r3, [sp, #8]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bc18:	f6bf af0a 	bge.w	800ba30 <__ieee754_rem_pio2+0x80>
 800bc1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800bc20:	f8ca 3004 	str.w	r3, [sl, #4]
 800bc24:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc28:	f8ca 8000 	str.w	r8, [sl]
 800bc2c:	f8ca 0008 	str.w	r0, [sl, #8]
 800bc30:	f8ca 300c 	str.w	r3, [sl, #12]
 800bc34:	f1cb 0b00 	rsb	fp, fp, #0
 800bc38:	e6fa      	b.n	800ba30 <__ieee754_rem_pio2+0x80>
 800bc3a:	a327      	add	r3, pc, #156	; (adr r3, 800bcd8 <__ieee754_rem_pio2+0x328>)
 800bc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc40:	ec51 0b18 	vmov	r0, r1, d8
 800bc44:	f7f4 fcd8 	bl	80005f8 <__aeabi_dmul>
 800bc48:	4604      	mov	r4, r0
 800bc4a:	460d      	mov	r5, r1
 800bc4c:	4602      	mov	r2, r0
 800bc4e:	460b      	mov	r3, r1
 800bc50:	4640      	mov	r0, r8
 800bc52:	4649      	mov	r1, r9
 800bc54:	f7f4 fb18 	bl	8000288 <__aeabi_dsub>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	460f      	mov	r7, r1
 800bc60:	4640      	mov	r0, r8
 800bc62:	4649      	mov	r1, r9
 800bc64:	f7f4 fb10 	bl	8000288 <__aeabi_dsub>
 800bc68:	4622      	mov	r2, r4
 800bc6a:	462b      	mov	r3, r5
 800bc6c:	f7f4 fb0c 	bl	8000288 <__aeabi_dsub>
 800bc70:	a31b      	add	r3, pc, #108	; (adr r3, 800bce0 <__ieee754_rem_pio2+0x330>)
 800bc72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc76:	4604      	mov	r4, r0
 800bc78:	460d      	mov	r5, r1
 800bc7a:	ec51 0b18 	vmov	r0, r1, d8
 800bc7e:	f7f4 fcbb 	bl	80005f8 <__aeabi_dmul>
 800bc82:	4622      	mov	r2, r4
 800bc84:	462b      	mov	r3, r5
 800bc86:	f7f4 faff 	bl	8000288 <__aeabi_dsub>
 800bc8a:	4604      	mov	r4, r0
 800bc8c:	460d      	mov	r5, r1
 800bc8e:	e75f      	b.n	800bb50 <__ieee754_rem_pio2+0x1a0>
 800bc90:	4b1b      	ldr	r3, [pc, #108]	; (800bd00 <__ieee754_rem_pio2+0x350>)
 800bc92:	4598      	cmp	r8, r3
 800bc94:	dd36      	ble.n	800bd04 <__ieee754_rem_pio2+0x354>
 800bc96:	ee10 2a10 	vmov	r2, s0
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	4620      	mov	r0, r4
 800bc9e:	4629      	mov	r1, r5
 800bca0:	f7f4 faf2 	bl	8000288 <__aeabi_dsub>
 800bca4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bca8:	e9ca 0100 	strd	r0, r1, [sl]
 800bcac:	e694      	b.n	800b9d8 <__ieee754_rem_pio2+0x28>
 800bcae:	bf00      	nop
 800bcb0:	54400000 	.word	0x54400000
 800bcb4:	3ff921fb 	.word	0x3ff921fb
 800bcb8:	1a626331 	.word	0x1a626331
 800bcbc:	3dd0b461 	.word	0x3dd0b461
 800bcc0:	1a600000 	.word	0x1a600000
 800bcc4:	3dd0b461 	.word	0x3dd0b461
 800bcc8:	2e037073 	.word	0x2e037073
 800bccc:	3ba3198a 	.word	0x3ba3198a
 800bcd0:	6dc9c883 	.word	0x6dc9c883
 800bcd4:	3fe45f30 	.word	0x3fe45f30
 800bcd8:	2e000000 	.word	0x2e000000
 800bcdc:	3ba3198a 	.word	0x3ba3198a
 800bce0:	252049c1 	.word	0x252049c1
 800bce4:	397b839a 	.word	0x397b839a
 800bce8:	3fe921fb 	.word	0x3fe921fb
 800bcec:	4002d97b 	.word	0x4002d97b
 800bcf0:	3ff921fb 	.word	0x3ff921fb
 800bcf4:	413921fb 	.word	0x413921fb
 800bcf8:	3fe00000 	.word	0x3fe00000
 800bcfc:	0800d2c0 	.word	0x0800d2c0
 800bd00:	7fefffff 	.word	0x7fefffff
 800bd04:	ea4f 5428 	mov.w	r4, r8, asr #20
 800bd08:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800bd0c:	ee10 0a10 	vmov	r0, s0
 800bd10:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800bd14:	ee10 6a10 	vmov	r6, s0
 800bd18:	460f      	mov	r7, r1
 800bd1a:	f7f4 ff1d 	bl	8000b58 <__aeabi_d2iz>
 800bd1e:	f7f4 fc01 	bl	8000524 <__aeabi_i2d>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4630      	mov	r0, r6
 800bd28:	4639      	mov	r1, r7
 800bd2a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bd2e:	f7f4 faab 	bl	8000288 <__aeabi_dsub>
 800bd32:	4b23      	ldr	r3, [pc, #140]	; (800bdc0 <__ieee754_rem_pio2+0x410>)
 800bd34:	2200      	movs	r2, #0
 800bd36:	f7f4 fc5f 	bl	80005f8 <__aeabi_dmul>
 800bd3a:	460f      	mov	r7, r1
 800bd3c:	4606      	mov	r6, r0
 800bd3e:	f7f4 ff0b 	bl	8000b58 <__aeabi_d2iz>
 800bd42:	f7f4 fbef 	bl	8000524 <__aeabi_i2d>
 800bd46:	4602      	mov	r2, r0
 800bd48:	460b      	mov	r3, r1
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	4639      	mov	r1, r7
 800bd4e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd52:	f7f4 fa99 	bl	8000288 <__aeabi_dsub>
 800bd56:	4b1a      	ldr	r3, [pc, #104]	; (800bdc0 <__ieee754_rem_pio2+0x410>)
 800bd58:	2200      	movs	r2, #0
 800bd5a:	f7f4 fc4d 	bl	80005f8 <__aeabi_dmul>
 800bd5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bd62:	ad04      	add	r5, sp, #16
 800bd64:	f04f 0803 	mov.w	r8, #3
 800bd68:	46a9      	mov	r9, r5
 800bd6a:	2600      	movs	r6, #0
 800bd6c:	2700      	movs	r7, #0
 800bd6e:	4632      	mov	r2, r6
 800bd70:	463b      	mov	r3, r7
 800bd72:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800bd76:	46c3      	mov	fp, r8
 800bd78:	3d08      	subs	r5, #8
 800bd7a:	f108 38ff 	add.w	r8, r8, #4294967295
 800bd7e:	f7f4 fea3 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	d1f3      	bne.n	800bd6e <__ieee754_rem_pio2+0x3be>
 800bd86:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <__ieee754_rem_pio2+0x414>)
 800bd88:	9301      	str	r3, [sp, #4]
 800bd8a:	2302      	movs	r3, #2
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	4622      	mov	r2, r4
 800bd90:	465b      	mov	r3, fp
 800bd92:	4651      	mov	r1, sl
 800bd94:	4648      	mov	r0, r9
 800bd96:	f000 f993 	bl	800c0c0 <__kernel_rem_pio2>
 800bd9a:	9b02      	ldr	r3, [sp, #8]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	4683      	mov	fp, r0
 800bda0:	f6bf ae46 	bge.w	800ba30 <__ieee754_rem_pio2+0x80>
 800bda4:	e9da 2100 	ldrd	r2, r1, [sl]
 800bda8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdac:	e9ca 2300 	strd	r2, r3, [sl]
 800bdb0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800bdb4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bdb8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800bdbc:	e73a      	b.n	800bc34 <__ieee754_rem_pio2+0x284>
 800bdbe:	bf00      	nop
 800bdc0:	41700000 	.word	0x41700000
 800bdc4:	0800d340 	.word	0x0800d340

0800bdc8 <__ieee754_sqrt>:
 800bdc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdcc:	ec55 4b10 	vmov	r4, r5, d0
 800bdd0:	4e55      	ldr	r6, [pc, #340]	; (800bf28 <__ieee754_sqrt+0x160>)
 800bdd2:	43ae      	bics	r6, r5
 800bdd4:	ee10 0a10 	vmov	r0, s0
 800bdd8:	ee10 3a10 	vmov	r3, s0
 800bddc:	462a      	mov	r2, r5
 800bdde:	4629      	mov	r1, r5
 800bde0:	d110      	bne.n	800be04 <__ieee754_sqrt+0x3c>
 800bde2:	ee10 2a10 	vmov	r2, s0
 800bde6:	462b      	mov	r3, r5
 800bde8:	f7f4 fc06 	bl	80005f8 <__aeabi_dmul>
 800bdec:	4602      	mov	r2, r0
 800bdee:	460b      	mov	r3, r1
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	4629      	mov	r1, r5
 800bdf4:	f7f4 fa4a 	bl	800028c <__adddf3>
 800bdf8:	4604      	mov	r4, r0
 800bdfa:	460d      	mov	r5, r1
 800bdfc:	ec45 4b10 	vmov	d0, r4, r5
 800be00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be04:	2d00      	cmp	r5, #0
 800be06:	dc10      	bgt.n	800be2a <__ieee754_sqrt+0x62>
 800be08:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800be0c:	4330      	orrs	r0, r6
 800be0e:	d0f5      	beq.n	800bdfc <__ieee754_sqrt+0x34>
 800be10:	b15d      	cbz	r5, 800be2a <__ieee754_sqrt+0x62>
 800be12:	ee10 2a10 	vmov	r2, s0
 800be16:	462b      	mov	r3, r5
 800be18:	ee10 0a10 	vmov	r0, s0
 800be1c:	f7f4 fa34 	bl	8000288 <__aeabi_dsub>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	f7f4 fd12 	bl	800084c <__aeabi_ddiv>
 800be28:	e7e6      	b.n	800bdf8 <__ieee754_sqrt+0x30>
 800be2a:	1512      	asrs	r2, r2, #20
 800be2c:	d074      	beq.n	800bf18 <__ieee754_sqrt+0x150>
 800be2e:	07d4      	lsls	r4, r2, #31
 800be30:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800be34:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800be38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800be3c:	bf5e      	ittt	pl
 800be3e:	0fda      	lsrpl	r2, r3, #31
 800be40:	005b      	lslpl	r3, r3, #1
 800be42:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800be46:	2400      	movs	r4, #0
 800be48:	0fda      	lsrs	r2, r3, #31
 800be4a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800be4e:	107f      	asrs	r7, r7, #1
 800be50:	005b      	lsls	r3, r3, #1
 800be52:	2516      	movs	r5, #22
 800be54:	4620      	mov	r0, r4
 800be56:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800be5a:	1886      	adds	r6, r0, r2
 800be5c:	428e      	cmp	r6, r1
 800be5e:	bfde      	ittt	le
 800be60:	1b89      	suble	r1, r1, r6
 800be62:	18b0      	addle	r0, r6, r2
 800be64:	18a4      	addle	r4, r4, r2
 800be66:	0049      	lsls	r1, r1, #1
 800be68:	3d01      	subs	r5, #1
 800be6a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800be6e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800be72:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800be76:	d1f0      	bne.n	800be5a <__ieee754_sqrt+0x92>
 800be78:	462a      	mov	r2, r5
 800be7a:	f04f 0e20 	mov.w	lr, #32
 800be7e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800be82:	4281      	cmp	r1, r0
 800be84:	eb06 0c05 	add.w	ip, r6, r5
 800be88:	dc02      	bgt.n	800be90 <__ieee754_sqrt+0xc8>
 800be8a:	d113      	bne.n	800beb4 <__ieee754_sqrt+0xec>
 800be8c:	459c      	cmp	ip, r3
 800be8e:	d811      	bhi.n	800beb4 <__ieee754_sqrt+0xec>
 800be90:	f1bc 0f00 	cmp.w	ip, #0
 800be94:	eb0c 0506 	add.w	r5, ip, r6
 800be98:	da43      	bge.n	800bf22 <__ieee754_sqrt+0x15a>
 800be9a:	2d00      	cmp	r5, #0
 800be9c:	db41      	blt.n	800bf22 <__ieee754_sqrt+0x15a>
 800be9e:	f100 0801 	add.w	r8, r0, #1
 800bea2:	1a09      	subs	r1, r1, r0
 800bea4:	459c      	cmp	ip, r3
 800bea6:	bf88      	it	hi
 800bea8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800beac:	eba3 030c 	sub.w	r3, r3, ip
 800beb0:	4432      	add	r2, r6
 800beb2:	4640      	mov	r0, r8
 800beb4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800beb8:	f1be 0e01 	subs.w	lr, lr, #1
 800bebc:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bec0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bec4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bec8:	d1db      	bne.n	800be82 <__ieee754_sqrt+0xba>
 800beca:	430b      	orrs	r3, r1
 800becc:	d006      	beq.n	800bedc <__ieee754_sqrt+0x114>
 800bece:	1c50      	adds	r0, r2, #1
 800bed0:	bf13      	iteet	ne
 800bed2:	3201      	addne	r2, #1
 800bed4:	3401      	addeq	r4, #1
 800bed6:	4672      	moveq	r2, lr
 800bed8:	f022 0201 	bicne.w	r2, r2, #1
 800bedc:	1063      	asrs	r3, r4, #1
 800bede:	0852      	lsrs	r2, r2, #1
 800bee0:	07e1      	lsls	r1, r4, #31
 800bee2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bee6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800beea:	bf48      	it	mi
 800beec:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bef0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bef4:	4614      	mov	r4, r2
 800bef6:	e781      	b.n	800bdfc <__ieee754_sqrt+0x34>
 800bef8:	0ad9      	lsrs	r1, r3, #11
 800befa:	3815      	subs	r0, #21
 800befc:	055b      	lsls	r3, r3, #21
 800befe:	2900      	cmp	r1, #0
 800bf00:	d0fa      	beq.n	800bef8 <__ieee754_sqrt+0x130>
 800bf02:	02cd      	lsls	r5, r1, #11
 800bf04:	d50a      	bpl.n	800bf1c <__ieee754_sqrt+0x154>
 800bf06:	f1c2 0420 	rsb	r4, r2, #32
 800bf0a:	fa23 f404 	lsr.w	r4, r3, r4
 800bf0e:	1e55      	subs	r5, r2, #1
 800bf10:	4093      	lsls	r3, r2
 800bf12:	4321      	orrs	r1, r4
 800bf14:	1b42      	subs	r2, r0, r5
 800bf16:	e78a      	b.n	800be2e <__ieee754_sqrt+0x66>
 800bf18:	4610      	mov	r0, r2
 800bf1a:	e7f0      	b.n	800befe <__ieee754_sqrt+0x136>
 800bf1c:	0049      	lsls	r1, r1, #1
 800bf1e:	3201      	adds	r2, #1
 800bf20:	e7ef      	b.n	800bf02 <__ieee754_sqrt+0x13a>
 800bf22:	4680      	mov	r8, r0
 800bf24:	e7bd      	b.n	800bea2 <__ieee754_sqrt+0xda>
 800bf26:	bf00      	nop
 800bf28:	7ff00000 	.word	0x7ff00000
 800bf2c:	00000000 	.word	0x00000000

0800bf30 <__kernel_cos>:
 800bf30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf34:	ec57 6b10 	vmov	r6, r7, d0
 800bf38:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800bf3c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800bf40:	ed8d 1b00 	vstr	d1, [sp]
 800bf44:	da07      	bge.n	800bf56 <__kernel_cos+0x26>
 800bf46:	ee10 0a10 	vmov	r0, s0
 800bf4a:	4639      	mov	r1, r7
 800bf4c:	f7f4 fe04 	bl	8000b58 <__aeabi_d2iz>
 800bf50:	2800      	cmp	r0, #0
 800bf52:	f000 8088 	beq.w	800c066 <__kernel_cos+0x136>
 800bf56:	4632      	mov	r2, r6
 800bf58:	463b      	mov	r3, r7
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	4639      	mov	r1, r7
 800bf5e:	f7f4 fb4b 	bl	80005f8 <__aeabi_dmul>
 800bf62:	4b51      	ldr	r3, [pc, #324]	; (800c0a8 <__kernel_cos+0x178>)
 800bf64:	2200      	movs	r2, #0
 800bf66:	4604      	mov	r4, r0
 800bf68:	460d      	mov	r5, r1
 800bf6a:	f7f4 fb45 	bl	80005f8 <__aeabi_dmul>
 800bf6e:	a340      	add	r3, pc, #256	; (adr r3, 800c070 <__kernel_cos+0x140>)
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	4682      	mov	sl, r0
 800bf76:	468b      	mov	fp, r1
 800bf78:	4620      	mov	r0, r4
 800bf7a:	4629      	mov	r1, r5
 800bf7c:	f7f4 fb3c 	bl	80005f8 <__aeabi_dmul>
 800bf80:	a33d      	add	r3, pc, #244	; (adr r3, 800c078 <__kernel_cos+0x148>)
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	f7f4 f981 	bl	800028c <__adddf3>
 800bf8a:	4622      	mov	r2, r4
 800bf8c:	462b      	mov	r3, r5
 800bf8e:	f7f4 fb33 	bl	80005f8 <__aeabi_dmul>
 800bf92:	a33b      	add	r3, pc, #236	; (adr r3, 800c080 <__kernel_cos+0x150>)
 800bf94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf98:	f7f4 f976 	bl	8000288 <__aeabi_dsub>
 800bf9c:	4622      	mov	r2, r4
 800bf9e:	462b      	mov	r3, r5
 800bfa0:	f7f4 fb2a 	bl	80005f8 <__aeabi_dmul>
 800bfa4:	a338      	add	r3, pc, #224	; (adr r3, 800c088 <__kernel_cos+0x158>)
 800bfa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfaa:	f7f4 f96f 	bl	800028c <__adddf3>
 800bfae:	4622      	mov	r2, r4
 800bfb0:	462b      	mov	r3, r5
 800bfb2:	f7f4 fb21 	bl	80005f8 <__aeabi_dmul>
 800bfb6:	a336      	add	r3, pc, #216	; (adr r3, 800c090 <__kernel_cos+0x160>)
 800bfb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfbc:	f7f4 f964 	bl	8000288 <__aeabi_dsub>
 800bfc0:	4622      	mov	r2, r4
 800bfc2:	462b      	mov	r3, r5
 800bfc4:	f7f4 fb18 	bl	80005f8 <__aeabi_dmul>
 800bfc8:	a333      	add	r3, pc, #204	; (adr r3, 800c098 <__kernel_cos+0x168>)
 800bfca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfce:	f7f4 f95d 	bl	800028c <__adddf3>
 800bfd2:	4622      	mov	r2, r4
 800bfd4:	462b      	mov	r3, r5
 800bfd6:	f7f4 fb0f 	bl	80005f8 <__aeabi_dmul>
 800bfda:	4622      	mov	r2, r4
 800bfdc:	462b      	mov	r3, r5
 800bfde:	f7f4 fb0b 	bl	80005f8 <__aeabi_dmul>
 800bfe2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	460d      	mov	r5, r1
 800bfea:	4630      	mov	r0, r6
 800bfec:	4639      	mov	r1, r7
 800bfee:	f7f4 fb03 	bl	80005f8 <__aeabi_dmul>
 800bff2:	460b      	mov	r3, r1
 800bff4:	4602      	mov	r2, r0
 800bff6:	4629      	mov	r1, r5
 800bff8:	4620      	mov	r0, r4
 800bffa:	f7f4 f945 	bl	8000288 <__aeabi_dsub>
 800bffe:	4b2b      	ldr	r3, [pc, #172]	; (800c0ac <__kernel_cos+0x17c>)
 800c000:	4598      	cmp	r8, r3
 800c002:	4606      	mov	r6, r0
 800c004:	460f      	mov	r7, r1
 800c006:	dc10      	bgt.n	800c02a <__kernel_cos+0xfa>
 800c008:	4602      	mov	r2, r0
 800c00a:	460b      	mov	r3, r1
 800c00c:	4650      	mov	r0, sl
 800c00e:	4659      	mov	r1, fp
 800c010:	f7f4 f93a 	bl	8000288 <__aeabi_dsub>
 800c014:	460b      	mov	r3, r1
 800c016:	4926      	ldr	r1, [pc, #152]	; (800c0b0 <__kernel_cos+0x180>)
 800c018:	4602      	mov	r2, r0
 800c01a:	2000      	movs	r0, #0
 800c01c:	f7f4 f934 	bl	8000288 <__aeabi_dsub>
 800c020:	ec41 0b10 	vmov	d0, r0, r1
 800c024:	b003      	add	sp, #12
 800c026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c02a:	4b22      	ldr	r3, [pc, #136]	; (800c0b4 <__kernel_cos+0x184>)
 800c02c:	4920      	ldr	r1, [pc, #128]	; (800c0b0 <__kernel_cos+0x180>)
 800c02e:	4598      	cmp	r8, r3
 800c030:	bfcc      	ite	gt
 800c032:	4d21      	ldrgt	r5, [pc, #132]	; (800c0b8 <__kernel_cos+0x188>)
 800c034:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c038:	2400      	movs	r4, #0
 800c03a:	4622      	mov	r2, r4
 800c03c:	462b      	mov	r3, r5
 800c03e:	2000      	movs	r0, #0
 800c040:	f7f4 f922 	bl	8000288 <__aeabi_dsub>
 800c044:	4622      	mov	r2, r4
 800c046:	4680      	mov	r8, r0
 800c048:	4689      	mov	r9, r1
 800c04a:	462b      	mov	r3, r5
 800c04c:	4650      	mov	r0, sl
 800c04e:	4659      	mov	r1, fp
 800c050:	f7f4 f91a 	bl	8000288 <__aeabi_dsub>
 800c054:	4632      	mov	r2, r6
 800c056:	463b      	mov	r3, r7
 800c058:	f7f4 f916 	bl	8000288 <__aeabi_dsub>
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4640      	mov	r0, r8
 800c062:	4649      	mov	r1, r9
 800c064:	e7da      	b.n	800c01c <__kernel_cos+0xec>
 800c066:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c0a0 <__kernel_cos+0x170>
 800c06a:	e7db      	b.n	800c024 <__kernel_cos+0xf4>
 800c06c:	f3af 8000 	nop.w
 800c070:	be8838d4 	.word	0xbe8838d4
 800c074:	bda8fae9 	.word	0xbda8fae9
 800c078:	bdb4b1c4 	.word	0xbdb4b1c4
 800c07c:	3e21ee9e 	.word	0x3e21ee9e
 800c080:	809c52ad 	.word	0x809c52ad
 800c084:	3e927e4f 	.word	0x3e927e4f
 800c088:	19cb1590 	.word	0x19cb1590
 800c08c:	3efa01a0 	.word	0x3efa01a0
 800c090:	16c15177 	.word	0x16c15177
 800c094:	3f56c16c 	.word	0x3f56c16c
 800c098:	5555554c 	.word	0x5555554c
 800c09c:	3fa55555 	.word	0x3fa55555
 800c0a0:	00000000 	.word	0x00000000
 800c0a4:	3ff00000 	.word	0x3ff00000
 800c0a8:	3fe00000 	.word	0x3fe00000
 800c0ac:	3fd33332 	.word	0x3fd33332
 800c0b0:	3ff00000 	.word	0x3ff00000
 800c0b4:	3fe90000 	.word	0x3fe90000
 800c0b8:	3fd20000 	.word	0x3fd20000
 800c0bc:	00000000 	.word	0x00000000

0800c0c0 <__kernel_rem_pio2>:
 800c0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c4:	ed2d 8b02 	vpush	{d8}
 800c0c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c0cc:	f112 0f14 	cmn.w	r2, #20
 800c0d0:	9308      	str	r3, [sp, #32]
 800c0d2:	9101      	str	r1, [sp, #4]
 800c0d4:	4bc4      	ldr	r3, [pc, #784]	; (800c3e8 <__kernel_rem_pio2+0x328>)
 800c0d6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c0d8:	900b      	str	r0, [sp, #44]	; 0x2c
 800c0da:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c0de:	9302      	str	r3, [sp, #8]
 800c0e0:	9b08      	ldr	r3, [sp, #32]
 800c0e2:	f103 33ff 	add.w	r3, r3, #4294967295
 800c0e6:	bfa8      	it	ge
 800c0e8:	1ed4      	subge	r4, r2, #3
 800c0ea:	9306      	str	r3, [sp, #24]
 800c0ec:	bfb2      	itee	lt
 800c0ee:	2400      	movlt	r4, #0
 800c0f0:	2318      	movge	r3, #24
 800c0f2:	fb94 f4f3 	sdivge	r4, r4, r3
 800c0f6:	f06f 0317 	mvn.w	r3, #23
 800c0fa:	fb04 3303 	mla	r3, r4, r3, r3
 800c0fe:	eb03 0a02 	add.w	sl, r3, r2
 800c102:	9b02      	ldr	r3, [sp, #8]
 800c104:	9a06      	ldr	r2, [sp, #24]
 800c106:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c3d8 <__kernel_rem_pio2+0x318>
 800c10a:	eb03 0802 	add.w	r8, r3, r2
 800c10e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c110:	1aa7      	subs	r7, r4, r2
 800c112:	ae22      	add	r6, sp, #136	; 0x88
 800c114:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c118:	2500      	movs	r5, #0
 800c11a:	4545      	cmp	r5, r8
 800c11c:	dd13      	ble.n	800c146 <__kernel_rem_pio2+0x86>
 800c11e:	9b08      	ldr	r3, [sp, #32]
 800c120:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c3d8 <__kernel_rem_pio2+0x318>
 800c124:	aa22      	add	r2, sp, #136	; 0x88
 800c126:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c12a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c12e:	f04f 0800 	mov.w	r8, #0
 800c132:	9b02      	ldr	r3, [sp, #8]
 800c134:	4598      	cmp	r8, r3
 800c136:	dc2f      	bgt.n	800c198 <__kernel_rem_pio2+0xd8>
 800c138:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c13c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c140:	462f      	mov	r7, r5
 800c142:	2600      	movs	r6, #0
 800c144:	e01b      	b.n	800c17e <__kernel_rem_pio2+0xbe>
 800c146:	42ef      	cmn	r7, r5
 800c148:	d407      	bmi.n	800c15a <__kernel_rem_pio2+0x9a>
 800c14a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c14e:	f7f4 f9e9 	bl	8000524 <__aeabi_i2d>
 800c152:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c156:	3501      	adds	r5, #1
 800c158:	e7df      	b.n	800c11a <__kernel_rem_pio2+0x5a>
 800c15a:	ec51 0b18 	vmov	r0, r1, d8
 800c15e:	e7f8      	b.n	800c152 <__kernel_rem_pio2+0x92>
 800c160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c164:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c168:	f7f4 fa46 	bl	80005f8 <__aeabi_dmul>
 800c16c:	4602      	mov	r2, r0
 800c16e:	460b      	mov	r3, r1
 800c170:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c174:	f7f4 f88a 	bl	800028c <__adddf3>
 800c178:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c17c:	3601      	adds	r6, #1
 800c17e:	9b06      	ldr	r3, [sp, #24]
 800c180:	429e      	cmp	r6, r3
 800c182:	f1a7 0708 	sub.w	r7, r7, #8
 800c186:	ddeb      	ble.n	800c160 <__kernel_rem_pio2+0xa0>
 800c188:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c18c:	f108 0801 	add.w	r8, r8, #1
 800c190:	ecab 7b02 	vstmia	fp!, {d7}
 800c194:	3508      	adds	r5, #8
 800c196:	e7cc      	b.n	800c132 <__kernel_rem_pio2+0x72>
 800c198:	9b02      	ldr	r3, [sp, #8]
 800c19a:	aa0e      	add	r2, sp, #56	; 0x38
 800c19c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c1a0:	930d      	str	r3, [sp, #52]	; 0x34
 800c1a2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c1a4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c1a8:	9c02      	ldr	r4, [sp, #8]
 800c1aa:	930c      	str	r3, [sp, #48]	; 0x30
 800c1ac:	00e3      	lsls	r3, r4, #3
 800c1ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c1b0:	ab9a      	add	r3, sp, #616	; 0x268
 800c1b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c1b6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c1ba:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c1be:	ab72      	add	r3, sp, #456	; 0x1c8
 800c1c0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c1c4:	46c3      	mov	fp, r8
 800c1c6:	46a1      	mov	r9, r4
 800c1c8:	f1b9 0f00 	cmp.w	r9, #0
 800c1cc:	f1a5 0508 	sub.w	r5, r5, #8
 800c1d0:	dc77      	bgt.n	800c2c2 <__kernel_rem_pio2+0x202>
 800c1d2:	ec47 6b10 	vmov	d0, r6, r7
 800c1d6:	4650      	mov	r0, sl
 800c1d8:	f000 fdae 	bl	800cd38 <scalbn>
 800c1dc:	ec57 6b10 	vmov	r6, r7, d0
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c1e6:	ee10 0a10 	vmov	r0, s0
 800c1ea:	4639      	mov	r1, r7
 800c1ec:	f7f4 fa04 	bl	80005f8 <__aeabi_dmul>
 800c1f0:	ec41 0b10 	vmov	d0, r0, r1
 800c1f4:	f000 fd20 	bl	800cc38 <floor>
 800c1f8:	4b7c      	ldr	r3, [pc, #496]	; (800c3ec <__kernel_rem_pio2+0x32c>)
 800c1fa:	ec51 0b10 	vmov	r0, r1, d0
 800c1fe:	2200      	movs	r2, #0
 800c200:	f7f4 f9fa 	bl	80005f8 <__aeabi_dmul>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4630      	mov	r0, r6
 800c20a:	4639      	mov	r1, r7
 800c20c:	f7f4 f83c 	bl	8000288 <__aeabi_dsub>
 800c210:	460f      	mov	r7, r1
 800c212:	4606      	mov	r6, r0
 800c214:	f7f4 fca0 	bl	8000b58 <__aeabi_d2iz>
 800c218:	9004      	str	r0, [sp, #16]
 800c21a:	f7f4 f983 	bl	8000524 <__aeabi_i2d>
 800c21e:	4602      	mov	r2, r0
 800c220:	460b      	mov	r3, r1
 800c222:	4630      	mov	r0, r6
 800c224:	4639      	mov	r1, r7
 800c226:	f7f4 f82f 	bl	8000288 <__aeabi_dsub>
 800c22a:	f1ba 0f00 	cmp.w	sl, #0
 800c22e:	4606      	mov	r6, r0
 800c230:	460f      	mov	r7, r1
 800c232:	dd6d      	ble.n	800c310 <__kernel_rem_pio2+0x250>
 800c234:	1e62      	subs	r2, r4, #1
 800c236:	ab0e      	add	r3, sp, #56	; 0x38
 800c238:	9d04      	ldr	r5, [sp, #16]
 800c23a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c23e:	f1ca 0118 	rsb	r1, sl, #24
 800c242:	fa40 f301 	asr.w	r3, r0, r1
 800c246:	441d      	add	r5, r3
 800c248:	408b      	lsls	r3, r1
 800c24a:	1ac0      	subs	r0, r0, r3
 800c24c:	ab0e      	add	r3, sp, #56	; 0x38
 800c24e:	9504      	str	r5, [sp, #16]
 800c250:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c254:	f1ca 0317 	rsb	r3, sl, #23
 800c258:	fa40 fb03 	asr.w	fp, r0, r3
 800c25c:	f1bb 0f00 	cmp.w	fp, #0
 800c260:	dd65      	ble.n	800c32e <__kernel_rem_pio2+0x26e>
 800c262:	9b04      	ldr	r3, [sp, #16]
 800c264:	2200      	movs	r2, #0
 800c266:	3301      	adds	r3, #1
 800c268:	9304      	str	r3, [sp, #16]
 800c26a:	4615      	mov	r5, r2
 800c26c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c270:	4294      	cmp	r4, r2
 800c272:	f300 809c 	bgt.w	800c3ae <__kernel_rem_pio2+0x2ee>
 800c276:	f1ba 0f00 	cmp.w	sl, #0
 800c27a:	dd07      	ble.n	800c28c <__kernel_rem_pio2+0x1cc>
 800c27c:	f1ba 0f01 	cmp.w	sl, #1
 800c280:	f000 80c0 	beq.w	800c404 <__kernel_rem_pio2+0x344>
 800c284:	f1ba 0f02 	cmp.w	sl, #2
 800c288:	f000 80c6 	beq.w	800c418 <__kernel_rem_pio2+0x358>
 800c28c:	f1bb 0f02 	cmp.w	fp, #2
 800c290:	d14d      	bne.n	800c32e <__kernel_rem_pio2+0x26e>
 800c292:	4632      	mov	r2, r6
 800c294:	463b      	mov	r3, r7
 800c296:	4956      	ldr	r1, [pc, #344]	; (800c3f0 <__kernel_rem_pio2+0x330>)
 800c298:	2000      	movs	r0, #0
 800c29a:	f7f3 fff5 	bl	8000288 <__aeabi_dsub>
 800c29e:	4606      	mov	r6, r0
 800c2a0:	460f      	mov	r7, r1
 800c2a2:	2d00      	cmp	r5, #0
 800c2a4:	d043      	beq.n	800c32e <__kernel_rem_pio2+0x26e>
 800c2a6:	4650      	mov	r0, sl
 800c2a8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c3e0 <__kernel_rem_pio2+0x320>
 800c2ac:	f000 fd44 	bl	800cd38 <scalbn>
 800c2b0:	4630      	mov	r0, r6
 800c2b2:	4639      	mov	r1, r7
 800c2b4:	ec53 2b10 	vmov	r2, r3, d0
 800c2b8:	f7f3 ffe6 	bl	8000288 <__aeabi_dsub>
 800c2bc:	4606      	mov	r6, r0
 800c2be:	460f      	mov	r7, r1
 800c2c0:	e035      	b.n	800c32e <__kernel_rem_pio2+0x26e>
 800c2c2:	4b4c      	ldr	r3, [pc, #304]	; (800c3f4 <__kernel_rem_pio2+0x334>)
 800c2c4:	2200      	movs	r2, #0
 800c2c6:	4630      	mov	r0, r6
 800c2c8:	4639      	mov	r1, r7
 800c2ca:	f7f4 f995 	bl	80005f8 <__aeabi_dmul>
 800c2ce:	f7f4 fc43 	bl	8000b58 <__aeabi_d2iz>
 800c2d2:	f7f4 f927 	bl	8000524 <__aeabi_i2d>
 800c2d6:	4602      	mov	r2, r0
 800c2d8:	460b      	mov	r3, r1
 800c2da:	ec43 2b18 	vmov	d8, r2, r3
 800c2de:	4b46      	ldr	r3, [pc, #280]	; (800c3f8 <__kernel_rem_pio2+0x338>)
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	f7f4 f989 	bl	80005f8 <__aeabi_dmul>
 800c2e6:	4602      	mov	r2, r0
 800c2e8:	460b      	mov	r3, r1
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	4639      	mov	r1, r7
 800c2ee:	f7f3 ffcb 	bl	8000288 <__aeabi_dsub>
 800c2f2:	f7f4 fc31 	bl	8000b58 <__aeabi_d2iz>
 800c2f6:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2fa:	f84b 0b04 	str.w	r0, [fp], #4
 800c2fe:	ec51 0b18 	vmov	r0, r1, d8
 800c302:	f7f3 ffc3 	bl	800028c <__adddf3>
 800c306:	f109 39ff 	add.w	r9, r9, #4294967295
 800c30a:	4606      	mov	r6, r0
 800c30c:	460f      	mov	r7, r1
 800c30e:	e75b      	b.n	800c1c8 <__kernel_rem_pio2+0x108>
 800c310:	d106      	bne.n	800c320 <__kernel_rem_pio2+0x260>
 800c312:	1e63      	subs	r3, r4, #1
 800c314:	aa0e      	add	r2, sp, #56	; 0x38
 800c316:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c31a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c31e:	e79d      	b.n	800c25c <__kernel_rem_pio2+0x19c>
 800c320:	4b36      	ldr	r3, [pc, #216]	; (800c3fc <__kernel_rem_pio2+0x33c>)
 800c322:	2200      	movs	r2, #0
 800c324:	f7f4 fbee 	bl	8000b04 <__aeabi_dcmpge>
 800c328:	2800      	cmp	r0, #0
 800c32a:	d13d      	bne.n	800c3a8 <__kernel_rem_pio2+0x2e8>
 800c32c:	4683      	mov	fp, r0
 800c32e:	2200      	movs	r2, #0
 800c330:	2300      	movs	r3, #0
 800c332:	4630      	mov	r0, r6
 800c334:	4639      	mov	r1, r7
 800c336:	f7f4 fbc7 	bl	8000ac8 <__aeabi_dcmpeq>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	f000 80c0 	beq.w	800c4c0 <__kernel_rem_pio2+0x400>
 800c340:	1e65      	subs	r5, r4, #1
 800c342:	462b      	mov	r3, r5
 800c344:	2200      	movs	r2, #0
 800c346:	9902      	ldr	r1, [sp, #8]
 800c348:	428b      	cmp	r3, r1
 800c34a:	da6c      	bge.n	800c426 <__kernel_rem_pio2+0x366>
 800c34c:	2a00      	cmp	r2, #0
 800c34e:	f000 8089 	beq.w	800c464 <__kernel_rem_pio2+0x3a4>
 800c352:	ab0e      	add	r3, sp, #56	; 0x38
 800c354:	f1aa 0a18 	sub.w	sl, sl, #24
 800c358:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	f000 80ad 	beq.w	800c4bc <__kernel_rem_pio2+0x3fc>
 800c362:	4650      	mov	r0, sl
 800c364:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c3e0 <__kernel_rem_pio2+0x320>
 800c368:	f000 fce6 	bl	800cd38 <scalbn>
 800c36c:	ab9a      	add	r3, sp, #616	; 0x268
 800c36e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c372:	ec57 6b10 	vmov	r6, r7, d0
 800c376:	00ec      	lsls	r4, r5, #3
 800c378:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c37c:	46aa      	mov	sl, r5
 800c37e:	f1ba 0f00 	cmp.w	sl, #0
 800c382:	f280 80d6 	bge.w	800c532 <__kernel_rem_pio2+0x472>
 800c386:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c3d8 <__kernel_rem_pio2+0x318>
 800c38a:	462e      	mov	r6, r5
 800c38c:	2e00      	cmp	r6, #0
 800c38e:	f2c0 8104 	blt.w	800c59a <__kernel_rem_pio2+0x4da>
 800c392:	ab72      	add	r3, sp, #456	; 0x1c8
 800c394:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c398:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c400 <__kernel_rem_pio2+0x340>
 800c39c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c3a0:	f04f 0800 	mov.w	r8, #0
 800c3a4:	1baf      	subs	r7, r5, r6
 800c3a6:	e0ea      	b.n	800c57e <__kernel_rem_pio2+0x4be>
 800c3a8:	f04f 0b02 	mov.w	fp, #2
 800c3ac:	e759      	b.n	800c262 <__kernel_rem_pio2+0x1a2>
 800c3ae:	f8d8 3000 	ldr.w	r3, [r8]
 800c3b2:	b955      	cbnz	r5, 800c3ca <__kernel_rem_pio2+0x30a>
 800c3b4:	b123      	cbz	r3, 800c3c0 <__kernel_rem_pio2+0x300>
 800c3b6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c3ba:	f8c8 3000 	str.w	r3, [r8]
 800c3be:	2301      	movs	r3, #1
 800c3c0:	3201      	adds	r2, #1
 800c3c2:	f108 0804 	add.w	r8, r8, #4
 800c3c6:	461d      	mov	r5, r3
 800c3c8:	e752      	b.n	800c270 <__kernel_rem_pio2+0x1b0>
 800c3ca:	1acb      	subs	r3, r1, r3
 800c3cc:	f8c8 3000 	str.w	r3, [r8]
 800c3d0:	462b      	mov	r3, r5
 800c3d2:	e7f5      	b.n	800c3c0 <__kernel_rem_pio2+0x300>
 800c3d4:	f3af 8000 	nop.w
	...
 800c3e4:	3ff00000 	.word	0x3ff00000
 800c3e8:	0800d488 	.word	0x0800d488
 800c3ec:	40200000 	.word	0x40200000
 800c3f0:	3ff00000 	.word	0x3ff00000
 800c3f4:	3e700000 	.word	0x3e700000
 800c3f8:	41700000 	.word	0x41700000
 800c3fc:	3fe00000 	.word	0x3fe00000
 800c400:	0800d448 	.word	0x0800d448
 800c404:	1e62      	subs	r2, r4, #1
 800c406:	ab0e      	add	r3, sp, #56	; 0x38
 800c408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c410:	a90e      	add	r1, sp, #56	; 0x38
 800c412:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c416:	e739      	b.n	800c28c <__kernel_rem_pio2+0x1cc>
 800c418:	1e62      	subs	r2, r4, #1
 800c41a:	ab0e      	add	r3, sp, #56	; 0x38
 800c41c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c420:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c424:	e7f4      	b.n	800c410 <__kernel_rem_pio2+0x350>
 800c426:	a90e      	add	r1, sp, #56	; 0x38
 800c428:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c42c:	3b01      	subs	r3, #1
 800c42e:	430a      	orrs	r2, r1
 800c430:	e789      	b.n	800c346 <__kernel_rem_pio2+0x286>
 800c432:	3301      	adds	r3, #1
 800c434:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c438:	2900      	cmp	r1, #0
 800c43a:	d0fa      	beq.n	800c432 <__kernel_rem_pio2+0x372>
 800c43c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c43e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c442:	446a      	add	r2, sp
 800c444:	3a98      	subs	r2, #152	; 0x98
 800c446:	920a      	str	r2, [sp, #40]	; 0x28
 800c448:	9a08      	ldr	r2, [sp, #32]
 800c44a:	18e3      	adds	r3, r4, r3
 800c44c:	18a5      	adds	r5, r4, r2
 800c44e:	aa22      	add	r2, sp, #136	; 0x88
 800c450:	f104 0801 	add.w	r8, r4, #1
 800c454:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c458:	9304      	str	r3, [sp, #16]
 800c45a:	9b04      	ldr	r3, [sp, #16]
 800c45c:	4543      	cmp	r3, r8
 800c45e:	da04      	bge.n	800c46a <__kernel_rem_pio2+0x3aa>
 800c460:	461c      	mov	r4, r3
 800c462:	e6a3      	b.n	800c1ac <__kernel_rem_pio2+0xec>
 800c464:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c466:	2301      	movs	r3, #1
 800c468:	e7e4      	b.n	800c434 <__kernel_rem_pio2+0x374>
 800c46a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c46c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c470:	f7f4 f858 	bl	8000524 <__aeabi_i2d>
 800c474:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c478:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c47a:	46ab      	mov	fp, r5
 800c47c:	461c      	mov	r4, r3
 800c47e:	f04f 0900 	mov.w	r9, #0
 800c482:	2600      	movs	r6, #0
 800c484:	2700      	movs	r7, #0
 800c486:	9b06      	ldr	r3, [sp, #24]
 800c488:	4599      	cmp	r9, r3
 800c48a:	dd06      	ble.n	800c49a <__kernel_rem_pio2+0x3da>
 800c48c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c48e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c492:	f108 0801 	add.w	r8, r8, #1
 800c496:	930a      	str	r3, [sp, #40]	; 0x28
 800c498:	e7df      	b.n	800c45a <__kernel_rem_pio2+0x39a>
 800c49a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c49e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c4a2:	f7f4 f8a9 	bl	80005f8 <__aeabi_dmul>
 800c4a6:	4602      	mov	r2, r0
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	4630      	mov	r0, r6
 800c4ac:	4639      	mov	r1, r7
 800c4ae:	f7f3 feed 	bl	800028c <__adddf3>
 800c4b2:	f109 0901 	add.w	r9, r9, #1
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	460f      	mov	r7, r1
 800c4ba:	e7e4      	b.n	800c486 <__kernel_rem_pio2+0x3c6>
 800c4bc:	3d01      	subs	r5, #1
 800c4be:	e748      	b.n	800c352 <__kernel_rem_pio2+0x292>
 800c4c0:	ec47 6b10 	vmov	d0, r6, r7
 800c4c4:	f1ca 0000 	rsb	r0, sl, #0
 800c4c8:	f000 fc36 	bl	800cd38 <scalbn>
 800c4cc:	ec57 6b10 	vmov	r6, r7, d0
 800c4d0:	4ba0      	ldr	r3, [pc, #640]	; (800c754 <__kernel_rem_pio2+0x694>)
 800c4d2:	ee10 0a10 	vmov	r0, s0
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	4639      	mov	r1, r7
 800c4da:	f7f4 fb13 	bl	8000b04 <__aeabi_dcmpge>
 800c4de:	b1f8      	cbz	r0, 800c520 <__kernel_rem_pio2+0x460>
 800c4e0:	4b9d      	ldr	r3, [pc, #628]	; (800c758 <__kernel_rem_pio2+0x698>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	4630      	mov	r0, r6
 800c4e6:	4639      	mov	r1, r7
 800c4e8:	f7f4 f886 	bl	80005f8 <__aeabi_dmul>
 800c4ec:	f7f4 fb34 	bl	8000b58 <__aeabi_d2iz>
 800c4f0:	4680      	mov	r8, r0
 800c4f2:	f7f4 f817 	bl	8000524 <__aeabi_i2d>
 800c4f6:	4b97      	ldr	r3, [pc, #604]	; (800c754 <__kernel_rem_pio2+0x694>)
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f7f4 f87d 	bl	80005f8 <__aeabi_dmul>
 800c4fe:	460b      	mov	r3, r1
 800c500:	4602      	mov	r2, r0
 800c502:	4639      	mov	r1, r7
 800c504:	4630      	mov	r0, r6
 800c506:	f7f3 febf 	bl	8000288 <__aeabi_dsub>
 800c50a:	f7f4 fb25 	bl	8000b58 <__aeabi_d2iz>
 800c50e:	1c65      	adds	r5, r4, #1
 800c510:	ab0e      	add	r3, sp, #56	; 0x38
 800c512:	f10a 0a18 	add.w	sl, sl, #24
 800c516:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c51a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c51e:	e720      	b.n	800c362 <__kernel_rem_pio2+0x2a2>
 800c520:	4630      	mov	r0, r6
 800c522:	4639      	mov	r1, r7
 800c524:	f7f4 fb18 	bl	8000b58 <__aeabi_d2iz>
 800c528:	ab0e      	add	r3, sp, #56	; 0x38
 800c52a:	4625      	mov	r5, r4
 800c52c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c530:	e717      	b.n	800c362 <__kernel_rem_pio2+0x2a2>
 800c532:	ab0e      	add	r3, sp, #56	; 0x38
 800c534:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c538:	f7f3 fff4 	bl	8000524 <__aeabi_i2d>
 800c53c:	4632      	mov	r2, r6
 800c53e:	463b      	mov	r3, r7
 800c540:	f7f4 f85a 	bl	80005f8 <__aeabi_dmul>
 800c544:	4b84      	ldr	r3, [pc, #528]	; (800c758 <__kernel_rem_pio2+0x698>)
 800c546:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c54a:	2200      	movs	r2, #0
 800c54c:	4630      	mov	r0, r6
 800c54e:	4639      	mov	r1, r7
 800c550:	f7f4 f852 	bl	80005f8 <__aeabi_dmul>
 800c554:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c558:	4606      	mov	r6, r0
 800c55a:	460f      	mov	r7, r1
 800c55c:	e70f      	b.n	800c37e <__kernel_rem_pio2+0x2be>
 800c55e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c562:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c566:	f7f4 f847 	bl	80005f8 <__aeabi_dmul>
 800c56a:	4602      	mov	r2, r0
 800c56c:	460b      	mov	r3, r1
 800c56e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c572:	f7f3 fe8b 	bl	800028c <__adddf3>
 800c576:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c57a:	f108 0801 	add.w	r8, r8, #1
 800c57e:	9b02      	ldr	r3, [sp, #8]
 800c580:	4598      	cmp	r8, r3
 800c582:	dc01      	bgt.n	800c588 <__kernel_rem_pio2+0x4c8>
 800c584:	45b8      	cmp	r8, r7
 800c586:	ddea      	ble.n	800c55e <__kernel_rem_pio2+0x49e>
 800c588:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c58c:	ab4a      	add	r3, sp, #296	; 0x128
 800c58e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800c592:	ed87 7b00 	vstr	d7, [r7]
 800c596:	3e01      	subs	r6, #1
 800c598:	e6f8      	b.n	800c38c <__kernel_rem_pio2+0x2cc>
 800c59a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c59c:	2b02      	cmp	r3, #2
 800c59e:	dc0b      	bgt.n	800c5b8 <__kernel_rem_pio2+0x4f8>
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	dc35      	bgt.n	800c610 <__kernel_rem_pio2+0x550>
 800c5a4:	d059      	beq.n	800c65a <__kernel_rem_pio2+0x59a>
 800c5a6:	9b04      	ldr	r3, [sp, #16]
 800c5a8:	f003 0007 	and.w	r0, r3, #7
 800c5ac:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800c5b0:	ecbd 8b02 	vpop	{d8}
 800c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d1f3      	bne.n	800c5a6 <__kernel_rem_pio2+0x4e6>
 800c5be:	ab4a      	add	r3, sp, #296	; 0x128
 800c5c0:	4423      	add	r3, r4
 800c5c2:	9306      	str	r3, [sp, #24]
 800c5c4:	461c      	mov	r4, r3
 800c5c6:	469a      	mov	sl, r3
 800c5c8:	9502      	str	r5, [sp, #8]
 800c5ca:	9b02      	ldr	r3, [sp, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	f1aa 0a08 	sub.w	sl, sl, #8
 800c5d2:	dc6b      	bgt.n	800c6ac <__kernel_rem_pio2+0x5ec>
 800c5d4:	46aa      	mov	sl, r5
 800c5d6:	f1ba 0f01 	cmp.w	sl, #1
 800c5da:	f1a4 0408 	sub.w	r4, r4, #8
 800c5de:	f300 8085 	bgt.w	800c6ec <__kernel_rem_pio2+0x62c>
 800c5e2:	9c06      	ldr	r4, [sp, #24]
 800c5e4:	2000      	movs	r0, #0
 800c5e6:	3408      	adds	r4, #8
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	2d01      	cmp	r5, #1
 800c5ec:	f300 809d 	bgt.w	800c72a <__kernel_rem_pio2+0x66a>
 800c5f0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800c5f4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800c5f8:	f1bb 0f00 	cmp.w	fp, #0
 800c5fc:	f040 809b 	bne.w	800c736 <__kernel_rem_pio2+0x676>
 800c600:	9b01      	ldr	r3, [sp, #4]
 800c602:	e9c3 5600 	strd	r5, r6, [r3]
 800c606:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800c60a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800c60e:	e7ca      	b.n	800c5a6 <__kernel_rem_pio2+0x4e6>
 800c610:	3408      	adds	r4, #8
 800c612:	ab4a      	add	r3, sp, #296	; 0x128
 800c614:	441c      	add	r4, r3
 800c616:	462e      	mov	r6, r5
 800c618:	2000      	movs	r0, #0
 800c61a:	2100      	movs	r1, #0
 800c61c:	2e00      	cmp	r6, #0
 800c61e:	da36      	bge.n	800c68e <__kernel_rem_pio2+0x5ce>
 800c620:	f1bb 0f00 	cmp.w	fp, #0
 800c624:	d039      	beq.n	800c69a <__kernel_rem_pio2+0x5da>
 800c626:	4602      	mov	r2, r0
 800c628:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c62c:	9c01      	ldr	r4, [sp, #4]
 800c62e:	e9c4 2300 	strd	r2, r3, [r4]
 800c632:	4602      	mov	r2, r0
 800c634:	460b      	mov	r3, r1
 800c636:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800c63a:	f7f3 fe25 	bl	8000288 <__aeabi_dsub>
 800c63e:	ae4c      	add	r6, sp, #304	; 0x130
 800c640:	2401      	movs	r4, #1
 800c642:	42a5      	cmp	r5, r4
 800c644:	da2c      	bge.n	800c6a0 <__kernel_rem_pio2+0x5e0>
 800c646:	f1bb 0f00 	cmp.w	fp, #0
 800c64a:	d002      	beq.n	800c652 <__kernel_rem_pio2+0x592>
 800c64c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c650:	4619      	mov	r1, r3
 800c652:	9b01      	ldr	r3, [sp, #4]
 800c654:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800c658:	e7a5      	b.n	800c5a6 <__kernel_rem_pio2+0x4e6>
 800c65a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800c65e:	eb0d 0403 	add.w	r4, sp, r3
 800c662:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800c666:	2000      	movs	r0, #0
 800c668:	2100      	movs	r1, #0
 800c66a:	2d00      	cmp	r5, #0
 800c66c:	da09      	bge.n	800c682 <__kernel_rem_pio2+0x5c2>
 800c66e:	f1bb 0f00 	cmp.w	fp, #0
 800c672:	d002      	beq.n	800c67a <__kernel_rem_pio2+0x5ba>
 800c674:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c678:	4619      	mov	r1, r3
 800c67a:	9b01      	ldr	r3, [sp, #4]
 800c67c:	e9c3 0100 	strd	r0, r1, [r3]
 800c680:	e791      	b.n	800c5a6 <__kernel_rem_pio2+0x4e6>
 800c682:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c686:	f7f3 fe01 	bl	800028c <__adddf3>
 800c68a:	3d01      	subs	r5, #1
 800c68c:	e7ed      	b.n	800c66a <__kernel_rem_pio2+0x5aa>
 800c68e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c692:	f7f3 fdfb 	bl	800028c <__adddf3>
 800c696:	3e01      	subs	r6, #1
 800c698:	e7c0      	b.n	800c61c <__kernel_rem_pio2+0x55c>
 800c69a:	4602      	mov	r2, r0
 800c69c:	460b      	mov	r3, r1
 800c69e:	e7c5      	b.n	800c62c <__kernel_rem_pio2+0x56c>
 800c6a0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c6a4:	f7f3 fdf2 	bl	800028c <__adddf3>
 800c6a8:	3401      	adds	r4, #1
 800c6aa:	e7ca      	b.n	800c642 <__kernel_rem_pio2+0x582>
 800c6ac:	e9da 8900 	ldrd	r8, r9, [sl]
 800c6b0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c6b4:	9b02      	ldr	r3, [sp, #8]
 800c6b6:	3b01      	subs	r3, #1
 800c6b8:	9302      	str	r3, [sp, #8]
 800c6ba:	4632      	mov	r2, r6
 800c6bc:	463b      	mov	r3, r7
 800c6be:	4640      	mov	r0, r8
 800c6c0:	4649      	mov	r1, r9
 800c6c2:	f7f3 fde3 	bl	800028c <__adddf3>
 800c6c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6ca:	4602      	mov	r2, r0
 800c6cc:	460b      	mov	r3, r1
 800c6ce:	4640      	mov	r0, r8
 800c6d0:	4649      	mov	r1, r9
 800c6d2:	f7f3 fdd9 	bl	8000288 <__aeabi_dsub>
 800c6d6:	4632      	mov	r2, r6
 800c6d8:	463b      	mov	r3, r7
 800c6da:	f7f3 fdd7 	bl	800028c <__adddf3>
 800c6de:	ed9d 7b08 	vldr	d7, [sp, #32]
 800c6e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c6e6:	ed8a 7b00 	vstr	d7, [sl]
 800c6ea:	e76e      	b.n	800c5ca <__kernel_rem_pio2+0x50a>
 800c6ec:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c6f0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c6f4:	4640      	mov	r0, r8
 800c6f6:	4632      	mov	r2, r6
 800c6f8:	463b      	mov	r3, r7
 800c6fa:	4649      	mov	r1, r9
 800c6fc:	f7f3 fdc6 	bl	800028c <__adddf3>
 800c700:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c704:	4602      	mov	r2, r0
 800c706:	460b      	mov	r3, r1
 800c708:	4640      	mov	r0, r8
 800c70a:	4649      	mov	r1, r9
 800c70c:	f7f3 fdbc 	bl	8000288 <__aeabi_dsub>
 800c710:	4632      	mov	r2, r6
 800c712:	463b      	mov	r3, r7
 800c714:	f7f3 fdba 	bl	800028c <__adddf3>
 800c718:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c71c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c720:	ed84 7b00 	vstr	d7, [r4]
 800c724:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c728:	e755      	b.n	800c5d6 <__kernel_rem_pio2+0x516>
 800c72a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c72e:	f7f3 fdad 	bl	800028c <__adddf3>
 800c732:	3d01      	subs	r5, #1
 800c734:	e759      	b.n	800c5ea <__kernel_rem_pio2+0x52a>
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	9a01      	ldr	r2, [sp, #4]
 800c73a:	601d      	str	r5, [r3, #0]
 800c73c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c740:	605c      	str	r4, [r3, #4]
 800c742:	609f      	str	r7, [r3, #8]
 800c744:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c748:	60d3      	str	r3, [r2, #12]
 800c74a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c74e:	6110      	str	r0, [r2, #16]
 800c750:	6153      	str	r3, [r2, #20]
 800c752:	e728      	b.n	800c5a6 <__kernel_rem_pio2+0x4e6>
 800c754:	41700000 	.word	0x41700000
 800c758:	3e700000 	.word	0x3e700000
 800c75c:	00000000 	.word	0x00000000

0800c760 <__kernel_sin>:
 800c760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c764:	ed2d 8b04 	vpush	{d8-d9}
 800c768:	eeb0 8a41 	vmov.f32	s16, s2
 800c76c:	eef0 8a61 	vmov.f32	s17, s3
 800c770:	ec55 4b10 	vmov	r4, r5, d0
 800c774:	b083      	sub	sp, #12
 800c776:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c77a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c77e:	9001      	str	r0, [sp, #4]
 800c780:	da06      	bge.n	800c790 <__kernel_sin+0x30>
 800c782:	ee10 0a10 	vmov	r0, s0
 800c786:	4629      	mov	r1, r5
 800c788:	f7f4 f9e6 	bl	8000b58 <__aeabi_d2iz>
 800c78c:	2800      	cmp	r0, #0
 800c78e:	d051      	beq.n	800c834 <__kernel_sin+0xd4>
 800c790:	4622      	mov	r2, r4
 800c792:	462b      	mov	r3, r5
 800c794:	4620      	mov	r0, r4
 800c796:	4629      	mov	r1, r5
 800c798:	f7f3 ff2e 	bl	80005f8 <__aeabi_dmul>
 800c79c:	4682      	mov	sl, r0
 800c79e:	468b      	mov	fp, r1
 800c7a0:	4602      	mov	r2, r0
 800c7a2:	460b      	mov	r3, r1
 800c7a4:	4620      	mov	r0, r4
 800c7a6:	4629      	mov	r1, r5
 800c7a8:	f7f3 ff26 	bl	80005f8 <__aeabi_dmul>
 800c7ac:	a341      	add	r3, pc, #260	; (adr r3, 800c8b4 <__kernel_sin+0x154>)
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	4680      	mov	r8, r0
 800c7b4:	4689      	mov	r9, r1
 800c7b6:	4650      	mov	r0, sl
 800c7b8:	4659      	mov	r1, fp
 800c7ba:	f7f3 ff1d 	bl	80005f8 <__aeabi_dmul>
 800c7be:	a33f      	add	r3, pc, #252	; (adr r3, 800c8bc <__kernel_sin+0x15c>)
 800c7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7c4:	f7f3 fd60 	bl	8000288 <__aeabi_dsub>
 800c7c8:	4652      	mov	r2, sl
 800c7ca:	465b      	mov	r3, fp
 800c7cc:	f7f3 ff14 	bl	80005f8 <__aeabi_dmul>
 800c7d0:	a33c      	add	r3, pc, #240	; (adr r3, 800c8c4 <__kernel_sin+0x164>)
 800c7d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7d6:	f7f3 fd59 	bl	800028c <__adddf3>
 800c7da:	4652      	mov	r2, sl
 800c7dc:	465b      	mov	r3, fp
 800c7de:	f7f3 ff0b 	bl	80005f8 <__aeabi_dmul>
 800c7e2:	a33a      	add	r3, pc, #232	; (adr r3, 800c8cc <__kernel_sin+0x16c>)
 800c7e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7e8:	f7f3 fd4e 	bl	8000288 <__aeabi_dsub>
 800c7ec:	4652      	mov	r2, sl
 800c7ee:	465b      	mov	r3, fp
 800c7f0:	f7f3 ff02 	bl	80005f8 <__aeabi_dmul>
 800c7f4:	a337      	add	r3, pc, #220	; (adr r3, 800c8d4 <__kernel_sin+0x174>)
 800c7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7fa:	f7f3 fd47 	bl	800028c <__adddf3>
 800c7fe:	9b01      	ldr	r3, [sp, #4]
 800c800:	4606      	mov	r6, r0
 800c802:	460f      	mov	r7, r1
 800c804:	b9eb      	cbnz	r3, 800c842 <__kernel_sin+0xe2>
 800c806:	4602      	mov	r2, r0
 800c808:	460b      	mov	r3, r1
 800c80a:	4650      	mov	r0, sl
 800c80c:	4659      	mov	r1, fp
 800c80e:	f7f3 fef3 	bl	80005f8 <__aeabi_dmul>
 800c812:	a325      	add	r3, pc, #148	; (adr r3, 800c8a8 <__kernel_sin+0x148>)
 800c814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c818:	f7f3 fd36 	bl	8000288 <__aeabi_dsub>
 800c81c:	4642      	mov	r2, r8
 800c81e:	464b      	mov	r3, r9
 800c820:	f7f3 feea 	bl	80005f8 <__aeabi_dmul>
 800c824:	4602      	mov	r2, r0
 800c826:	460b      	mov	r3, r1
 800c828:	4620      	mov	r0, r4
 800c82a:	4629      	mov	r1, r5
 800c82c:	f7f3 fd2e 	bl	800028c <__adddf3>
 800c830:	4604      	mov	r4, r0
 800c832:	460d      	mov	r5, r1
 800c834:	ec45 4b10 	vmov	d0, r4, r5
 800c838:	b003      	add	sp, #12
 800c83a:	ecbd 8b04 	vpop	{d8-d9}
 800c83e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c842:	4b1b      	ldr	r3, [pc, #108]	; (800c8b0 <__kernel_sin+0x150>)
 800c844:	ec51 0b18 	vmov	r0, r1, d8
 800c848:	2200      	movs	r2, #0
 800c84a:	f7f3 fed5 	bl	80005f8 <__aeabi_dmul>
 800c84e:	4632      	mov	r2, r6
 800c850:	ec41 0b19 	vmov	d9, r0, r1
 800c854:	463b      	mov	r3, r7
 800c856:	4640      	mov	r0, r8
 800c858:	4649      	mov	r1, r9
 800c85a:	f7f3 fecd 	bl	80005f8 <__aeabi_dmul>
 800c85e:	4602      	mov	r2, r0
 800c860:	460b      	mov	r3, r1
 800c862:	ec51 0b19 	vmov	r0, r1, d9
 800c866:	f7f3 fd0f 	bl	8000288 <__aeabi_dsub>
 800c86a:	4652      	mov	r2, sl
 800c86c:	465b      	mov	r3, fp
 800c86e:	f7f3 fec3 	bl	80005f8 <__aeabi_dmul>
 800c872:	ec53 2b18 	vmov	r2, r3, d8
 800c876:	f7f3 fd07 	bl	8000288 <__aeabi_dsub>
 800c87a:	a30b      	add	r3, pc, #44	; (adr r3, 800c8a8 <__kernel_sin+0x148>)
 800c87c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c880:	4606      	mov	r6, r0
 800c882:	460f      	mov	r7, r1
 800c884:	4640      	mov	r0, r8
 800c886:	4649      	mov	r1, r9
 800c888:	f7f3 feb6 	bl	80005f8 <__aeabi_dmul>
 800c88c:	4602      	mov	r2, r0
 800c88e:	460b      	mov	r3, r1
 800c890:	4630      	mov	r0, r6
 800c892:	4639      	mov	r1, r7
 800c894:	f7f3 fcfa 	bl	800028c <__adddf3>
 800c898:	4602      	mov	r2, r0
 800c89a:	460b      	mov	r3, r1
 800c89c:	4620      	mov	r0, r4
 800c89e:	4629      	mov	r1, r5
 800c8a0:	f7f3 fcf2 	bl	8000288 <__aeabi_dsub>
 800c8a4:	e7c4      	b.n	800c830 <__kernel_sin+0xd0>
 800c8a6:	bf00      	nop
 800c8a8:	55555549 	.word	0x55555549
 800c8ac:	3fc55555 	.word	0x3fc55555
 800c8b0:	3fe00000 	.word	0x3fe00000
 800c8b4:	5acfd57c 	.word	0x5acfd57c
 800c8b8:	3de5d93a 	.word	0x3de5d93a
 800c8bc:	8a2b9ceb 	.word	0x8a2b9ceb
 800c8c0:	3e5ae5e6 	.word	0x3e5ae5e6
 800c8c4:	57b1fe7d 	.word	0x57b1fe7d
 800c8c8:	3ec71de3 	.word	0x3ec71de3
 800c8cc:	19c161d5 	.word	0x19c161d5
 800c8d0:	3f2a01a0 	.word	0x3f2a01a0
 800c8d4:	1110f8a6 	.word	0x1110f8a6
 800c8d8:	3f811111 	.word	0x3f811111
 800c8dc:	00000000 	.word	0x00000000

0800c8e0 <atan>:
 800c8e0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	ec55 4b10 	vmov	r4, r5, d0
 800c8e8:	4bc3      	ldr	r3, [pc, #780]	; (800cbf8 <atan+0x318>)
 800c8ea:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c8ee:	429e      	cmp	r6, r3
 800c8f0:	46ab      	mov	fp, r5
 800c8f2:	dd18      	ble.n	800c926 <atan+0x46>
 800c8f4:	4bc1      	ldr	r3, [pc, #772]	; (800cbfc <atan+0x31c>)
 800c8f6:	429e      	cmp	r6, r3
 800c8f8:	dc01      	bgt.n	800c8fe <atan+0x1e>
 800c8fa:	d109      	bne.n	800c910 <atan+0x30>
 800c8fc:	b144      	cbz	r4, 800c910 <atan+0x30>
 800c8fe:	4622      	mov	r2, r4
 800c900:	462b      	mov	r3, r5
 800c902:	4620      	mov	r0, r4
 800c904:	4629      	mov	r1, r5
 800c906:	f7f3 fcc1 	bl	800028c <__adddf3>
 800c90a:	4604      	mov	r4, r0
 800c90c:	460d      	mov	r5, r1
 800c90e:	e006      	b.n	800c91e <atan+0x3e>
 800c910:	f1bb 0f00 	cmp.w	fp, #0
 800c914:	f300 8131 	bgt.w	800cb7a <atan+0x29a>
 800c918:	a59b      	add	r5, pc, #620	; (adr r5, 800cb88 <atan+0x2a8>)
 800c91a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c91e:	ec45 4b10 	vmov	d0, r4, r5
 800c922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c926:	4bb6      	ldr	r3, [pc, #728]	; (800cc00 <atan+0x320>)
 800c928:	429e      	cmp	r6, r3
 800c92a:	dc14      	bgt.n	800c956 <atan+0x76>
 800c92c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800c930:	429e      	cmp	r6, r3
 800c932:	dc0d      	bgt.n	800c950 <atan+0x70>
 800c934:	a396      	add	r3, pc, #600	; (adr r3, 800cb90 <atan+0x2b0>)
 800c936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c93a:	ee10 0a10 	vmov	r0, s0
 800c93e:	4629      	mov	r1, r5
 800c940:	f7f3 fca4 	bl	800028c <__adddf3>
 800c944:	4baf      	ldr	r3, [pc, #700]	; (800cc04 <atan+0x324>)
 800c946:	2200      	movs	r2, #0
 800c948:	f7f4 f8e6 	bl	8000b18 <__aeabi_dcmpgt>
 800c94c:	2800      	cmp	r0, #0
 800c94e:	d1e6      	bne.n	800c91e <atan+0x3e>
 800c950:	f04f 3aff 	mov.w	sl, #4294967295
 800c954:	e02b      	b.n	800c9ae <atan+0xce>
 800c956:	f000 f963 	bl	800cc20 <fabs>
 800c95a:	4bab      	ldr	r3, [pc, #684]	; (800cc08 <atan+0x328>)
 800c95c:	429e      	cmp	r6, r3
 800c95e:	ec55 4b10 	vmov	r4, r5, d0
 800c962:	f300 80bf 	bgt.w	800cae4 <atan+0x204>
 800c966:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800c96a:	429e      	cmp	r6, r3
 800c96c:	f300 80a0 	bgt.w	800cab0 <atan+0x1d0>
 800c970:	ee10 2a10 	vmov	r2, s0
 800c974:	ee10 0a10 	vmov	r0, s0
 800c978:	462b      	mov	r3, r5
 800c97a:	4629      	mov	r1, r5
 800c97c:	f7f3 fc86 	bl	800028c <__adddf3>
 800c980:	4ba0      	ldr	r3, [pc, #640]	; (800cc04 <atan+0x324>)
 800c982:	2200      	movs	r2, #0
 800c984:	f7f3 fc80 	bl	8000288 <__aeabi_dsub>
 800c988:	2200      	movs	r2, #0
 800c98a:	4606      	mov	r6, r0
 800c98c:	460f      	mov	r7, r1
 800c98e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c992:	4620      	mov	r0, r4
 800c994:	4629      	mov	r1, r5
 800c996:	f7f3 fc79 	bl	800028c <__adddf3>
 800c99a:	4602      	mov	r2, r0
 800c99c:	460b      	mov	r3, r1
 800c99e:	4630      	mov	r0, r6
 800c9a0:	4639      	mov	r1, r7
 800c9a2:	f7f3 ff53 	bl	800084c <__aeabi_ddiv>
 800c9a6:	f04f 0a00 	mov.w	sl, #0
 800c9aa:	4604      	mov	r4, r0
 800c9ac:	460d      	mov	r5, r1
 800c9ae:	4622      	mov	r2, r4
 800c9b0:	462b      	mov	r3, r5
 800c9b2:	4620      	mov	r0, r4
 800c9b4:	4629      	mov	r1, r5
 800c9b6:	f7f3 fe1f 	bl	80005f8 <__aeabi_dmul>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	460b      	mov	r3, r1
 800c9be:	4680      	mov	r8, r0
 800c9c0:	4689      	mov	r9, r1
 800c9c2:	f7f3 fe19 	bl	80005f8 <__aeabi_dmul>
 800c9c6:	a374      	add	r3, pc, #464	; (adr r3, 800cb98 <atan+0x2b8>)
 800c9c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9cc:	4606      	mov	r6, r0
 800c9ce:	460f      	mov	r7, r1
 800c9d0:	f7f3 fe12 	bl	80005f8 <__aeabi_dmul>
 800c9d4:	a372      	add	r3, pc, #456	; (adr r3, 800cba0 <atan+0x2c0>)
 800c9d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9da:	f7f3 fc57 	bl	800028c <__adddf3>
 800c9de:	4632      	mov	r2, r6
 800c9e0:	463b      	mov	r3, r7
 800c9e2:	f7f3 fe09 	bl	80005f8 <__aeabi_dmul>
 800c9e6:	a370      	add	r3, pc, #448	; (adr r3, 800cba8 <atan+0x2c8>)
 800c9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9ec:	f7f3 fc4e 	bl	800028c <__adddf3>
 800c9f0:	4632      	mov	r2, r6
 800c9f2:	463b      	mov	r3, r7
 800c9f4:	f7f3 fe00 	bl	80005f8 <__aeabi_dmul>
 800c9f8:	a36d      	add	r3, pc, #436	; (adr r3, 800cbb0 <atan+0x2d0>)
 800c9fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9fe:	f7f3 fc45 	bl	800028c <__adddf3>
 800ca02:	4632      	mov	r2, r6
 800ca04:	463b      	mov	r3, r7
 800ca06:	f7f3 fdf7 	bl	80005f8 <__aeabi_dmul>
 800ca0a:	a36b      	add	r3, pc, #428	; (adr r3, 800cbb8 <atan+0x2d8>)
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	f7f3 fc3c 	bl	800028c <__adddf3>
 800ca14:	4632      	mov	r2, r6
 800ca16:	463b      	mov	r3, r7
 800ca18:	f7f3 fdee 	bl	80005f8 <__aeabi_dmul>
 800ca1c:	a368      	add	r3, pc, #416	; (adr r3, 800cbc0 <atan+0x2e0>)
 800ca1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca22:	f7f3 fc33 	bl	800028c <__adddf3>
 800ca26:	4642      	mov	r2, r8
 800ca28:	464b      	mov	r3, r9
 800ca2a:	f7f3 fde5 	bl	80005f8 <__aeabi_dmul>
 800ca2e:	a366      	add	r3, pc, #408	; (adr r3, 800cbc8 <atan+0x2e8>)
 800ca30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca34:	4680      	mov	r8, r0
 800ca36:	4689      	mov	r9, r1
 800ca38:	4630      	mov	r0, r6
 800ca3a:	4639      	mov	r1, r7
 800ca3c:	f7f3 fddc 	bl	80005f8 <__aeabi_dmul>
 800ca40:	a363      	add	r3, pc, #396	; (adr r3, 800cbd0 <atan+0x2f0>)
 800ca42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca46:	f7f3 fc1f 	bl	8000288 <__aeabi_dsub>
 800ca4a:	4632      	mov	r2, r6
 800ca4c:	463b      	mov	r3, r7
 800ca4e:	f7f3 fdd3 	bl	80005f8 <__aeabi_dmul>
 800ca52:	a361      	add	r3, pc, #388	; (adr r3, 800cbd8 <atan+0x2f8>)
 800ca54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca58:	f7f3 fc16 	bl	8000288 <__aeabi_dsub>
 800ca5c:	4632      	mov	r2, r6
 800ca5e:	463b      	mov	r3, r7
 800ca60:	f7f3 fdca 	bl	80005f8 <__aeabi_dmul>
 800ca64:	a35e      	add	r3, pc, #376	; (adr r3, 800cbe0 <atan+0x300>)
 800ca66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca6a:	f7f3 fc0d 	bl	8000288 <__aeabi_dsub>
 800ca6e:	4632      	mov	r2, r6
 800ca70:	463b      	mov	r3, r7
 800ca72:	f7f3 fdc1 	bl	80005f8 <__aeabi_dmul>
 800ca76:	a35c      	add	r3, pc, #368	; (adr r3, 800cbe8 <atan+0x308>)
 800ca78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca7c:	f7f3 fc04 	bl	8000288 <__aeabi_dsub>
 800ca80:	4632      	mov	r2, r6
 800ca82:	463b      	mov	r3, r7
 800ca84:	f7f3 fdb8 	bl	80005f8 <__aeabi_dmul>
 800ca88:	4602      	mov	r2, r0
 800ca8a:	460b      	mov	r3, r1
 800ca8c:	4640      	mov	r0, r8
 800ca8e:	4649      	mov	r1, r9
 800ca90:	f7f3 fbfc 	bl	800028c <__adddf3>
 800ca94:	4622      	mov	r2, r4
 800ca96:	462b      	mov	r3, r5
 800ca98:	f7f3 fdae 	bl	80005f8 <__aeabi_dmul>
 800ca9c:	f1ba 3fff 	cmp.w	sl, #4294967295
 800caa0:	4602      	mov	r2, r0
 800caa2:	460b      	mov	r3, r1
 800caa4:	d14b      	bne.n	800cb3e <atan+0x25e>
 800caa6:	4620      	mov	r0, r4
 800caa8:	4629      	mov	r1, r5
 800caaa:	f7f3 fbed 	bl	8000288 <__aeabi_dsub>
 800caae:	e72c      	b.n	800c90a <atan+0x2a>
 800cab0:	ee10 0a10 	vmov	r0, s0
 800cab4:	4b53      	ldr	r3, [pc, #332]	; (800cc04 <atan+0x324>)
 800cab6:	2200      	movs	r2, #0
 800cab8:	4629      	mov	r1, r5
 800caba:	f7f3 fbe5 	bl	8000288 <__aeabi_dsub>
 800cabe:	4b51      	ldr	r3, [pc, #324]	; (800cc04 <atan+0x324>)
 800cac0:	4606      	mov	r6, r0
 800cac2:	460f      	mov	r7, r1
 800cac4:	2200      	movs	r2, #0
 800cac6:	4620      	mov	r0, r4
 800cac8:	4629      	mov	r1, r5
 800caca:	f7f3 fbdf 	bl	800028c <__adddf3>
 800cace:	4602      	mov	r2, r0
 800cad0:	460b      	mov	r3, r1
 800cad2:	4630      	mov	r0, r6
 800cad4:	4639      	mov	r1, r7
 800cad6:	f7f3 feb9 	bl	800084c <__aeabi_ddiv>
 800cada:	f04f 0a01 	mov.w	sl, #1
 800cade:	4604      	mov	r4, r0
 800cae0:	460d      	mov	r5, r1
 800cae2:	e764      	b.n	800c9ae <atan+0xce>
 800cae4:	4b49      	ldr	r3, [pc, #292]	; (800cc0c <atan+0x32c>)
 800cae6:	429e      	cmp	r6, r3
 800cae8:	da1d      	bge.n	800cb26 <atan+0x246>
 800caea:	ee10 0a10 	vmov	r0, s0
 800caee:	4b48      	ldr	r3, [pc, #288]	; (800cc10 <atan+0x330>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	4629      	mov	r1, r5
 800caf4:	f7f3 fbc8 	bl	8000288 <__aeabi_dsub>
 800caf8:	4b45      	ldr	r3, [pc, #276]	; (800cc10 <atan+0x330>)
 800cafa:	4606      	mov	r6, r0
 800cafc:	460f      	mov	r7, r1
 800cafe:	2200      	movs	r2, #0
 800cb00:	4620      	mov	r0, r4
 800cb02:	4629      	mov	r1, r5
 800cb04:	f7f3 fd78 	bl	80005f8 <__aeabi_dmul>
 800cb08:	4b3e      	ldr	r3, [pc, #248]	; (800cc04 <atan+0x324>)
 800cb0a:	2200      	movs	r2, #0
 800cb0c:	f7f3 fbbe 	bl	800028c <__adddf3>
 800cb10:	4602      	mov	r2, r0
 800cb12:	460b      	mov	r3, r1
 800cb14:	4630      	mov	r0, r6
 800cb16:	4639      	mov	r1, r7
 800cb18:	f7f3 fe98 	bl	800084c <__aeabi_ddiv>
 800cb1c:	f04f 0a02 	mov.w	sl, #2
 800cb20:	4604      	mov	r4, r0
 800cb22:	460d      	mov	r5, r1
 800cb24:	e743      	b.n	800c9ae <atan+0xce>
 800cb26:	462b      	mov	r3, r5
 800cb28:	ee10 2a10 	vmov	r2, s0
 800cb2c:	4939      	ldr	r1, [pc, #228]	; (800cc14 <atan+0x334>)
 800cb2e:	2000      	movs	r0, #0
 800cb30:	f7f3 fe8c 	bl	800084c <__aeabi_ddiv>
 800cb34:	f04f 0a03 	mov.w	sl, #3
 800cb38:	4604      	mov	r4, r0
 800cb3a:	460d      	mov	r5, r1
 800cb3c:	e737      	b.n	800c9ae <atan+0xce>
 800cb3e:	4b36      	ldr	r3, [pc, #216]	; (800cc18 <atan+0x338>)
 800cb40:	4e36      	ldr	r6, [pc, #216]	; (800cc1c <atan+0x33c>)
 800cb42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cb46:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cb4a:	e9da 2300 	ldrd	r2, r3, [sl]
 800cb4e:	f7f3 fb9b 	bl	8000288 <__aeabi_dsub>
 800cb52:	4622      	mov	r2, r4
 800cb54:	462b      	mov	r3, r5
 800cb56:	f7f3 fb97 	bl	8000288 <__aeabi_dsub>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	460b      	mov	r3, r1
 800cb5e:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cb62:	f7f3 fb91 	bl	8000288 <__aeabi_dsub>
 800cb66:	f1bb 0f00 	cmp.w	fp, #0
 800cb6a:	4604      	mov	r4, r0
 800cb6c:	460d      	mov	r5, r1
 800cb6e:	f6bf aed6 	bge.w	800c91e <atan+0x3e>
 800cb72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cb76:	461d      	mov	r5, r3
 800cb78:	e6d1      	b.n	800c91e <atan+0x3e>
 800cb7a:	a51d      	add	r5, pc, #116	; (adr r5, 800cbf0 <atan+0x310>)
 800cb7c:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cb80:	e6cd      	b.n	800c91e <atan+0x3e>
 800cb82:	bf00      	nop
 800cb84:	f3af 8000 	nop.w
 800cb88:	54442d18 	.word	0x54442d18
 800cb8c:	bff921fb 	.word	0xbff921fb
 800cb90:	8800759c 	.word	0x8800759c
 800cb94:	7e37e43c 	.word	0x7e37e43c
 800cb98:	e322da11 	.word	0xe322da11
 800cb9c:	3f90ad3a 	.word	0x3f90ad3a
 800cba0:	24760deb 	.word	0x24760deb
 800cba4:	3fa97b4b 	.word	0x3fa97b4b
 800cba8:	a0d03d51 	.word	0xa0d03d51
 800cbac:	3fb10d66 	.word	0x3fb10d66
 800cbb0:	c54c206e 	.word	0xc54c206e
 800cbb4:	3fb745cd 	.word	0x3fb745cd
 800cbb8:	920083ff 	.word	0x920083ff
 800cbbc:	3fc24924 	.word	0x3fc24924
 800cbc0:	5555550d 	.word	0x5555550d
 800cbc4:	3fd55555 	.word	0x3fd55555
 800cbc8:	2c6a6c2f 	.word	0x2c6a6c2f
 800cbcc:	bfa2b444 	.word	0xbfa2b444
 800cbd0:	52defd9a 	.word	0x52defd9a
 800cbd4:	3fadde2d 	.word	0x3fadde2d
 800cbd8:	af749a6d 	.word	0xaf749a6d
 800cbdc:	3fb3b0f2 	.word	0x3fb3b0f2
 800cbe0:	fe231671 	.word	0xfe231671
 800cbe4:	3fbc71c6 	.word	0x3fbc71c6
 800cbe8:	9998ebc4 	.word	0x9998ebc4
 800cbec:	3fc99999 	.word	0x3fc99999
 800cbf0:	54442d18 	.word	0x54442d18
 800cbf4:	3ff921fb 	.word	0x3ff921fb
 800cbf8:	440fffff 	.word	0x440fffff
 800cbfc:	7ff00000 	.word	0x7ff00000
 800cc00:	3fdbffff 	.word	0x3fdbffff
 800cc04:	3ff00000 	.word	0x3ff00000
 800cc08:	3ff2ffff 	.word	0x3ff2ffff
 800cc0c:	40038000 	.word	0x40038000
 800cc10:	3ff80000 	.word	0x3ff80000
 800cc14:	bff00000 	.word	0xbff00000
 800cc18:	0800d4b8 	.word	0x0800d4b8
 800cc1c:	0800d498 	.word	0x0800d498

0800cc20 <fabs>:
 800cc20:	ec51 0b10 	vmov	r0, r1, d0
 800cc24:	ee10 2a10 	vmov	r2, s0
 800cc28:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800cc2c:	ec43 2b10 	vmov	d0, r2, r3
 800cc30:	4770      	bx	lr
 800cc32:	0000      	movs	r0, r0
 800cc34:	0000      	movs	r0, r0
	...

0800cc38 <floor>:
 800cc38:	ec51 0b10 	vmov	r0, r1, d0
 800cc3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800cc44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800cc48:	2e13      	cmp	r6, #19
 800cc4a:	ee10 5a10 	vmov	r5, s0
 800cc4e:	ee10 8a10 	vmov	r8, s0
 800cc52:	460c      	mov	r4, r1
 800cc54:	dc32      	bgt.n	800ccbc <floor+0x84>
 800cc56:	2e00      	cmp	r6, #0
 800cc58:	da14      	bge.n	800cc84 <floor+0x4c>
 800cc5a:	a333      	add	r3, pc, #204	; (adr r3, 800cd28 <floor+0xf0>)
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f7f3 fb14 	bl	800028c <__adddf3>
 800cc64:	2200      	movs	r2, #0
 800cc66:	2300      	movs	r3, #0
 800cc68:	f7f3 ff56 	bl	8000b18 <__aeabi_dcmpgt>
 800cc6c:	b138      	cbz	r0, 800cc7e <floor+0x46>
 800cc6e:	2c00      	cmp	r4, #0
 800cc70:	da57      	bge.n	800cd22 <floor+0xea>
 800cc72:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800cc76:	431d      	orrs	r5, r3
 800cc78:	d001      	beq.n	800cc7e <floor+0x46>
 800cc7a:	4c2d      	ldr	r4, [pc, #180]	; (800cd30 <floor+0xf8>)
 800cc7c:	2500      	movs	r5, #0
 800cc7e:	4621      	mov	r1, r4
 800cc80:	4628      	mov	r0, r5
 800cc82:	e025      	b.n	800ccd0 <floor+0x98>
 800cc84:	4f2b      	ldr	r7, [pc, #172]	; (800cd34 <floor+0xfc>)
 800cc86:	4137      	asrs	r7, r6
 800cc88:	ea01 0307 	and.w	r3, r1, r7
 800cc8c:	4303      	orrs	r3, r0
 800cc8e:	d01f      	beq.n	800ccd0 <floor+0x98>
 800cc90:	a325      	add	r3, pc, #148	; (adr r3, 800cd28 <floor+0xf0>)
 800cc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc96:	f7f3 faf9 	bl	800028c <__adddf3>
 800cc9a:	2200      	movs	r2, #0
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	f7f3 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 800cca2:	2800      	cmp	r0, #0
 800cca4:	d0eb      	beq.n	800cc7e <floor+0x46>
 800cca6:	2c00      	cmp	r4, #0
 800cca8:	bfbe      	ittt	lt
 800ccaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800ccae:	fa43 f606 	asrlt.w	r6, r3, r6
 800ccb2:	19a4      	addlt	r4, r4, r6
 800ccb4:	ea24 0407 	bic.w	r4, r4, r7
 800ccb8:	2500      	movs	r5, #0
 800ccba:	e7e0      	b.n	800cc7e <floor+0x46>
 800ccbc:	2e33      	cmp	r6, #51	; 0x33
 800ccbe:	dd0b      	ble.n	800ccd8 <floor+0xa0>
 800ccc0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800ccc4:	d104      	bne.n	800ccd0 <floor+0x98>
 800ccc6:	ee10 2a10 	vmov	r2, s0
 800ccca:	460b      	mov	r3, r1
 800cccc:	f7f3 fade 	bl	800028c <__adddf3>
 800ccd0:	ec41 0b10 	vmov	d0, r0, r1
 800ccd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccd8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800ccdc:	f04f 33ff 	mov.w	r3, #4294967295
 800cce0:	fa23 f707 	lsr.w	r7, r3, r7
 800cce4:	4207      	tst	r7, r0
 800cce6:	d0f3      	beq.n	800ccd0 <floor+0x98>
 800cce8:	a30f      	add	r3, pc, #60	; (adr r3, 800cd28 <floor+0xf0>)
 800ccea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccee:	f7f3 facd 	bl	800028c <__adddf3>
 800ccf2:	2200      	movs	r2, #0
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	f7f3 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 800ccfa:	2800      	cmp	r0, #0
 800ccfc:	d0bf      	beq.n	800cc7e <floor+0x46>
 800ccfe:	2c00      	cmp	r4, #0
 800cd00:	da02      	bge.n	800cd08 <floor+0xd0>
 800cd02:	2e14      	cmp	r6, #20
 800cd04:	d103      	bne.n	800cd0e <floor+0xd6>
 800cd06:	3401      	adds	r4, #1
 800cd08:	ea25 0507 	bic.w	r5, r5, r7
 800cd0c:	e7b7      	b.n	800cc7e <floor+0x46>
 800cd0e:	2301      	movs	r3, #1
 800cd10:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800cd14:	fa03 f606 	lsl.w	r6, r3, r6
 800cd18:	4435      	add	r5, r6
 800cd1a:	4545      	cmp	r5, r8
 800cd1c:	bf38      	it	cc
 800cd1e:	18e4      	addcc	r4, r4, r3
 800cd20:	e7f2      	b.n	800cd08 <floor+0xd0>
 800cd22:	2500      	movs	r5, #0
 800cd24:	462c      	mov	r4, r5
 800cd26:	e7aa      	b.n	800cc7e <floor+0x46>
 800cd28:	8800759c 	.word	0x8800759c
 800cd2c:	7e37e43c 	.word	0x7e37e43c
 800cd30:	bff00000 	.word	0xbff00000
 800cd34:	000fffff 	.word	0x000fffff

0800cd38 <scalbn>:
 800cd38:	b570      	push	{r4, r5, r6, lr}
 800cd3a:	ec55 4b10 	vmov	r4, r5, d0
 800cd3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800cd42:	4606      	mov	r6, r0
 800cd44:	462b      	mov	r3, r5
 800cd46:	b99a      	cbnz	r2, 800cd70 <scalbn+0x38>
 800cd48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cd4c:	4323      	orrs	r3, r4
 800cd4e:	d036      	beq.n	800cdbe <scalbn+0x86>
 800cd50:	4b39      	ldr	r3, [pc, #228]	; (800ce38 <scalbn+0x100>)
 800cd52:	4629      	mov	r1, r5
 800cd54:	ee10 0a10 	vmov	r0, s0
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f7f3 fc4d 	bl	80005f8 <__aeabi_dmul>
 800cd5e:	4b37      	ldr	r3, [pc, #220]	; (800ce3c <scalbn+0x104>)
 800cd60:	429e      	cmp	r6, r3
 800cd62:	4604      	mov	r4, r0
 800cd64:	460d      	mov	r5, r1
 800cd66:	da10      	bge.n	800cd8a <scalbn+0x52>
 800cd68:	a32b      	add	r3, pc, #172	; (adr r3, 800ce18 <scalbn+0xe0>)
 800cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6e:	e03a      	b.n	800cde6 <scalbn+0xae>
 800cd70:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800cd74:	428a      	cmp	r2, r1
 800cd76:	d10c      	bne.n	800cd92 <scalbn+0x5a>
 800cd78:	ee10 2a10 	vmov	r2, s0
 800cd7c:	4620      	mov	r0, r4
 800cd7e:	4629      	mov	r1, r5
 800cd80:	f7f3 fa84 	bl	800028c <__adddf3>
 800cd84:	4604      	mov	r4, r0
 800cd86:	460d      	mov	r5, r1
 800cd88:	e019      	b.n	800cdbe <scalbn+0x86>
 800cd8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800cd8e:	460b      	mov	r3, r1
 800cd90:	3a36      	subs	r2, #54	; 0x36
 800cd92:	4432      	add	r2, r6
 800cd94:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800cd98:	428a      	cmp	r2, r1
 800cd9a:	dd08      	ble.n	800cdae <scalbn+0x76>
 800cd9c:	2d00      	cmp	r5, #0
 800cd9e:	a120      	add	r1, pc, #128	; (adr r1, 800ce20 <scalbn+0xe8>)
 800cda0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cda4:	da1c      	bge.n	800cde0 <scalbn+0xa8>
 800cda6:	a120      	add	r1, pc, #128	; (adr r1, 800ce28 <scalbn+0xf0>)
 800cda8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdac:	e018      	b.n	800cde0 <scalbn+0xa8>
 800cdae:	2a00      	cmp	r2, #0
 800cdb0:	dd08      	ble.n	800cdc4 <scalbn+0x8c>
 800cdb2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800cdb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800cdba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800cdbe:	ec45 4b10 	vmov	d0, r4, r5
 800cdc2:	bd70      	pop	{r4, r5, r6, pc}
 800cdc4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800cdc8:	da19      	bge.n	800cdfe <scalbn+0xc6>
 800cdca:	f24c 3350 	movw	r3, #50000	; 0xc350
 800cdce:	429e      	cmp	r6, r3
 800cdd0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800cdd4:	dd0a      	ble.n	800cdec <scalbn+0xb4>
 800cdd6:	a112      	add	r1, pc, #72	; (adr r1, 800ce20 <scalbn+0xe8>)
 800cdd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d1e2      	bne.n	800cda6 <scalbn+0x6e>
 800cde0:	a30f      	add	r3, pc, #60	; (adr r3, 800ce20 <scalbn+0xe8>)
 800cde2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cde6:	f7f3 fc07 	bl	80005f8 <__aeabi_dmul>
 800cdea:	e7cb      	b.n	800cd84 <scalbn+0x4c>
 800cdec:	a10a      	add	r1, pc, #40	; (adr r1, 800ce18 <scalbn+0xe0>)
 800cdee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d0b8      	beq.n	800cd68 <scalbn+0x30>
 800cdf6:	a10e      	add	r1, pc, #56	; (adr r1, 800ce30 <scalbn+0xf8>)
 800cdf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cdfc:	e7b4      	b.n	800cd68 <scalbn+0x30>
 800cdfe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ce02:	3236      	adds	r2, #54	; 0x36
 800ce04:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ce08:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	4b0c      	ldr	r3, [pc, #48]	; (800ce40 <scalbn+0x108>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	e7e8      	b.n	800cde6 <scalbn+0xae>
 800ce14:	f3af 8000 	nop.w
 800ce18:	c2f8f359 	.word	0xc2f8f359
 800ce1c:	01a56e1f 	.word	0x01a56e1f
 800ce20:	8800759c 	.word	0x8800759c
 800ce24:	7e37e43c 	.word	0x7e37e43c
 800ce28:	8800759c 	.word	0x8800759c
 800ce2c:	fe37e43c 	.word	0xfe37e43c
 800ce30:	c2f8f359 	.word	0xc2f8f359
 800ce34:	81a56e1f 	.word	0x81a56e1f
 800ce38:	43500000 	.word	0x43500000
 800ce3c:	ffff3cb0 	.word	0xffff3cb0
 800ce40:	3c900000 	.word	0x3c900000

0800ce44 <_init>:
 800ce44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce46:	bf00      	nop
 800ce48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce4a:	bc08      	pop	{r3}
 800ce4c:	469e      	mov	lr, r3
 800ce4e:	4770      	bx	lr

0800ce50 <_fini>:
 800ce50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce52:	bf00      	nop
 800ce54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce56:	bc08      	pop	{r3}
 800ce58:	469e      	mov	lr, r3
 800ce5a:	4770      	bx	lr
