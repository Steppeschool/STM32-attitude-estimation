
Quaternion_Attitude_Estimation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d144  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000670  0800d2d8  0800d2d8  0001d2d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d948  0800d948  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d948  0800d948  0001d948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d950  0800d950  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d950  0800d950  0001d950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d954  0800d954  0001d954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800d958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001178  200001dc  0800db34  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001354  0800db34  00021354  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e1a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ed5  00000000  00000000  00039026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015d8  00000000  00000000  0003bf00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  0003d4d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029517  00000000  00000000  0003e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1c0  00000000  00000000  00067e8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa6f0  00000000  00000000  0008204f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c73f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070e8  00000000  00000000  0017c790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d2bc 	.word	0x0800d2bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800d2bc 	.word	0x0800d2bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f54:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f58:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d013      	beq.n	8000f8c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000f64:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f68:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000f6c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d00b      	beq.n	8000f8c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000f74:	e000      	b.n	8000f78 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000f76:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000f78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d0f9      	beq.n	8000f76 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000f82:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000f8c:	687b      	ldr	r3, [r7, #4]
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
	...

08000f9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f9c:	b590      	push	{r4, r7, lr}
 8000f9e:	b093      	sub	sp, #76	; 0x4c
 8000fa0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f001 fe6d 	bl	8002c80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f8a7 	bl	80010f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 fa35 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 8000fae:	f000 f9f1 	bl	8001394 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fb2:	f000 f9bf 	bl	8001334 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000fb6:	f000 f8f1 	bl	800119c <MX_I2C1_Init>
  MX_SPI1_Init();
 8000fba:	f000 f92f 	bl	800121c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000fbe:	f000 f96b 	bl	8001298 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // mpu6050_init();
  mpu9250_init();
 8000fc2:	f000 fc29 	bl	8001818 <mpu9250_init>
  HAL_Delay(100);
 8000fc6:	2064      	movs	r0, #100	; 0x64
 8000fc8:	f001 fed6 	bl	8002d78 <HAL_Delay>

  EulerAngles euler_angles, euler_angles_gyro;
  Quaternion quaternion_final, quaternion_gyro;
  uint8_t uart_counter = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  HAL_TIM_Base_Start_IT(&htim2);
 8000fd2:	4843      	ldr	r0, [pc, #268]	; (80010e0 <main+0x144>)
 8000fd4:	f006 f9aa 	bl	800732c <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim2);
 8000fd8:	4841      	ldr	r0, [pc, #260]	; (80010e0 <main+0x144>)
 8000fda:	f006 f93f 	bl	800725c <HAL_TIM_Base_Start>
  mpu9250_read_sensor(&mpu_data);
 8000fde:	4841      	ldr	r0, [pc, #260]	; (80010e4 <main+0x148>)
 8000fe0:	f000 fca0 	bl	8001924 <mpu9250_read_sensor>
  HAL_Delay(100);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f001 fec7 	bl	8002d78 <HAL_Delay>
  mpu9250_read_sensor(&mpu_data);
 8000fea:	483e      	ldr	r0, [pc, #248]	; (80010e4 <main+0x148>)
 8000fec:	f000 fc9a 	bl	8001924 <mpu9250_read_sensor>
  HAL_Delay(100);
 8000ff0:	2064      	movs	r0, #100	; 0x64
 8000ff2:	f001 fec1 	bl	8002d78 <HAL_Delay>
  mpu9250_read_sensor(&mpu_data);
 8000ff6:	483b      	ldr	r0, [pc, #236]	; (80010e4 <main+0x148>)
 8000ff8:	f000 fc94 	bl	8001924 <mpu9250_read_sensor>
  HAL_Delay(100);
 8000ffc:	2064      	movs	r0, #100	; 0x64
 8000ffe:	f001 febb 	bl	8002d78 <HAL_Delay>
  estimate_euler_angles(mpu_data, &euler_angles);
 8001002:	4b38      	ldr	r3, [pc, #224]	; (80010e4 <main+0x148>)
 8001004:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001008:	9201      	str	r2, [sp, #4]
 800100a:	8a1a      	ldrh	r2, [r3, #16]
 800100c:	f8ad 2000 	strh.w	r2, [sp]
 8001010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001012:	f000 fe79 	bl	8001d08 <estimate_euler_angles>
  euler2quater(&quaternion_final, euler_angles);
 8001016:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800101a:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800101e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001022:	f107 0314 	add.w	r3, r7, #20
 8001026:	eeb0 0a66 	vmov.f32	s0, s13
 800102a:	eef0 0a47 	vmov.f32	s1, s14
 800102e:	eeb0 1a67 	vmov.f32	s2, s15
 8001032:	4618      	mov	r0, r3
 8001034:	f000 ffa6 	bl	8001f84 <euler2quater>
  quaternion_gyro = quaternion_final;
 8001038:	1d3c      	adds	r4, r7, #4
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001040:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (timer_flag == 1)
 8001044:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <main+0x14c>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	2b01      	cmp	r3, #1
 800104c:	d1fa      	bne.n	8001044 <main+0xa8>
	  {

		  mpu9250_read_sensor(&mpu_data);
 800104e:	4825      	ldr	r0, [pc, #148]	; (80010e4 <main+0x148>)
 8001050:	f000 fc68 	bl	8001924 <mpu9250_read_sensor>
		  estimate_euler_angles(mpu_data, &euler_angles);
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <main+0x148>)
 8001056:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800105a:	9201      	str	r2, [sp, #4]
 800105c:	8a1a      	ldrh	r2, [r3, #16]
 800105e:	f8ad 2000 	strh.w	r2, [sp]
 8001062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001064:	f000 fe50 	bl	8001d08 <estimate_euler_angles>
		  euler2quater(&quaternion_gyro, euler_angles);
 8001068:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 800106c:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001070:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001074:	1d3b      	adds	r3, r7, #4
 8001076:	eeb0 0a66 	vmov.f32	s0, s13
 800107a:	eef0 0a47 	vmov.f32	s1, s14
 800107e:	eeb0 1a67 	vmov.f32	s2, s15
 8001082:	4618      	mov	r0, r3
 8001084:	f000 ff7e 	bl	8001f84 <euler2quater>
//		  estimate_euler_angles(mpu_data, &euler_angles_gyro);
//		  euler2quater(&quaternion_final, euler_angles_gyro);
		   complementary_filter_quater(&quaternion_final, mpu_data);
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <main+0x148>)
 800108a:	f107 0414 	add.w	r4, r7, #20
 800108e:	466b      	mov	r3, sp
 8001090:	f102 010c 	add.w	r1, r2, #12
 8001094:	c903      	ldmia	r1, {r0, r1}
 8001096:	6018      	str	r0, [r3, #0]
 8001098:	3304      	adds	r3, #4
 800109a:	8019      	strh	r1, [r3, #0]
 800109c:	ca0e      	ldmia	r2, {r1, r2, r3}
 800109e:	4620      	mov	r0, r4
 80010a0:	f001 f976 	bl	8002390 <complementary_filter_quater>
		  //update_quater_gyro(&quaternion_gyro, mpu_data);
		  s_test = quaternion_gyro.s;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	4a11      	ldr	r2, [pc, #68]	; (80010ec <main+0x150>)
 80010a8:	6013      	str	r3, [r2, #0]
		  s_test2 = quaternion_final.s;
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	4a10      	ldr	r2, [pc, #64]	; (80010f0 <main+0x154>)
 80010ae:	6013      	str	r3, [r2, #0]
		  //x_test = euler_angles.yaw;
//		  euler_angles = complementary_filter(mpu_data);
		  uart_counter++;
 80010b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010b4:	3301      	adds	r3, #1
 80010b6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  //pitch_angle_gyro = (float)euler_angles.yaw;
//		  pitch_angle_acc_magn = (float) mpu_data.x_mag;
		  if(uart_counter > 40)
 80010ba:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80010be:	2b28      	cmp	r3, #40	; 0x28
 80010c0:	d909      	bls.n	80010d6 <main+0x13a>
		  {
			  HAL_UART_Transmit_DMA(&huart2, (uint8_t *)&quaternion_final, sizeof(quaternion_final));
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	2210      	movs	r2, #16
 80010c8:	4619      	mov	r1, r3
 80010ca:	480a      	ldr	r0, [pc, #40]	; (80010f4 <main+0x158>)
 80010cc:	f006 fdd6 	bl	8007c7c <HAL_UART_Transmit_DMA>
			  uart_counter = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		  }
		  timer_flag = 0;
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <main+0x14c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	701a      	strb	r2, [r3, #0]
	  if (timer_flag == 1)
 80010dc:	e7b2      	b.n	8001044 <main+0xa8>
 80010de:	bf00      	nop
 80010e0:	20000388 	.word	0x20000388
 80010e4:	200004ac 	.word	0x200004ac
 80010e8:	200004a8 	.word	0x200004a8
 80010ec:	200004a0 	.word	0x200004a0
 80010f0:	200004a4 	.word	0x200004a4
 80010f4:	200003d4 	.word	0x200003d4

080010f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b096      	sub	sp, #88	; 0x58
 80010fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	2244      	movs	r2, #68	; 0x44
 8001104:	2100      	movs	r1, #0
 8001106:	4618      	mov	r0, r3
 8001108:	f007 ff52 	bl	8008fb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800110c:	463b      	mov	r3, r7
 800110e:	2200      	movs	r2, #0
 8001110:	601a      	str	r2, [r3, #0]
 8001112:	605a      	str	r2, [r3, #4]
 8001114:	609a      	str	r2, [r3, #8]
 8001116:	60da      	str	r2, [r3, #12]
 8001118:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800111a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800111e:	f003 fa73 	bl	8004608 <HAL_PWREx_ControlVoltageScaling>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001128:	f000 fa16 	bl	8001558 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800112c:	2302      	movs	r3, #2
 800112e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001130:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001134:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001136:	2310      	movs	r3, #16
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113a:	2302      	movs	r3, #2
 800113c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800113e:	2302      	movs	r3, #2
 8001140:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001142:	2301      	movs	r3, #1
 8001144:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001146:	230a      	movs	r3, #10
 8001148:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800114a:	2307      	movs	r3, #7
 800114c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800114e:	2302      	movs	r3, #2
 8001150:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001152:	2302      	movs	r3, #2
 8001154:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001156:	f107 0314 	add.w	r3, r7, #20
 800115a:	4618      	mov	r0, r3
 800115c:	f003 faaa 	bl	80046b4 <HAL_RCC_OscConfig>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001166:	f000 f9f7 	bl	8001558 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800116a:	230f      	movs	r3, #15
 800116c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800116e:	2303      	movs	r3, #3
 8001170:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	2104      	movs	r1, #4
 8001182:	4618      	mov	r0, r3
 8001184:	f003 fe72 	bl	8004e6c <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800118e:	f000 f9e3 	bl	8001558 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3758      	adds	r7, #88	; 0x58
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
	...

0800119c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011a0:	4b1b      	ldr	r3, [pc, #108]	; (8001210 <MX_I2C1_Init+0x74>)
 80011a2:	4a1c      	ldr	r2, [pc, #112]	; (8001214 <MX_I2C1_Init+0x78>)
 80011a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80011a6:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_I2C1_Init+0x74>)
 80011a8:	4a1b      	ldr	r2, [pc, #108]	; (8001218 <MX_I2C1_Init+0x7c>)
 80011aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011ac:	4b18      	ldr	r3, [pc, #96]	; (8001210 <MX_I2C1_Init+0x74>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_I2C1_Init+0x74>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_I2C1_Init+0x74>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_I2C1_Init+0x74>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_I2C1_Init+0x74>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_I2C1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_I2C1_Init+0x74>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d6:	480e      	ldr	r0, [pc, #56]	; (8001210 <MX_I2C1_Init+0x74>)
 80011d8:	f002 fb4a 	bl	8003870 <HAL_I2C_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011e2:	f000 f9b9 	bl	8001558 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4809      	ldr	r0, [pc, #36]	; (8001210 <MX_I2C1_Init+0x74>)
 80011ea:	f003 f968 	bl	80044be <HAL_I2CEx_ConfigAnalogFilter>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011f4:	f000 f9b0 	bl	8001558 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f8:	2100      	movs	r1, #0
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_I2C1_Init+0x74>)
 80011fc:	f003 f9aa 	bl	8004554 <HAL_I2CEx_ConfigDigitalFilter>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001206:	f000 f9a7 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200001f8 	.word	0x200001f8
 8001214:	40005400 	.word	0x40005400
 8001218:	10909cec 	.word	0x10909cec

0800121c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <MX_SPI1_Init+0x74>)
 8001222:	4a1c      	ldr	r2, [pc, #112]	; (8001294 <MX_SPI1_Init+0x78>)
 8001224:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001226:	4b1a      	ldr	r3, [pc, #104]	; (8001290 <MX_SPI1_Init+0x74>)
 8001228:	f44f 7282 	mov.w	r2, #260	; 0x104
 800122c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800122e:	4b18      	ldr	r3, [pc, #96]	; (8001290 <MX_SPI1_Init+0x74>)
 8001230:	2200      	movs	r2, #0
 8001232:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001234:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_SPI1_Init+0x74>)
 8001236:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800123a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <MX_SPI1_Init+0x74>)
 800123e:	2202      	movs	r2, #2
 8001240:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001242:	4b13      	ldr	r3, [pc, #76]	; (8001290 <MX_SPI1_Init+0x74>)
 8001244:	2201      	movs	r2, #1
 8001246:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <MX_SPI1_Init+0x74>)
 800124a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800124e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <MX_SPI1_Init+0x74>)
 8001252:	2220      	movs	r2, #32
 8001254:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001256:	4b0e      	ldr	r3, [pc, #56]	; (8001290 <MX_SPI1_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <MX_SPI1_Init+0x74>)
 800125e:	2200      	movs	r2, #0
 8001260:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <MX_SPI1_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001268:	4b09      	ldr	r3, [pc, #36]	; (8001290 <MX_SPI1_Init+0x74>)
 800126a:	2207      	movs	r2, #7
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <MX_SPI1_Init+0x74>)
 8001270:	2200      	movs	r2, #0
 8001272:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001274:	4b06      	ldr	r3, [pc, #24]	; (8001290 <MX_SPI1_Init+0x74>)
 8001276:	2200      	movs	r2, #0
 8001278:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800127a:	4805      	ldr	r0, [pc, #20]	; (8001290 <MX_SPI1_Init+0x74>)
 800127c:	f004 fcd6 	bl	8005c2c <HAL_SPI_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001286:	f000 f967 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800128a:	bf00      	nop
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	20000294 	.word	0x20000294
 8001294:	40013000 	.word	0x40013000

08001298 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b088      	sub	sp, #32
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800129e:	f107 0310 	add.w	r3, r7, #16
 80012a2:	2200      	movs	r2, #0
 80012a4:	601a      	str	r2, [r3, #0]
 80012a6:	605a      	str	r2, [r3, #4]
 80012a8:	609a      	str	r2, [r3, #8]
 80012aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012b6:	4b1e      	ldr	r3, [pc, #120]	; (8001330 <MX_TIM2_Init+0x98>)
 80012b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012bc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 80012be:	4b1c      	ldr	r3, [pc, #112]	; (8001330 <MX_TIM2_Init+0x98>)
 80012c0:	224f      	movs	r2, #79	; 0x4f
 80012c2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c4:	4b1a      	ldr	r3, [pc, #104]	; (8001330 <MX_TIM2_Init+0x98>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 80012ca:	4b19      	ldr	r3, [pc, #100]	; (8001330 <MX_TIM2_Init+0x98>)
 80012cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012d0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d2:	4b17      	ldr	r3, [pc, #92]	; (8001330 <MX_TIM2_Init+0x98>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012d8:	4b15      	ldr	r3, [pc, #84]	; (8001330 <MX_TIM2_Init+0x98>)
 80012da:	2200      	movs	r2, #0
 80012dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012de:	4814      	ldr	r0, [pc, #80]	; (8001330 <MX_TIM2_Init+0x98>)
 80012e0:	f005 ff64 	bl	80071ac <HAL_TIM_Base_Init>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ea:	f000 f935 	bl	8001558 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012f4:	f107 0310 	add.w	r3, r7, #16
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <MX_TIM2_Init+0x98>)
 80012fc:	f006 f9a5 	bl	800764a <HAL_TIM_ConfigClockSource>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001306:	f000 f927 	bl	8001558 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	; (8001330 <MX_TIM2_Init+0x98>)
 8001318:	f006 fbbc 	bl	8007a94 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001322:	f000 f919 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3720      	adds	r7, #32
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000388 	.word	0x20000388

08001334 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <MX_USART2_UART_Init+0x58>)
 800133a:	4a15      	ldr	r2, [pc, #84]	; (8001390 <MX_USART2_UART_Init+0x5c>)
 800133c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800133e:	4b13      	ldr	r3, [pc, #76]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001340:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001344:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001346:	4b11      	ldr	r3, [pc, #68]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <MX_USART2_UART_Init+0x58>)
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001352:	4b0e      	ldr	r3, [pc, #56]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001354:	2200      	movs	r2, #0
 8001356:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <MX_USART2_UART_Init+0x58>)
 800135a:	220c      	movs	r2, #12
 800135c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001360:	2200      	movs	r2, #0
 8001362:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001366:	2200      	movs	r2, #0
 8001368:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <MX_USART2_UART_Init+0x58>)
 800136c:	2200      	movs	r2, #0
 800136e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001370:	4b06      	ldr	r3, [pc, #24]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001372:	2200      	movs	r2, #0
 8001374:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001376:	4805      	ldr	r0, [pc, #20]	; (800138c <MX_USART2_UART_Init+0x58>)
 8001378:	f006 fc32 	bl	8007be0 <HAL_UART_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001382:	f000 f8e9 	bl	8001558 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001386:	bf00      	nop
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	200003d4 	.word	0x200003d4
 8001390:	40004400 	.word	0x40004400

08001394 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800139a:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <MX_DMA_Init+0x80>)
 800139c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139e:	4a1d      	ldr	r2, [pc, #116]	; (8001414 <MX_DMA_Init+0x80>)
 80013a0:	f043 0302 	orr.w	r3, r3, #2
 80013a4:	6493      	str	r3, [r2, #72]	; 0x48
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_DMA_Init+0x80>)
 80013a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_DMA_Init+0x80>)
 80013b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b6:	4a17      	ldr	r2, [pc, #92]	; (8001414 <MX_DMA_Init+0x80>)
 80013b8:	f043 0301 	orr.w	r3, r3, #1
 80013bc:	6493      	str	r3, [r2, #72]	; 0x48
 80013be:	4b15      	ldr	r3, [pc, #84]	; (8001414 <MX_DMA_Init+0x80>)
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f003 0301 	and.w	r3, r3, #1
 80013c6:	603b      	str	r3, [r7, #0]
 80013c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80013ca:	2200      	movs	r2, #0
 80013cc:	2100      	movs	r1, #0
 80013ce:	200c      	movs	r0, #12
 80013d0:	f001 fdd1 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80013d4:	200c      	movs	r0, #12
 80013d6:	f001 fdea 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	200d      	movs	r0, #13
 80013e0:	f001 fdc9 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80013e4:	200d      	movs	r0, #13
 80013e6:	f001 fde2 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2011      	movs	r0, #17
 80013f0:	f001 fdc1 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013f4:	2011      	movs	r0, #17
 80013f6:	f001 fdda 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2044      	movs	r0, #68	; 0x44
 8001400:	f001 fdb9 	bl	8002f76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8001404:	2044      	movs	r0, #68	; 0x44
 8001406:	f001 fdd2 	bl	8002fae <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40021000 	.word	0x40021000

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 0314 	add.w	r3, r7, #20
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <MX_GPIO_Init+0xc4>)
 8001430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001432:	4a2a      	ldr	r2, [pc, #168]	; (80014dc <MX_GPIO_Init+0xc4>)
 8001434:	f043 0304 	orr.w	r3, r3, #4
 8001438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143a:	4b28      	ldr	r3, [pc, #160]	; (80014dc <MX_GPIO_Init+0xc4>)
 800143c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143e:	f003 0304 	and.w	r3, r3, #4
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001446:	4b25      	ldr	r3, [pc, #148]	; (80014dc <MX_GPIO_Init+0xc4>)
 8001448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144a:	4a24      	ldr	r2, [pc, #144]	; (80014dc <MX_GPIO_Init+0xc4>)
 800144c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001452:	4b22      	ldr	r3, [pc, #136]	; (80014dc <MX_GPIO_Init+0xc4>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145e:	4b1f      	ldr	r3, [pc, #124]	; (80014dc <MX_GPIO_Init+0xc4>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <MX_GPIO_Init+0xc4>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <MX_GPIO_Init+0xc4>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60bb      	str	r3, [r7, #8]
 8001474:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001476:	4b19      	ldr	r3, [pc, #100]	; (80014dc <MX_GPIO_Init+0xc4>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	4a18      	ldr	r2, [pc, #96]	; (80014dc <MX_GPIO_Init+0xc4>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001482:	4b16      	ldr	r3, [pc, #88]	; (80014dc <MX_GPIO_Init+0xc4>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	2110      	movs	r1, #16
 8001492:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001496:	f002 f9d3 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	480b      	ldr	r0, [pc, #44]	; (80014e0 <MX_GPIO_Init+0xc8>)
 80014b2:	f002 f81b 	bl	80034ec <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80014b6:	2310      	movs	r3, #16
 80014b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ba:	2301      	movs	r3, #1
 80014bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c2:	2300      	movs	r3, #0
 80014c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80014c6:	f107 0314 	add.w	r3, r7, #20
 80014ca:	4619      	mov	r1, r3
 80014cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d0:	f002 f80c 	bl	80034ec <HAL_GPIO_Init>

}
 80014d4:	bf00      	nop
 80014d6:	3728      	adds	r7, #40	; 0x28
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000800 	.word	0x48000800

080014e4 <_write>:

/* USER CODE BEGIN 4 */
int _write(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e009      	b.n	800150a <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	60ba      	str	r2, [r7, #8]
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fd24 	bl	8000f4c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	3301      	adds	r3, #1
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	697a      	ldr	r2, [r7, #20]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	429a      	cmp	r2, r3
 8001510:	dbf1      	blt.n	80014f6 <_write+0x12>
	}
	return len;
 8001512:	687b      	ldr	r3, [r7, #4]
}
 8001514:	4618      	mov	r0, r3
 8001516:	3718      	adds	r7, #24
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]

	if (htim == &htim2)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d10a      	bne.n	8001542 <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		if(timer_flag == 1)
 800152c:	4b08      	ldr	r3, [pc, #32]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b01      	cmp	r3, #1
 8001534:	d102      	bne.n	800153c <HAL_TIM_PeriodElapsedCallback+0x20>
		{
			printf("k \n");
 8001536:	4807      	ldr	r0, [pc, #28]	; (8001554 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001538:	f008 fa1a 	bl	8009970 <puts>
		}
		timer_flag = 1;
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800153e:	2201      	movs	r2, #1
 8001540:	701a      	strb	r2, [r3, #0]

	}
}
 8001542:	bf00      	nop
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	20000388 	.word	0x20000388
 8001550:	200004a8 	.word	0x200004a8
 8001554:	0800d2d8 	.word	0x0800d2d8

08001558 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800155c:	b672      	cpsid	i
}
 800155e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001560:	e7fe      	b.n	8001560 <Error_Handler+0x8>
	...

08001564 <filter_measurements>:
static int32_t filter_xmag_sum;
static int32_t filter_ymag_sum;
static int32_t filter_zmag_sum;

static void filter_measurements(mpu9250_data *data_imu)
{
 8001564:	b4b0      	push	{r4, r5, r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	filter_xacc_sum += data_imu->x_accel - filter_data[filter_counter].x_accel;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001572:	4618      	mov	r0, r3
 8001574:	4b73      	ldr	r3, [pc, #460]	; (8001744 <filter_measurements+0x1e0>)
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	4619      	mov	r1, r3
 800157a:	4a73      	ldr	r2, [pc, #460]	; (8001748 <filter_measurements+0x1e4>)
 800157c:	460b      	mov	r3, r1
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	4413      	add	r3, r2
 8001586:	f9b3 3000 	ldrsh.w	r3, [r3]
 800158a:	1ac2      	subs	r2, r0, r3
 800158c:	4b6f      	ldr	r3, [pc, #444]	; (800174c <filter_measurements+0x1e8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4413      	add	r3, r2
 8001592:	4a6e      	ldr	r2, [pc, #440]	; (800174c <filter_measurements+0x1e8>)
 8001594:	6013      	str	r3, [r2, #0]
	filter_yacc_sum += data_imu->y_accel - filter_data[filter_counter].y_accel;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800159c:	4618      	mov	r0, r3
 800159e:	4b69      	ldr	r3, [pc, #420]	; (8001744 <filter_measurements+0x1e0>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	4619      	mov	r1, r3
 80015a4:	4a68      	ldr	r2, [pc, #416]	; (8001748 <filter_measurements+0x1e4>)
 80015a6:	460b      	mov	r3, r1
 80015a8:	00db      	lsls	r3, r3, #3
 80015aa:	440b      	add	r3, r1
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	3302      	adds	r3, #2
 80015b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b6:	1ac2      	subs	r2, r0, r3
 80015b8:	4b65      	ldr	r3, [pc, #404]	; (8001750 <filter_measurements+0x1ec>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	4a64      	ldr	r2, [pc, #400]	; (8001750 <filter_measurements+0x1ec>)
 80015c0:	6013      	str	r3, [r2, #0]
	filter_zacc_sum += data_imu->z_accel - filter_data[filter_counter].z_accel;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015c8:	4618      	mov	r0, r3
 80015ca:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <filter_measurements+0x1e0>)
 80015cc:	881b      	ldrh	r3, [r3, #0]
 80015ce:	4619      	mov	r1, r3
 80015d0:	4a5d      	ldr	r2, [pc, #372]	; (8001748 <filter_measurements+0x1e4>)
 80015d2:	460b      	mov	r3, r1
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	440b      	add	r3, r1
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	3304      	adds	r3, #4
 80015de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015e2:	1ac2      	subs	r2, r0, r3
 80015e4:	4b5b      	ldr	r3, [pc, #364]	; (8001754 <filter_measurements+0x1f0>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a5a      	ldr	r2, [pc, #360]	; (8001754 <filter_measurements+0x1f0>)
 80015ec:	6013      	str	r3, [r2, #0]
	filter_xmag_sum += data_imu->x_mag - filter_data[filter_counter].x_mag;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015f4:	4618      	mov	r0, r3
 80015f6:	4b53      	ldr	r3, [pc, #332]	; (8001744 <filter_measurements+0x1e0>)
 80015f8:	881b      	ldrh	r3, [r3, #0]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4a52      	ldr	r2, [pc, #328]	; (8001748 <filter_measurements+0x1e4>)
 80015fe:	460b      	mov	r3, r1
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	440b      	add	r3, r1
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	330c      	adds	r3, #12
 800160a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800160e:	1ac2      	subs	r2, r0, r3
 8001610:	4b51      	ldr	r3, [pc, #324]	; (8001758 <filter_measurements+0x1f4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4413      	add	r3, r2
 8001616:	4a50      	ldr	r2, [pc, #320]	; (8001758 <filter_measurements+0x1f4>)
 8001618:	6013      	str	r3, [r2, #0]
	filter_ymag_sum += data_imu->y_mag - filter_data[filter_counter].y_mag;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001620:	4618      	mov	r0, r3
 8001622:	4b48      	ldr	r3, [pc, #288]	; (8001744 <filter_measurements+0x1e0>)
 8001624:	881b      	ldrh	r3, [r3, #0]
 8001626:	4619      	mov	r1, r3
 8001628:	4a47      	ldr	r2, [pc, #284]	; (8001748 <filter_measurements+0x1e4>)
 800162a:	460b      	mov	r3, r1
 800162c:	00db      	lsls	r3, r3, #3
 800162e:	440b      	add	r3, r1
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	330e      	adds	r3, #14
 8001636:	f9b3 3000 	ldrsh.w	r3, [r3]
 800163a:	1ac2      	subs	r2, r0, r3
 800163c:	4b47      	ldr	r3, [pc, #284]	; (800175c <filter_measurements+0x1f8>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4413      	add	r3, r2
 8001642:	4a46      	ldr	r2, [pc, #280]	; (800175c <filter_measurements+0x1f8>)
 8001644:	6013      	str	r3, [r2, #0]
	filter_zmag_sum += data_imu->z_mag - filter_data[filter_counter].z_mag;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800164c:	4618      	mov	r0, r3
 800164e:	4b3d      	ldr	r3, [pc, #244]	; (8001744 <filter_measurements+0x1e0>)
 8001650:	881b      	ldrh	r3, [r3, #0]
 8001652:	4619      	mov	r1, r3
 8001654:	4a3c      	ldr	r2, [pc, #240]	; (8001748 <filter_measurements+0x1e4>)
 8001656:	460b      	mov	r3, r1
 8001658:	00db      	lsls	r3, r3, #3
 800165a:	440b      	add	r3, r1
 800165c:	005b      	lsls	r3, r3, #1
 800165e:	4413      	add	r3, r2
 8001660:	3310      	adds	r3, #16
 8001662:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001666:	1ac2      	subs	r2, r0, r3
 8001668:	4b3d      	ldr	r3, [pc, #244]	; (8001760 <filter_measurements+0x1fc>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4413      	add	r3, r2
 800166e:	4a3c      	ldr	r2, [pc, #240]	; (8001760 <filter_measurements+0x1fc>)
 8001670:	6013      	str	r3, [r2, #0]

	filter_data[filter_counter] = *data_imu;
 8001672:	4b34      	ldr	r3, [pc, #208]	; (8001744 <filter_measurements+0x1e0>)
 8001674:	881b      	ldrh	r3, [r3, #0]
 8001676:	4619      	mov	r1, r3
 8001678:	4a33      	ldr	r2, [pc, #204]	; (8001748 <filter_measurements+0x1e4>)
 800167a:	460b      	mov	r3, r1
 800167c:	00db      	lsls	r3, r3, #3
 800167e:	440b      	add	r3, r1
 8001680:	005b      	lsls	r3, r3, #1
 8001682:	4413      	add	r3, r2
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	6815      	ldr	r5, [r2, #0]
 8001688:	6854      	ldr	r4, [r2, #4]
 800168a:	6890      	ldr	r0, [r2, #8]
 800168c:	68d1      	ldr	r1, [r2, #12]
 800168e:	601d      	str	r5, [r3, #0]
 8001690:	605c      	str	r4, [r3, #4]
 8001692:	6098      	str	r0, [r3, #8]
 8001694:	60d9      	str	r1, [r3, #12]
 8001696:	8a12      	ldrh	r2, [r2, #16]
 8001698:	821a      	strh	r2, [r3, #16]
	filter_counter++;
 800169a:	4b2a      	ldr	r3, [pc, #168]	; (8001744 <filter_measurements+0x1e0>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	3301      	adds	r3, #1
 80016a0:	b29a      	uxth	r2, r3
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <filter_measurements+0x1e0>)
 80016a4:	801a      	strh	r2, [r3, #0]
	if	(filter_counter == FILTER_LENGTH)
 80016a6:	4b27      	ldr	r3, [pc, #156]	; (8001744 <filter_measurements+0x1e0>)
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	2bc8      	cmp	r3, #200	; 0xc8
 80016ac:	d102      	bne.n	80016b4 <filter_measurements+0x150>
	{
		filter_counter = 0;
 80016ae:	4b25      	ldr	r3, [pc, #148]	; (8001744 <filter_measurements+0x1e0>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	801a      	strh	r2, [r3, #0]
	}
	data_imu ->x_accel = filter_xacc_sum / FILTER_LENGTH;
 80016b4:	4b25      	ldr	r3, [pc, #148]	; (800174c <filter_measurements+0x1e8>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a2a      	ldr	r2, [pc, #168]	; (8001764 <filter_measurements+0x200>)
 80016ba:	fb82 1203 	smull	r1, r2, r2, r3
 80016be:	1192      	asrs	r2, r2, #6
 80016c0:	17db      	asrs	r3, r3, #31
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	b21a      	sxth	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	801a      	strh	r2, [r3, #0]
	data_imu ->y_accel = filter_yacc_sum / FILTER_LENGTH;
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <filter_measurements+0x1ec>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a25      	ldr	r2, [pc, #148]	; (8001764 <filter_measurements+0x200>)
 80016d0:	fb82 1203 	smull	r1, r2, r2, r3
 80016d4:	1192      	asrs	r2, r2, #6
 80016d6:	17db      	asrs	r3, r3, #31
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	b21a      	sxth	r2, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	805a      	strh	r2, [r3, #2]
	data_imu ->z_accel = filter_zacc_sum / FILTER_LENGTH;
 80016e0:	4b1c      	ldr	r3, [pc, #112]	; (8001754 <filter_measurements+0x1f0>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1f      	ldr	r2, [pc, #124]	; (8001764 <filter_measurements+0x200>)
 80016e6:	fb82 1203 	smull	r1, r2, r2, r3
 80016ea:	1192      	asrs	r2, r2, #6
 80016ec:	17db      	asrs	r3, r3, #31
 80016ee:	1ad3      	subs	r3, r2, r3
 80016f0:	b21a      	sxth	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	809a      	strh	r2, [r3, #4]
	data_imu ->x_mag = filter_xmag_sum / FILTER_LENGTH;
 80016f6:	4b18      	ldr	r3, [pc, #96]	; (8001758 <filter_measurements+0x1f4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a1a      	ldr	r2, [pc, #104]	; (8001764 <filter_measurements+0x200>)
 80016fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001700:	1192      	asrs	r2, r2, #6
 8001702:	17db      	asrs	r3, r3, #31
 8001704:	1ad3      	subs	r3, r2, r3
 8001706:	b21a      	sxth	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	819a      	strh	r2, [r3, #12]
	data_imu ->y_mag = filter_ymag_sum / FILTER_LENGTH;
 800170c:	4b13      	ldr	r3, [pc, #76]	; (800175c <filter_measurements+0x1f8>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a14      	ldr	r2, [pc, #80]	; (8001764 <filter_measurements+0x200>)
 8001712:	fb82 1203 	smull	r1, r2, r2, r3
 8001716:	1192      	asrs	r2, r2, #6
 8001718:	17db      	asrs	r3, r3, #31
 800171a:	1ad3      	subs	r3, r2, r3
 800171c:	b21a      	sxth	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	81da      	strh	r2, [r3, #14]
	data_imu ->z_mag = filter_zmag_sum / FILTER_LENGTH;
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <filter_measurements+0x1fc>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a0f      	ldr	r2, [pc, #60]	; (8001764 <filter_measurements+0x200>)
 8001728:	fb82 1203 	smull	r1, r2, r2, r3
 800172c:	1192      	asrs	r2, r2, #6
 800172e:	17db      	asrs	r3, r3, #31
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	b21a      	sxth	r2, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	821a      	strh	r2, [r3, #16]

}
 8001738:	bf00      	nop
 800173a:	370c      	adds	r7, #12
 800173c:	46bd      	mov	sp, r7
 800173e:	bcb0      	pop	{r4, r5, r7}
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	200004c4 	.word	0x200004c4
 8001748:	200004c8 	.word	0x200004c8
 800174c:	200012d8 	.word	0x200012d8
 8001750:	200012dc 	.word	0x200012dc
 8001754:	200012e0 	.word	0x200012e0
 8001758:	200012e4 	.word	0x200012e4
 800175c:	200012e8 	.word	0x200012e8
 8001760:	200012ec 	.word	0x200012ec
 8001764:	51eb851f 	.word	0x51eb851f

08001768 <activate_spi_mpu9250>:
static void activate_spi_mpu9250()
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2110      	movs	r1, #16
 8001770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001774:	f002 f864 	bl	8003840 <HAL_GPIO_WritePin>
}
 8001778:	bf00      	nop
 800177a:	bd80      	pop	{r7, pc}

0800177c <deactivate_spi_mpu9250>:

static void deactivate_spi_mpu9250()
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8001780:	2201      	movs	r2, #1
 8001782:	2110      	movs	r1, #16
 8001784:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001788:	f002 f85a 	bl	8003840 <HAL_GPIO_WritePin>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <ak8963_write_reg>:

void ak8963_write_reg(uint8_t reg, uint8_t data)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	460a      	mov	r2, r1
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4613      	mov	r3, r2
 800179e:	71bb      	strb	r3, [r7, #6]
	mpu9250_write_reg(I2C_SLV0_ADDR_REG, AK8963_ADDRESS);
 80017a0:	210c      	movs	r1, #12
 80017a2:	2025      	movs	r0, #37	; 0x25
 80017a4:	f000 fa62 	bl	8001c6c <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_REG_REG, reg);
 80017a8:	79fb      	ldrb	r3, [r7, #7]
 80017aa:	4619      	mov	r1, r3
 80017ac:	2026      	movs	r0, #38	; 0x26
 80017ae:	f000 fa5d 	bl	8001c6c <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_DATA_REG, data);
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	4619      	mov	r1, r3
 80017b6:	2063      	movs	r0, #99	; 0x63
 80017b8:	f000 fa58 	bl	8001c6c <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|0x01));
 80017bc:	2181      	movs	r1, #129	; 0x81
 80017be:	2027      	movs	r0, #39	; 0x27
 80017c0:	f000 fa54 	bl	8001c6c <mpu9250_write_reg>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <ak8963_read_reg>:

void ak8963_read_reg(uint8_t start_reg, uint8_t *data, uint8_t len)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	6039      	str	r1, [r7, #0]
 80017d6:	71fb      	strb	r3, [r7, #7]
 80017d8:	4613      	mov	r3, r2
 80017da:	71bb      	strb	r3, [r7, #6]
	mpu9250_write_reg(I2C_SLV0_ADDR_REG, 0x80|AK8963_ADDRESS);
 80017dc:	218c      	movs	r1, #140	; 0x8c
 80017de:	2025      	movs	r0, #37	; 0x25
 80017e0:	f000 fa44 	bl	8001c6c <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_REG_REG, start_reg);
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	4619      	mov	r1, r3
 80017e8:	2026      	movs	r0, #38	; 0x26
 80017ea:	f000 fa3f 	bl	8001c6c <mpu9250_write_reg>
	mpu9250_write_reg(I2C_SLV0_CTRL_REG, (I2C_SLV0_CTRL_EN|len));
 80017ee:	79bb      	ldrb	r3, [r7, #6]
 80017f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	4619      	mov	r1, r3
 80017f8:	2027      	movs	r0, #39	; 0x27
 80017fa:	f000 fa37 	bl	8001c6c <mpu9250_write_reg>
	HAL_Delay(10);
 80017fe:	200a      	movs	r0, #10
 8001800:	f001 faba 	bl	8002d78 <HAL_Delay>
	mpu9250_read_reg(EXT_SENS_DATA_00_REG, data, len);
 8001804:	79bb      	ldrb	r3, [r7, #6]
 8001806:	461a      	mov	r2, r3
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	2049      	movs	r0, #73	; 0x49
 800180c:	f000 fa4c 	bl	8001ca8 <mpu9250_read_reg>

}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <mpu9250_init>:

void mpu9250_init()
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
	uint8_t temp_data[7];

	// Resetting IMU and magnetometer
	mpu9250_write_reg(USR_CTRL_REG, 0);
 800181e:	2100      	movs	r1, #0
 8001820:	206a      	movs	r0, #106	; 0x6a
 8001822:	f000 fa23 	bl	8001c6c <mpu9250_write_reg>
	HAL_Delay(300);
 8001826:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800182a:	f001 faa5 	bl	8002d78 <HAL_Delay>
	mpu9250_write_reg(0x27, 2);
 800182e:	2102      	movs	r1, #2
 8001830:	2027      	movs	r0, #39	; 0x27
 8001832:	f000 fa1b 	bl	8001c6c <mpu9250_write_reg>
	HAL_Delay(300);
 8001836:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800183a:	f001 fa9d 	bl	8002d78 <HAL_Delay>
	mpu9250_write_reg(USR_CTRL_REG, USR_CTRL_REG_I2CEN);
 800183e:	2120      	movs	r1, #32
 8001840:	206a      	movs	r0, #106	; 0x6a
 8001842:	f000 fa13 	bl	8001c6c <mpu9250_write_reg>
	mpu9250_write_reg(I2C_MSTR_CTRL_REG, I2C_MSTR_CTRL_I2CCLK_400);
 8001846:	210d      	movs	r1, #13
 8001848:	2024      	movs	r0, #36	; 0x24
 800184a:	f000 fa0f 	bl	8001c6c <mpu9250_write_reg>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 800184e:	2100      	movs	r1, #0
 8001850:	200a      	movs	r0, #10
 8001852:	f7ff ff9d 	bl	8001790 <ak8963_write_reg>
	HAL_Delay(300);
 8001856:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800185a:	f001 fa8d 	bl	8002d78 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL2_REG, 0x01);
 800185e:	2101      	movs	r1, #1
 8001860:	200b      	movs	r0, #11
 8001862:	f7ff ff95 	bl	8001790 <ak8963_write_reg>
	HAL_Delay(300);
 8001866:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800186a:	f001 fa85 	bl	8002d78 <HAL_Delay>
	mpu9250_write_reg(PWR_MGTM1_REG, 0x80);
 800186e:	2180      	movs	r1, #128	; 0x80
 8001870:	206b      	movs	r0, #107	; 0x6b
 8001872:	f000 f9fb 	bl	8001c6c <mpu9250_write_reg>
	HAL_Delay(100);
 8001876:	2064      	movs	r0, #100	; 0x64
 8001878:	f001 fa7e 	bl	8002d78 <HAL_Delay>

	// gyroscope configuration
	mpu9250_write_reg(GYRO_CONFIG_REG, GYRO_FS_500);
 800187c:	2108      	movs	r1, #8
 800187e:	201b      	movs	r0, #27
 8001880:	f000 f9f4 	bl	8001c6c <mpu9250_write_reg>

	// accelerometer configuration
	mpu9250_write_reg(ACCEL_CONFIG_REG, ACCEL_FS_4G);
 8001884:	2108      	movs	r1, #8
 8001886:	201c      	movs	r0, #28
 8001888:	f000 f9f0 	bl	8001c6c <mpu9250_write_reg>

	//	Enable I2C master setting 400 kHz
	mpu9250_write_reg(USR_CTRL_REG, USR_CTRL_REG_I2CEN);
 800188c:	2120      	movs	r1, #32
 800188e:	206a      	movs	r0, #106	; 0x6a
 8001890:	f000 f9ec 	bl	8001c6c <mpu9250_write_reg>
	mpu9250_write_reg(I2C_MSTR_CTRL_REG, I2C_MSTR_CTRL_I2CCLK_400);
 8001894:	210d      	movs	r1, #13
 8001896:	2024      	movs	r0, #36	; 0x24
 8001898:	f000 f9e8 	bl	8001c6c <mpu9250_write_reg>

	// Setting the sampling rate of the IMU sensor to 1 kHz
	mpu9250_write_reg(CONFIG_REG, 1);
 800189c:	2101      	movs	r1, #1
 800189e:	201a      	movs	r0, #26
 80018a0:	f000 f9e4 	bl	8001c6c <mpu9250_write_reg>


	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 80018a4:	2100      	movs	r1, #0
 80018a6:	200a      	movs	r0, #10
 80018a8:	f7ff ff72 	bl	8001790 <ak8963_write_reg>
	HAL_Delay(100);
 80018ac:	2064      	movs	r0, #100	; 0x64
 80018ae:	f001 fa63 	bl	8002d78 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_FUSE_ROM);
 80018b2:	210f      	movs	r1, #15
 80018b4:	200a      	movs	r0, #10
 80018b6:	f7ff ff6b 	bl	8001790 <ak8963_write_reg>
	HAL_Delay(100);
 80018ba:	2064      	movs	r0, #100	; 0x64
 80018bc:	f001 fa5c 	bl	8002d78 <HAL_Delay>
	ak8963_read_reg(AK8963_SEN_ONSET_REG, mag_adjust, 3);
 80018c0:	2203      	movs	r2, #3
 80018c2:	4917      	ldr	r1, [pc, #92]	; (8001920 <mpu9250_init+0x108>)
 80018c4:	2010      	movs	r0, #16
 80018c6:	f7ff ff81 	bl	80017cc <ak8963_read_reg>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_PWR_DWN);
 80018ca:	2100      	movs	r1, #0
 80018cc:	200a      	movs	r0, #10
 80018ce:	f7ff ff5f 	bl	8001790 <ak8963_write_reg>
	HAL_Delay(100);
 80018d2:	2064      	movs	r0, #100	; 0x64
 80018d4:	f001 fa50 	bl	8002d78 <HAL_Delay>
	ak8963_write_reg(AK8963_CTRL_REG, AK8963_CONT_MEAS2);
 80018d8:	2116      	movs	r1, #22
 80018da:	200a      	movs	r0, #10
 80018dc:	f7ff ff58 	bl	8001790 <ak8963_write_reg>
	HAL_Delay(100);
 80018e0:	2064      	movs	r0, #100	; 0x64
 80018e2:	f001 fa49 	bl	8002d78 <HAL_Delay>
	// Setting the sampling rate of the magnetometer to 50 HZ
	mpu9250_write_reg(I2C_SLV4_DO_REG, 19);
 80018e6:	2113      	movs	r1, #19
 80018e8:	2034      	movs	r0, #52	; 0x34
 80018ea:	f000 f9bf 	bl	8001c6c <mpu9250_write_reg>
	mpu9250_write_reg(I2C_MSTR_DEL_REG, 1);
 80018ee:	2101      	movs	r1, #1
 80018f0:	2067      	movs	r0, #103	; 0x67
 80018f2:	f000 f9bb 	bl	8001c6c <mpu9250_write_reg>
	mpu9250_write_reg(PWR_MGTM1_REG, PWR_MGTM1_PLL_EXSLP);
 80018f6:	2101      	movs	r1, #1
 80018f8:	206b      	movs	r0, #107	; 0x6b
 80018fa:	f000 f9b7 	bl	8001c6c <mpu9250_write_reg>
		HAL_Delay(100);
 80018fe:	2064      	movs	r0, #100	; 0x64
 8001900:	f001 fa3a 	bl	8002d78 <HAL_Delay>
	ak8963_read_reg(AK8963_DATA_ONSET_REG, temp_data, 7);
 8001904:	463b      	mov	r3, r7
 8001906:	2207      	movs	r2, #7
 8001908:	4619      	mov	r1, r3
 800190a:	2003      	movs	r0, #3
 800190c:	f7ff ff5e 	bl	80017cc <ak8963_read_reg>
	HAL_Delay(100);
 8001910:	2064      	movs	r0, #100	; 0x64
 8001912:	f001 fa31 	bl	8002d78 <HAL_Delay>

}
 8001916:	bf00      	nop
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200004c0 	.word	0x200004c0

08001924 <mpu9250_read_sensor>:

void mpu9250_read_sensor(mpu9250_data *data_imu)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b084      	sub	sp, #16
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	static uint8_t data1[20],data2[20], buffer_counter = 0;
	uint8_t temp_data = 0x80|ONSET_DATA_REG;
 800192c:	23bb      	movs	r3, #187	; 0xbb
 800192e:	73fb      	strb	r3, [r7, #15]
	int16_t temp_mag[3];

	activate_spi_mpu9250();
 8001930:	f7ff ff1a 	bl	8001768 <activate_spi_mpu9250>
	HAL_SPI_Transmit(&hspi1, &temp_data, 1, 100);
 8001934:	f107 010f 	add.w	r1, r7, #15
 8001938:	2364      	movs	r3, #100	; 0x64
 800193a:	2201      	movs	r2, #1
 800193c:	4844      	ldr	r0, [pc, #272]	; (8001a50 <mpu9250_read_sensor+0x12c>)
 800193e:	f004 fa18 	bl	8005d72 <HAL_SPI_Transmit>
	if(buffer_counter == 0)
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <mpu9250_read_sensor+0x130>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 808a 	bne.w	8001a60 <mpu9250_read_sensor+0x13c>
	{
		HAL_SPI_Receive_DMA(&hspi1, data1, 20);
 800194c:	2214      	movs	r2, #20
 800194e:	4942      	ldr	r1, [pc, #264]	; (8001a58 <mpu9250_read_sensor+0x134>)
 8001950:	483f      	ldr	r0, [pc, #252]	; (8001a50 <mpu9250_read_sensor+0x12c>)
 8001952:	f004 febf 	bl	80066d4 <HAL_SPI_Receive_DMA>


		data_imu ->x_accel = ((int16_t)data2[0]<<8) + data2[1];
 8001956:	4b41      	ldr	r3, [pc, #260]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	b29b      	uxth	r3, r3
 800195c:	021b      	lsls	r3, r3, #8
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	b29b      	uxth	r3, r3
 8001966:	4413      	add	r3, r2
 8001968:	b29b      	uxth	r3, r3
 800196a:	b21a      	sxth	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	801a      	strh	r2, [r3, #0]
		data_imu ->y_accel = ((int16_t)data2[2]<<8) + data2[3];
 8001970:	4b3a      	ldr	r3, [pc, #232]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	b29b      	uxth	r3, r3
 8001976:	021b      	lsls	r3, r3, #8
 8001978:	b29a      	uxth	r2, r3
 800197a:	4b38      	ldr	r3, [pc, #224]	; (8001a5c <mpu9250_read_sensor+0x138>)
 800197c:	78db      	ldrb	r3, [r3, #3]
 800197e:	b29b      	uxth	r3, r3
 8001980:	4413      	add	r3, r2
 8001982:	b29b      	uxth	r3, r3
 8001984:	b21a      	sxth	r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	805a      	strh	r2, [r3, #2]
		data_imu ->z_accel = ((int16_t)data2[4]<<8) + data2[5];
 800198a:	4b34      	ldr	r3, [pc, #208]	; (8001a5c <mpu9250_read_sensor+0x138>)
 800198c:	791b      	ldrb	r3, [r3, #4]
 800198e:	b29b      	uxth	r3, r3
 8001990:	021b      	lsls	r3, r3, #8
 8001992:	b29a      	uxth	r2, r3
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001996:	795b      	ldrb	r3, [r3, #5]
 8001998:	b29b      	uxth	r3, r3
 800199a:	4413      	add	r3, r2
 800199c:	b29b      	uxth	r3, r3
 800199e:	b21a      	sxth	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	809a      	strh	r2, [r3, #4]

		data_imu ->x_gyro = ((int16_t)data2[8]<<8) + data2[9] -   X_GYRO_BIAS;
 80019a4:	4b2d      	ldr	r3, [pc, #180]	; (8001a5c <mpu9250_read_sensor+0x138>)
 80019a6:	7a1b      	ldrb	r3, [r3, #8]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	021b      	lsls	r3, r3, #8
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <mpu9250_read_sensor+0x138>)
 80019b0:	7a5b      	ldrb	r3, [r3, #9]
 80019b2:	b29b      	uxth	r3, r3
 80019b4:	4413      	add	r3, r2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	3b6a      	subs	r3, #106	; 0x6a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b21a      	sxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	80da      	strh	r2, [r3, #6]
		data_imu ->y_gyro = ((int16_t)data2[10]<<8) + data2[11] - Y_GYRO_BIAS;
 80019c2:	4b26      	ldr	r3, [pc, #152]	; (8001a5c <mpu9250_read_sensor+0x138>)
 80019c4:	7a9b      	ldrb	r3, [r3, #10]
 80019c6:	b29b      	uxth	r3, r3
 80019c8:	021b      	lsls	r3, r3, #8
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	4b23      	ldr	r3, [pc, #140]	; (8001a5c <mpu9250_read_sensor+0x138>)
 80019ce:	7adb      	ldrb	r3, [r3, #11]
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	3b20      	subs	r3, #32
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b21a      	sxth	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	811a      	strh	r2, [r3, #8]
		data_imu ->z_gyro = ((int16_t)data2[12]<<8) + data2[13] - Z_GYRO_BIAS;
 80019e0:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <mpu9250_read_sensor+0x138>)
 80019e2:	7b1b      	ldrb	r3, [r3, #12]
 80019e4:	b29b      	uxth	r3, r3
 80019e6:	021b      	lsls	r3, r3, #8
 80019e8:	b29a      	uxth	r2, r3
 80019ea:	4b1c      	ldr	r3, [pc, #112]	; (8001a5c <mpu9250_read_sensor+0x138>)
 80019ec:	7b5b      	ldrb	r3, [r3, #13]
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	4413      	add	r3, r2
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3305      	adds	r3, #5
 80019f6:	b29b      	uxth	r3, r3
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	815a      	strh	r2, [r3, #10]

		temp_mag[0] = ((int16_t)data2[15]<<8) + data2[14];
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001a00:	7bdb      	ldrb	r3, [r3, #15]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	b29a      	uxth	r2, r3
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001a0a:	7b9b      	ldrb	r3, [r3, #14]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	4413      	add	r3, r2
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b21b      	sxth	r3, r3
 8001a14:	813b      	strh	r3, [r7, #8]
		temp_mag[1] = ((int16_t)data2[17]<<8) + data2[16];
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001a18:	7c5b      	ldrb	r3, [r3, #17]
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	021b      	lsls	r3, r3, #8
 8001a1e:	b29a      	uxth	r2, r3
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001a22:	7c1b      	ldrb	r3, [r3, #16]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	b21b      	sxth	r3, r3
 8001a2c:	817b      	strh	r3, [r7, #10]
		temp_mag[2] = ((int16_t)data2[19]<<8) + data2[18];
 8001a2e:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001a30:	7cdb      	ldrb	r3, [r3, #19]
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	021b      	lsls	r3, r3, #8
 8001a36:	b29a      	uxth	r2, r3
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <mpu9250_read_sensor+0x138>)
 8001a3a:	7c9b      	ldrb	r3, [r3, #18]
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	4413      	add	r3, r2
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	81bb      	strh	r3, [r7, #12]
		buffer_counter = 1;
 8001a46:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <mpu9250_read_sensor+0x130>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	701a      	strb	r2, [r3, #0]
 8001a4c:	e088      	b.n	8001b60 <mpu9250_read_sensor+0x23c>
 8001a4e:	bf00      	nop
 8001a50:	20000294 	.word	0x20000294
 8001a54:	200012f0 	.word	0x200012f0
 8001a58:	200012f4 	.word	0x200012f4
 8001a5c:	20001308 	.word	0x20001308
	}
	else
	{
		HAL_SPI_Receive_DMA(&hspi1, data2, 20);
 8001a60:	2214      	movs	r2, #20
 8001a62:	497b      	ldr	r1, [pc, #492]	; (8001c50 <mpu9250_read_sensor+0x32c>)
 8001a64:	487b      	ldr	r0, [pc, #492]	; (8001c54 <mpu9250_read_sensor+0x330>)
 8001a66:	f004 fe35 	bl	80066d4 <HAL_SPI_Receive_DMA>

		data_imu ->x_accel = ((int16_t)data1[0]<<8) + data1[1];
 8001a6a:	4b7b      	ldr	r3, [pc, #492]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	021b      	lsls	r3, r3, #8
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001a76:	785b      	ldrb	r3, [r3, #1]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	b29b      	uxth	r3, r3
 8001a7e:	b21a      	sxth	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	801a      	strh	r2, [r3, #0]
		data_imu ->y_accel = ((int16_t)data1[2]<<8) + data1[3];
 8001a84:	4b74      	ldr	r3, [pc, #464]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001a86:	789b      	ldrb	r3, [r3, #2]
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	4b72      	ldr	r3, [pc, #456]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001a90:	78db      	ldrb	r3, [r3, #3]
 8001a92:	b29b      	uxth	r3, r3
 8001a94:	4413      	add	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	b21a      	sxth	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	805a      	strh	r2, [r3, #2]
		data_imu ->z_accel = ((int16_t)data1[4]<<8) + data1[5];
 8001a9e:	4b6e      	ldr	r3, [pc, #440]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001aa0:	791b      	ldrb	r3, [r3, #4]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	021b      	lsls	r3, r3, #8
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	4b6b      	ldr	r3, [pc, #428]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001aaa:	795b      	ldrb	r3, [r3, #5]
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	4413      	add	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	b21a      	sxth	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	809a      	strh	r2, [r3, #4]

		data_imu ->x_gyro = ((int16_t)data1[8]<<8) + data1[9] - X_GYRO_BIAS;
 8001ab8:	4b67      	ldr	r3, [pc, #412]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001aba:	7a1b      	ldrb	r3, [r3, #8]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	021b      	lsls	r3, r3, #8
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	4b65      	ldr	r3, [pc, #404]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001ac4:	7a5b      	ldrb	r3, [r3, #9]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	3b6a      	subs	r3, #106	; 0x6a
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	b21a      	sxth	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	80da      	strh	r2, [r3, #6]
		data_imu ->y_gyro = ((int16_t)data1[10]<<8) + data1[11] - Y_GYRO_BIAS;
 8001ad6:	4b60      	ldr	r3, [pc, #384]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001ad8:	7a9b      	ldrb	r3, [r3, #10]
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	4b5d      	ldr	r3, [pc, #372]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001ae2:	7adb      	ldrb	r3, [r3, #11]
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b20      	subs	r3, #32
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	b21a      	sxth	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	811a      	strh	r2, [r3, #8]
		data_imu ->z_gyro = ((int16_t)data1[12]<<8) + data1[13] - Z_GYRO_BIAS;
 8001af4:	4b58      	ldr	r3, [pc, #352]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001af6:	7b1b      	ldrb	r3, [r3, #12]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	021b      	lsls	r3, r3, #8
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b56      	ldr	r3, [pc, #344]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001b00:	7b5b      	ldrb	r3, [r3, #13]
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	4413      	add	r3, r2
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	3305      	adds	r3, #5
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	b21a      	sxth	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	815a      	strh	r2, [r3, #10]


		temp_mag[0] = ((int16_t)data1[15]<<8) + data1[14];
 8001b12:	4b51      	ldr	r3, [pc, #324]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001b14:	7bdb      	ldrb	r3, [r3, #15]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b4e      	ldr	r3, [pc, #312]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001b1e:	7b9b      	ldrb	r3, [r3, #14]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	4413      	add	r3, r2
 8001b24:	b29b      	uxth	r3, r3
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	813b      	strh	r3, [r7, #8]
		temp_mag[1] = ((int16_t)data1[17]<<8) + data1[16];
 8001b2a:	4b4b      	ldr	r3, [pc, #300]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001b2c:	7c5b      	ldrb	r3, [r3, #17]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	4b48      	ldr	r3, [pc, #288]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001b36:	7c1b      	ldrb	r3, [r3, #16]
 8001b38:	b29b      	uxth	r3, r3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	b29b      	uxth	r3, r3
 8001b3e:	b21b      	sxth	r3, r3
 8001b40:	817b      	strh	r3, [r7, #10]
		temp_mag[2] = ((int16_t)data1[19]<<8) + data1[18];
 8001b42:	4b45      	ldr	r3, [pc, #276]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001b44:	7cdb      	ldrb	r3, [r3, #19]
 8001b46:	b29b      	uxth	r3, r3
 8001b48:	021b      	lsls	r3, r3, #8
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b42      	ldr	r3, [pc, #264]	; (8001c58 <mpu9250_read_sensor+0x334>)
 8001b4e:	7c9b      	ldrb	r3, [r3, #18]
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	4413      	add	r3, r2
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	b21b      	sxth	r3, r3
 8001b58:	81bb      	strh	r3, [r7, #12]
		buffer_counter = 0;
 8001b5a:	4b40      	ldr	r3, [pc, #256]	; (8001c5c <mpu9250_read_sensor+0x338>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	701a      	strb	r2, [r3, #0]
	}

	data_imu ->x_mag = (int16_t)((float) temp_mag[1]  * (((float)mag_adjust[1] - 128) / 256.0f + 1.0f)) - XMAGN_BIAS;
 8001b60:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001b64:	ee07 3a90 	vmov	s15, r3
 8001b68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b6c:	4b3c      	ldr	r3, [pc, #240]	; (8001c60 <mpu9250_read_sensor+0x33c>)
 8001b6e:	785b      	ldrb	r3, [r3, #1]
 8001b70:	ee07 3a90 	vmov	s15, r3
 8001b74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b78:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001c64 <mpu9250_read_sensor+0x340>
 8001b7c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001b80:	ed9f 6a39 	vldr	s12, [pc, #228]	; 8001c68 <mpu9250_read_sensor+0x344>
 8001b84:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b98:	ee17 3a90 	vmov	r3, s15
 8001b9c:	b21b      	sxth	r3, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	3bb4      	subs	r3, #180	; 0xb4
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	b21a      	sxth	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	819a      	strh	r2, [r3, #12]
	data_imu ->y_mag = (int16_t)((float) temp_mag[0]  * (((float)mag_adjust[0] - 128) / 256.0f + 1.0f)) - YMAGN_BIAS;
 8001baa:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001bae:	ee07 3a90 	vmov	s15, r3
 8001bb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	; (8001c60 <mpu9250_read_sensor+0x33c>)
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	ee07 3a90 	vmov	s15, r3
 8001bbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bc2:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001c64 <mpu9250_read_sensor+0x340>
 8001bc6:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001bca:	ed9f 6a27 	vldr	s12, [pc, #156]	; 8001c68 <mpu9250_read_sensor+0x344>
 8001bce:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001bd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001bd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001bda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001be2:	ee17 3a90 	vmov	r3, s15
 8001be6:	b21b      	sxth	r3, r3
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	3bb4      	subs	r3, #180	; 0xb4
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	81da      	strh	r2, [r3, #14]
	data_imu ->z_mag = -(int16_t)((float)temp_mag[2] * (((float)mag_adjust[2] - 128) / 256.0f + 1.0f)) - ZMAGN_BIAS;
 8001bf4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001bf8:	ee07 3a90 	vmov	s15, r3
 8001bfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <mpu9250_read_sensor+0x33c>)
 8001c02:	789b      	ldrb	r3, [r3, #2]
 8001c04:	ee07 3a90 	vmov	s15, r3
 8001c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c0c:	eddf 6a15 	vldr	s13, [pc, #84]	; 8001c64 <mpu9250_read_sensor+0x340>
 8001c10:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8001c14:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8001c68 <mpu9250_read_sensor+0x344>
 8001c18:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001c1c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001c20:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	f06f 03ae 	mvn.w	r3, #174	; 0xae
 8001c38:	1a9b      	subs	r3, r3, r2
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	b21a      	sxth	r2, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	821a      	strh	r2, [r3, #16]

	//	FILTERING
	filter_measurements(data_imu);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff fc8e 	bl	8001564 <filter_measurements>
//	printf("accelerometer : %d, %d, and %d \n", data_imu ->x_accel, data_imu ->y_accel,data_imu ->z_accel);
//	printf("gyroscope : %d, %d, and %d \n", data_imu ->x_gyro, data_imu ->y_gyro,data_imu ->z_gyro);
//	printf("magnetometer : %d, %d, and %d \n", data_imu ->x_mag, data_imu ->y_mag,data_imu ->z_mag);
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	20001308 	.word	0x20001308
 8001c54:	20000294 	.word	0x20000294
 8001c58:	200012f4 	.word	0x200012f4
 8001c5c:	200012f0 	.word	0x200012f0
 8001c60:	200004c0 	.word	0x200004c0
 8001c64:	43000000 	.word	0x43000000
 8001c68:	43800000 	.word	0x43800000

08001c6c <mpu9250_write_reg>:

void mpu9250_write_reg(uint8_t reg, uint8_t data)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	4603      	mov	r3, r0
 8001c74:	460a      	mov	r2, r1
 8001c76:	71fb      	strb	r3, [r7, #7]
 8001c78:	4613      	mov	r3, r2
 8001c7a:	71bb      	strb	r3, [r7, #6]
	activate_spi_mpu9250();
 8001c7c:	f7ff fd74 	bl	8001768 <activate_spi_mpu9250>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8001c80:	1df9      	adds	r1, r7, #7
 8001c82:	2364      	movs	r3, #100	; 0x64
 8001c84:	2201      	movs	r2, #1
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <mpu9250_write_reg+0x38>)
 8001c88:	f004 f873 	bl	8005d72 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 8001c8c:	1db9      	adds	r1, r7, #6
 8001c8e:	2364      	movs	r3, #100	; 0x64
 8001c90:	2201      	movs	r2, #1
 8001c92:	4804      	ldr	r0, [pc, #16]	; (8001ca4 <mpu9250_write_reg+0x38>)
 8001c94:	f004 f86d 	bl	8005d72 <HAL_SPI_Transmit>
	deactivate_spi_mpu9250();
 8001c98:	f7ff fd70 	bl	800177c <deactivate_spi_mpu9250>
}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	20000294 	.word	0x20000294

08001ca8 <mpu9250_read_reg>:

void mpu9250_read_reg(uint8_t reg, uint8_t *data, uint8_t len)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	6039      	str	r1, [r7, #0]
 8001cb2:	71fb      	strb	r3, [r7, #7]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	71bb      	strb	r3, [r7, #6]
	uint8_t temp_data = 0x80|reg;
 8001cb8:	79fb      	ldrb	r3, [r7, #7]
 8001cba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cbe:	b2db      	uxtb	r3, r3
 8001cc0:	73fb      	strb	r3, [r7, #15]
	activate_spi_mpu9250();
 8001cc2:	f7ff fd51 	bl	8001768 <activate_spi_mpu9250>
	HAL_SPI_Transmit(&hspi1, &temp_data , 1, 100);
 8001cc6:	f107 010f 	add.w	r1, r7, #15
 8001cca:	2364      	movs	r3, #100	; 0x64
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4808      	ldr	r0, [pc, #32]	; (8001cf0 <mpu9250_read_reg+0x48>)
 8001cd0:	f004 f84f 	bl	8005d72 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, data, len, 100);
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	2364      	movs	r3, #100	; 0x64
 8001cda:	6839      	ldr	r1, [r7, #0]
 8001cdc:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <mpu9250_read_reg+0x48>)
 8001cde:	f004 f9b6 	bl	800604e <HAL_SPI_Receive>
	deactivate_spi_mpu9250();
 8001ce2:	f7ff fd4b 	bl	800177c <deactivate_spi_mpu9250>
}
 8001ce6:	bf00      	nop
 8001ce8:	3710      	adds	r7, #16
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000294 	.word	0x20000294

08001cf4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
	deactivate_spi_mpu9250();
 8001cfc:	f7ff fd3e 	bl	800177c <deactivate_spi_mpu9250>
}
 8001d00:	bf00      	nop
 8001d02:	3708      	adds	r7, #8
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <estimate_euler_angles>:
	quat ->y/=quat_norm;
	quat ->z/=quat_norm;
}

void estimate_euler_angles(mpu9250_data imu_data, EulerAngles *euler_angles)
{
 8001d08:	b084      	sub	sp, #16
 8001d0a:	b5b0      	push	{r4, r5, r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	float sinroll = sin(euler_angles  -> roll);
 8001d18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7fe fc13 	bl	8000548 <__aeabi_f2d>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	ec43 2b10 	vmov	d0, r2, r3
 8001d2a:	f009 ff29 	bl	800bb80 <sin>
 8001d2e:	ec53 2b10 	vmov	r2, r3, d0
 8001d32:	4610      	mov	r0, r2
 8001d34:	4619      	mov	r1, r3
 8001d36:	f7fe ff37 	bl	8000ba8 <__aeabi_d2f>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	617b      	str	r3, [r7, #20]
	float cosroll = cos(euler_angles  -> roll );
 8001d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7fe fc00 	bl	8000548 <__aeabi_f2d>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	ec43 2b10 	vmov	d0, r2, r3
 8001d50:	f009 fec2 	bl	800bad8 <cos>
 8001d54:	ec53 2b10 	vmov	r2, r3, d0
 8001d58:	4610      	mov	r0, r2
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f7fe ff24 	bl	8000ba8 <__aeabi_d2f>
 8001d60:	4603      	mov	r3, r0
 8001d62:	613b      	str	r3, [r7, #16]
	float sinpitch = sin(euler_angles -> pitch);
 8001d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7fe fbed 	bl	8000548 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	ec43 2b10 	vmov	d0, r2, r3
 8001d76:	f009 ff03 	bl	800bb80 <sin>
 8001d7a:	ec53 2b10 	vmov	r2, r3, d0
 8001d7e:	4610      	mov	r0, r2
 8001d80:	4619      	mov	r1, r3
 8001d82:	f7fe ff11 	bl	8000ba8 <__aeabi_d2f>
 8001d86:	4603      	mov	r3, r0
 8001d88:	60fb      	str	r3, [r7, #12]
	float cospitch = cos(euler_angles -> pitch );
 8001d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe fbda 	bl	8000548 <__aeabi_f2d>
 8001d94:	4602      	mov	r2, r0
 8001d96:	460b      	mov	r3, r1
 8001d98:	ec43 2b10 	vmov	d0, r2, r3
 8001d9c:	f009 fe9c 	bl	800bad8 <cos>
 8001da0:	ec53 2b10 	vmov	r2, r3, d0
 8001da4:	4610      	mov	r0, r2
 8001da6:	4619      	mov	r1, r3
 8001da8:	f7fe fefe 	bl	8000ba8 <__aeabi_d2f>
 8001dac:	4603      	mov	r3, r0
 8001dae:	60bb      	str	r3, [r7, #8]

	float ay_az_sqrt = sqrt((float)imu_data.y_accel * imu_data.y_accel +
 8001db0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001db4:	ee07 3a90 	vmov	s15, r3
 8001db8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dbc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dc8:	ee27 7a27 	vmul.f32	s14, s14, s15
			imu_data.z_accel * imu_data.z_accel);
 8001dcc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001dd0:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 8001dd4:	fb02 f303 	mul.w	r3, r2, r3
	float ay_az_sqrt = sqrt((float)imu_data.y_accel * imu_data.y_accel +
 8001dd8:	ee07 3a90 	vmov	s15, r3
 8001ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de4:	ee17 0a90 	vmov	r0, s15
 8001de8:	f7fe fbae 	bl	8000548 <__aeabi_f2d>
 8001dec:	4602      	mov	r2, r0
 8001dee:	460b      	mov	r3, r1
 8001df0:	ec43 2b10 	vmov	d0, r2, r3
 8001df4:	f009 ff1e 	bl	800bc34 <sqrt>
 8001df8:	ec53 2b10 	vmov	r2, r3, d0
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f7fe fed2 	bl	8000ba8 <__aeabi_d2f>
 8001e04:	4603      	mov	r3, r0
 8001e06:	607b      	str	r3, [r7, #4]
	float ax_ay_az_sqrt = sqrt(ay_az_sqrt * ay_az_sqrt + (float)imu_data.x_accel * imu_data.x_accel);
 8001e08:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e0c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001e10:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001e14:	ee07 3a90 	vmov	s15, r3
 8001e18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e1c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e28:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e30:	ee17 0a90 	vmov	r0, s15
 8001e34:	f7fe fb88 	bl	8000548 <__aeabi_f2d>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	ec43 2b10 	vmov	d0, r2, r3
 8001e40:	f009 fef8 	bl	800bc34 <sqrt>
 8001e44:	ec53 2b10 	vmov	r2, r3, d0
 8001e48:	4610      	mov	r0, r2
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	f7fe feac 	bl	8000ba8 <__aeabi_d2f>
 8001e50:	4603      	mov	r3, r0
 8001e52:	603b      	str	r3, [r7, #0]
	euler_angles ->pitch = atan2(imu_data.x_accel, ay_az_sqrt);
 8001e54:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7fe fb63 	bl	8000524 <__aeabi_i2d>
 8001e5e:	4604      	mov	r4, r0
 8001e60:	460d      	mov	r5, r1
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f7fe fb70 	bl	8000548 <__aeabi_f2d>
 8001e68:	4602      	mov	r2, r0
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	ec43 2b11 	vmov	d1, r2, r3
 8001e70:	ec45 4b10 	vmov	d0, r4, r5
 8001e74:	f009 fedc 	bl	800bc30 <atan2>
 8001e78:	ec53 2b10 	vmov	r2, r3, d0
 8001e7c:	4610      	mov	r0, r2
 8001e7e:	4619      	mov	r1, r3
 8001e80:	f7fe fe92 	bl	8000ba8 <__aeabi_d2f>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001e88:	605a      	str	r2, [r3, #4]
	euler_angles ->roll  = 	atan2(-imu_data.y_accel, -imu_data.z_accel);
 8001e8a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001e8e:	425b      	negs	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7fe fb47 	bl	8000524 <__aeabi_i2d>
 8001e96:	4604      	mov	r4, r0
 8001e98:	460d      	mov	r5, r1
 8001e9a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001e9e:	425b      	negs	r3, r3
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fb3f 	bl	8000524 <__aeabi_i2d>
 8001ea6:	4602      	mov	r2, r0
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	ec43 2b11 	vmov	d1, r2, r3
 8001eae:	ec45 4b10 	vmov	d0, r4, r5
 8001eb2:	f009 febd 	bl	800bc30 <atan2>
 8001eb6:	ec53 2b10 	vmov	r2, r3, d0
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fe73 	bl	8000ba8 <__aeabi_d2f>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ec6:	609a      	str	r2, [r3, #8]
//	float sinroll = ((float)-imu_data.y_accel)/ ay_az_sqrt;
//	float cosroll = ((float)-imu_data.z_accel)/ ay_az_sqrt;
//	float sinpitch = (float)imu_data.x_accel / ax_ay_az_sqrt;
//	float cospitch = (float)ay_az_sqrt / ax_ay_az_sqrt;

	euler_angles ->yaw = atan2((float)imu_data.z_mag * sinroll - (float)imu_data.y_mag * cosroll,
 8001ec8:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001ecc:	ee07 3a90 	vmov	s15, r3
 8001ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ed4:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ed8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001edc:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001ee0:	ee07 3a90 	vmov	s15, r3
 8001ee4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ee8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ef0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef4:	ee17 0a90 	vmov	r0, s15
 8001ef8:	f7fe fb26 	bl	8000548 <__aeabi_f2d>
 8001efc:	4604      	mov	r4, r0
 8001efe:	460d      	mov	r5, r1
				(float)imu_data.x_mag * cospitch + sinpitch *
 8001f00:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f0c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001f10:	ee27 7a27 	vmul.f32	s14, s14, s15
				((float)imu_data.z_mag * cosroll + (float)imu_data.y_mag * sinroll));
 8001f14:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001f18:	ee07 3a90 	vmov	s15, r3
 8001f1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f20:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f24:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001f28:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001f2c:	ee07 3a90 	vmov	s15, r3
 8001f30:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8001f34:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f38:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001f3c:	ee76 6aa7 	vadd.f32	s13, s13, s15
				(float)imu_data.x_mag * cospitch + sinpitch *
 8001f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f48:	ee77 7a27 	vadd.f32	s15, s14, s15
	euler_angles ->yaw = atan2((float)imu_data.z_mag * sinroll - (float)imu_data.y_mag * cosroll,
 8001f4c:	ee17 0a90 	vmov	r0, s15
 8001f50:	f7fe fafa 	bl	8000548 <__aeabi_f2d>
 8001f54:	4602      	mov	r2, r0
 8001f56:	460b      	mov	r3, r1
 8001f58:	ec43 2b11 	vmov	d1, r2, r3
 8001f5c:	ec45 4b10 	vmov	d0, r4, r5
 8001f60:	f009 fe66 	bl	800bc30 <atan2>
 8001f64:	ec53 2b10 	vmov	r2, r3, d0
 8001f68:	4610      	mov	r0, r2
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f7fe fe1c 	bl	8000ba8 <__aeabi_d2f>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f74:	601a      	str	r2, [r3, #0]
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001f80:	b004      	add	sp, #16
 8001f82:	4770      	bx	lr

08001f84 <euler2quater>:

	return euler_angles_static;
}

void euler2quater(Quaternion *quaternion, EulerAngles euler_angles)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08a      	sub	sp, #40	; 0x28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	eef0 6a40 	vmov.f32	s13, s0
 8001f90:	eeb0 7a60 	vmov.f32	s14, s1
 8001f94:	eef0 7a41 	vmov.f32	s15, s2
 8001f98:	edc7 6a00 	vstr	s13, [r7]
 8001f9c:	ed87 7a01 	vstr	s14, [r7, #4]
 8001fa0:	edc7 7a02 	vstr	s15, [r7, #8]
	float cospitch = cos(euler_angles.pitch / 2);
 8001fa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fa8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001fac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fb0:	ee16 0a90 	vmov	r0, s13
 8001fb4:	f7fe fac8 	bl	8000548 <__aeabi_f2d>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	460b      	mov	r3, r1
 8001fbc:	ec43 2b10 	vmov	d0, r2, r3
 8001fc0:	f009 fd8a 	bl	800bad8 <cos>
 8001fc4:	ec53 2b10 	vmov	r2, r3, d0
 8001fc8:	4610      	mov	r0, r2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	f7fe fdec 	bl	8000ba8 <__aeabi_d2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	627b      	str	r3, [r7, #36]	; 0x24
	float sinpitch = sin(euler_angles.pitch / 2);
 8001fd4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001fd8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001fdc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001fe0:	ee16 0a90 	vmov	r0, s13
 8001fe4:	f7fe fab0 	bl	8000548 <__aeabi_f2d>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	ec43 2b10 	vmov	d0, r2, r3
 8001ff0:	f009 fdc6 	bl	800bb80 <sin>
 8001ff4:	ec53 2b10 	vmov	r2, r3, d0
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fdd4 	bl	8000ba8 <__aeabi_d2f>
 8002000:	4603      	mov	r3, r0
 8002002:	623b      	str	r3, [r7, #32]
	float cosroll = cos(euler_angles.roll / 2);
 8002004:	edd7 7a02 	vldr	s15, [r7, #8]
 8002008:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800200c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002010:	ee16 0a90 	vmov	r0, s13
 8002014:	f7fe fa98 	bl	8000548 <__aeabi_f2d>
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	ec43 2b10 	vmov	d0, r2, r3
 8002020:	f009 fd5a 	bl	800bad8 <cos>
 8002024:	ec53 2b10 	vmov	r2, r3, d0
 8002028:	4610      	mov	r0, r2
 800202a:	4619      	mov	r1, r3
 800202c:	f7fe fdbc 	bl	8000ba8 <__aeabi_d2f>
 8002030:	4603      	mov	r3, r0
 8002032:	61fb      	str	r3, [r7, #28]
	float sinroll = sin(euler_angles.roll / 2);
 8002034:	edd7 7a02 	vldr	s15, [r7, #8]
 8002038:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800203c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002040:	ee16 0a90 	vmov	r0, s13
 8002044:	f7fe fa80 	bl	8000548 <__aeabi_f2d>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	ec43 2b10 	vmov	d0, r2, r3
 8002050:	f009 fd96 	bl	800bb80 <sin>
 8002054:	ec53 2b10 	vmov	r2, r3, d0
 8002058:	4610      	mov	r0, r2
 800205a:	4619      	mov	r1, r3
 800205c:	f7fe fda4 	bl	8000ba8 <__aeabi_d2f>
 8002060:	4603      	mov	r3, r0
 8002062:	61bb      	str	r3, [r7, #24]
	float cosyaw = cos(euler_angles.yaw / 2);
 8002064:	edd7 7a00 	vldr	s15, [r7]
 8002068:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800206c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002070:	ee16 0a90 	vmov	r0, s13
 8002074:	f7fe fa68 	bl	8000548 <__aeabi_f2d>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	ec43 2b10 	vmov	d0, r2, r3
 8002080:	f009 fd2a 	bl	800bad8 <cos>
 8002084:	ec53 2b10 	vmov	r2, r3, d0
 8002088:	4610      	mov	r0, r2
 800208a:	4619      	mov	r1, r3
 800208c:	f7fe fd8c 	bl	8000ba8 <__aeabi_d2f>
 8002090:	4603      	mov	r3, r0
 8002092:	617b      	str	r3, [r7, #20]
	float sinyaw = sin(euler_angles.yaw / 2);
 8002094:	edd7 7a00 	vldr	s15, [r7]
 8002098:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800209c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80020a0:	ee16 0a90 	vmov	r0, s13
 80020a4:	f7fe fa50 	bl	8000548 <__aeabi_f2d>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	ec43 2b10 	vmov	d0, r2, r3
 80020b0:	f009 fd66 	bl	800bb80 <sin>
 80020b4:	ec53 2b10 	vmov	r2, r3, d0
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7fe fd74 	bl	8000ba8 <__aeabi_d2f>
 80020c0:	4603      	mov	r3, r0
 80020c2:	613b      	str	r3, [r7, #16]

	quaternion->s =  cospitch * cosroll * cosyaw + sinpitch * sinroll * sinyaw;
 80020c4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80020c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80020cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80020d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d8:	edd7 6a08 	vldr	s13, [r7, #32]
 80020dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80020e0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80020e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80020e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	edc3 7a00 	vstr	s15, [r3]
	quaternion->x =  cospitch * sinroll * cosyaw - sinpitch * cosroll * sinyaw;
 80020f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80020fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80020fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002102:	edd7 7a05 	vldr	s15, [r7, #20]
 8002106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210a:	edd7 6a08 	vldr	s13, [r7, #32]
 800210e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002112:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002116:	edd7 7a04 	vldr	s15, [r7, #16]
 800211a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	edc3 7a01 	vstr	s15, [r3, #4]
	quaternion->y =  sinpitch * cosroll * cosyaw + cospitch * sinroll * sinyaw;
 8002128:	ed97 7a08 	vldr	s14, [r7, #32]
 800212c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002134:	edd7 7a05 	vldr	s15, [r7, #20]
 8002138:	ee27 7a27 	vmul.f32	s14, s14, s15
 800213c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8002140:	edd7 7a06 	vldr	s15, [r7, #24]
 8002144:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002148:	edd7 7a04 	vldr	s15, [r7, #16]
 800214c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002150:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	edc3 7a02 	vstr	s15, [r3, #8]
	quaternion->z =  cospitch * cosroll * sinyaw - sinpitch * sinroll * cosyaw;
 800215a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800215e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002162:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002166:	edd7 7a04 	vldr	s15, [r7, #16]
 800216a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800216e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002172:	edd7 7a06 	vldr	s15, [r7, #24]
 8002176:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800217a:	edd7 7a05 	vldr	s15, [r7, #20]
 800217e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002182:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800218c:	bf00      	nop
 800218e:	3728      	adds	r7, #40	; 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	0000      	movs	r0, r0
	...

08002198 <update_quater_gyro>:
void update_quater_gyro(Quaternion *quaternion, mpu9250_data imu_data)
{
 8002198:	b084      	sub	sp, #16
 800219a:	b590      	push	{r4, r7, lr}
 800219c:	b08b      	sub	sp, #44	; 0x2c
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80021a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	Quaternion quat_old, gyro_data;
	quat_old = *quaternion;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	f107 0418 	add.w	r4, r7, #24
 80021b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	gyro_data.s = 0;
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	60bb      	str	r3, [r7, #8]
	gyro_data.x = GYRO_TO_ANGLE  * (float)imu_data.x_gyro/ (SAMPLING_RATE * 2);
 80021bc:	f9b7 3042 	ldrsh.w	r3, [r7, #66]	; 0x42
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c8:	ee17 0a90 	vmov	r0, s15
 80021cc:	f7fe f9bc 	bl	8000548 <__aeabi_f2d>
 80021d0:	a36b      	add	r3, pc, #428	; (adr r3, 8002380 <update_quater_gyro+0x1e8>)
 80021d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d6:	f7fe fa0f 	bl	80005f8 <__aeabi_dmul>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f04f 0200 	mov.w	r2, #0
 80021e6:	4b68      	ldr	r3, [pc, #416]	; (8002388 <update_quater_gyro+0x1f0>)
 80021e8:	f7fe fb30 	bl	800084c <__aeabi_ddiv>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fcd8 	bl	8000ba8 <__aeabi_d2f>
 80021f8:	4603      	mov	r3, r0
 80021fa:	60fb      	str	r3, [r7, #12]
	gyro_data.y = GYRO_TO_ANGLE  * (float)imu_data.y_gyro/ (SAMPLING_RATE * 2);
 80021fc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002208:	ee17 0a90 	vmov	r0, s15
 800220c:	f7fe f99c 	bl	8000548 <__aeabi_f2d>
 8002210:	a35b      	add	r3, pc, #364	; (adr r3, 8002380 <update_quater_gyro+0x1e8>)
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f7fe f9ef 	bl	80005f8 <__aeabi_dmul>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f04f 0200 	mov.w	r2, #0
 8002226:	4b58      	ldr	r3, [pc, #352]	; (8002388 <update_quater_gyro+0x1f0>)
 8002228:	f7fe fb10 	bl	800084c <__aeabi_ddiv>
 800222c:	4602      	mov	r2, r0
 800222e:	460b      	mov	r3, r1
 8002230:	4610      	mov	r0, r2
 8002232:	4619      	mov	r1, r3
 8002234:	f7fe fcb8 	bl	8000ba8 <__aeabi_d2f>
 8002238:	4603      	mov	r3, r0
 800223a:	613b      	str	r3, [r7, #16]
	gyro_data.z = GYRO_TO_ANGLE  * (float)imu_data.z_gyro/ (SAMPLING_RATE * 2);
 800223c:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002248:	ee17 0a90 	vmov	r0, s15
 800224c:	f7fe f97c 	bl	8000548 <__aeabi_f2d>
 8002250:	a34b      	add	r3, pc, #300	; (adr r3, 8002380 <update_quater_gyro+0x1e8>)
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f7fe f9cf 	bl	80005f8 <__aeabi_dmul>
 800225a:	4602      	mov	r2, r0
 800225c:	460b      	mov	r3, r1
 800225e:	4610      	mov	r0, r2
 8002260:	4619      	mov	r1, r3
 8002262:	f04f 0200 	mov.w	r2, #0
 8002266:	4b48      	ldr	r3, [pc, #288]	; (8002388 <update_quater_gyro+0x1f0>)
 8002268:	f7fe faf0 	bl	800084c <__aeabi_ddiv>
 800226c:	4602      	mov	r2, r0
 800226e:	460b      	mov	r3, r1
 8002270:	4610      	mov	r0, r2
 8002272:	4619      	mov	r1, r3
 8002274:	f7fe fc98 	bl	8000ba8 <__aeabi_d2f>
 8002278:	4603      	mov	r3, r0
 800227a:	617b      	str	r3, [r7, #20]

	quaternion->s -=  quat_old.x * gyro_data.x + quat_old.y * gyro_data.y +
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	ed93 7a00 	vldr	s14, [r3]
 8002282:	edd7 6a07 	vldr	s13, [r7, #28]
 8002286:	edd7 7a03 	vldr	s15, [r7, #12]
 800228a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800228e:	ed97 6a08 	vldr	s12, [r7, #32]
 8002292:	edd7 7a04 	vldr	s15, [r7, #16]
 8002296:	ee66 7a27 	vmul.f32	s15, s12, s15
 800229a:	ee76 6aa7 	vadd.f32	s13, s13, s15
			quat_old.z * gyro_data.z;
 800229e:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80022a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80022a6:	ee66 7a27 	vmul.f32	s15, s12, s15
	quaternion->s -=  quat_old.x * gyro_data.x + quat_old.y * gyro_data.y +
 80022aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	edc3 7a00 	vstr	s15, [r3]
	quaternion->x +=  quat_old.s * gyro_data.x + quat_old.y * gyro_data.z -
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80022be:	edd7 6a06 	vldr	s13, [r7, #24]
 80022c2:	edd7 7a03 	vldr	s15, [r7, #12]
 80022c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80022ca:	ed97 6a08 	vldr	s12, [r7, #32]
 80022ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80022d2:	ee66 7a27 	vmul.f32	s15, s12, s15
 80022d6:	ee76 6aa7 	vadd.f32	s13, s13, s15
			quat_old.z * gyro_data.y;
 80022da:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 80022de:	edd7 7a04 	vldr	s15, [r7, #16]
 80022e2:	ee66 7a27 	vmul.f32	s15, s12, s15
	quaternion->x +=  quat_old.s * gyro_data.x + quat_old.y * gyro_data.z -
 80022e6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	edc3 7a01 	vstr	s15, [r3, #4]
	quaternion->y +=  quat_old.s * gyro_data.y - quat_old.x * gyro_data.z +
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	ed93 7a02 	vldr	s14, [r3, #8]
 80022fa:	edd7 6a06 	vldr	s13, [r7, #24]
 80022fe:	edd7 7a04 	vldr	s15, [r7, #16]
 8002302:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002306:	ed97 6a07 	vldr	s12, [r7, #28]
 800230a:	edd7 7a05 	vldr	s15, [r7, #20]
 800230e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002312:	ee76 6ae7 	vsub.f32	s13, s13, s15
			quat_old.z * gyro_data.x;
 8002316:	ed97 6a09 	vldr	s12, [r7, #36]	; 0x24
 800231a:	edd7 7a03 	vldr	s15, [r7, #12]
 800231e:	ee66 7a27 	vmul.f32	s15, s12, s15
	quaternion->y +=  quat_old.s * gyro_data.y - quat_old.x * gyro_data.z +
 8002322:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002326:	ee77 7a27 	vadd.f32	s15, s14, s15
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	edc3 7a02 	vstr	s15, [r3, #8]
	quaternion->z +=  quat_old.s * gyro_data.z + quat_old.x * gyro_data.y -
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	ed93 7a03 	vldr	s14, [r3, #12]
 8002336:	edd7 6a06 	vldr	s13, [r7, #24]
 800233a:	edd7 7a05 	vldr	s15, [r7, #20]
 800233e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002342:	ed97 6a07 	vldr	s12, [r7, #28]
 8002346:	edd7 7a04 	vldr	s15, [r7, #16]
 800234a:	ee66 7a27 	vmul.f32	s15, s12, s15
 800234e:	ee76 6aa7 	vadd.f32	s13, s13, s15
			quat_old.y * gyro_data.x;
 8002352:	ed97 6a08 	vldr	s12, [r7, #32]
 8002356:	edd7 7a03 	vldr	s15, [r7, #12]
 800235a:	ee66 7a27 	vmul.f32	s15, s12, s15
	quaternion->z +=  quat_old.s * gyro_data.z + quat_old.x * gyro_data.y -
 800235e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002362:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	edc3 7a03 	vstr	s15, [r3, #12]
	//norm_quaternion(quaternion);
}
 800236c:	bf00      	nop
 800236e:	372c      	adds	r7, #44	; 0x2c
 8002370:	46bd      	mov	sp, r7
 8002372:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002376:	b004      	add	sp, #16
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	f3af 8000 	nop.w
 8002380:	4cfd08d5 	.word	0x4cfd08d5
 8002384:	3f316ebd 	.word	0x3f316ebd
 8002388:	409f4000 	.word	0x409f4000
 800238c:	00000000 	.word	0x00000000

08002390 <complementary_filter_quater>:

void complementary_filter_quater(Quaternion *quaternion, mpu9250_data imu_data)
{
 8002390:	b084      	sub	sp, #16
 8002392:	b5b0      	push	{r4, r5, r7, lr}
 8002394:	b084      	sub	sp, #16
 8002396:	af02      	add	r7, sp, #8
 8002398:	6078      	str	r0, [r7, #4]
 800239a:	f107 001c 	add.w	r0, r7, #28
 800239e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	static EulerAngles euler_angles;
//	static Quaternion quater_result;
	static Quaternion quater_temp;
	static uint8_t first_time = 0;
	if(first_time == 0)
 80023a2:	4b7b      	ldr	r3, [pc, #492]	; (8002590 <complementary_filter_quater+0x200>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d11d      	bne.n	80023e6 <complementary_filter_quater+0x56>
	{
		estimate_euler_angles(imu_data, &euler_angles);
 80023aa:	4b7a      	ldr	r3, [pc, #488]	; (8002594 <complementary_filter_quater+0x204>)
 80023ac:	9301      	str	r3, [sp, #4]
 80023ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023b0:	f8ad 3000 	strh.w	r3, [sp]
 80023b4:	f107 031c 	add.w	r3, r7, #28
 80023b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023ba:	f7ff fca5 	bl	8001d08 <estimate_euler_angles>
		euler2quater(quaternion, euler_angles);
 80023be:	4b75      	ldr	r3, [pc, #468]	; (8002594 <complementary_filter_quater+0x204>)
 80023c0:	edd3 6a00 	vldr	s13, [r3]
 80023c4:	ed93 7a01 	vldr	s14, [r3, #4]
 80023c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80023cc:	eeb0 0a66 	vmov.f32	s0, s13
 80023d0:	eef0 0a47 	vmov.f32	s1, s14
 80023d4:	eeb0 1a67 	vmov.f32	s2, s15
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fdd3 	bl	8001f84 <euler2quater>
		first_time = 1;
 80023de:	4b6c      	ldr	r3, [pc, #432]	; (8002590 <complementary_filter_quater+0x200>)
 80023e0:	2201      	movs	r2, #1
 80023e2:	701a      	strb	r2, [r3, #0]
		quaternion->y = ALPHA * quaternion->y + (1 - ALPHA) * quater_temp.y;
		quaternion->z = ALPHA * quaternion->z + (1 - ALPHA) * quater_temp.z;

	}
	//*quaternion =  quater_result;
}
 80023e4:	e0c3      	b.n	800256e <complementary_filter_quater+0x1de>
		estimate_euler_angles(imu_data, &euler_angles);
 80023e6:	4b6b      	ldr	r3, [pc, #428]	; (8002594 <complementary_filter_quater+0x204>)
 80023e8:	9301      	str	r3, [sp, #4]
 80023ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023ec:	f8ad 3000 	strh.w	r3, [sp]
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023f6:	f7ff fc87 	bl	8001d08 <estimate_euler_angles>
		euler2quater(&quater_temp, euler_angles);
 80023fa:	4b66      	ldr	r3, [pc, #408]	; (8002594 <complementary_filter_quater+0x204>)
 80023fc:	edd3 6a00 	vldr	s13, [r3]
 8002400:	ed93 7a01 	vldr	s14, [r3, #4]
 8002404:	edd3 7a02 	vldr	s15, [r3, #8]
 8002408:	eeb0 0a66 	vmov.f32	s0, s13
 800240c:	eef0 0a47 	vmov.f32	s1, s14
 8002410:	eeb0 1a67 	vmov.f32	s2, s15
 8002414:	4860      	ldr	r0, [pc, #384]	; (8002598 <complementary_filter_quater+0x208>)
 8002416:	f7ff fdb5 	bl	8001f84 <euler2quater>
		update_quater_gyro(quaternion, imu_data);
 800241a:	466b      	mov	r3, sp
 800241c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002420:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002424:	6018      	str	r0, [r3, #0]
 8002426:	3304      	adds	r3, #4
 8002428:	8019      	strh	r1, [r3, #0]
 800242a:	f107 031c 	add.w	r3, r7, #28
 800242e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff feb1 	bl	8002198 <update_quater_gyro>
		quaternion->s = ALPHA * quaternion->s + (1 - ALPHA) * quater_temp.s;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7fe f884 	bl	8000548 <__aeabi_f2d>
 8002440:	a34f      	add	r3, pc, #316	; (adr r3, 8002580 <complementary_filter_quater+0x1f0>)
 8002442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002446:	f7fe f8d7 	bl	80005f8 <__aeabi_dmul>
 800244a:	4602      	mov	r2, r0
 800244c:	460b      	mov	r3, r1
 800244e:	4614      	mov	r4, r2
 8002450:	461d      	mov	r5, r3
 8002452:	4b51      	ldr	r3, [pc, #324]	; (8002598 <complementary_filter_quater+0x208>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe f876 	bl	8000548 <__aeabi_f2d>
 800245c:	a34a      	add	r3, pc, #296	; (adr r3, 8002588 <complementary_filter_quater+0x1f8>)
 800245e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002462:	f7fe f8c9 	bl	80005f8 <__aeabi_dmul>
 8002466:	4602      	mov	r2, r0
 8002468:	460b      	mov	r3, r1
 800246a:	4620      	mov	r0, r4
 800246c:	4629      	mov	r1, r5
 800246e:	f7fd ff0d 	bl	800028c <__adddf3>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	4610      	mov	r0, r2
 8002478:	4619      	mov	r1, r3
 800247a:	f7fe fb95 	bl	8000ba8 <__aeabi_d2f>
 800247e:	4602      	mov	r2, r0
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	601a      	str	r2, [r3, #0]
		quaternion->x = ALPHA * quaternion->x + (1 - ALPHA) * quater_temp.x;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f85d 	bl	8000548 <__aeabi_f2d>
 800248e:	a33c      	add	r3, pc, #240	; (adr r3, 8002580 <complementary_filter_quater+0x1f0>)
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	f7fe f8b0 	bl	80005f8 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	4614      	mov	r4, r2
 800249e:	461d      	mov	r5, r3
 80024a0:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <complementary_filter_quater+0x208>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7fe f84f 	bl	8000548 <__aeabi_f2d>
 80024aa:	a337      	add	r3, pc, #220	; (adr r3, 8002588 <complementary_filter_quater+0x1f8>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f8a2 	bl	80005f8 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4620      	mov	r0, r4
 80024ba:	4629      	mov	r1, r5
 80024bc:	f7fd fee6 	bl	800028c <__adddf3>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	4610      	mov	r0, r2
 80024c6:	4619      	mov	r1, r3
 80024c8:	f7fe fb6e 	bl	8000ba8 <__aeabi_d2f>
 80024cc:	4602      	mov	r2, r0
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	605a      	str	r2, [r3, #4]
		quaternion->y = ALPHA * quaternion->y + (1 - ALPHA) * quater_temp.y;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe f836 	bl	8000548 <__aeabi_f2d>
 80024dc:	a328      	add	r3, pc, #160	; (adr r3, 8002580 <complementary_filter_quater+0x1f0>)
 80024de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e2:	f7fe f889 	bl	80005f8 <__aeabi_dmul>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4614      	mov	r4, r2
 80024ec:	461d      	mov	r5, r3
 80024ee:	4b2a      	ldr	r3, [pc, #168]	; (8002598 <complementary_filter_quater+0x208>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe f828 	bl	8000548 <__aeabi_f2d>
 80024f8:	a323      	add	r3, pc, #140	; (adr r3, 8002588 <complementary_filter_quater+0x1f8>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	f7fe f87b 	bl	80005f8 <__aeabi_dmul>
 8002502:	4602      	mov	r2, r0
 8002504:	460b      	mov	r3, r1
 8002506:	4620      	mov	r0, r4
 8002508:	4629      	mov	r1, r5
 800250a:	f7fd febf 	bl	800028c <__adddf3>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	f7fe fb47 	bl	8000ba8 <__aeabi_d2f>
 800251a:	4602      	mov	r2, r0
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	609a      	str	r2, [r3, #8]
		quaternion->z = ALPHA * quaternion->z + (1 - ALPHA) * quater_temp.z;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4618      	mov	r0, r3
 8002526:	f7fe f80f 	bl	8000548 <__aeabi_f2d>
 800252a:	a315      	add	r3, pc, #84	; (adr r3, 8002580 <complementary_filter_quater+0x1f0>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	f7fe f862 	bl	80005f8 <__aeabi_dmul>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4614      	mov	r4, r2
 800253a:	461d      	mov	r5, r3
 800253c:	4b16      	ldr	r3, [pc, #88]	; (8002598 <complementary_filter_quater+0x208>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe f801 	bl	8000548 <__aeabi_f2d>
 8002546:	a310      	add	r3, pc, #64	; (adr r3, 8002588 <complementary_filter_quater+0x1f8>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	f7fe f854 	bl	80005f8 <__aeabi_dmul>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	4620      	mov	r0, r4
 8002556:	4629      	mov	r1, r5
 8002558:	f7fd fe98 	bl	800028c <__adddf3>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4610      	mov	r0, r2
 8002562:	4619      	mov	r1, r3
 8002564:	f7fe fb20 	bl	8000ba8 <__aeabi_d2f>
 8002568:	4602      	mov	r2, r0
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	60da      	str	r2, [r3, #12]
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8002578:	b004      	add	sp, #16
 800257a:	4770      	bx	lr
 800257c:	f3af 8000 	nop.w
 8002580:	66666666 	.word	0x66666666
 8002584:	3fee6666 	.word	0x3fee6666
 8002588:	999999a0 	.word	0x999999a0
 800258c:	3fa99999 	.word	0x3fa99999
 8002590:	2000131c 	.word	0x2000131c
 8002594:	20001320 	.word	0x20001320
 8002598:	2000132c 	.word	0x2000132c

0800259c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025a2:	4b0f      	ldr	r3, [pc, #60]	; (80025e0 <HAL_MspInit+0x44>)
 80025a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025a6:	4a0e      	ldr	r2, [pc, #56]	; (80025e0 <HAL_MspInit+0x44>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	6613      	str	r3, [r2, #96]	; 0x60
 80025ae:	4b0c      	ldr	r3, [pc, #48]	; (80025e0 <HAL_MspInit+0x44>)
 80025b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025b2:	f003 0301 	and.w	r3, r3, #1
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_MspInit+0x44>)
 80025bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025be:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <HAL_MspInit+0x44>)
 80025c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c4:	6593      	str	r3, [r2, #88]	; 0x58
 80025c6:	4b06      	ldr	r3, [pc, #24]	; (80025e0 <HAL_MspInit+0x44>)
 80025c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ce:	603b      	str	r3, [r7, #0]
 80025d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b0ac      	sub	sp, #176	; 0xb0
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	605a      	str	r2, [r3, #4]
 80025f6:	609a      	str	r2, [r3, #8]
 80025f8:	60da      	str	r2, [r3, #12]
 80025fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025fc:	f107 0314 	add.w	r3, r7, #20
 8002600:	2288      	movs	r2, #136	; 0x88
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f006 fcd3 	bl	8008fb0 <memset>
  if(hi2c->Instance==I2C1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a3e      	ldr	r2, [pc, #248]	; (8002708 <HAL_I2C_MspInit+0x124>)
 8002610:	4293      	cmp	r3, r2
 8002612:	d174      	bne.n	80026fe <HAL_I2C_MspInit+0x11a>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002614:	2340      	movs	r3, #64	; 0x40
 8002616:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002618:	2300      	movs	r3, #0
 800261a:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800261c:	f107 0314 	add.w	r3, r7, #20
 8002620:	4618      	mov	r0, r3
 8002622:	f002 fe47 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d001      	beq.n	8002630 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800262c:	f7fe ff94 	bl	8001558 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	; (800270c <HAL_I2C_MspInit+0x128>)
 8002632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002634:	4a35      	ldr	r2, [pc, #212]	; (800270c <HAL_I2C_MspInit+0x128>)
 8002636:	f043 0302 	orr.w	r3, r3, #2
 800263a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800263c:	4b33      	ldr	r3, [pc, #204]	; (800270c <HAL_I2C_MspInit+0x128>)
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	f003 0302 	and.w	r3, r3, #2
 8002644:	613b      	str	r3, [r7, #16]
 8002646:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002648:	f44f 7340 	mov.w	r3, #768	; 0x300
 800264c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002650:	2312      	movs	r3, #18
 8002652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002662:	2304      	movs	r3, #4
 8002664:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002668:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800266c:	4619      	mov	r1, r3
 800266e:	4828      	ldr	r0, [pc, #160]	; (8002710 <HAL_I2C_MspInit+0x12c>)
 8002670:	f000 ff3c 	bl	80034ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002674:	4b25      	ldr	r3, [pc, #148]	; (800270c <HAL_I2C_MspInit+0x128>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	4a24      	ldr	r2, [pc, #144]	; (800270c <HAL_I2C_MspInit+0x128>)
 800267a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800267e:	6593      	str	r3, [r2, #88]	; 0x58
 8002680:	4b22      	ldr	r3, [pc, #136]	; (800270c <HAL_I2C_MspInit+0x128>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA2_Channel6;
 800268c:	4b21      	ldr	r3, [pc, #132]	; (8002714 <HAL_I2C_MspInit+0x130>)
 800268e:	4a22      	ldr	r2, [pc, #136]	; (8002718 <HAL_I2C_MspInit+0x134>)
 8002690:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_5;
 8002692:	4b20      	ldr	r3, [pc, #128]	; (8002714 <HAL_I2C_MspInit+0x130>)
 8002694:	2205      	movs	r2, #5
 8002696:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <HAL_I2C_MspInit+0x130>)
 800269a:	2200      	movs	r2, #0
 800269c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800269e:	4b1d      	ldr	r3, [pc, #116]	; (8002714 <HAL_I2C_MspInit+0x130>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026a4:	4b1b      	ldr	r3, [pc, #108]	; (8002714 <HAL_I2C_MspInit+0x130>)
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026aa:	4b1a      	ldr	r3, [pc, #104]	; (8002714 <HAL_I2C_MspInit+0x130>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026b0:	4b18      	ldr	r3, [pc, #96]	; (8002714 <HAL_I2C_MspInit+0x130>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80026b6:	4b17      	ldr	r3, [pc, #92]	; (8002714 <HAL_I2C_MspInit+0x130>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026bc:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_I2C_MspInit+0x130>)
 80026be:	2200      	movs	r2, #0
 80026c0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80026c2:	4814      	ldr	r0, [pc, #80]	; (8002714 <HAL_I2C_MspInit+0x130>)
 80026c4:	f000 fc8e 	bl	8002fe4 <HAL_DMA_Init>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_I2C_MspInit+0xee>
    {
      Error_Handler();
 80026ce:	f7fe ff43 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a0f      	ldr	r2, [pc, #60]	; (8002714 <HAL_I2C_MspInit+0x130>)
 80026d6:	63da      	str	r2, [r3, #60]	; 0x3c
 80026d8:	4a0e      	ldr	r2, [pc, #56]	; (8002714 <HAL_I2C_MspInit+0x130>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 1, 0);
 80026de:	2200      	movs	r2, #0
 80026e0:	2101      	movs	r1, #1
 80026e2:	201f      	movs	r0, #31
 80026e4:	f000 fc47 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80026e8:	201f      	movs	r0, #31
 80026ea:	f000 fc60 	bl	8002fae <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 1, 0);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2101      	movs	r1, #1
 80026f2:	2020      	movs	r0, #32
 80026f4:	f000 fc3f 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80026f8:	2020      	movs	r0, #32
 80026fa:	f000 fc58 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026fe:	bf00      	nop
 8002700:	37b0      	adds	r7, #176	; 0xb0
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	40005400 	.word	0x40005400
 800270c:	40021000 	.word	0x40021000
 8002710:	48000400 	.word	0x48000400
 8002714:	2000024c 	.word	0x2000024c
 8002718:	4002046c 	.word	0x4002046c

0800271c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b08a      	sub	sp, #40	; 0x28
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002724:	f107 0314 	add.w	r3, r7, #20
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	605a      	str	r2, [r3, #4]
 800272e:	609a      	str	r2, [r3, #8]
 8002730:	60da      	str	r2, [r3, #12]
 8002732:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a40      	ldr	r2, [pc, #256]	; (800283c <HAL_SPI_MspInit+0x120>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d17a      	bne.n	8002834 <HAL_SPI_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800273e:	4b40      	ldr	r3, [pc, #256]	; (8002840 <HAL_SPI_MspInit+0x124>)
 8002740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002742:	4a3f      	ldr	r2, [pc, #252]	; (8002840 <HAL_SPI_MspInit+0x124>)
 8002744:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002748:	6613      	str	r3, [r2, #96]	; 0x60
 800274a:	4b3d      	ldr	r3, [pc, #244]	; (8002840 <HAL_SPI_MspInit+0x124>)
 800274c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002752:	613b      	str	r3, [r7, #16]
 8002754:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002756:	4b3a      	ldr	r3, [pc, #232]	; (8002840 <HAL_SPI_MspInit+0x124>)
 8002758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800275a:	4a39      	ldr	r2, [pc, #228]	; (8002840 <HAL_SPI_MspInit+0x124>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002762:	4b37      	ldr	r3, [pc, #220]	; (8002840 <HAL_SPI_MspInit+0x124>)
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800276e:	23e0      	movs	r3, #224	; 0xe0
 8002770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002772:	2302      	movs	r3, #2
 8002774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800277a:	2303      	movs	r3, #3
 800277c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800277e:	2305      	movs	r3, #5
 8002780:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f107 0314 	add.w	r3, r7, #20
 8002786:	4619      	mov	r1, r3
 8002788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800278c:	f000 feae 	bl	80034ec <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8002790:	4b2c      	ldr	r3, [pc, #176]	; (8002844 <HAL_SPI_MspInit+0x128>)
 8002792:	4a2d      	ldr	r2, [pc, #180]	; (8002848 <HAL_SPI_MspInit+0x12c>)
 8002794:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8002796:	4b2b      	ldr	r3, [pc, #172]	; (8002844 <HAL_SPI_MspInit+0x128>)
 8002798:	2201      	movs	r2, #1
 800279a:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800279c:	4b29      	ldr	r3, [pc, #164]	; (8002844 <HAL_SPI_MspInit+0x128>)
 800279e:	2200      	movs	r2, #0
 80027a0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027a2:	4b28      	ldr	r3, [pc, #160]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027a8:	4b26      	ldr	r3, [pc, #152]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027aa:	2280      	movs	r2, #128	; 0x80
 80027ac:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ae:	4b25      	ldr	r3, [pc, #148]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027b4:	4b23      	ldr	r3, [pc, #140]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80027ba:	4b22      	ldr	r3, [pc, #136]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027bc:	2200      	movs	r2, #0
 80027be:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027c0:	4b20      	ldr	r3, [pc, #128]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80027c6:	481f      	ldr	r0, [pc, #124]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027c8:	f000 fc0c 	bl	8002fe4 <HAL_DMA_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 80027d2:	f7fe fec1 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a1a      	ldr	r2, [pc, #104]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027da:	659a      	str	r2, [r3, #88]	; 0x58
 80027dc:	4a19      	ldr	r2, [pc, #100]	; (8002844 <HAL_SPI_MspInit+0x128>)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 80027e2:	4b1a      	ldr	r3, [pc, #104]	; (800284c <HAL_SPI_MspInit+0x130>)
 80027e4:	4a1a      	ldr	r2, [pc, #104]	; (8002850 <HAL_SPI_MspInit+0x134>)
 80027e6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 80027e8:	4b18      	ldr	r3, [pc, #96]	; (800284c <HAL_SPI_MspInit+0x130>)
 80027ea:	2201      	movs	r2, #1
 80027ec:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_SPI_MspInit+0x130>)
 80027f0:	2210      	movs	r2, #16
 80027f2:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027f4:	4b15      	ldr	r3, [pc, #84]	; (800284c <HAL_SPI_MspInit+0x130>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_SPI_MspInit+0x130>)
 80027fc:	2280      	movs	r2, #128	; 0x80
 80027fe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002800:	4b12      	ldr	r3, [pc, #72]	; (800284c <HAL_SPI_MspInit+0x130>)
 8002802:	2200      	movs	r2, #0
 8002804:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_SPI_MspInit+0x130>)
 8002808:	2200      	movs	r2, #0
 800280a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <HAL_SPI_MspInit+0x130>)
 800280e:	2200      	movs	r2, #0
 8002810:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_SPI_MspInit+0x130>)
 8002814:	2200      	movs	r2, #0
 8002816:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002818:	480c      	ldr	r0, [pc, #48]	; (800284c <HAL_SPI_MspInit+0x130>)
 800281a:	f000 fbe3 	bl	8002fe4 <HAL_DMA_Init>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8002824:	f7fe fe98 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	4a08      	ldr	r2, [pc, #32]	; (800284c <HAL_SPI_MspInit+0x130>)
 800282c:	655a      	str	r2, [r3, #84]	; 0x54
 800282e:	4a07      	ldr	r2, [pc, #28]	; (800284c <HAL_SPI_MspInit+0x130>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002834:	bf00      	nop
 8002836:	3728      	adds	r7, #40	; 0x28
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40013000 	.word	0x40013000
 8002840:	40021000 	.word	0x40021000
 8002844:	200002f8 	.word	0x200002f8
 8002848:	4002001c 	.word	0x4002001c
 800284c:	20000340 	.word	0x20000340
 8002850:	40020030 	.word	0x40020030

08002854 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002864:	d113      	bne.n	800288e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002866:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_TIM_Base_MspInit+0x44>)
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286a:	4a0b      	ldr	r2, [pc, #44]	; (8002898 <HAL_TIM_Base_MspInit+0x44>)
 800286c:	f043 0301 	orr.w	r3, r3, #1
 8002870:	6593      	str	r3, [r2, #88]	; 0x58
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_TIM_Base_MspInit+0x44>)
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	f003 0301 	and.w	r3, r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
 800287c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800287e:	2200      	movs	r2, #0
 8002880:	2100      	movs	r1, #0
 8002882:	201c      	movs	r0, #28
 8002884:	f000 fb77 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002888:	201c      	movs	r0, #28
 800288a:	f000 fb90 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000

0800289c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b0ac      	sub	sp, #176	; 0xb0
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028a8:	2200      	movs	r2, #0
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	605a      	str	r2, [r3, #4]
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028b4:	f107 0314 	add.w	r3, r7, #20
 80028b8:	2288      	movs	r2, #136	; 0x88
 80028ba:	2100      	movs	r1, #0
 80028bc:	4618      	mov	r0, r3
 80028be:	f006 fb77 	bl	8008fb0 <memset>
  if(huart->Instance==USART2)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a3a      	ldr	r2, [pc, #232]	; (80029b0 <HAL_UART_MspInit+0x114>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d16c      	bne.n	80029a6 <HAL_UART_MspInit+0x10a>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80028cc:	2302      	movs	r3, #2
 80028ce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80028d0:	2300      	movs	r3, #0
 80028d2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	4618      	mov	r0, r3
 80028da:	f002 fceb 	bl	80052b4 <HAL_RCCEx_PeriphCLKConfig>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80028e4:	f7fe fe38 	bl	8001558 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028e8:	4b32      	ldr	r3, [pc, #200]	; (80029b4 <HAL_UART_MspInit+0x118>)
 80028ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ec:	4a31      	ldr	r2, [pc, #196]	; (80029b4 <HAL_UART_MspInit+0x118>)
 80028ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f2:	6593      	str	r3, [r2, #88]	; 0x58
 80028f4:	4b2f      	ldr	r3, [pc, #188]	; (80029b4 <HAL_UART_MspInit+0x118>)
 80028f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fc:	613b      	str	r3, [r7, #16]
 80028fe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002900:	4b2c      	ldr	r3, [pc, #176]	; (80029b4 <HAL_UART_MspInit+0x118>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002904:	4a2b      	ldr	r2, [pc, #172]	; (80029b4 <HAL_UART_MspInit+0x118>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800290c:	4b29      	ldr	r3, [pc, #164]	; (80029b4 <HAL_UART_MspInit+0x118>)
 800290e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002918:	230c      	movs	r3, #12
 800291a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800291e:	2302      	movs	r3, #2
 8002920:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002924:	2300      	movs	r3, #0
 8002926:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800292a:	2303      	movs	r3, #3
 800292c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002930:	2307      	movs	r3, #7
 8002932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002936:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800293a:	4619      	mov	r1, r3
 800293c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002940:	f000 fdd4 	bl	80034ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8002944:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 8002946:	4a1d      	ldr	r2, [pc, #116]	; (80029bc <HAL_UART_MspInit+0x120>)
 8002948:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 800294c:	2202      	movs	r2, #2
 800294e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002950:	4b19      	ldr	r3, [pc, #100]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 8002952:	2210      	movs	r2, #16
 8002954:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002956:	4b18      	ldr	r3, [pc, #96]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 800295e:	2280      	movs	r2, #128	; 0x80
 8002960:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002962:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 8002964:	2200      	movs	r2, #0
 8002966:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002968:	4b13      	ldr	r3, [pc, #76]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 800296a:	2200      	movs	r2, #0
 800296c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800296e:	4b12      	ldr	r3, [pc, #72]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 8002970:	2200      	movs	r2, #0
 8002972:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002974:	4b10      	ldr	r3, [pc, #64]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 8002976:	2200      	movs	r2, #0
 8002978:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800297a:	480f      	ldr	r0, [pc, #60]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 800297c:	f000 fb32 	bl	8002fe4 <HAL_DMA_Init>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8002986:	f7fe fde7 	bl	8001558 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a0a      	ldr	r2, [pc, #40]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 800298e:	66da      	str	r2, [r3, #108]	; 0x6c
 8002990:	4a09      	ldr	r2, [pc, #36]	; (80029b8 <HAL_UART_MspInit+0x11c>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	2100      	movs	r1, #0
 800299a:	2026      	movs	r0, #38	; 0x26
 800299c:	f000 faeb 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029a0:	2026      	movs	r0, #38	; 0x26
 80029a2:	f000 fb04 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80029a6:	bf00      	nop
 80029a8:	37b0      	adds	r7, #176	; 0xb0
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40004400 	.word	0x40004400
 80029b4:	40021000 	.word	0x40021000
 80029b8:	20000458 	.word	0x20000458
 80029bc:	40020080 	.word	0x40020080

080029c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <NMI_Handler+0x4>

080029c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ca:	e7fe      	b.n	80029ca <HardFault_Handler+0x4>

080029cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <MemManage_Handler+0x4>

080029d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029d6:	e7fe      	b.n	80029d6 <BusFault_Handler+0x4>

080029d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029dc:	e7fe      	b.n	80029dc <UsageFault_Handler+0x4>

080029de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029de:	b480      	push	{r7}
 80029e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e2:	bf00      	nop
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f0:	bf00      	nop
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr

080029fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fa:	b480      	push	{r7}
 80029fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029fe:	bf00      	nop
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a0c:	f000 f994 	bl	8002d38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002a18:	4802      	ldr	r0, [pc, #8]	; (8002a24 <DMA1_Channel2_IRQHandler+0x10>)
 8002a1a:	f000 fc7a 	bl	8003312 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	200002f8 	.word	0x200002f8

08002a28 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002a2c:	4802      	ldr	r0, [pc, #8]	; (8002a38 <DMA1_Channel3_IRQHandler+0x10>)
 8002a2e:	f000 fc70 	bl	8003312 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000340 	.word	0x20000340

08002a3c <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <DMA1_Channel7_IRQHandler+0x10>)
 8002a42:	f000 fc66 	bl	8003312 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000458 	.word	0x20000458

08002a50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002a54:	4802      	ldr	r0, [pc, #8]	; (8002a60 <TIM2_IRQHandler+0x10>)
 8002a56:	f004 fcd9 	bl	800740c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	20000388 	.word	0x20000388

08002a64 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002a68:	4802      	ldr	r0, [pc, #8]	; (8002a74 <I2C1_EV_IRQHandler+0x10>)
 8002a6a:	f000 ff90 	bl	800398e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200001f8 	.word	0x200001f8

08002a78 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002a7c:	4802      	ldr	r0, [pc, #8]	; (8002a88 <I2C1_ER_IRQHandler+0x10>)
 8002a7e:	f000 ffa0 	bl	80039c2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	200001f8 	.word	0x200001f8

08002a8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <USART2_IRQHandler+0x10>)
 8002a92:	f005 f983 	bl	8007d9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	200003d4 	.word	0x200003d4

08002aa0 <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002aa4:	4802      	ldr	r0, [pc, #8]	; (8002ab0 <DMA2_Channel6_IRQHandler+0x10>)
 8002aa6:	f000 fc34 	bl	8003312 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8002aaa:	bf00      	nop
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	2000024c 	.word	0x2000024c

08002ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
	return 1;
 8002ab8:	2301      	movs	r3, #1
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <_kill>:

int _kill(int pid, int sig)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002ace:	f006 fa45 	bl	8008f5c <__errno>
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	2216      	movs	r2, #22
 8002ad6:	601a      	str	r2, [r3, #0]
	return -1;
 8002ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <_exit>:

void _exit (int status)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002aec:	f04f 31ff 	mov.w	r1, #4294967295
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ffe7 	bl	8002ac4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002af6:	e7fe      	b.n	8002af6 <_exit+0x12>

08002af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	e00a      	b.n	8002b20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b0a:	f3af 8000 	nop.w
 8002b0e:	4601      	mov	r1, r0
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	60ba      	str	r2, [r7, #8]
 8002b16:	b2ca      	uxtb	r2, r1
 8002b18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	3301      	adds	r3, #1
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	dbf0      	blt.n	8002b0a <_read+0x12>
	}

return len;
 8002b28:	687b      	ldr	r3, [r7, #4]
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b083      	sub	sp, #12
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
	return -1;
 8002b3a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	370c      	adds	r7, #12
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr

08002b4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b4a:	b480      	push	{r7}
 8002b4c:	b083      	sub	sp, #12
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b5a:	605a      	str	r2, [r3, #4]
	return 0;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <_isatty>:

int _isatty(int file)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
	return 1;
 8002b72:	2301      	movs	r3, #1
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b085      	sub	sp, #20
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
	return 0;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
	...

08002b9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ba4:	4a14      	ldr	r2, [pc, #80]	; (8002bf8 <_sbrk+0x5c>)
 8002ba6:	4b15      	ldr	r3, [pc, #84]	; (8002bfc <_sbrk+0x60>)
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bb0:	4b13      	ldr	r3, [pc, #76]	; (8002c00 <_sbrk+0x64>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d102      	bne.n	8002bbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bb8:	4b11      	ldr	r3, [pc, #68]	; (8002c00 <_sbrk+0x64>)
 8002bba:	4a12      	ldr	r2, [pc, #72]	; (8002c04 <_sbrk+0x68>)
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bbe:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <_sbrk+0x64>)
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d207      	bcs.n	8002bdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bcc:	f006 f9c6 	bl	8008f5c <__errno>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	220c      	movs	r2, #12
 8002bd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002bda:	e009      	b.n	8002bf0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <_sbrk+0x64>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002be2:	4b07      	ldr	r3, [pc, #28]	; (8002c00 <_sbrk+0x64>)
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4413      	add	r3, r2
 8002bea:	4a05      	ldr	r2, [pc, #20]	; (8002c00 <_sbrk+0x64>)
 8002bec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bee:	68fb      	ldr	r3, [r7, #12]
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3718      	adds	r7, #24
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20018000 	.word	0x20018000
 8002bfc:	00000400 	.word	0x00000400
 8002c00:	2000133c 	.word	0x2000133c
 8002c04:	20001358 	.word	0x20001358

08002c08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002c0c:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <SystemInit+0x20>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	4a05      	ldr	r2, [pc, #20]	; (8002c28 <SystemInit+0x20>)
 8002c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002c1c:	bf00      	nop
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	e000ed00 	.word	0xe000ed00

08002c2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c64 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c30:	f7ff ffea 	bl	8002c08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c34:	480c      	ldr	r0, [pc, #48]	; (8002c68 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c36:	490d      	ldr	r1, [pc, #52]	; (8002c6c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c38:	4a0d      	ldr	r2, [pc, #52]	; (8002c70 <LoopForever+0xe>)
  movs r3, #0
 8002c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c3c:	e002      	b.n	8002c44 <LoopCopyDataInit>

08002c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c42:	3304      	adds	r3, #4

08002c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c48:	d3f9      	bcc.n	8002c3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c4a:	4a0a      	ldr	r2, [pc, #40]	; (8002c74 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c4c:	4c0a      	ldr	r4, [pc, #40]	; (8002c78 <LoopForever+0x16>)
  movs r3, #0
 8002c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c50:	e001      	b.n	8002c56 <LoopFillZerobss>

08002c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c54:	3204      	adds	r2, #4

08002c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c58:	d3fb      	bcc.n	8002c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c5a:	f006 f985 	bl	8008f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c5e:	f7fe f99d 	bl	8000f9c <main>

08002c62 <LoopForever>:

LoopForever:
    b LoopForever
 8002c62:	e7fe      	b.n	8002c62 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002c64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c6c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8002c70:	0800d958 	.word	0x0800d958
  ldr r2, =_sbss
 8002c74:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8002c78:	20001354 	.word	0x20001354

08002c7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c7c:	e7fe      	b.n	8002c7c <ADC1_2_IRQHandler>
	...

08002c80 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c86:	2300      	movs	r3, #0
 8002c88:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <HAL_Init+0x3c>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a0b      	ldr	r2, [pc, #44]	; (8002cbc <HAL_Init+0x3c>)
 8002c90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c94:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c96:	2003      	movs	r0, #3
 8002c98:	f000 f962 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c9c:	2000      	movs	r0, #0
 8002c9e:	f000 f80f 	bl	8002cc0 <HAL_InitTick>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d002      	beq.n	8002cae <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	71fb      	strb	r3, [r7, #7]
 8002cac:	e001      	b.n	8002cb2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002cae:	f7ff fc75 	bl	800259c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002cb2:	79fb      	ldrb	r3, [r7, #7]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40022000 	.word	0x40022000

08002cc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002ccc:	4b17      	ldr	r3, [pc, #92]	; (8002d2c <HAL_InitTick+0x6c>)
 8002cce:	781b      	ldrb	r3, [r3, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d023      	beq.n	8002d1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002cd4:	4b16      	ldr	r3, [pc, #88]	; (8002d30 <HAL_InitTick+0x70>)
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <HAL_InitTick+0x6c>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	4619      	mov	r1, r3
 8002cde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ce6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f96d 	bl	8002fca <HAL_SYSTICK_Config>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10f      	bne.n	8002d16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b0f      	cmp	r3, #15
 8002cfa:	d809      	bhi.n	8002d10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295
 8002d04:	f000 f937 	bl	8002f76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d08:	4a0a      	ldr	r2, [pc, #40]	; (8002d34 <HAL_InitTick+0x74>)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6013      	str	r3, [r2, #0]
 8002d0e:	e007      	b.n	8002d20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
 8002d14:	e004      	b.n	8002d20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	73fb      	strb	r3, [r7, #15]
 8002d1a:	e001      	b.n	8002d20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000008 	.word	0x20000008
 8002d30:	20000000 	.word	0x20000000
 8002d34:	20000004 	.word	0x20000004

08002d38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d3c:	4b06      	ldr	r3, [pc, #24]	; (8002d58 <HAL_IncTick+0x20>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	461a      	mov	r2, r3
 8002d42:	4b06      	ldr	r3, [pc, #24]	; (8002d5c <HAL_IncTick+0x24>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4413      	add	r3, r2
 8002d48:	4a04      	ldr	r2, [pc, #16]	; (8002d5c <HAL_IncTick+0x24>)
 8002d4a:	6013      	str	r3, [r2, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000008 	.word	0x20000008
 8002d5c:	20001340 	.word	0x20001340

08002d60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  return uwTick;
 8002d64:	4b03      	ldr	r3, [pc, #12]	; (8002d74 <HAL_GetTick+0x14>)
 8002d66:	681b      	ldr	r3, [r3, #0]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
 8002d72:	bf00      	nop
 8002d74:	20001340 	.word	0x20001340

08002d78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d80:	f7ff ffee 	bl	8002d60 <HAL_GetTick>
 8002d84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d90:	d005      	beq.n	8002d9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <HAL_Delay+0x44>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002d9e:	bf00      	nop
 8002da0:	f7ff ffde 	bl	8002d60 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d8f7      	bhi.n	8002da0 <HAL_Delay+0x28>
  {
  }
}
 8002db0:	bf00      	nop
 8002db2:	bf00      	nop
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000008 	.word	0x20000008

08002dc0 <__NVIC_SetPriorityGrouping>:
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd0:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ddc:	4013      	ands	r3, r2
 8002dde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002de8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002dec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002df2:	4a04      	ldr	r2, [pc, #16]	; (8002e04 <__NVIC_SetPriorityGrouping+0x44>)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	60d3      	str	r3, [r2, #12]
}
 8002df8:	bf00      	nop
 8002dfa:	3714      	adds	r7, #20
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000ed00 	.word	0xe000ed00

08002e08 <__NVIC_GetPriorityGrouping>:
{
 8002e08:	b480      	push	{r7}
 8002e0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <__NVIC_GetPriorityGrouping+0x18>)
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	0a1b      	lsrs	r3, r3, #8
 8002e12:	f003 0307 	and.w	r3, r3, #7
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <__NVIC_EnableIRQ>:
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	db0b      	blt.n	8002e4e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e36:	79fb      	ldrb	r3, [r7, #7]
 8002e38:	f003 021f 	and.w	r2, r3, #31
 8002e3c:	4907      	ldr	r1, [pc, #28]	; (8002e5c <__NVIC_EnableIRQ+0x38>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	2001      	movs	r0, #1
 8002e46:	fa00 f202 	lsl.w	r2, r0, r2
 8002e4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e4e:	bf00      	nop
 8002e50:	370c      	adds	r7, #12
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000e100 	.word	0xe000e100

08002e60 <__NVIC_SetPriority>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	6039      	str	r1, [r7, #0]
 8002e6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	db0a      	blt.n	8002e8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	b2da      	uxtb	r2, r3
 8002e78:	490c      	ldr	r1, [pc, #48]	; (8002eac <__NVIC_SetPriority+0x4c>)
 8002e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7e:	0112      	lsls	r2, r2, #4
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	440b      	add	r3, r1
 8002e84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002e88:	e00a      	b.n	8002ea0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4908      	ldr	r1, [pc, #32]	; (8002eb0 <__NVIC_SetPriority+0x50>)
 8002e90:	79fb      	ldrb	r3, [r7, #7]
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3b04      	subs	r3, #4
 8002e98:	0112      	lsls	r2, r2, #4
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	440b      	add	r3, r1
 8002e9e:	761a      	strb	r2, [r3, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr
 8002eac:	e000e100 	.word	0xe000e100
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <NVIC_EncodePriority>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f1c3 0307 	rsb	r3, r3, #7
 8002ece:	2b04      	cmp	r3, #4
 8002ed0:	bf28      	it	cs
 8002ed2:	2304      	movcs	r3, #4
 8002ed4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d902      	bls.n	8002ee4 <NVIC_EncodePriority+0x30>
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	3b03      	subs	r3, #3
 8002ee2:	e000      	b.n	8002ee6 <NVIC_EncodePriority+0x32>
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002efc:	f04f 31ff 	mov.w	r1, #4294967295
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	fa01 f303 	lsl.w	r3, r1, r3
 8002f06:	43d9      	mvns	r1, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f0c:	4313      	orrs	r3, r2
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3724      	adds	r7, #36	; 0x24
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
	...

08002f1c <SysTick_Config>:
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002f40:	f7ff ff8e 	bl	8002e60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff29 	bl	8002dc0 <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff3e 	bl	8002e08 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff8e 	bl	8002eb4 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5d 	bl	8002e60 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff31 	bl	8002e24 <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa2 	bl	8002f1c <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
	...

08002fe4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d101      	bne.n	8002ff6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e098      	b.n	8003128 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	4b4d      	ldr	r3, [pc, #308]	; (8003134 <HAL_DMA_Init+0x150>)
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d80f      	bhi.n	8003022 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	461a      	mov	r2, r3
 8003008:	4b4b      	ldr	r3, [pc, #300]	; (8003138 <HAL_DMA_Init+0x154>)
 800300a:	4413      	add	r3, r2
 800300c:	4a4b      	ldr	r2, [pc, #300]	; (800313c <HAL_DMA_Init+0x158>)
 800300e:	fba2 2303 	umull	r2, r3, r2, r3
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	009a      	lsls	r2, r3, #2
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a48      	ldr	r2, [pc, #288]	; (8003140 <HAL_DMA_Init+0x15c>)
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
 8003020:	e00e      	b.n	8003040 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	461a      	mov	r2, r3
 8003028:	4b46      	ldr	r3, [pc, #280]	; (8003144 <HAL_DMA_Init+0x160>)
 800302a:	4413      	add	r3, r2
 800302c:	4a43      	ldr	r2, [pc, #268]	; (800313c <HAL_DMA_Init+0x158>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	091b      	lsrs	r3, r3, #4
 8003034:	009a      	lsls	r2, r3, #2
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a42      	ldr	r2, [pc, #264]	; (8003148 <HAL_DMA_Init+0x164>)
 800303e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003056:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800305a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003064:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003070:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800307c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800309a:	d039      	beq.n	8003110 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	4a27      	ldr	r2, [pc, #156]	; (8003140 <HAL_DMA_Init+0x15c>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d11a      	bne.n	80030dc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030a6:	4b29      	ldr	r3, [pc, #164]	; (800314c <HAL_DMA_Init+0x168>)
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ae:	f003 031c 	and.w	r3, r3, #28
 80030b2:	210f      	movs	r1, #15
 80030b4:	fa01 f303 	lsl.w	r3, r1, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	4924      	ldr	r1, [pc, #144]	; (800314c <HAL_DMA_Init+0x168>)
 80030bc:	4013      	ands	r3, r2
 80030be:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030c0:	4b22      	ldr	r3, [pc, #136]	; (800314c <HAL_DMA_Init+0x168>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6859      	ldr	r1, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	f003 031c 	and.w	r3, r3, #28
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	491d      	ldr	r1, [pc, #116]	; (800314c <HAL_DMA_Init+0x168>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
 80030da:	e019      	b.n	8003110 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80030dc:	4b1c      	ldr	r3, [pc, #112]	; (8003150 <HAL_DMA_Init+0x16c>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e4:	f003 031c 	and.w	r3, r3, #28
 80030e8:	210f      	movs	r1, #15
 80030ea:	fa01 f303 	lsl.w	r3, r1, r3
 80030ee:	43db      	mvns	r3, r3
 80030f0:	4917      	ldr	r1, [pc, #92]	; (8003150 <HAL_DMA_Init+0x16c>)
 80030f2:	4013      	ands	r3, r2
 80030f4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80030f6:	4b16      	ldr	r3, [pc, #88]	; (8003150 <HAL_DMA_Init+0x16c>)
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003102:	f003 031c 	and.w	r3, r3, #28
 8003106:	fa01 f303 	lsl.w	r3, r1, r3
 800310a:	4911      	ldr	r1, [pc, #68]	; (8003150 <HAL_DMA_Init+0x16c>)
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	40020407 	.word	0x40020407
 8003138:	bffdfff8 	.word	0xbffdfff8
 800313c:	cccccccd 	.word	0xcccccccd
 8003140:	40020000 	.word	0x40020000
 8003144:	bffdfbf8 	.word	0xbffdfbf8
 8003148:	40020400 	.word	0x40020400
 800314c:	400200a8 	.word	0x400200a8
 8003150:	400204a8 	.word	0x400204a8

08003154 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800316c:	2b01      	cmp	r3, #1
 800316e:	d101      	bne.n	8003174 <HAL_DMA_Start_IT+0x20>
 8003170:	2302      	movs	r3, #2
 8003172:	e04b      	b.n	800320c <HAL_DMA_Start_IT+0xb8>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003182:	b2db      	uxtb	r3, r3
 8003184:	2b01      	cmp	r3, #1
 8003186:	d13a      	bne.n	80031fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2202      	movs	r2, #2
 800318c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0201 	bic.w	r2, r2, #1
 80031a4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f96d 	bl	800348c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f042 020e 	orr.w	r2, r2, #14
 80031c8:	601a      	str	r2, [r3, #0]
 80031ca:	e00f      	b.n	80031ec <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f022 0204 	bic.w	r2, r2, #4
 80031da:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f042 020a 	orr.w	r2, r2, #10
 80031ea:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681a      	ldr	r2, [r3, #0]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f042 0201 	orr.w	r2, r2, #1
 80031fa:	601a      	str	r2, [r3, #0]
 80031fc:	e005      	b.n	800320a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003206:	2302      	movs	r3, #2
 8003208:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800320a:	7dfb      	ldrb	r3, [r7, #23]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}

08003214 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003214:	b480      	push	{r7}
 8003216:	b085      	sub	sp, #20
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003226:	b2db      	uxtb	r3, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d008      	beq.n	800323e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2204      	movs	r2, #4
 8003230:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e022      	b.n	8003284 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 020e 	bic.w	r2, r2, #14
 800324c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f022 0201 	bic.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003262:	f003 021c 	and.w	r2, r3, #28
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2101      	movs	r1, #1
 800326c:	fa01 f202 	lsl.w	r2, r1, r2
 8003270:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2201      	movs	r2, #1
 8003276:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003282:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003298:	2300      	movs	r3, #0
 800329a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b02      	cmp	r3, #2
 80032a6:	d005      	beq.n	80032b4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2204      	movs	r2, #4
 80032ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	73fb      	strb	r3, [r7, #15]
 80032b2:	e029      	b.n	8003308 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 020e 	bic.w	r2, r2, #14
 80032c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0201 	bic.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d8:	f003 021c 	and.w	r2, r3, #28
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e0:	2101      	movs	r1, #1
 80032e2:	fa01 f202 	lsl.w	r2, r1, r2
 80032e6:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	4798      	blx	r3
    }
  }
  return status;
 8003308:	7bfb      	ldrb	r3, [r7, #15]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3710      	adds	r7, #16
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b084      	sub	sp, #16
 8003316:	af00      	add	r7, sp, #0
 8003318:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f003 031c 	and.w	r3, r3, #28
 8003332:	2204      	movs	r2, #4
 8003334:	409a      	lsls	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d026      	beq.n	800338c <HAL_DMA_IRQHandler+0x7a>
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 0304 	and.w	r3, r3, #4
 8003344:	2b00      	cmp	r3, #0
 8003346:	d021      	beq.n	800338c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0320 	and.w	r3, r3, #32
 8003352:	2b00      	cmp	r3, #0
 8003354:	d107      	bne.n	8003366 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0204 	bic.w	r2, r2, #4
 8003364:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	f003 021c 	and.w	r2, r3, #28
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	2104      	movs	r1, #4
 8003374:	fa01 f202 	lsl.w	r2, r1, r2
 8003378:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	2b00      	cmp	r3, #0
 8003380:	d071      	beq.n	8003466 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800338a:	e06c      	b.n	8003466 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003390:	f003 031c 	and.w	r3, r3, #28
 8003394:	2202      	movs	r2, #2
 8003396:	409a      	lsls	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	4013      	ands	r3, r2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d02e      	beq.n	80033fe <HAL_DMA_IRQHandler+0xec>
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 0302 	and.w	r3, r3, #2
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d029      	beq.n	80033fe <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d10b      	bne.n	80033d0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 020a 	bic.w	r2, r2, #10
 80033c6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	f003 021c 	and.w	r2, r3, #28
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	2102      	movs	r1, #2
 80033de:	fa01 f202 	lsl.w	r2, r1, r2
 80033e2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d038      	beq.n	8003466 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80033fc:	e033      	b.n	8003466 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	f003 031c 	and.w	r3, r3, #28
 8003406:	2208      	movs	r2, #8
 8003408:	409a      	lsls	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d02a      	beq.n	8003468 <HAL_DMA_IRQHandler+0x156>
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d025      	beq.n	8003468 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 020e 	bic.w	r2, r2, #14
 800342a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	f003 021c 	and.w	r2, r3, #28
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003438:	2101      	movs	r1, #1
 800343a:	fa01 f202 	lsl.w	r2, r1, r2
 800343e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800345a:	2b00      	cmp	r3, #0
 800345c:	d004      	beq.n	8003468 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003466:	bf00      	nop
 8003468:	bf00      	nop
}
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800347e:	b2db      	uxtb	r3, r3
}
 8003480:	4618      	mov	r0, r3
 8003482:	370c      	adds	r7, #12
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr

0800348c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f003 021c 	and.w	r2, r3, #28
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a6:	2101      	movs	r1, #1
 80034a8:	fa01 f202 	lsl.w	r2, r1, r2
 80034ac:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	683a      	ldr	r2, [r7, #0]
 80034b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	689b      	ldr	r3, [r3, #8]
 80034ba:	2b10      	cmp	r3, #16
 80034bc:	d108      	bne.n	80034d0 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68ba      	ldr	r2, [r7, #8]
 80034cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034ce:	e007      	b.n	80034e0 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68ba      	ldr	r2, [r7, #8]
 80034d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	60da      	str	r2, [r3, #12]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80034f6:	2300      	movs	r3, #0
 80034f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80034fa:	e17f      	b.n	80037fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	681a      	ldr	r2, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	fa01 f303 	lsl.w	r3, r1, r3
 8003508:	4013      	ands	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	f000 8171 	beq.w	80037f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f003 0303 	and.w	r3, r3, #3
 800351c:	2b01      	cmp	r3, #1
 800351e:	d005      	beq.n	800352c <HAL_GPIO_Init+0x40>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b02      	cmp	r3, #2
 800352a:	d130      	bne.n	800358e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003562:	2201      	movs	r2, #1
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	fa02 f303 	lsl.w	r3, r2, r3
 800356a:	43db      	mvns	r3, r3
 800356c:	693a      	ldr	r2, [r7, #16]
 800356e:	4013      	ands	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	091b      	lsrs	r3, r3, #4
 8003578:	f003 0201 	and.w	r2, r3, #1
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4313      	orrs	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b03      	cmp	r3, #3
 8003598:	d118      	bne.n	80035cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80035a0:	2201      	movs	r2, #1
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	fa02 f303 	lsl.w	r3, r2, r3
 80035a8:	43db      	mvns	r3, r3
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	4013      	ands	r3, r2
 80035ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	08db      	lsrs	r3, r3, #3
 80035b6:	f003 0201 	and.w	r2, r3, #1
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f003 0303 	and.w	r3, r3, #3
 80035d4:	2b03      	cmp	r3, #3
 80035d6:	d017      	beq.n	8003608 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	693a      	ldr	r2, [r7, #16]
 80035ec:	4013      	ands	r3, r2
 80035ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	689a      	ldr	r2, [r3, #8]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	2b02      	cmp	r3, #2
 8003612:	d123      	bne.n	800365c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	08da      	lsrs	r2, r3, #3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	3208      	adds	r2, #8
 800361c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003620:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	220f      	movs	r2, #15
 800362c:	fa02 f303 	lsl.w	r3, r2, r3
 8003630:	43db      	mvns	r3, r3
 8003632:	693a      	ldr	r2, [r7, #16]
 8003634:	4013      	ands	r3, r2
 8003636:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	08da      	lsrs	r2, r3, #3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3208      	adds	r2, #8
 8003656:	6939      	ldr	r1, [r7, #16]
 8003658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	2203      	movs	r2, #3
 8003668:	fa02 f303 	lsl.w	r3, r2, r3
 800366c:	43db      	mvns	r3, r3
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	4013      	ands	r3, r2
 8003672:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	f003 0203 	and.w	r2, r3, #3
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	005b      	lsls	r3, r3, #1
 8003680:	fa02 f303 	lsl.w	r3, r2, r3
 8003684:	693a      	ldr	r2, [r7, #16]
 8003686:	4313      	orrs	r3, r2
 8003688:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	693a      	ldr	r2, [r7, #16]
 800368e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 80ac 	beq.w	80037f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369e:	4b5f      	ldr	r3, [pc, #380]	; (800381c <HAL_GPIO_Init+0x330>)
 80036a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a2:	4a5e      	ldr	r2, [pc, #376]	; (800381c <HAL_GPIO_Init+0x330>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	6613      	str	r3, [r2, #96]	; 0x60
 80036aa:	4b5c      	ldr	r3, [pc, #368]	; (800381c <HAL_GPIO_Init+0x330>)
 80036ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	60bb      	str	r3, [r7, #8]
 80036b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036b6:	4a5a      	ldr	r2, [pc, #360]	; (8003820 <HAL_GPIO_Init+0x334>)
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	089b      	lsrs	r3, r3, #2
 80036bc:	3302      	adds	r3, #2
 80036be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	220f      	movs	r2, #15
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	693a      	ldr	r2, [r7, #16]
 80036d6:	4013      	ands	r3, r2
 80036d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036e0:	d025      	beq.n	800372e <HAL_GPIO_Init+0x242>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a4f      	ldr	r2, [pc, #316]	; (8003824 <HAL_GPIO_Init+0x338>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01f      	beq.n	800372a <HAL_GPIO_Init+0x23e>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a4e      	ldr	r2, [pc, #312]	; (8003828 <HAL_GPIO_Init+0x33c>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d019      	beq.n	8003726 <HAL_GPIO_Init+0x23a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a4d      	ldr	r2, [pc, #308]	; (800382c <HAL_GPIO_Init+0x340>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d013      	beq.n	8003722 <HAL_GPIO_Init+0x236>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a4c      	ldr	r2, [pc, #304]	; (8003830 <HAL_GPIO_Init+0x344>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d00d      	beq.n	800371e <HAL_GPIO_Init+0x232>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a4b      	ldr	r2, [pc, #300]	; (8003834 <HAL_GPIO_Init+0x348>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d007      	beq.n	800371a <HAL_GPIO_Init+0x22e>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4a4a      	ldr	r2, [pc, #296]	; (8003838 <HAL_GPIO_Init+0x34c>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d101      	bne.n	8003716 <HAL_GPIO_Init+0x22a>
 8003712:	2306      	movs	r3, #6
 8003714:	e00c      	b.n	8003730 <HAL_GPIO_Init+0x244>
 8003716:	2307      	movs	r3, #7
 8003718:	e00a      	b.n	8003730 <HAL_GPIO_Init+0x244>
 800371a:	2305      	movs	r3, #5
 800371c:	e008      	b.n	8003730 <HAL_GPIO_Init+0x244>
 800371e:	2304      	movs	r3, #4
 8003720:	e006      	b.n	8003730 <HAL_GPIO_Init+0x244>
 8003722:	2303      	movs	r3, #3
 8003724:	e004      	b.n	8003730 <HAL_GPIO_Init+0x244>
 8003726:	2302      	movs	r3, #2
 8003728:	e002      	b.n	8003730 <HAL_GPIO_Init+0x244>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_GPIO_Init+0x244>
 800372e:	2300      	movs	r3, #0
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	f002 0203 	and.w	r2, r2, #3
 8003736:	0092      	lsls	r2, r2, #2
 8003738:	4093      	lsls	r3, r2
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003740:	4937      	ldr	r1, [pc, #220]	; (8003820 <HAL_GPIO_Init+0x334>)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	089b      	lsrs	r3, r3, #2
 8003746:	3302      	adds	r3, #2
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800374e:	4b3b      	ldr	r3, [pc, #236]	; (800383c <HAL_GPIO_Init+0x350>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	43db      	mvns	r3, r3
 8003758:	693a      	ldr	r2, [r7, #16]
 800375a:	4013      	ands	r3, r2
 800375c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d003      	beq.n	8003772 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4313      	orrs	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003772:	4a32      	ldr	r2, [pc, #200]	; (800383c <HAL_GPIO_Init+0x350>)
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <HAL_GPIO_Init+0x350>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	43db      	mvns	r3, r3
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	4013      	ands	r3, r2
 8003786:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800379c:	4a27      	ldr	r2, [pc, #156]	; (800383c <HAL_GPIO_Init+0x350>)
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037a2:	4b26      	ldr	r3, [pc, #152]	; (800383c <HAL_GPIO_Init+0x350>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	43db      	mvns	r3, r3
 80037ac:	693a      	ldr	r2, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80037be:	693a      	ldr	r2, [r7, #16]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037c6:	4a1d      	ldr	r2, [pc, #116]	; (800383c <HAL_GPIO_Init+0x350>)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80037cc:	4b1b      	ldr	r3, [pc, #108]	; (800383c <HAL_GPIO_Init+0x350>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	43db      	mvns	r3, r3
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	4013      	ands	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80037f0:	4a12      	ldr	r2, [pc, #72]	; (800383c <HAL_GPIO_Init+0x350>)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	3301      	adds	r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	fa22 f303 	lsr.w	r3, r2, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	f47f ae78 	bne.w	80034fc <HAL_GPIO_Init+0x10>
  }
}
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	40010000 	.word	0x40010000
 8003824:	48000400 	.word	0x48000400
 8003828:	48000800 	.word	0x48000800
 800382c:	48000c00 	.word	0x48000c00
 8003830:	48001000 	.word	0x48001000
 8003834:	48001400 	.word	0x48001400
 8003838:	48001800 	.word	0x48001800
 800383c:	40010400 	.word	0x40010400

08003840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	807b      	strh	r3, [r7, #2]
 800384c:	4613      	mov	r3, r2
 800384e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003850:	787b      	ldrb	r3, [r7, #1]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d003      	beq.n	800385e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003856:	887a      	ldrh	r2, [r7, #2]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800385c:	e002      	b.n	8003864 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800385e:	887a      	ldrh	r2, [r7, #2]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d101      	bne.n	8003882 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800387e:	2301      	movs	r3, #1
 8003880:	e081      	b.n	8003986 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fe fea4 	bl	80025e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2224      	movs	r2, #36	; 0x24
 80038a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0201 	bic.w	r2, r2, #1
 80038b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80038c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	689a      	ldr	r2, [r3, #8]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038e6:	609a      	str	r2, [r3, #8]
 80038e8:	e006      	b.n	80038f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80038f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d104      	bne.n	800390a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003908:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800391c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800392c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	430a      	orrs	r2, r1
 8003946:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	69d9      	ldr	r1, [r3, #28]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1a      	ldr	r2, [r3, #32]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 0201 	orr.w	r2, r2, #1
 8003966:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b084      	sub	sp, #16
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	68f9      	ldr	r1, [r7, #12]
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
  }
}
 80039ba:	bf00      	nop
 80039bc:	3710      	adds	r7, #16
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b086      	sub	sp, #24
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	699b      	ldr	r3, [r3, #24]
 80039d0:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	0a1b      	lsrs	r3, r3, #8
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d010      	beq.n	8003a08 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	09db      	lsrs	r3, r3, #7
 80039ea:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00a      	beq.n	8003a08 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039f6:	f043 0201 	orr.w	r2, r3, #1
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a06:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	0a9b      	lsrs	r3, r3, #10
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d010      	beq.n	8003a36 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	09db      	lsrs	r3, r3, #7
 8003a18:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a24:	f043 0208 	orr.w	r2, r3, #8
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a34:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	0a5b      	lsrs	r3, r3, #9
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d010      	beq.n	8003a64 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	09db      	lsrs	r3, r3, #7
 8003a46:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f043 0202 	orr.w	r2, r3, #2
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a62:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f003 030b 	and.w	r3, r3, #11
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 fb8a 	bl	8004190 <I2C_ITError>
  }
}
 8003a7c:	bf00      	nop
 8003a7e:	3718      	adds	r7, #24
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b083      	sub	sp, #12
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b083      	sub	sp, #12
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	460b      	mov	r3, r1
 8003ab6:	70fb      	strb	r3, [r7, #3]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003ae4:	bf00      	nop
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b14:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d101      	bne.n	8003b28 <I2C_Slave_ISR_IT+0x24>
 8003b24:	2302      	movs	r3, #2
 8003b26:	e0ec      	b.n	8003d02 <I2C_Slave_ISR_IT+0x1fe>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	095b      	lsrs	r3, r3, #5
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	095b      	lsrs	r3, r3, #5
 8003b40:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d003      	beq.n	8003b50 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003b48:	6939      	ldr	r1, [r7, #16]
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 f9c0 	bl	8003ed0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	091b      	lsrs	r3, r3, #4
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d04d      	beq.n	8003bf8 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d047      	beq.n	8003bf8 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d128      	bne.n	8003bc4 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b28      	cmp	r3, #40	; 0x28
 8003b7c:	d108      	bne.n	8003b90 <I2C_Slave_ISR_IT+0x8c>
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003b84:	d104      	bne.n	8003b90 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b86:	6939      	ldr	r1, [r7, #16]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f000 faab 	bl	80040e4 <I2C_ITListenCplt>
 8003b8e:	e032      	b.n	8003bf6 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	2b29      	cmp	r3, #41	; 0x29
 8003b9a:	d10e      	bne.n	8003bba <I2C_Slave_ISR_IT+0xb6>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003ba2:	d00a      	beq.n	8003bba <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2210      	movs	r2, #16
 8003baa:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 fbe6 	bl	800437e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003bb2:	68f8      	ldr	r0, [r7, #12]
 8003bb4:	f000 f92d 	bl	8003e12 <I2C_ITSlaveSeqCplt>
 8003bb8:	e01d      	b.n	8003bf6 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	2210      	movs	r2, #16
 8003bc0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003bc2:	e096      	b.n	8003cf2 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2210      	movs	r2, #16
 8003bca:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bd0:	f043 0204 	orr.w	r2, r3, #4
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d004      	beq.n	8003be8 <I2C_Slave_ISR_IT+0xe4>
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003be4:	f040 8085 	bne.w	8003cf2 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bec:	4619      	mov	r1, r3
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f000 face 	bl	8004190 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003bf4:	e07d      	b.n	8003cf2 <I2C_Slave_ISR_IT+0x1ee>
 8003bf6:	e07c      	b.n	8003cf2 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d030      	beq.n	8003c66 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	089b      	lsrs	r3, r3, #2
 8003c08:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d02a      	beq.n	8003c66 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d018      	beq.n	8003c4c <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	b2d2      	uxtb	r2, r2
 8003c26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	1c5a      	adds	r2, r3, #1
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c36:	3b01      	subs	r3, #1
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	3b01      	subs	r3, #1
 8003c46:	b29a      	uxth	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d14f      	bne.n	8003cf6 <I2C_Slave_ISR_IT+0x1f2>
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c5c:	d04b      	beq.n	8003cf6 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003c5e:	68f8      	ldr	r0, [r7, #12]
 8003c60:	f000 f8d7 	bl	8003e12 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003c64:	e047      	b.n	8003cf6 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	08db      	lsrs	r3, r3, #3
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00a      	beq.n	8003c88 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	08db      	lsrs	r3, r3, #3
 8003c76:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003c7e:	6939      	ldr	r1, [r7, #16]
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 f842 	bl	8003d0a <I2C_ITAddrCplt>
 8003c86:	e037      	b.n	8003cf8 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	f003 0301 	and.w	r3, r3, #1
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d031      	beq.n	8003cf8 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	085b      	lsrs	r3, r3, #1
 8003c98:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d02b      	beq.n	8003cf8 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d018      	beq.n	8003cdc <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	781a      	ldrb	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cba:	1c5a      	adds	r2, r3, #1
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cd2:	3b01      	subs	r3, #1
 8003cd4:	b29a      	uxth	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	851a      	strh	r2, [r3, #40]	; 0x28
 8003cda:	e00d      	b.n	8003cf8 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003ce2:	d002      	beq.n	8003cea <I2C_Slave_ISR_IT+0x1e6>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 f891 	bl	8003e12 <I2C_ITSlaveSeqCplt>
 8003cf0:	e002      	b.n	8003cf8 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003cf2:	bf00      	nop
 8003cf4:	e000      	b.n	8003cf8 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003cf6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3718      	adds	r7, #24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}

08003d0a <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d0a:	b580      	push	{r7, lr}
 8003d0c:	b084      	sub	sp, #16
 8003d0e:	af00      	add	r7, sp, #0
 8003d10:	6078      	str	r0, [r7, #4]
 8003d12:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d20:	2b28      	cmp	r3, #40	; 0x28
 8003d22:	d16a      	bne.n	8003dfa <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	0c1b      	lsrs	r3, r3, #16
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699b      	ldr	r3, [r3, #24]
 8003d3a:	0c1b      	lsrs	r3, r3, #16
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d42:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d50:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003d5e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d138      	bne.n	8003dda <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003d68:	897b      	ldrh	r3, [r7, #10]
 8003d6a:	09db      	lsrs	r3, r3, #7
 8003d6c:	b29a      	uxth	r2, r3
 8003d6e:	89bb      	ldrh	r3, [r7, #12]
 8003d70:	4053      	eors	r3, r2
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	f003 0306 	and.w	r3, r3, #6
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d11c      	bne.n	8003db6 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003d7c:	897b      	ldrh	r3, [r7, #10]
 8003d7e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d84:	1c5a      	adds	r2, r3, #1
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d13b      	bne.n	8003e0a <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	2208      	movs	r2, #8
 8003d9e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003da8:	89ba      	ldrh	r2, [r7, #12]
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	4619      	mov	r1, r3
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f7ff fe7c 	bl	8003aac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003db4:	e029      	b.n	8003e0a <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003db6:	893b      	ldrh	r3, [r7, #8]
 8003db8:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fb1f 	bl	8004402 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dcc:	89ba      	ldrh	r2, [r7, #12]
 8003dce:	7bfb      	ldrb	r3, [r7, #15]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff fe6a 	bl	8003aac <HAL_I2C_AddrCallback>
}
 8003dd8:	e017      	b.n	8003e0a <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003dda:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 fb0f 	bl	8004402 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003dec:	89ba      	ldrh	r2, [r7, #12]
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	4619      	mov	r1, r3
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f7ff fe5a 	bl	8003aac <HAL_I2C_AddrCallback>
}
 8003df8:	e007      	b.n	8003e0a <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2208      	movs	r2, #8
 8003e00:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003e0a:	bf00      	nop
 8003e0c:	3710      	adds	r7, #16
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003e12:	b580      	push	{r7, lr}
 8003e14:	b084      	sub	sp, #16
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	0b9b      	lsrs	r3, r3, #14
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d008      	beq.n	8003e48 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	e00d      	b.n	8003e64 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	0bdb      	lsrs	r3, r3, #15
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e62:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b29      	cmp	r3, #41	; 0x29
 8003e6e:	d112      	bne.n	8003e96 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2228      	movs	r2, #40	; 0x28
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2221      	movs	r2, #33	; 0x21
 8003e7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003e7e:	2101      	movs	r1, #1
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 fabe 	bl	8004402 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7ff fdf8 	bl	8003a84 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003e94:	e017      	b.n	8003ec6 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8003ea0:	d111      	bne.n	8003ec6 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2228      	movs	r2, #40	; 0x28
 8003ea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2222      	movs	r2, #34	; 0x22
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f000 faa5 	bl	8004402 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f7ff fde9 	bl	8003a98 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ec6:	bf00      	nop
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eec:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b21      	cmp	r3, #33	; 0x21
 8003efa:	d002      	beq.n	8003f02 <I2C_ITSlaveCplt+0x32>
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
 8003efe:	2b29      	cmp	r3, #41	; 0x29
 8003f00:	d108      	bne.n	8003f14 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003f02:	f248 0101 	movw	r1, #32769	; 0x8001
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 fa7b 	bl	8004402 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2221      	movs	r2, #33	; 0x21
 8003f10:	631a      	str	r2, [r3, #48]	; 0x30
 8003f12:	e00d      	b.n	8003f30 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	2b22      	cmp	r3, #34	; 0x22
 8003f18:	d002      	beq.n	8003f20 <I2C_ITSlaveCplt+0x50>
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
 8003f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8003f1e:	d107      	bne.n	8003f30 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003f20:	f248 0102 	movw	r1, #32770	; 0x8002
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fa6c 	bl	8004402 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2222      	movs	r2, #34	; 0x22
 8003f2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685a      	ldr	r2, [r3, #4]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6859      	ldr	r1, [r3, #4]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b64      	ldr	r3, [pc, #400]	; (80040dc <I2C_ITSlaveCplt+0x20c>)
 8003f4c:	400b      	ands	r3, r1
 8003f4e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fa14 	bl	800437e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	0b9b      	lsrs	r3, r3, #14
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d013      	beq.n	8003f8a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f70:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d020      	beq.n	8003fbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f88:	e018      	b.n	8003fbc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	0bdb      	lsrs	r3, r3, #15
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d012      	beq.n	8003fbc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fa4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d006      	beq.n	8003fbc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	089b      	lsrs	r3, r3, #2
 8003fc0:	f003 0301 	and.w	r3, r3, #1
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d020      	beq.n	800400a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f023 0304 	bic.w	r3, r3, #4
 8003fce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	1c5a      	adds	r2, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00c      	beq.n	800400a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	3b01      	subs	r3, #1
 8004004:	b29a      	uxth	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	2b00      	cmp	r3, #0
 8004034:	d010      	beq.n	8004058 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4619      	mov	r1, r3
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f8a7 	bl	8004190 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004048:	b2db      	uxtb	r3, r3
 800404a:	2b28      	cmp	r3, #40	; 0x28
 800404c:	d141      	bne.n	80040d2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800404e:	6979      	ldr	r1, [r7, #20]
 8004050:	6878      	ldr	r0, [r7, #4]
 8004052:	f000 f847 	bl	80040e4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004056:	e03c      	b.n	80040d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800405c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004060:	d014      	beq.n	800408c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f7ff fed5 	bl	8003e12 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1d      	ldr	r2, [pc, #116]	; (80040e0 <I2C_ITSlaveCplt+0x210>)
 800406c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2220      	movs	r2, #32
 8004072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f7ff fd1f 	bl	8003ac8 <HAL_I2C_ListenCpltCallback>
}
 800408a:	e022      	b.n	80040d2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b22      	cmp	r3, #34	; 0x22
 8004096:	d10e      	bne.n	80040b6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff fcf2 	bl	8003a98 <HAL_I2C_SlaveRxCpltCallback>
}
 80040b4:	e00d      	b.n	80040d2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff fcd9 	bl	8003a84 <HAL_I2C_SlaveTxCpltCallback>
}
 80040d2:	bf00      	nop
 80040d4:	3718      	adds	r7, #24
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	fe00e800 	.word	0xfe00e800
 80040e0:	ffff0000 	.word	0xffff0000

080040e4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b082      	sub	sp, #8
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a26      	ldr	r2, [pc, #152]	; (800418c <I2C_ITListenCplt+0xa8>)
 80040f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	089b      	lsrs	r3, r3, #2
 8004114:	f003 0301 	and.w	r3, r3, #1
 8004118:	2b00      	cmp	r3, #0
 800411a:	d022      	beq.n	8004162 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004126:	b2d2      	uxtb	r2, r2
 8004128:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412e:	1c5a      	adds	r2, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004138:	2b00      	cmp	r3, #0
 800413a:	d012      	beq.n	8004162 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414c:	b29b      	uxth	r3, r3
 800414e:	3b01      	subs	r3, #1
 8004150:	b29a      	uxth	r2, r3
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415a:	f043 0204 	orr.w	r2, r3, #4
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004162:	f248 0103 	movw	r1, #32771	; 0x8003
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f94b 	bl	8004402 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	2210      	movs	r2, #16
 8004172:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f7ff fca3 	bl	8003ac8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	ffff0000 	.word	0xffff0000

08004190 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	4a5d      	ldr	r2, [pc, #372]	; (8004324 <I2C_ITError+0x194>)
 80041ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	431a      	orrs	r2, r3
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80041c2:	7bfb      	ldrb	r3, [r7, #15]
 80041c4:	2b28      	cmp	r3, #40	; 0x28
 80041c6:	d005      	beq.n	80041d4 <I2C_ITError+0x44>
 80041c8:	7bfb      	ldrb	r3, [r7, #15]
 80041ca:	2b29      	cmp	r3, #41	; 0x29
 80041cc:	d002      	beq.n	80041d4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80041ce:	7bfb      	ldrb	r3, [r7, #15]
 80041d0:	2b2a      	cmp	r3, #42	; 0x2a
 80041d2:	d10b      	bne.n	80041ec <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041d4:	2103      	movs	r1, #3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f913 	bl	8004402 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2228      	movs	r2, #40	; 0x28
 80041e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a50      	ldr	r2, [pc, #320]	; (8004328 <I2C_ITError+0x198>)
 80041e8:	635a      	str	r2, [r3, #52]	; 0x34
 80041ea:	e011      	b.n	8004210 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80041ec:	f248 0103 	movw	r1, #32771	; 0x8003
 80041f0:	6878      	ldr	r0, [r7, #4]
 80041f2:	f000 f906 	bl	8004402 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041fc:	b2db      	uxtb	r3, r3
 80041fe:	2b60      	cmp	r3, #96	; 0x60
 8004200:	d003      	beq.n	800420a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2220      	movs	r2, #32
 8004206:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004214:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421a:	2b00      	cmp	r3, #0
 800421c:	d039      	beq.n	8004292 <I2C_ITError+0x102>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b11      	cmp	r3, #17
 8004222:	d002      	beq.n	800422a <I2C_ITError+0x9a>
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b21      	cmp	r3, #33	; 0x21
 8004228:	d133      	bne.n	8004292 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004234:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004238:	d107      	bne.n	800424a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004248:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff f90e 	bl	8003470 <HAL_DMA_GetState>
 8004254:	4603      	mov	r3, r0
 8004256:	2b01      	cmp	r3, #1
 8004258:	d017      	beq.n	800428a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	4a33      	ldr	r2, [pc, #204]	; (800432c <I2C_ITError+0x19c>)
 8004260:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff f80e 	bl	8003290 <HAL_DMA_Abort_IT>
 8004274:	4603      	mov	r3, r0
 8004276:	2b00      	cmp	r3, #0
 8004278:	d04d      	beq.n	8004316 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004284:	4610      	mov	r0, r2
 8004286:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004288:	e045      	b.n	8004316 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f000 f850 	bl	8004330 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004290:	e041      	b.n	8004316 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004296:	2b00      	cmp	r3, #0
 8004298:	d039      	beq.n	800430e <I2C_ITError+0x17e>
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	2b12      	cmp	r3, #18
 800429e:	d002      	beq.n	80042a6 <I2C_ITError+0x116>
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b22      	cmp	r3, #34	; 0x22
 80042a4:	d133      	bne.n	800430e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042b4:	d107      	bne.n	80042c6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042c4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff f8d0 	bl	8003470 <HAL_DMA_GetState>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d017      	beq.n	8004306 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042da:	4a14      	ldr	r2, [pc, #80]	; (800432c <I2C_ITError+0x19c>)
 80042dc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	4618      	mov	r0, r3
 80042ec:	f7fe ffd0 	bl	8003290 <HAL_DMA_Abort_IT>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d011      	beq.n	800431a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004300:	4610      	mov	r0, r2
 8004302:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004304:	e009      	b.n	800431a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f812 	bl	8004330 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800430c:	e005      	b.n	800431a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f80e 	bl	8004330 <I2C_TreatErrorCallback>
  }
}
 8004314:	e002      	b.n	800431c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004316:	bf00      	nop
 8004318:	e000      	b.n	800431c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800431a:	bf00      	nop
}
 800431c:	bf00      	nop
 800431e:	3710      	adds	r7, #16
 8004320:	46bd      	mov	sp, r7
 8004322:	bd80      	pop	{r7, pc}
 8004324:	ffff0000 	.word	0xffff0000
 8004328:	08003b05 	.word	0x08003b05
 800432c:	080043c7 	.word	0x080043c7

08004330 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800433e:	b2db      	uxtb	r3, r3
 8004340:	2b60      	cmp	r3, #96	; 0x60
 8004342:	d10e      	bne.n	8004362 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2200      	movs	r2, #0
 8004350:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff fbc8 	bl	8003af0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004360:	e009      	b.n	8004376 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f7ff fbb3 	bl	8003adc <HAL_I2C_ErrorCallback>
}
 8004376:	bf00      	nop
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d103      	bne.n	800439c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2200      	movs	r2, #0
 800439a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d007      	beq.n	80043ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	619a      	str	r2, [r3, #24]
  }
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e0:	2200      	movs	r2, #0
 80043e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f0:	2200      	movs	r2, #0
 80043f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f7ff ff9b 	bl	8004330 <I2C_TreatErrorCallback>
}
 80043fa:	bf00      	nop
 80043fc:	3710      	adds	r7, #16
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004402:	b480      	push	{r7}
 8004404:	b085      	sub	sp, #20
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
 800440a:	460b      	mov	r3, r1
 800440c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800440e:	2300      	movs	r3, #0
 8004410:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	f003 0301 	and.w	r3, r3, #1
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00f      	beq.n	800443c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004422:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004430:	2b28      	cmp	r3, #40	; 0x28
 8004432:	d003      	beq.n	800443c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800443a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800443c:	887b      	ldrh	r3, [r7, #2]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00f      	beq.n	8004466 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800444c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004454:	b2db      	uxtb	r3, r3
 8004456:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800445a:	2b28      	cmp	r3, #40	; 0x28
 800445c:	d003      	beq.n	8004466 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004464:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004466:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800446a:	2b00      	cmp	r3, #0
 800446c:	da03      	bge.n	8004476 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004476:	887b      	ldrh	r3, [r7, #2]
 8004478:	2b10      	cmp	r3, #16
 800447a:	d103      	bne.n	8004484 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004482:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004484:	887b      	ldrh	r3, [r7, #2]
 8004486:	2b20      	cmp	r3, #32
 8004488:	d103      	bne.n	8004492 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f043 0320 	orr.w	r3, r3, #32
 8004490:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004492:	887b      	ldrh	r3, [r7, #2]
 8004494:	2b40      	cmp	r3, #64	; 0x40
 8004496:	d103      	bne.n	80044a0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800449e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6819      	ldr	r1, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	43da      	mvns	r2, r3
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	400a      	ands	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	bf00      	nop
 80044b4:	3714      	adds	r7, #20
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
 80044c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	2b20      	cmp	r3, #32
 80044d2:	d138      	bne.n	8004546 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044de:	2302      	movs	r3, #2
 80044e0:	e032      	b.n	8004548 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2224      	movs	r2, #36	; 0x24
 80044ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 0201 	bic.w	r2, r2, #1
 8004500:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004510:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	6819      	ldr	r1, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	430a      	orrs	r2, r1
 8004520:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f042 0201 	orr.w	r2, r2, #1
 8004530:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	e000      	b.n	8004548 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004546:	2302      	movs	r3, #2
  }
}
 8004548:	4618      	mov	r0, r3
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004554:	b480      	push	{r7}
 8004556:	b085      	sub	sp, #20
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b20      	cmp	r3, #32
 8004568:	d139      	bne.n	80045de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004574:	2302      	movs	r3, #2
 8004576:	e033      	b.n	80045e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2224      	movs	r2, #36	; 0x24
 8004584:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0201 	bic.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80045a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	021b      	lsls	r3, r3, #8
 80045ac:	68fa      	ldr	r2, [r7, #12]
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f042 0201 	orr.w	r2, r2, #1
 80045c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2220      	movs	r2, #32
 80045ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2200      	movs	r2, #0
 80045d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e000      	b.n	80045e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045de:	2302      	movs	r3, #2
  }
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <HAL_PWREx_GetVoltageRange+0x18>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40007000 	.word	0x40007000

08004608 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004616:	d130      	bne.n	800467a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004618:	4b23      	ldr	r3, [pc, #140]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004624:	d038      	beq.n	8004698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004626:	4b20      	ldr	r3, [pc, #128]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800462e:	4a1e      	ldr	r2, [pc, #120]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004630:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004634:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004636:	4b1d      	ldr	r3, [pc, #116]	; (80046ac <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2232      	movs	r2, #50	; 0x32
 800463c:	fb02 f303 	mul.w	r3, r2, r3
 8004640:	4a1b      	ldr	r2, [pc, #108]	; (80046b0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004642:	fba2 2303 	umull	r2, r3, r2, r3
 8004646:	0c9b      	lsrs	r3, r3, #18
 8004648:	3301      	adds	r3, #1
 800464a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800464c:	e002      	b.n	8004654 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	3b01      	subs	r3, #1
 8004652:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004654:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004660:	d102      	bne.n	8004668 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1f2      	bne.n	800464e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004668:	4b0f      	ldr	r3, [pc, #60]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800466a:	695b      	ldr	r3, [r3, #20]
 800466c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004674:	d110      	bne.n	8004698 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004676:	2303      	movs	r3, #3
 8004678:	e00f      	b.n	800469a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800467a:	4b0b      	ldr	r3, [pc, #44]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004686:	d007      	beq.n	8004698 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004688:	4b07      	ldr	r3, [pc, #28]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004690:	4a05      	ldr	r2, [pc, #20]	; (80046a8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004696:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	40007000 	.word	0x40007000
 80046ac:	20000000 	.word	0x20000000
 80046b0:	431bde83 	.word	0x431bde83

080046b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b088      	sub	sp, #32
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e3ca      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c6:	4b97      	ldr	r3, [pc, #604]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d0:	4b94      	ldr	r3, [pc, #592]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80e4 	beq.w	80048b0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d007      	beq.n	80046fe <HAL_RCC_OscConfig+0x4a>
 80046ee:	69bb      	ldr	r3, [r7, #24]
 80046f0:	2b0c      	cmp	r3, #12
 80046f2:	f040 808b 	bne.w	800480c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	f040 8087 	bne.w	800480c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80046fe:	4b89      	ldr	r3, [pc, #548]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d005      	beq.n	8004716 <HAL_RCC_OscConfig+0x62>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e3a2      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1a      	ldr	r2, [r3, #32]
 800471a:	4b82      	ldr	r3, [pc, #520]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0308 	and.w	r3, r3, #8
 8004722:	2b00      	cmp	r3, #0
 8004724:	d004      	beq.n	8004730 <HAL_RCC_OscConfig+0x7c>
 8004726:	4b7f      	ldr	r3, [pc, #508]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800472e:	e005      	b.n	800473c <HAL_RCC_OscConfig+0x88>
 8004730:	4b7c      	ldr	r3, [pc, #496]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800473c:	4293      	cmp	r3, r2
 800473e:	d223      	bcs.n	8004788 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	4618      	mov	r0, r3
 8004746:	f000 fd55 	bl	80051f4 <RCC_SetFlashLatencyFromMSIRange>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d001      	beq.n	8004754 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e383      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004754:	4b73      	ldr	r3, [pc, #460]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a72      	ldr	r2, [pc, #456]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800475a:	f043 0308 	orr.w	r3, r3, #8
 800475e:	6013      	str	r3, [r2, #0]
 8004760:	4b70      	ldr	r3, [pc, #448]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a1b      	ldr	r3, [r3, #32]
 800476c:	496d      	ldr	r1, [pc, #436]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800476e:	4313      	orrs	r3, r2
 8004770:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004772:	4b6c      	ldr	r3, [pc, #432]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	4968      	ldr	r1, [pc, #416]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004782:	4313      	orrs	r3, r2
 8004784:	604b      	str	r3, [r1, #4]
 8004786:	e025      	b.n	80047d4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004788:	4b66      	ldr	r3, [pc, #408]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a65      	ldr	r2, [pc, #404]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800478e:	f043 0308 	orr.w	r3, r3, #8
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b63      	ldr	r3, [pc, #396]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	4960      	ldr	r1, [pc, #384]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80047a6:	4b5f      	ldr	r3, [pc, #380]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	69db      	ldr	r3, [r3, #28]
 80047b2:	021b      	lsls	r3, r3, #8
 80047b4:	495b      	ldr	r1, [pc, #364]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80047b6:	4313      	orrs	r3, r2
 80047b8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d109      	bne.n	80047d4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a1b      	ldr	r3, [r3, #32]
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fd15 	bl	80051f4 <RCC_SetFlashLatencyFromMSIRange>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e343      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80047d4:	f000 fc4a 	bl	800506c <HAL_RCC_GetSysClockFreq>
 80047d8:	4602      	mov	r2, r0
 80047da:	4b52      	ldr	r3, [pc, #328]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	091b      	lsrs	r3, r3, #4
 80047e0:	f003 030f 	and.w	r3, r3, #15
 80047e4:	4950      	ldr	r1, [pc, #320]	; (8004928 <HAL_RCC_OscConfig+0x274>)
 80047e6:	5ccb      	ldrb	r3, [r1, r3]
 80047e8:	f003 031f 	and.w	r3, r3, #31
 80047ec:	fa22 f303 	lsr.w	r3, r2, r3
 80047f0:	4a4e      	ldr	r2, [pc, #312]	; (800492c <HAL_RCC_OscConfig+0x278>)
 80047f2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80047f4:	4b4e      	ldr	r3, [pc, #312]	; (8004930 <HAL_RCC_OscConfig+0x27c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f7fe fa61 	bl	8002cc0 <HAL_InitTick>
 80047fe:	4603      	mov	r3, r0
 8004800:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d052      	beq.n	80048ae <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004808:	7bfb      	ldrb	r3, [r7, #15]
 800480a:	e327      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	699b      	ldr	r3, [r3, #24]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d032      	beq.n	800487a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004814:	4b43      	ldr	r3, [pc, #268]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4a42      	ldr	r2, [pc, #264]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800481a:	f043 0301 	orr.w	r3, r3, #1
 800481e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004820:	f7fe fa9e 	bl	8002d60 <HAL_GetTick>
 8004824:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004826:	e008      	b.n	800483a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004828:	f7fe fa9a 	bl	8002d60 <HAL_GetTick>
 800482c:	4602      	mov	r2, r0
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	1ad3      	subs	r3, r2, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e310      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800483a:	4b3a      	ldr	r3, [pc, #232]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0f0      	beq.n	8004828 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004846:	4b37      	ldr	r3, [pc, #220]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a36      	ldr	r2, [pc, #216]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800484c:	f043 0308 	orr.w	r3, r3, #8
 8004850:	6013      	str	r3, [r2, #0]
 8004852:	4b34      	ldr	r3, [pc, #208]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	4931      	ldr	r1, [pc, #196]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004860:	4313      	orrs	r3, r2
 8004862:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004864:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	69db      	ldr	r3, [r3, #28]
 8004870:	021b      	lsls	r3, r3, #8
 8004872:	492c      	ldr	r1, [pc, #176]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004874:	4313      	orrs	r3, r2
 8004876:	604b      	str	r3, [r1, #4]
 8004878:	e01a      	b.n	80048b0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800487a:	4b2a      	ldr	r3, [pc, #168]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a29      	ldr	r2, [pc, #164]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004880:	f023 0301 	bic.w	r3, r3, #1
 8004884:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004886:	f7fe fa6b 	bl	8002d60 <HAL_GetTick>
 800488a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800488e:	f7fe fa67 	bl	8002d60 <HAL_GetTick>
 8004892:	4602      	mov	r2, r0
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e2dd      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80048a0:	4b20      	ldr	r3, [pc, #128]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f0      	bne.n	800488e <HAL_RCC_OscConfig+0x1da>
 80048ac:	e000      	b.n	80048b0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80048ae:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 0301 	and.w	r3, r3, #1
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d074      	beq.n	80049a6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	2b08      	cmp	r3, #8
 80048c0:	d005      	beq.n	80048ce <HAL_RCC_OscConfig+0x21a>
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	2b0c      	cmp	r3, #12
 80048c6:	d10e      	bne.n	80048e6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2b03      	cmp	r3, #3
 80048cc:	d10b      	bne.n	80048e6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ce:	4b15      	ldr	r3, [pc, #84]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d064      	beq.n	80049a4 <HAL_RCC_OscConfig+0x2f0>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d160      	bne.n	80049a4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e2ba      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ee:	d106      	bne.n	80048fe <HAL_RCC_OscConfig+0x24a>
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a0b      	ldr	r2, [pc, #44]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 80048f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048fa:	6013      	str	r3, [r2, #0]
 80048fc:	e026      	b.n	800494c <HAL_RCC_OscConfig+0x298>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004906:	d115      	bne.n	8004934 <HAL_RCC_OscConfig+0x280>
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a05      	ldr	r2, [pc, #20]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800490e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004912:	6013      	str	r3, [r2, #0]
 8004914:	4b03      	ldr	r3, [pc, #12]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a02      	ldr	r2, [pc, #8]	; (8004924 <HAL_RCC_OscConfig+0x270>)
 800491a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e014      	b.n	800494c <HAL_RCC_OscConfig+0x298>
 8004922:	bf00      	nop
 8004924:	40021000 	.word	0x40021000
 8004928:	0800d2dc 	.word	0x0800d2dc
 800492c:	20000000 	.word	0x20000000
 8004930:	20000004 	.word	0x20000004
 8004934:	4ba0      	ldr	r3, [pc, #640]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a9f      	ldr	r2, [pc, #636]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 800493a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800493e:	6013      	str	r3, [r2, #0]
 8004940:	4b9d      	ldr	r3, [pc, #628]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a9c      	ldr	r2, [pc, #624]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004946:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800494a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d013      	beq.n	800497c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004954:	f7fe fa04 	bl	8002d60 <HAL_GetTick>
 8004958:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800495a:	e008      	b.n	800496e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800495c:	f7fe fa00 	bl	8002d60 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	1ad3      	subs	r3, r2, r3
 8004966:	2b64      	cmp	r3, #100	; 0x64
 8004968:	d901      	bls.n	800496e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800496a:	2303      	movs	r3, #3
 800496c:	e276      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800496e:	4b92      	ldr	r3, [pc, #584]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d0f0      	beq.n	800495c <HAL_RCC_OscConfig+0x2a8>
 800497a:	e014      	b.n	80049a6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497c:	f7fe f9f0 	bl	8002d60 <HAL_GetTick>
 8004980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004982:	e008      	b.n	8004996 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004984:	f7fe f9ec 	bl	8002d60 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b64      	cmp	r3, #100	; 0x64
 8004990:	d901      	bls.n	8004996 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e262      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004996:	4b88      	ldr	r3, [pc, #544]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d1f0      	bne.n	8004984 <HAL_RCC_OscConfig+0x2d0>
 80049a2:	e000      	b.n	80049a6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0302 	and.w	r3, r3, #2
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d060      	beq.n	8004a74 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d005      	beq.n	80049c4 <HAL_RCC_OscConfig+0x310>
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	2b0c      	cmp	r3, #12
 80049bc:	d119      	bne.n	80049f2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d116      	bne.n	80049f2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049c4:	4b7c      	ldr	r3, [pc, #496]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d005      	beq.n	80049dc <HAL_RCC_OscConfig+0x328>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	68db      	ldr	r3, [r3, #12]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e23f      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049dc:	4b76      	ldr	r3, [pc, #472]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	061b      	lsls	r3, r3, #24
 80049ea:	4973      	ldr	r1, [pc, #460]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f0:	e040      	b.n	8004a74 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d023      	beq.n	8004a42 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049fa:	4b6f      	ldr	r3, [pc, #444]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a6e      	ldr	r2, [pc, #440]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004a00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a06:	f7fe f9ab 	bl	8002d60 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a0e:	f7fe f9a7 	bl	8002d60 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e21d      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a20:	4b65      	ldr	r3, [pc, #404]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a2c:	4b62      	ldr	r3, [pc, #392]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	061b      	lsls	r3, r3, #24
 8004a3a:	495f      	ldr	r1, [pc, #380]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	604b      	str	r3, [r1, #4]
 8004a40:	e018      	b.n	8004a74 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a42:	4b5d      	ldr	r3, [pc, #372]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a5c      	ldr	r2, [pc, #368]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a4e:	f7fe f987 	bl	8002d60 <HAL_GetTick>
 8004a52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a54:	e008      	b.n	8004a68 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a56:	f7fe f983 	bl	8002d60 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	2b02      	cmp	r3, #2
 8004a62:	d901      	bls.n	8004a68 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004a64:	2303      	movs	r3, #3
 8004a66:	e1f9      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004a68:	4b53      	ldr	r3, [pc, #332]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d1f0      	bne.n	8004a56 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d03c      	beq.n	8004afa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d01c      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a88:	4b4b      	ldr	r3, [pc, #300]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004a8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a8e:	4a4a      	ldr	r2, [pc, #296]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a98:	f7fe f962 	bl	8002d60 <HAL_GetTick>
 8004a9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004a9e:	e008      	b.n	8004ab2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa0:	f7fe f95e 	bl	8002d60 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	2b02      	cmp	r3, #2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e1d4      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ab2:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0ef      	beq.n	8004aa0 <HAL_RCC_OscConfig+0x3ec>
 8004ac0:	e01b      	b.n	8004afa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac2:	4b3d      	ldr	r3, [pc, #244]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004ac4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ac8:	4a3b      	ldr	r2, [pc, #236]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad2:	f7fe f945 	bl	8002d60 <HAL_GetTick>
 8004ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ad8:	e008      	b.n	8004aec <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ada:	f7fe f941 	bl	8002d60 <HAL_GetTick>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	1ad3      	subs	r3, r2, r3
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d901      	bls.n	8004aec <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e1b7      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004aec:	4b32      	ldr	r3, [pc, #200]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1ef      	bne.n	8004ada <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	f000 80a6 	beq.w	8004c54 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004b0c:	4b2a      	ldr	r3, [pc, #168]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10d      	bne.n	8004b34 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b18:	4b27      	ldr	r3, [pc, #156]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b1c:	4a26      	ldr	r2, [pc, #152]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6593      	str	r3, [r2, #88]	; 0x58
 8004b24:	4b24      	ldr	r3, [pc, #144]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2c:	60bb      	str	r3, [r7, #8]
 8004b2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b30:	2301      	movs	r3, #1
 8004b32:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b34:	4b21      	ldr	r3, [pc, #132]	; (8004bbc <HAL_RCC_OscConfig+0x508>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d118      	bne.n	8004b72 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b40:	4b1e      	ldr	r3, [pc, #120]	; (8004bbc <HAL_RCC_OscConfig+0x508>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1d      	ldr	r2, [pc, #116]	; (8004bbc <HAL_RCC_OscConfig+0x508>)
 8004b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b4a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b4c:	f7fe f908 	bl	8002d60 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b54:	f7fe f904 	bl	8002d60 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e17a      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b66:	4b15      	ldr	r3, [pc, #84]	; (8004bbc <HAL_RCC_OscConfig+0x508>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d0f0      	beq.n	8004b54 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d108      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4d8>
 8004b7a:	4b0f      	ldr	r3, [pc, #60]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004b7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b80:	4a0d      	ldr	r2, [pc, #52]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004b82:	f043 0301 	orr.w	r3, r3, #1
 8004b86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004b8a:	e029      	b.n	8004be0 <HAL_RCC_OscConfig+0x52c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	2b05      	cmp	r3, #5
 8004b92:	d115      	bne.n	8004bc0 <HAL_RCC_OscConfig+0x50c>
 8004b94:	4b08      	ldr	r3, [pc, #32]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9a:	4a07      	ldr	r2, [pc, #28]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004b9c:	f043 0304 	orr.w	r3, r3, #4
 8004ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ba4:	4b04      	ldr	r3, [pc, #16]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004baa:	4a03      	ldr	r2, [pc, #12]	; (8004bb8 <HAL_RCC_OscConfig+0x504>)
 8004bac:	f043 0301 	orr.w	r3, r3, #1
 8004bb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bb4:	e014      	b.n	8004be0 <HAL_RCC_OscConfig+0x52c>
 8004bb6:	bf00      	nop
 8004bb8:	40021000 	.word	0x40021000
 8004bbc:	40007000 	.word	0x40007000
 8004bc0:	4b9c      	ldr	r3, [pc, #624]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc6:	4a9b      	ldr	r2, [pc, #620]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004bc8:	f023 0301 	bic.w	r3, r3, #1
 8004bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004bd0:	4b98      	ldr	r3, [pc, #608]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bd6:	4a97      	ldr	r2, [pc, #604]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004bd8:	f023 0304 	bic.w	r3, r3, #4
 8004bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d016      	beq.n	8004c16 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be8:	f7fe f8ba 	bl	8002d60 <HAL_GetTick>
 8004bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bee:	e00a      	b.n	8004c06 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf0:	f7fe f8b6 	bl	8002d60 <HAL_GetTick>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	1ad3      	subs	r3, r2, r3
 8004bfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d901      	bls.n	8004c06 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004c02:	2303      	movs	r3, #3
 8004c04:	e12a      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c06:	4b8b      	ldr	r3, [pc, #556]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0ed      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x53c>
 8004c14:	e015      	b.n	8004c42 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c16:	f7fe f8a3 	bl	8002d60 <HAL_GetTick>
 8004c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c1c:	e00a      	b.n	8004c34 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1e:	f7fe f89f 	bl	8002d60 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e113      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c34:	4b7f      	ldr	r3, [pc, #508]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1ed      	bne.n	8004c1e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c42:	7ffb      	ldrb	r3, [r7, #31]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d105      	bne.n	8004c54 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c48:	4b7a      	ldr	r3, [pc, #488]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	4a79      	ldr	r2, [pc, #484]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004c4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c52:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80fe 	beq.w	8004e5a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	f040 80d0 	bne.w	8004e08 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004c68:	4b72      	ldr	r3, [pc, #456]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f003 0203 	and.w	r2, r3, #3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d130      	bne.n	8004cde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	3b01      	subs	r3, #1
 8004c88:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d127      	bne.n	8004cde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c98:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d11f      	bne.n	8004cde <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ca8:	2a07      	cmp	r2, #7
 8004caa:	bf14      	ite	ne
 8004cac:	2201      	movne	r2, #1
 8004cae:	2200      	moveq	r2, #0
 8004cb0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d113      	bne.n	8004cde <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc0:	085b      	lsrs	r3, r3, #1
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d109      	bne.n	8004cde <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd4:	085b      	lsrs	r3, r3, #1
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d06e      	beq.n	8004dbc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	2b0c      	cmp	r3, #12
 8004ce2:	d069      	beq.n	8004db8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004ce4:	4b53      	ldr	r3, [pc, #332]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d105      	bne.n	8004cfc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004cf0:	4b50      	ldr	r3, [pc, #320]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d001      	beq.n	8004d00 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e0ad      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004d00:	4b4c      	ldr	r3, [pc, #304]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a4b      	ldr	r2, [pc, #300]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d0c:	f7fe f828 	bl	8002d60 <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fe f824 	bl	8002d60 <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e09a      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d26:	4b43      	ldr	r3, [pc, #268]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d32:	4b40      	ldr	r3, [pc, #256]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004d34:	68da      	ldr	r2, [r3, #12]
 8004d36:	4b40      	ldr	r3, [pc, #256]	; (8004e38 <HAL_RCC_OscConfig+0x784>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004d42:	3a01      	subs	r2, #1
 8004d44:	0112      	lsls	r2, r2, #4
 8004d46:	4311      	orrs	r1, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004d4c:	0212      	lsls	r2, r2, #8
 8004d4e:	4311      	orrs	r1, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004d54:	0852      	lsrs	r2, r2, #1
 8004d56:	3a01      	subs	r2, #1
 8004d58:	0552      	lsls	r2, r2, #21
 8004d5a:	4311      	orrs	r1, r2
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004d60:	0852      	lsrs	r2, r2, #1
 8004d62:	3a01      	subs	r2, #1
 8004d64:	0652      	lsls	r2, r2, #25
 8004d66:	4311      	orrs	r1, r2
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d6c:	0912      	lsrs	r2, r2, #4
 8004d6e:	0452      	lsls	r2, r2, #17
 8004d70:	430a      	orrs	r2, r1
 8004d72:	4930      	ldr	r1, [pc, #192]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004d78:	4b2e      	ldr	r3, [pc, #184]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a2d      	ldr	r2, [pc, #180]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d82:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004d84:	4b2b      	ldr	r3, [pc, #172]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a2a      	ldr	r2, [pc, #168]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004d8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d8e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004d90:	f7fd ffe6 	bl	8002d60 <HAL_GetTick>
 8004d94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d98:	f7fd ffe2 	bl	8002d60 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e058      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004daa:	4b22      	ldr	r3, [pc, #136]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004db6:	e050      	b.n	8004e5a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	e04f      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dbc:	4b1d      	ldr	r3, [pc, #116]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d148      	bne.n	8004e5a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004dc8:	4b1a      	ldr	r3, [pc, #104]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a19      	ldr	r2, [pc, #100]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dd2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004dd4:	4b17      	ldr	r3, [pc, #92]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	4a16      	ldr	r2, [pc, #88]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004dde:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004de0:	f7fd ffbe 	bl	8002d60 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de8:	f7fd ffba 	bl	8002d60 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e030      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004dfa:	4b0e      	ldr	r3, [pc, #56]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x734>
 8004e06:	e028      	b.n	8004e5a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004e08:	69bb      	ldr	r3, [r7, #24]
 8004e0a:	2b0c      	cmp	r3, #12
 8004e0c:	d023      	beq.n	8004e56 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e0e:	4b09      	ldr	r3, [pc, #36]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a08      	ldr	r2, [pc, #32]	; (8004e34 <HAL_RCC_OscConfig+0x780>)
 8004e14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1a:	f7fd ffa1 	bl	8002d60 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e20:	e00c      	b.n	8004e3c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e22:	f7fd ff9d 	bl	8002d60 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d905      	bls.n	8004e3c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e013      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
 8004e34:	40021000 	.word	0x40021000
 8004e38:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e3c:	4b09      	ldr	r3, [pc, #36]	; (8004e64 <HAL_RCC_OscConfig+0x7b0>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1ec      	bne.n	8004e22 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004e48:	4b06      	ldr	r3, [pc, #24]	; (8004e64 <HAL_RCC_OscConfig+0x7b0>)
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	4905      	ldr	r1, [pc, #20]	; (8004e64 <HAL_RCC_OscConfig+0x7b0>)
 8004e4e:	4b06      	ldr	r3, [pc, #24]	; (8004e68 <HAL_RCC_OscConfig+0x7b4>)
 8004e50:	4013      	ands	r3, r2
 8004e52:	60cb      	str	r3, [r1, #12]
 8004e54:	e001      	b.n	8004e5a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3720      	adds	r7, #32
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40021000 	.word	0x40021000
 8004e68:	feeefffc 	.word	0xfeeefffc

08004e6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d101      	bne.n	8004e80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	e0e7      	b.n	8005050 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e80:	4b75      	ldr	r3, [pc, #468]	; (8005058 <HAL_RCC_ClockConfig+0x1ec>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0307 	and.w	r3, r3, #7
 8004e88:	683a      	ldr	r2, [r7, #0]
 8004e8a:	429a      	cmp	r2, r3
 8004e8c:	d910      	bls.n	8004eb0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e8e:	4b72      	ldr	r3, [pc, #456]	; (8005058 <HAL_RCC_ClockConfig+0x1ec>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f023 0207 	bic.w	r2, r3, #7
 8004e96:	4970      	ldr	r1, [pc, #448]	; (8005058 <HAL_RCC_ClockConfig+0x1ec>)
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e9e:	4b6e      	ldr	r3, [pc, #440]	; (8005058 <HAL_RCC_ClockConfig+0x1ec>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d001      	beq.n	8004eb0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0cf      	b.n	8005050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0302 	and.w	r3, r3, #2
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d010      	beq.n	8004ede <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	689a      	ldr	r2, [r3, #8]
 8004ec0:	4b66      	ldr	r3, [pc, #408]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	d908      	bls.n	8004ede <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ecc:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4960      	ldr	r1, [pc, #384]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d04c      	beq.n	8004f84 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	2b03      	cmp	r3, #3
 8004ef0:	d107      	bne.n	8004f02 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ef2:	4b5a      	ldr	r3, [pc, #360]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d121      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e0a6      	b.n	8005050 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d107      	bne.n	8004f1a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f0a:	4b54      	ldr	r3, [pc, #336]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d115      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e09a      	b.n	8005050 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d107      	bne.n	8004f32 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004f22:	4b4e      	ldr	r3, [pc, #312]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d109      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e08e      	b.n	8005050 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f32:	4b4a      	ldr	r3, [pc, #296]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e086      	b.n	8005050 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004f42:	4b46      	ldr	r3, [pc, #280]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	f023 0203 	bic.w	r2, r3, #3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	4943      	ldr	r1, [pc, #268]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f54:	f7fd ff04 	bl	8002d60 <HAL_GetTick>
 8004f58:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5a:	e00a      	b.n	8004f72 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f5c:	f7fd ff00 	bl	8002d60 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d901      	bls.n	8004f72 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004f6e:	2303      	movs	r3, #3
 8004f70:	e06e      	b.n	8005050 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f72:	4b3a      	ldr	r3, [pc, #232]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 020c 	and.w	r2, r3, #12
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	009b      	lsls	r3, r3, #2
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d1eb      	bne.n	8004f5c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 0302 	and.w	r3, r3, #2
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d010      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	4b31      	ldr	r3, [pc, #196]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d208      	bcs.n	8004fb2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fa0:	4b2e      	ldr	r3, [pc, #184]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	492b      	ldr	r1, [pc, #172]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fb2:	4b29      	ldr	r3, [pc, #164]	; (8005058 <HAL_RCC_ClockConfig+0x1ec>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0307 	and.w	r3, r3, #7
 8004fba:	683a      	ldr	r2, [r7, #0]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d210      	bcs.n	8004fe2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fc0:	4b25      	ldr	r3, [pc, #148]	; (8005058 <HAL_RCC_ClockConfig+0x1ec>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f023 0207 	bic.w	r2, r3, #7
 8004fc8:	4923      	ldr	r1, [pc, #140]	; (8005058 <HAL_RCC_ClockConfig+0x1ec>)
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd0:	4b21      	ldr	r3, [pc, #132]	; (8005058 <HAL_RCC_ClockConfig+0x1ec>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f003 0307 	and.w	r3, r3, #7
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d001      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e036      	b.n	8005050 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0304 	and.w	r3, r3, #4
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d008      	beq.n	8005000 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fee:	4b1b      	ldr	r3, [pc, #108]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	4918      	ldr	r1, [pc, #96]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 0308 	and.w	r3, r3, #8
 8005008:	2b00      	cmp	r3, #0
 800500a:	d009      	beq.n	8005020 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500c:	4b13      	ldr	r3, [pc, #76]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	691b      	ldr	r3, [r3, #16]
 8005018:	00db      	lsls	r3, r3, #3
 800501a:	4910      	ldr	r1, [pc, #64]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 800501c:	4313      	orrs	r3, r2
 800501e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005020:	f000 f824 	bl	800506c <HAL_RCC_GetSysClockFreq>
 8005024:	4602      	mov	r2, r0
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <HAL_RCC_ClockConfig+0x1f0>)
 8005028:	689b      	ldr	r3, [r3, #8]
 800502a:	091b      	lsrs	r3, r3, #4
 800502c:	f003 030f 	and.w	r3, r3, #15
 8005030:	490b      	ldr	r1, [pc, #44]	; (8005060 <HAL_RCC_ClockConfig+0x1f4>)
 8005032:	5ccb      	ldrb	r3, [r1, r3]
 8005034:	f003 031f 	and.w	r3, r3, #31
 8005038:	fa22 f303 	lsr.w	r3, r2, r3
 800503c:	4a09      	ldr	r2, [pc, #36]	; (8005064 <HAL_RCC_ClockConfig+0x1f8>)
 800503e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005040:	4b09      	ldr	r3, [pc, #36]	; (8005068 <HAL_RCC_ClockConfig+0x1fc>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4618      	mov	r0, r3
 8005046:	f7fd fe3b 	bl	8002cc0 <HAL_InitTick>
 800504a:	4603      	mov	r3, r0
 800504c:	72fb      	strb	r3, [r7, #11]

  return status;
 800504e:	7afb      	ldrb	r3, [r7, #11]
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	40022000 	.word	0x40022000
 800505c:	40021000 	.word	0x40021000
 8005060:	0800d2dc 	.word	0x0800d2dc
 8005064:	20000000 	.word	0x20000000
 8005068:	20000004 	.word	0x20000004

0800506c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800506c:	b480      	push	{r7}
 800506e:	b089      	sub	sp, #36	; 0x24
 8005070:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005072:	2300      	movs	r3, #0
 8005074:	61fb      	str	r3, [r7, #28]
 8005076:	2300      	movs	r3, #0
 8005078:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800507a:	4b3e      	ldr	r3, [pc, #248]	; (8005174 <HAL_RCC_GetSysClockFreq+0x108>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
 8005082:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005084:	4b3b      	ldr	r3, [pc, #236]	; (8005174 <HAL_RCC_GetSysClockFreq+0x108>)
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0303 	and.w	r3, r3, #3
 800508c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_GetSysClockFreq+0x34>
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	2b0c      	cmp	r3, #12
 8005098:	d121      	bne.n	80050de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d11e      	bne.n	80050de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80050a0:	4b34      	ldr	r3, [pc, #208]	; (8005174 <HAL_RCC_GetSysClockFreq+0x108>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d107      	bne.n	80050bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80050ac:	4b31      	ldr	r3, [pc, #196]	; (8005174 <HAL_RCC_GetSysClockFreq+0x108>)
 80050ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050b2:	0a1b      	lsrs	r3, r3, #8
 80050b4:	f003 030f 	and.w	r3, r3, #15
 80050b8:	61fb      	str	r3, [r7, #28]
 80050ba:	e005      	b.n	80050c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80050bc:	4b2d      	ldr	r3, [pc, #180]	; (8005174 <HAL_RCC_GetSysClockFreq+0x108>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	091b      	lsrs	r3, r3, #4
 80050c2:	f003 030f 	and.w	r3, r3, #15
 80050c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80050c8:	4a2b      	ldr	r2, [pc, #172]	; (8005178 <HAL_RCC_GetSysClockFreq+0x10c>)
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d10d      	bne.n	80050f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050dc:	e00a      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	2b04      	cmp	r3, #4
 80050e2:	d102      	bne.n	80050ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80050e4:	4b25      	ldr	r3, [pc, #148]	; (800517c <HAL_RCC_GetSysClockFreq+0x110>)
 80050e6:	61bb      	str	r3, [r7, #24]
 80050e8:	e004      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	2b08      	cmp	r3, #8
 80050ee:	d101      	bne.n	80050f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80050f0:	4b23      	ldr	r3, [pc, #140]	; (8005180 <HAL_RCC_GetSysClockFreq+0x114>)
 80050f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b0c      	cmp	r3, #12
 80050f8:	d134      	bne.n	8005164 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80050fa:	4b1e      	ldr	r3, [pc, #120]	; (8005174 <HAL_RCC_GetSysClockFreq+0x108>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2b02      	cmp	r3, #2
 8005108:	d003      	beq.n	8005112 <HAL_RCC_GetSysClockFreq+0xa6>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d003      	beq.n	8005118 <HAL_RCC_GetSysClockFreq+0xac>
 8005110:	e005      	b.n	800511e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005112:	4b1a      	ldr	r3, [pc, #104]	; (800517c <HAL_RCC_GetSysClockFreq+0x110>)
 8005114:	617b      	str	r3, [r7, #20]
      break;
 8005116:	e005      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005118:	4b19      	ldr	r3, [pc, #100]	; (8005180 <HAL_RCC_GetSysClockFreq+0x114>)
 800511a:	617b      	str	r3, [r7, #20]
      break;
 800511c:	e002      	b.n	8005124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	617b      	str	r3, [r7, #20]
      break;
 8005122:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005124:	4b13      	ldr	r3, [pc, #76]	; (8005174 <HAL_RCC_GetSysClockFreq+0x108>)
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	091b      	lsrs	r3, r3, #4
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	3301      	adds	r3, #1
 8005130:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005132:	4b10      	ldr	r3, [pc, #64]	; (8005174 <HAL_RCC_GetSysClockFreq+0x108>)
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	0a1b      	lsrs	r3, r3, #8
 8005138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800513c:	697a      	ldr	r2, [r7, #20]
 800513e:	fb03 f202 	mul.w	r2, r3, r2
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	fbb2 f3f3 	udiv	r3, r2, r3
 8005148:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800514a:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <HAL_RCC_GetSysClockFreq+0x108>)
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	0e5b      	lsrs	r3, r3, #25
 8005150:	f003 0303 	and.w	r3, r3, #3
 8005154:	3301      	adds	r3, #1
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005164:	69bb      	ldr	r3, [r7, #24]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3724      	adds	r7, #36	; 0x24
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40021000 	.word	0x40021000
 8005178:	0800d2f4 	.word	0x0800d2f4
 800517c:	00f42400 	.word	0x00f42400
 8005180:	007a1200 	.word	0x007a1200

08005184 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <HAL_RCC_GetHCLKFreq+0x14>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000000 	.word	0x20000000

0800519c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80051a0:	f7ff fff0 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051a4:	4602      	mov	r2, r0
 80051a6:	4b06      	ldr	r3, [pc, #24]	; (80051c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	0a1b      	lsrs	r3, r3, #8
 80051ac:	f003 0307 	and.w	r3, r3, #7
 80051b0:	4904      	ldr	r1, [pc, #16]	; (80051c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80051b2:	5ccb      	ldrb	r3, [r1, r3]
 80051b4:	f003 031f 	and.w	r3, r3, #31
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40021000 	.word	0x40021000
 80051c4:	0800d2ec 	.word	0x0800d2ec

080051c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80051cc:	f7ff ffda 	bl	8005184 <HAL_RCC_GetHCLKFreq>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4b06      	ldr	r3, [pc, #24]	; (80051ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	0adb      	lsrs	r3, r3, #11
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	4904      	ldr	r1, [pc, #16]	; (80051f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80051de:	5ccb      	ldrb	r3, [r1, r3]
 80051e0:	f003 031f 	and.w	r3, r3, #31
 80051e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40021000 	.word	0x40021000
 80051f0:	0800d2ec 	.word	0x0800d2ec

080051f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80051fc:	2300      	movs	r3, #0
 80051fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005200:	4b2a      	ldr	r3, [pc, #168]	; (80052ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800520c:	f7ff f9ee 	bl	80045ec <HAL_PWREx_GetVoltageRange>
 8005210:	6178      	str	r0, [r7, #20]
 8005212:	e014      	b.n	800523e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005214:	4b25      	ldr	r3, [pc, #148]	; (80052ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005218:	4a24      	ldr	r2, [pc, #144]	; (80052ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800521a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800521e:	6593      	str	r3, [r2, #88]	; 0x58
 8005220:	4b22      	ldr	r3, [pc, #136]	; (80052ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005228:	60fb      	str	r3, [r7, #12]
 800522a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800522c:	f7ff f9de 	bl	80045ec <HAL_PWREx_GetVoltageRange>
 8005230:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005232:	4b1e      	ldr	r3, [pc, #120]	; (80052ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	4a1d      	ldr	r2, [pc, #116]	; (80052ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005244:	d10b      	bne.n	800525e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2b80      	cmp	r3, #128	; 0x80
 800524a:	d919      	bls.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2ba0      	cmp	r3, #160	; 0xa0
 8005250:	d902      	bls.n	8005258 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005252:	2302      	movs	r3, #2
 8005254:	613b      	str	r3, [r7, #16]
 8005256:	e013      	b.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005258:	2301      	movs	r3, #1
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e010      	b.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b80      	cmp	r3, #128	; 0x80
 8005262:	d902      	bls.n	800526a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005264:	2303      	movs	r3, #3
 8005266:	613b      	str	r3, [r7, #16]
 8005268:	e00a      	b.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2b80      	cmp	r3, #128	; 0x80
 800526e:	d102      	bne.n	8005276 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005270:	2302      	movs	r3, #2
 8005272:	613b      	str	r3, [r7, #16]
 8005274:	e004      	b.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2b70      	cmp	r3, #112	; 0x70
 800527a:	d101      	bne.n	8005280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800527c:	2301      	movs	r3, #1
 800527e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005280:	4b0b      	ldr	r3, [pc, #44]	; (80052b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f023 0207 	bic.w	r2, r3, #7
 8005288:	4909      	ldr	r1, [pc, #36]	; (80052b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	4313      	orrs	r3, r2
 800528e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005290:	4b07      	ldr	r3, [pc, #28]	; (80052b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	429a      	cmp	r2, r3
 800529c:	d001      	beq.n	80052a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3718      	adds	r7, #24
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40021000 	.word	0x40021000
 80052b0:	40022000 	.word	0x40022000

080052b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b086      	sub	sp, #24
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80052bc:	2300      	movs	r3, #0
 80052be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80052c0:	2300      	movs	r3, #0
 80052c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d041      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052d8:	d02a      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80052da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80052de:	d824      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052e4:	d008      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80052e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80052ea:	d81e      	bhi.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d00a      	beq.n	8005306 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80052f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052f4:	d010      	beq.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80052f6:	e018      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80052f8:	4b86      	ldr	r3, [pc, #536]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	4a85      	ldr	r2, [pc, #532]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80052fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005302:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005304:	e015      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	3304      	adds	r3, #4
 800530a:	2100      	movs	r1, #0
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fabb 	bl	8005888 <RCCEx_PLLSAI1_Config>
 8005312:	4603      	mov	r3, r0
 8005314:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005316:	e00c      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	3320      	adds	r3, #32
 800531c:	2100      	movs	r1, #0
 800531e:	4618      	mov	r0, r3
 8005320:	f000 fba6 	bl	8005a70 <RCCEx_PLLSAI2_Config>
 8005324:	4603      	mov	r3, r0
 8005326:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005328:	e003      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	74fb      	strb	r3, [r7, #19]
      break;
 800532e:	e000      	b.n	8005332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005332:	7cfb      	ldrb	r3, [r7, #19]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10b      	bne.n	8005350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005338:	4b76      	ldr	r3, [pc, #472]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005346:	4973      	ldr	r1, [pc, #460]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800534e:	e001      	b.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005350:	7cfb      	ldrb	r3, [r7, #19]
 8005352:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d041      	beq.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005364:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005368:	d02a      	beq.n	80053c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800536a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800536e:	d824      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005374:	d008      	beq.n	8005388 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800537a:	d81e      	bhi.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00a      	beq.n	8005396 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005384:	d010      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005386:	e018      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005388:	4b62      	ldr	r3, [pc, #392]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	4a61      	ldr	r2, [pc, #388]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800538e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005392:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005394:	e015      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	3304      	adds	r3, #4
 800539a:	2100      	movs	r1, #0
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fa73 	bl	8005888 <RCCEx_PLLSAI1_Config>
 80053a2:	4603      	mov	r3, r0
 80053a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053a6:	e00c      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3320      	adds	r3, #32
 80053ac:	2100      	movs	r1, #0
 80053ae:	4618      	mov	r0, r3
 80053b0:	f000 fb5e 	bl	8005a70 <RCCEx_PLLSAI2_Config>
 80053b4:	4603      	mov	r3, r0
 80053b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80053b8:	e003      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	74fb      	strb	r3, [r7, #19]
      break;
 80053be:	e000      	b.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80053c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80053c2:	7cfb      	ldrb	r3, [r7, #19]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80053c8:	4b52      	ldr	r3, [pc, #328]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053d6:	494f      	ldr	r1, [pc, #316]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053d8:	4313      	orrs	r3, r2
 80053da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80053de:	e001      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053e0:	7cfb      	ldrb	r3, [r7, #19]
 80053e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f000 80a0 	beq.w	8005532 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053f2:	2300      	movs	r3, #0
 80053f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80053f6:	4b47      	ldr	r3, [pc, #284]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80053f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005402:	2301      	movs	r3, #1
 8005404:	e000      	b.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005406:	2300      	movs	r3, #0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d00d      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800540c:	4b41      	ldr	r3, [pc, #260]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800540e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005410:	4a40      	ldr	r2, [pc, #256]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005416:	6593      	str	r3, [r2, #88]	; 0x58
 8005418:	4b3e      	ldr	r3, [pc, #248]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800541a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005420:	60bb      	str	r3, [r7, #8]
 8005422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005424:	2301      	movs	r3, #1
 8005426:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005428:	4b3b      	ldr	r3, [pc, #236]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a3a      	ldr	r2, [pc, #232]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800542e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005432:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005434:	f7fd fc94 	bl	8002d60 <HAL_GetTick>
 8005438:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800543a:	e009      	b.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800543c:	f7fd fc90 	bl	8002d60 <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	2b02      	cmp	r3, #2
 8005448:	d902      	bls.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	74fb      	strb	r3, [r7, #19]
        break;
 800544e:	e005      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005450:	4b31      	ldr	r3, [pc, #196]	; (8005518 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005458:	2b00      	cmp	r3, #0
 800545a:	d0ef      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800545c:	7cfb      	ldrb	r3, [r7, #19]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d15c      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005462:	4b2c      	ldr	r3, [pc, #176]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d01f      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800547a:	697a      	ldr	r2, [r7, #20]
 800547c:	429a      	cmp	r2, r3
 800547e:	d019      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005480:	4b24      	ldr	r3, [pc, #144]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800548a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800548c:	4b21      	ldr	r3, [pc, #132]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800548e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005492:	4a20      	ldr	r2, [pc, #128]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800549c:	4b1d      	ldr	r3, [pc, #116]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	4a1c      	ldr	r2, [pc, #112]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80054ac:	4a19      	ldr	r2, [pc, #100]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d016      	beq.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054be:	f7fd fc4f 	bl	8002d60 <HAL_GetTick>
 80054c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054c4:	e00b      	b.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054c6:	f7fd fc4b 	bl	8002d60 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d902      	bls.n	80054de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	74fb      	strb	r3, [r7, #19]
            break;
 80054dc:	e006      	b.n	80054ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80054de:	4b0d      	ldr	r3, [pc, #52]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ec      	beq.n	80054c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d10c      	bne.n	800550c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80054f2:	4b08      	ldr	r3, [pc, #32]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80054f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005502:	4904      	ldr	r1, [pc, #16]	; (8005514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800550a:	e009      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800550c:	7cfb      	ldrb	r3, [r7, #19]
 800550e:	74bb      	strb	r3, [r7, #18]
 8005510:	e006      	b.n	8005520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000
 8005518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800551c:	7cfb      	ldrb	r3, [r7, #19]
 800551e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005520:	7c7b      	ldrb	r3, [r7, #17]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d105      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005526:	4b9e      	ldr	r3, [pc, #632]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552a:	4a9d      	ldr	r2, [pc, #628]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800552c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005530:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00a      	beq.n	8005554 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800553e:	4b98      	ldr	r3, [pc, #608]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005544:	f023 0203 	bic.w	r2, r3, #3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	4994      	ldr	r1, [pc, #592]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800554e:	4313      	orrs	r3, r2
 8005550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0302 	and.w	r3, r3, #2
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00a      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005560:	4b8f      	ldr	r3, [pc, #572]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005566:	f023 020c 	bic.w	r2, r3, #12
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800556e:	498c      	ldr	r1, [pc, #560]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005570:	4313      	orrs	r3, r2
 8005572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f003 0304 	and.w	r3, r3, #4
 800557e:	2b00      	cmp	r3, #0
 8005580:	d00a      	beq.n	8005598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005582:	4b87      	ldr	r3, [pc, #540]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	4983      	ldr	r1, [pc, #524]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005592:	4313      	orrs	r3, r2
 8005594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f003 0308 	and.w	r3, r3, #8
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00a      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055a4:	4b7e      	ldr	r3, [pc, #504]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055b2:	497b      	ldr	r1, [pc, #492]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055b4:	4313      	orrs	r3, r2
 80055b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0310 	and.w	r3, r3, #16
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00a      	beq.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055c6:	4b76      	ldr	r3, [pc, #472]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055d4:	4972      	ldr	r1, [pc, #456]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055d6:	4313      	orrs	r3, r2
 80055d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0320 	and.w	r3, r3, #32
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80055e8:	4b6d      	ldr	r3, [pc, #436]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055f6:	496a      	ldr	r1, [pc, #424]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80055f8:	4313      	orrs	r3, r2
 80055fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800560a:	4b65      	ldr	r3, [pc, #404]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800560c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005618:	4961      	ldr	r1, [pc, #388]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800562c:	4b5c      	ldr	r3, [pc, #368]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800563a:	4959      	ldr	r1, [pc, #356]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800563c:	4313      	orrs	r3, r2
 800563e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800564e:	4b54      	ldr	r3, [pc, #336]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005654:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800565c:	4950      	ldr	r1, [pc, #320]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005670:	4b4b      	ldr	r3, [pc, #300]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005676:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800567e:	4948      	ldr	r1, [pc, #288]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005680:	4313      	orrs	r3, r2
 8005682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005692:	4b43      	ldr	r3, [pc, #268]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a0:	493f      	ldr	r1, [pc, #252]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d028      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80056b4:	4b3a      	ldr	r3, [pc, #232]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056c2:	4937      	ldr	r1, [pc, #220]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056c4:	4313      	orrs	r3, r2
 80056c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056d2:	d106      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056d4:	4b32      	ldr	r3, [pc, #200]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4a31      	ldr	r2, [pc, #196]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80056da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056de:	60d3      	str	r3, [r2, #12]
 80056e0:	e011      	b.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80056ea:	d10c      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	3304      	adds	r3, #4
 80056f0:	2101      	movs	r1, #1
 80056f2:	4618      	mov	r0, r3
 80056f4:	f000 f8c8 	bl	8005888 <RCCEx_PLLSAI1_Config>
 80056f8:	4603      	mov	r3, r0
 80056fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80056fc:	7cfb      	ldrb	r3, [r7, #19]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005702:	7cfb      	ldrb	r3, [r7, #19]
 8005704:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800570e:	2b00      	cmp	r3, #0
 8005710:	d028      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005712:	4b23      	ldr	r3, [pc, #140]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005718:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005720:	491f      	ldr	r1, [pc, #124]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005730:	d106      	bne.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005732:	4b1b      	ldr	r3, [pc, #108]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	4a1a      	ldr	r2, [pc, #104]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800573c:	60d3      	str	r3, [r2, #12]
 800573e:	e011      	b.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005748:	d10c      	bne.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	3304      	adds	r3, #4
 800574e:	2101      	movs	r1, #1
 8005750:	4618      	mov	r0, r3
 8005752:	f000 f899 	bl	8005888 <RCCEx_PLLSAI1_Config>
 8005756:	4603      	mov	r3, r0
 8005758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800575a:	7cfb      	ldrb	r3, [r7, #19]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005760:	7cfb      	ldrb	r3, [r7, #19]
 8005762:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d02b      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005770:	4b0b      	ldr	r3, [pc, #44]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800577e:	4908      	ldr	r1, [pc, #32]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005780:	4313      	orrs	r3, r2
 8005782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800578a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800578e:	d109      	bne.n	80057a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005790:	4b03      	ldr	r3, [pc, #12]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	4a02      	ldr	r2, [pc, #8]	; (80057a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800579a:	60d3      	str	r3, [r2, #12]
 800579c:	e014      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800579e:	bf00      	nop
 80057a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80057ac:	d10c      	bne.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	3304      	adds	r3, #4
 80057b2:	2101      	movs	r1, #1
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 f867 	bl	8005888 <RCCEx_PLLSAI1_Config>
 80057ba:	4603      	mov	r3, r0
 80057bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80057be:	7cfb      	ldrb	r3, [r7, #19]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80057c4:	7cfb      	ldrb	r3, [r7, #19]
 80057c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d02f      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80057d4:	4b2b      	ldr	r3, [pc, #172]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057e2:	4928      	ldr	r1, [pc, #160]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80057e4:	4313      	orrs	r3, r2
 80057e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80057ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057f2:	d10d      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	3304      	adds	r3, #4
 80057f8:	2102      	movs	r1, #2
 80057fa:	4618      	mov	r0, r3
 80057fc:	f000 f844 	bl	8005888 <RCCEx_PLLSAI1_Config>
 8005800:	4603      	mov	r3, r0
 8005802:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005804:	7cfb      	ldrb	r3, [r7, #19]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d014      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800580a:	7cfb      	ldrb	r3, [r7, #19]
 800580c:	74bb      	strb	r3, [r7, #18]
 800580e:	e011      	b.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005818:	d10c      	bne.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	3320      	adds	r3, #32
 800581e:	2102      	movs	r1, #2
 8005820:	4618      	mov	r0, r3
 8005822:	f000 f925 	bl	8005a70 <RCCEx_PLLSAI2_Config>
 8005826:	4603      	mov	r3, r0
 8005828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800582a:	7cfb      	ldrb	r3, [r7, #19]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d001      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005830:	7cfb      	ldrb	r3, [r7, #19]
 8005832:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005840:	4b10      	ldr	r3, [pc, #64]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005846:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800584e:	490d      	ldr	r1, [pc, #52]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00b      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005862:	4b08      	ldr	r3, [pc, #32]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005872:	4904      	ldr	r1, [pc, #16]	; (8005884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800587a:	7cbb      	ldrb	r3, [r7, #18]
}
 800587c:	4618      	mov	r0, r3
 800587e:	3718      	adds	r7, #24
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	40021000 	.word	0x40021000

08005888 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
 8005890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005892:	2300      	movs	r3, #0
 8005894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005896:	4b75      	ldr	r3, [pc, #468]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d018      	beq.n	80058d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80058a2:	4b72      	ldr	r3, [pc, #456]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	f003 0203 	and.w	r2, r3, #3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d10d      	bne.n	80058ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
       ||
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d009      	beq.n	80058ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80058ba:	4b6c      	ldr	r3, [pc, #432]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	091b      	lsrs	r3, r3, #4
 80058c0:	f003 0307 	and.w	r3, r3, #7
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
       ||
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d047      	beq.n	800595e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	73fb      	strb	r3, [r7, #15]
 80058d2:	e044      	b.n	800595e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2b03      	cmp	r3, #3
 80058da:	d018      	beq.n	800590e <RCCEx_PLLSAI1_Config+0x86>
 80058dc:	2b03      	cmp	r3, #3
 80058de:	d825      	bhi.n	800592c <RCCEx_PLLSAI1_Config+0xa4>
 80058e0:	2b01      	cmp	r3, #1
 80058e2:	d002      	beq.n	80058ea <RCCEx_PLLSAI1_Config+0x62>
 80058e4:	2b02      	cmp	r3, #2
 80058e6:	d009      	beq.n	80058fc <RCCEx_PLLSAI1_Config+0x74>
 80058e8:	e020      	b.n	800592c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80058ea:	4b60      	ldr	r3, [pc, #384]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d11d      	bne.n	8005932 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80058fa:	e01a      	b.n	8005932 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80058fc:	4b5b      	ldr	r3, [pc, #364]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005904:	2b00      	cmp	r3, #0
 8005906:	d116      	bne.n	8005936 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800590c:	e013      	b.n	8005936 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800590e:	4b57      	ldr	r3, [pc, #348]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10f      	bne.n	800593a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800591a:	4b54      	ldr	r3, [pc, #336]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005922:	2b00      	cmp	r3, #0
 8005924:	d109      	bne.n	800593a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800592a:	e006      	b.n	800593a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	e004      	b.n	800593c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005932:	bf00      	nop
 8005934:	e002      	b.n	800593c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005936:	bf00      	nop
 8005938:	e000      	b.n	800593c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800593a:	bf00      	nop
    }

    if(status == HAL_OK)
 800593c:	7bfb      	ldrb	r3, [r7, #15]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10d      	bne.n	800595e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005942:	4b4a      	ldr	r3, [pc, #296]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005944:	68db      	ldr	r3, [r3, #12]
 8005946:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6819      	ldr	r1, [r3, #0]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	3b01      	subs	r3, #1
 8005954:	011b      	lsls	r3, r3, #4
 8005956:	430b      	orrs	r3, r1
 8005958:	4944      	ldr	r1, [pc, #272]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800595a:	4313      	orrs	r3, r2
 800595c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800595e:	7bfb      	ldrb	r3, [r7, #15]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d17d      	bne.n	8005a60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005964:	4b41      	ldr	r3, [pc, #260]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a40      	ldr	r2, [pc, #256]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800596a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800596e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005970:	f7fd f9f6 	bl	8002d60 <HAL_GetTick>
 8005974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005976:	e009      	b.n	800598c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005978:	f7fd f9f2 	bl	8002d60 <HAL_GetTick>
 800597c:	4602      	mov	r2, r0
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	2b02      	cmp	r3, #2
 8005984:	d902      	bls.n	800598c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005986:	2303      	movs	r3, #3
 8005988:	73fb      	strb	r3, [r7, #15]
        break;
 800598a:	e005      	b.n	8005998 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800598c:	4b37      	ldr	r3, [pc, #220]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d1ef      	bne.n	8005978 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005998:	7bfb      	ldrb	r3, [r7, #15]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d160      	bne.n	8005a60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d111      	bne.n	80059c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059a4:	4b31      	ldr	r3, [pc, #196]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80059ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6892      	ldr	r2, [r2, #8]
 80059b4:	0211      	lsls	r1, r2, #8
 80059b6:	687a      	ldr	r2, [r7, #4]
 80059b8:	68d2      	ldr	r2, [r2, #12]
 80059ba:	0912      	lsrs	r2, r2, #4
 80059bc:	0452      	lsls	r2, r2, #17
 80059be:	430a      	orrs	r2, r1
 80059c0:	492a      	ldr	r1, [pc, #168]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059c2:	4313      	orrs	r3, r2
 80059c4:	610b      	str	r3, [r1, #16]
 80059c6:	e027      	b.n	8005a18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d112      	bne.n	80059f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059ce:	4b27      	ldr	r3, [pc, #156]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059d0:	691b      	ldr	r3, [r3, #16]
 80059d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80059d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80059da:	687a      	ldr	r2, [r7, #4]
 80059dc:	6892      	ldr	r2, [r2, #8]
 80059de:	0211      	lsls	r1, r2, #8
 80059e0:	687a      	ldr	r2, [r7, #4]
 80059e2:	6912      	ldr	r2, [r2, #16]
 80059e4:	0852      	lsrs	r2, r2, #1
 80059e6:	3a01      	subs	r2, #1
 80059e8:	0552      	lsls	r2, r2, #21
 80059ea:	430a      	orrs	r2, r1
 80059ec:	491f      	ldr	r1, [pc, #124]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	610b      	str	r3, [r1, #16]
 80059f2:	e011      	b.n	8005a18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80059f4:	4b1d      	ldr	r3, [pc, #116]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80059f6:	691b      	ldr	r3, [r3, #16]
 80059f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80059fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6892      	ldr	r2, [r2, #8]
 8005a04:	0211      	lsls	r1, r2, #8
 8005a06:	687a      	ldr	r2, [r7, #4]
 8005a08:	6952      	ldr	r2, [r2, #20]
 8005a0a:	0852      	lsrs	r2, r2, #1
 8005a0c:	3a01      	subs	r2, #1
 8005a0e:	0652      	lsls	r2, r2, #25
 8005a10:	430a      	orrs	r2, r1
 8005a12:	4916      	ldr	r1, [pc, #88]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a14:	4313      	orrs	r3, r2
 8005a16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005a18:	4b14      	ldr	r3, [pc, #80]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a13      	ldr	r2, [pc, #76]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a24:	f7fd f99c 	bl	8002d60 <HAL_GetTick>
 8005a28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a2a:	e009      	b.n	8005a40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005a2c:	f7fd f998 	bl	8002d60 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	68bb      	ldr	r3, [r7, #8]
 8005a34:	1ad3      	subs	r3, r2, r3
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d902      	bls.n	8005a40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	73fb      	strb	r3, [r7, #15]
          break;
 8005a3e:	e005      	b.n	8005a4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005a40:	4b0a      	ldr	r3, [pc, #40]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0ef      	beq.n	8005a2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005a52:	4b06      	ldr	r3, [pc, #24]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a54:	691a      	ldr	r2, [r3, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	4904      	ldr	r1, [pc, #16]	; (8005a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3710      	adds	r7, #16
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}
 8005a6a:	bf00      	nop
 8005a6c:	40021000 	.word	0x40021000

08005a70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005a7e:	4b6a      	ldr	r3, [pc, #424]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a80:	68db      	ldr	r3, [r3, #12]
 8005a82:	f003 0303 	and.w	r3, r3, #3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d018      	beq.n	8005abc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005a8a:	4b67      	ldr	r3, [pc, #412]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	f003 0203 	and.w	r2, r3, #3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d10d      	bne.n	8005ab6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
       ||
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d009      	beq.n	8005ab6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005aa2:	4b61      	ldr	r3, [pc, #388]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005aa4:	68db      	ldr	r3, [r3, #12]
 8005aa6:	091b      	lsrs	r3, r3, #4
 8005aa8:	f003 0307 	and.w	r3, r3, #7
 8005aac:	1c5a      	adds	r2, r3, #1
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
       ||
 8005ab2:	429a      	cmp	r2, r3
 8005ab4:	d047      	beq.n	8005b46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005ab6:	2301      	movs	r3, #1
 8005ab8:	73fb      	strb	r3, [r7, #15]
 8005aba:	e044      	b.n	8005b46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d018      	beq.n	8005af6 <RCCEx_PLLSAI2_Config+0x86>
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d825      	bhi.n	8005b14 <RCCEx_PLLSAI2_Config+0xa4>
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d002      	beq.n	8005ad2 <RCCEx_PLLSAI2_Config+0x62>
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d009      	beq.n	8005ae4 <RCCEx_PLLSAI2_Config+0x74>
 8005ad0:	e020      	b.n	8005b14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005ad2:	4b55      	ldr	r3, [pc, #340]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d11d      	bne.n	8005b1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005ade:	2301      	movs	r3, #1
 8005ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ae2:	e01a      	b.n	8005b1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005ae4:	4b50      	ldr	r3, [pc, #320]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d116      	bne.n	8005b1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005af0:	2301      	movs	r3, #1
 8005af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005af4:	e013      	b.n	8005b1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005af6:	4b4c      	ldr	r3, [pc, #304]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d10f      	bne.n	8005b22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005b02:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d109      	bne.n	8005b22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b12:	e006      	b.n	8005b22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
      break;
 8005b18:	e004      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b1a:	bf00      	nop
 8005b1c:	e002      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b1e:	bf00      	nop
 8005b20:	e000      	b.n	8005b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8005b24:	7bfb      	ldrb	r3, [r7, #15]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10d      	bne.n	8005b46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005b2a:	4b3f      	ldr	r3, [pc, #252]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6819      	ldr	r1, [r3, #0]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	011b      	lsls	r3, r3, #4
 8005b3e:	430b      	orrs	r3, r1
 8005b40:	4939      	ldr	r1, [pc, #228]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b42:	4313      	orrs	r3, r2
 8005b44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005b46:	7bfb      	ldrb	r3, [r7, #15]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d167      	bne.n	8005c1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005b4c:	4b36      	ldr	r3, [pc, #216]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a35      	ldr	r2, [pc, #212]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b58:	f7fd f902 	bl	8002d60 <HAL_GetTick>
 8005b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b5e:	e009      	b.n	8005b74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005b60:	f7fd f8fe 	bl	8002d60 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	68bb      	ldr	r3, [r7, #8]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d902      	bls.n	8005b74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005b6e:	2303      	movs	r3, #3
 8005b70:	73fb      	strb	r3, [r7, #15]
        break;
 8005b72:	e005      	b.n	8005b80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005b74:	4b2c      	ldr	r3, [pc, #176]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1ef      	bne.n	8005b60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005b80:	7bfb      	ldrb	r3, [r7, #15]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d14a      	bne.n	8005c1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d111      	bne.n	8005bb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005b8c:	4b26      	ldr	r3, [pc, #152]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005b8e:	695b      	ldr	r3, [r3, #20]
 8005b90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	6892      	ldr	r2, [r2, #8]
 8005b9c:	0211      	lsls	r1, r2, #8
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	68d2      	ldr	r2, [r2, #12]
 8005ba2:	0912      	lsrs	r2, r2, #4
 8005ba4:	0452      	lsls	r2, r2, #17
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	491f      	ldr	r1, [pc, #124]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	614b      	str	r3, [r1, #20]
 8005bae:	e011      	b.n	8005bd4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005bb0:	4b1d      	ldr	r3, [pc, #116]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bb2:	695b      	ldr	r3, [r3, #20]
 8005bb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	6892      	ldr	r2, [r2, #8]
 8005bc0:	0211      	lsls	r1, r2, #8
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	6912      	ldr	r2, [r2, #16]
 8005bc6:	0852      	lsrs	r2, r2, #1
 8005bc8:	3a01      	subs	r2, #1
 8005bca:	0652      	lsls	r2, r2, #25
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	4916      	ldr	r1, [pc, #88]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005bd4:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a13      	ldr	r2, [pc, #76]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005be0:	f7fd f8be 	bl	8002d60 <HAL_GetTick>
 8005be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005be6:	e009      	b.n	8005bfc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005be8:	f7fd f8ba 	bl	8002d60 <HAL_GetTick>
 8005bec:	4602      	mov	r2, r0
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d902      	bls.n	8005bfc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	73fb      	strb	r3, [r7, #15]
          break;
 8005bfa:	e005      	b.n	8005c08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005bfc:	4b0a      	ldr	r3, [pc, #40]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0ef      	beq.n	8005be8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d106      	bne.n	8005c1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005c0e:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c10:	695a      	ldr	r2, [r3, #20]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	4904      	ldr	r1, [pc, #16]	; (8005c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3710      	adds	r7, #16
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40021000 	.word	0x40021000

08005c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e095      	b.n	8005d6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d108      	bne.n	8005c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c4e:	d009      	beq.n	8005c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	61da      	str	r2, [r3, #28]
 8005c56:	e005      	b.n	8005c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d106      	bne.n	8005c84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f7fc fd4c 	bl	800271c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2202      	movs	r2, #2
 8005c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ca4:	d902      	bls.n	8005cac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	60fb      	str	r3, [r7, #12]
 8005caa:	e002      	b.n	8005cb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005cba:	d007      	beq.n	8005ccc <HAL_SPI_Init+0xa0>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	68db      	ldr	r3, [r3, #12]
 8005cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cc4:	d002      	beq.n	8005ccc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cdc:	431a      	orrs	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	691b      	ldr	r3, [r3, #16]
 8005ce2:	f003 0302 	and.w	r3, r3, #2
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	695b      	ldr	r3, [r3, #20]
 8005cec:	f003 0301 	and.w	r3, r3, #1
 8005cf0:	431a      	orrs	r2, r3
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d04:	431a      	orrs	r2, r3
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0e:	ea42 0103 	orr.w	r1, r2, r3
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	699b      	ldr	r3, [r3, #24]
 8005d26:	0c1b      	lsrs	r3, r3, #16
 8005d28:	f003 0204 	and.w	r2, r3, #4
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d30:	f003 0310 	and.w	r3, r3, #16
 8005d34:	431a      	orrs	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d3a:	f003 0308 	and.w	r3, r3, #8
 8005d3e:	431a      	orrs	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005d48:	ea42 0103 	orr.w	r1, r2, r3
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d72:	b580      	push	{r7, lr}
 8005d74:	b088      	sub	sp, #32
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	60f8      	str	r0, [r7, #12]
 8005d7a:	60b9      	str	r1, [r7, #8]
 8005d7c:	603b      	str	r3, [r7, #0]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005d82:	2300      	movs	r3, #0
 8005d84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d101      	bne.n	8005d94 <HAL_SPI_Transmit+0x22>
 8005d90:	2302      	movs	r3, #2
 8005d92:	e158      	b.n	8006046 <HAL_SPI_Transmit+0x2d4>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2201      	movs	r2, #1
 8005d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d9c:	f7fc ffe0 	bl	8002d60 <HAL_GetTick>
 8005da0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005da2:	88fb      	ldrh	r3, [r7, #6]
 8005da4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d002      	beq.n	8005db8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
 8005db4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005db6:	e13d      	b.n	8006034 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_SPI_Transmit+0x52>
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d102      	bne.n	8005dca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005dc8:	e134      	b.n	8006034 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	2203      	movs	r2, #3
 8005dce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	88fa      	ldrh	r2, [r7, #6]
 8005de2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	2200      	movs	r2, #0
 8005dee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e14:	d10f      	bne.n	8005e36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681a      	ldr	r2, [r3, #0]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b40      	cmp	r3, #64	; 0x40
 8005e42:	d007      	beq.n	8005e54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	681a      	ldr	r2, [r3, #0]
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005e5c:	d94b      	bls.n	8005ef6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <HAL_SPI_Transmit+0xfa>
 8005e66:	8afb      	ldrh	r3, [r7, #22]
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d13e      	bne.n	8005eea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e70:	881a      	ldrh	r2, [r3, #0]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	1c9a      	adds	r2, r3, #2
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005e90:	e02b      	b.n	8005eea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f003 0302 	and.w	r3, r3, #2
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d112      	bne.n	8005ec6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	881a      	ldrh	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb0:	1c9a      	adds	r2, r3, #2
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ec4:	e011      	b.n	8005eea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ec6:	f7fc ff4b 	bl	8002d60 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	683a      	ldr	r2, [r7, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d803      	bhi.n	8005ede <HAL_SPI_Transmit+0x16c>
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005edc:	d102      	bne.n	8005ee4 <HAL_SPI_Transmit+0x172>
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d102      	bne.n	8005eea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ee8:	e0a4      	b.n	8006034 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eee:	b29b      	uxth	r3, r3
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1ce      	bne.n	8005e92 <HAL_SPI_Transmit+0x120>
 8005ef4:	e07c      	b.n	8005ff0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <HAL_SPI_Transmit+0x192>
 8005efe:	8afb      	ldrh	r3, [r7, #22]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d170      	bne.n	8005fe6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d912      	bls.n	8005f34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f12:	881a      	ldrh	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	1c9a      	adds	r2, r3, #2
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b02      	subs	r3, #2
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f32:	e058      	b.n	8005fe6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	330c      	adds	r3, #12
 8005f3e:	7812      	ldrb	r2, [r2, #0]
 8005f40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f50:	b29b      	uxth	r3, r3
 8005f52:	3b01      	subs	r3, #1
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005f5a:	e044      	b.n	8005fe6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f003 0302 	and.w	r3, r3, #2
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	d12b      	bne.n	8005fc2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d912      	bls.n	8005f9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	881a      	ldrh	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f84:	1c9a      	adds	r2, r3, #2
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	3b02      	subs	r3, #2
 8005f92:	b29a      	uxth	r2, r3
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005f98:	e025      	b.n	8005fe6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	330c      	adds	r3, #12
 8005fa4:	7812      	ldrb	r2, [r2, #0]
 8005fa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	1c5a      	adds	r2, r3, #1
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005fc0:	e011      	b.n	8005fe6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fc2:	f7fc fecd 	bl	8002d60 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	683a      	ldr	r2, [r7, #0]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d803      	bhi.n	8005fda <HAL_SPI_Transmit+0x268>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d102      	bne.n	8005fe0 <HAL_SPI_Transmit+0x26e>
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d102      	bne.n	8005fe6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fe4:	e026      	b.n	8006034 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1b5      	bne.n	8005f5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	6839      	ldr	r1, [r7, #0]
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f001 f893 	bl	8007120 <SPI_EndRxTxTransaction>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d10a      	bne.n	8006024 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	68db      	ldr	r3, [r3, #12]
 8006018:	613b      	str	r3, [r7, #16]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	613b      	str	r3, [r7, #16]
 8006022:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	77fb      	strb	r3, [r7, #31]
 8006030:	e000      	b.n	8006034 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006044:	7ffb      	ldrb	r3, [r7, #31]
}
 8006046:	4618      	mov	r0, r3
 8006048:	3720      	adds	r7, #32
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800604e:	b580      	push	{r7, lr}
 8006050:	b088      	sub	sp, #32
 8006052:	af02      	add	r7, sp, #8
 8006054:	60f8      	str	r0, [r7, #12]
 8006056:	60b9      	str	r1, [r7, #8]
 8006058:	603b      	str	r3, [r7, #0]
 800605a:	4613      	mov	r3, r2
 800605c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800605e:	2300      	movs	r3, #0
 8006060:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	685b      	ldr	r3, [r3, #4]
 8006066:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800606a:	d112      	bne.n	8006092 <HAL_SPI_Receive+0x44>
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d10e      	bne.n	8006092 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2204      	movs	r2, #4
 8006078:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800607c:	88fa      	ldrh	r2, [r7, #6]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	4613      	mov	r3, r2
 8006084:	68ba      	ldr	r2, [r7, #8]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	68f8      	ldr	r0, [r7, #12]
 800608a:	f000 f910 	bl	80062ae <HAL_SPI_TransmitReceive>
 800608e:	4603      	mov	r3, r0
 8006090:	e109      	b.n	80062a6 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006098:	2b01      	cmp	r3, #1
 800609a:	d101      	bne.n	80060a0 <HAL_SPI_Receive+0x52>
 800609c:	2302      	movs	r3, #2
 800609e:	e102      	b.n	80062a6 <HAL_SPI_Receive+0x258>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060a8:	f7fc fe5a 	bl	8002d60 <HAL_GetTick>
 80060ac:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d002      	beq.n	80060c0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
 80060bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060be:	e0e9      	b.n	8006294 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d002      	beq.n	80060cc <HAL_SPI_Receive+0x7e>
 80060c6:	88fb      	ldrh	r3, [r7, #6]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d102      	bne.n	80060d2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]
    goto error;
 80060d0:	e0e0      	b.n	8006294 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2204      	movs	r2, #4
 80060d6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	88fa      	ldrh	r2, [r7, #6]
 80060ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	88fa      	ldrh	r2, [r7, #6]
 80060f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2200      	movs	r2, #0
 80060fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	2200      	movs	r2, #0
 8006100:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2200      	movs	r2, #0
 8006112:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	68db      	ldr	r3, [r3, #12]
 8006118:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800611c:	d908      	bls.n	8006130 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	685a      	ldr	r2, [r3, #4]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800612c:	605a      	str	r2, [r3, #4]
 800612e:	e007      	b.n	8006140 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800613e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006148:	d10f      	bne.n	800616a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006158:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006168:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	d007      	beq.n	8006188 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	681a      	ldr	r2, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006186:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006190:	d867      	bhi.n	8006262 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006192:	e030      	b.n	80061f6 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	f003 0301 	and.w	r3, r3, #1
 800619e:	2b01      	cmp	r3, #1
 80061a0:	d117      	bne.n	80061d2 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f103 020c 	add.w	r2, r3, #12
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	7812      	ldrb	r2, [r2, #0]
 80061b0:	b2d2      	uxtb	r2, r2
 80061b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	3b01      	subs	r3, #1
 80061c8:	b29a      	uxth	r2, r3
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80061d0:	e011      	b.n	80061f6 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80061d2:	f7fc fdc5 	bl	8002d60 <HAL_GetTick>
 80061d6:	4602      	mov	r2, r0
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	683a      	ldr	r2, [r7, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d803      	bhi.n	80061ea <HAL_SPI_Receive+0x19c>
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061e8:	d102      	bne.n	80061f0 <HAL_SPI_Receive+0x1a2>
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d102      	bne.n	80061f6 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80061f4:	e04e      	b.n	8006294 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1c8      	bne.n	8006194 <HAL_SPI_Receive+0x146>
 8006202:	e034      	b.n	800626e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b01      	cmp	r3, #1
 8006210:	d115      	bne.n	800623e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68da      	ldr	r2, [r3, #12]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	b292      	uxth	r2, r2
 800621e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006224:	1c9a      	adds	r2, r3, #2
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006230:	b29b      	uxth	r3, r3
 8006232:	3b01      	subs	r3, #1
 8006234:	b29a      	uxth	r2, r3
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800623c:	e011      	b.n	8006262 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800623e:	f7fc fd8f 	bl	8002d60 <HAL_GetTick>
 8006242:	4602      	mov	r2, r0
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d803      	bhi.n	8006256 <HAL_SPI_Receive+0x208>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d102      	bne.n	800625c <HAL_SPI_Receive+0x20e>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d102      	bne.n	8006262 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006260:	e018      	b.n	8006294 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006268:	b29b      	uxth	r3, r3
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1ca      	bne.n	8006204 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	6839      	ldr	r1, [r7, #0]
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 fefc 	bl	8007070 <SPI_EndRxTransaction>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d002      	beq.n	8006284 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2220      	movs	r2, #32
 8006282:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006288:	2b00      	cmp	r3, #0
 800628a:	d002      	beq.n	8006292 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	75fb      	strb	r3, [r7, #23]
 8006290:	e000      	b.n	8006294 <HAL_SPI_Receive+0x246>
  }

error :
 8006292:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3718      	adds	r7, #24
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b08a      	sub	sp, #40	; 0x28
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80062bc:	2301      	movs	r3, #1
 80062be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_SPI_TransmitReceive+0x26>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e1fb      	b.n	80066cc <HAL_SPI_TransmitReceive+0x41e>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062dc:	f7fc fd40 	bl	8002d60 <HAL_GetTick>
 80062e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80062e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80062f0:	887b      	ldrh	r3, [r7, #2]
 80062f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80062f4:	887b      	ldrh	r3, [r7, #2]
 80062f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80062f8:	7efb      	ldrb	r3, [r7, #27]
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d00e      	beq.n	800631c <HAL_SPI_TransmitReceive+0x6e>
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006304:	d106      	bne.n	8006314 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <HAL_SPI_TransmitReceive+0x66>
 800630e:	7efb      	ldrb	r3, [r7, #27]
 8006310:	2b04      	cmp	r3, #4
 8006312:	d003      	beq.n	800631c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006314:	2302      	movs	r3, #2
 8006316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800631a:	e1cd      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d005      	beq.n	800632e <HAL_SPI_TransmitReceive+0x80>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <HAL_SPI_TransmitReceive+0x80>
 8006328:	887b      	ldrh	r3, [r7, #2]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d103      	bne.n	8006336 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006334:	e1c0      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b04      	cmp	r3, #4
 8006340:	d003      	beq.n	800634a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	2205      	movs	r2, #5
 8006346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	887a      	ldrh	r2, [r7, #2]
 800635a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	887a      	ldrh	r2, [r7, #2]
 8006362:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	68ba      	ldr	r2, [r7, #8]
 800636a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	887a      	ldrh	r2, [r7, #2]
 8006370:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	887a      	ldrh	r2, [r7, #2]
 8006376:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2200      	movs	r2, #0
 800637c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2200      	movs	r2, #0
 8006382:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800638c:	d802      	bhi.n	8006394 <HAL_SPI_TransmitReceive+0xe6>
 800638e:	8a3b      	ldrh	r3, [r7, #16]
 8006390:	2b01      	cmp	r3, #1
 8006392:	d908      	bls.n	80063a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80063a2:	605a      	str	r2, [r3, #4]
 80063a4:	e007      	b.n	80063b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	685a      	ldr	r2, [r3, #4]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80063b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c0:	2b40      	cmp	r3, #64	; 0x40
 80063c2:	d007      	beq.n	80063d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	681a      	ldr	r2, [r3, #0]
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063dc:	d97c      	bls.n	80064d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d002      	beq.n	80063ec <HAL_SPI_TransmitReceive+0x13e>
 80063e6:	8a7b      	ldrh	r3, [r7, #18]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d169      	bne.n	80064c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063f0:	881a      	ldrh	r2, [r3, #0]
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fc:	1c9a      	adds	r2, r3, #2
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006406:	b29b      	uxth	r3, r3
 8006408:	3b01      	subs	r3, #1
 800640a:	b29a      	uxth	r2, r3
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006410:	e056      	b.n	80064c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 0302 	and.w	r3, r3, #2
 800641c:	2b02      	cmp	r3, #2
 800641e:	d11b      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x1aa>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006424:	b29b      	uxth	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d016      	beq.n	8006458 <HAL_SPI_TransmitReceive+0x1aa>
 800642a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642c:	2b01      	cmp	r3, #1
 800642e:	d113      	bne.n	8006458 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	881a      	ldrh	r2, [r3, #0]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006440:	1c9a      	adds	r2, r3, #2
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f003 0301 	and.w	r3, r3, #1
 8006462:	2b01      	cmp	r3, #1
 8006464:	d11c      	bne.n	80064a0 <HAL_SPI_TransmitReceive+0x1f2>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d016      	beq.n	80064a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	b292      	uxth	r2, r2
 800647e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006484:	1c9a      	adds	r2, r3, #2
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006490:	b29b      	uxth	r3, r3
 8006492:	3b01      	subs	r3, #1
 8006494:	b29a      	uxth	r2, r3
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800649c:	2301      	movs	r3, #1
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064a0:	f7fc fc5e 	bl	8002d60 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d807      	bhi.n	80064c0 <HAL_SPI_TransmitReceive+0x212>
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064b6:	d003      	beq.n	80064c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80064b8:	2303      	movs	r3, #3
 80064ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80064be:	e0fb      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1a3      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x164>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d19d      	bne.n	8006412 <HAL_SPI_TransmitReceive+0x164>
 80064d6:	e0df      	b.n	8006698 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_SPI_TransmitReceive+0x23a>
 80064e0:	8a7b      	ldrh	r3, [r7, #18]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	f040 80cb 	bne.w	800667e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ec:	b29b      	uxth	r3, r3
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d912      	bls.n	8006518 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f6:	881a      	ldrh	r2, [r3, #0]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006502:	1c9a      	adds	r2, r3, #2
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b02      	subs	r3, #2
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006516:	e0b2      	b.n	800667e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	330c      	adds	r3, #12
 8006522:	7812      	ldrb	r2, [r2, #0]
 8006524:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	1c5a      	adds	r2, r3, #1
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006534:	b29b      	uxth	r3, r3
 8006536:	3b01      	subs	r3, #1
 8006538:	b29a      	uxth	r2, r3
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800653e:	e09e      	b.n	800667e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b02      	cmp	r3, #2
 800654c:	d134      	bne.n	80065b8 <HAL_SPI_TransmitReceive+0x30a>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006552:	b29b      	uxth	r3, r3
 8006554:	2b00      	cmp	r3, #0
 8006556:	d02f      	beq.n	80065b8 <HAL_SPI_TransmitReceive+0x30a>
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	2b01      	cmp	r3, #1
 800655c:	d12c      	bne.n	80065b8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006562:	b29b      	uxth	r3, r3
 8006564:	2b01      	cmp	r3, #1
 8006566:	d912      	bls.n	800658e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	881a      	ldrh	r2, [r3, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	1c9a      	adds	r2, r3, #2
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b02      	subs	r3, #2
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800658c:	e012      	b.n	80065b4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	330c      	adds	r3, #12
 8006598:	7812      	ldrb	r2, [r2, #0]
 800659a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a0:	1c5a      	adds	r2, r3, #1
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065aa:	b29b      	uxth	r3, r3
 80065ac:	3b01      	subs	r3, #1
 80065ae:	b29a      	uxth	r2, r3
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80065b4:	2300      	movs	r3, #0
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f003 0301 	and.w	r3, r3, #1
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d148      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x3aa>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d042      	beq.n	8006658 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065d8:	b29b      	uxth	r3, r3
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d923      	bls.n	8006626 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	68da      	ldr	r2, [r3, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e8:	b292      	uxth	r2, r2
 80065ea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	1c9a      	adds	r2, r3, #2
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80065fc:	b29b      	uxth	r3, r3
 80065fe:	3b02      	subs	r3, #2
 8006600:	b29a      	uxth	r2, r3
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d81f      	bhi.n	8006654 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	685a      	ldr	r2, [r3, #4]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006622:	605a      	str	r2, [r3, #4]
 8006624:	e016      	b.n	8006654 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f103 020c 	add.w	r2, r3, #12
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006632:	7812      	ldrb	r2, [r2, #0]
 8006634:	b2d2      	uxtb	r2, r2
 8006636:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800663c:	1c5a      	adds	r2, r3, #1
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006648:	b29b      	uxth	r3, r3
 800664a:	3b01      	subs	r3, #1
 800664c:	b29a      	uxth	r2, r3
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006654:	2301      	movs	r3, #1
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006658:	f7fc fb82 	bl	8002d60 <HAL_GetTick>
 800665c:	4602      	mov	r2, r0
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006664:	429a      	cmp	r2, r3
 8006666:	d803      	bhi.n	8006670 <HAL_SPI_TransmitReceive+0x3c2>
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800666e:	d102      	bne.n	8006676 <HAL_SPI_TransmitReceive+0x3c8>
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2b00      	cmp	r3, #0
 8006674:	d103      	bne.n	800667e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800667c:	e01c      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006682:	b29b      	uxth	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	f47f af5b 	bne.w	8006540 <HAL_SPI_TransmitReceive+0x292>
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006690:	b29b      	uxth	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	f47f af54 	bne.w	8006540 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006698:	69fa      	ldr	r2, [r7, #28]
 800669a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 fd3f 	bl	8007120 <SPI_EndRxTxTransaction>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d006      	beq.n	80066b6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2220      	movs	r2, #32
 80066b2:	661a      	str	r2, [r3, #96]	; 0x60
 80066b4:	e000      	b.n	80066b8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80066b6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3728      	adds	r7, #40	; 0x28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	4613      	mov	r3, r2
 80066e0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d110      	bne.n	8006710 <HAL_SPI_Receive_DMA+0x3c>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80066f6:	d10b      	bne.n	8006710 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2204      	movs	r2, #4
 80066fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006700:	88fb      	ldrh	r3, [r7, #6]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	68b9      	ldr	r1, [r7, #8]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 f908 	bl	800691c <HAL_SPI_TransmitReceive_DMA>
 800670c:	4603      	mov	r3, r0
 800670e:	e0fb      	b.n	8006908 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006716:	2b01      	cmp	r3, #1
 8006718:	d101      	bne.n	800671e <HAL_SPI_Receive_DMA+0x4a>
 800671a:	2302      	movs	r3, #2
 800671c:	e0f4      	b.n	8006908 <HAL_SPI_Receive_DMA+0x234>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2201      	movs	r2, #1
 8006722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b01      	cmp	r3, #1
 8006730:	d002      	beq.n	8006738 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8006732:	2302      	movs	r3, #2
 8006734:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006736:	e0e2      	b.n	80068fe <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_SPI_Receive_DMA+0x70>
 800673e:	88fb      	ldrh	r3, [r7, #6]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d102      	bne.n	800674a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006748:	e0d9      	b.n	80068fe <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2204      	movs	r2, #4
 800674e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	68ba      	ldr	r2, [r7, #8]
 800675c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	88fa      	ldrh	r2, [r7, #6]
 8006762:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	88fa      	ldrh	r2, [r7, #6]
 800676a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	2200      	movs	r2, #0
 8006772:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	689b      	ldr	r3, [r3, #8]
 800678a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800678e:	d10f      	bne.n	80067b0 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800679e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80067ae:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067be:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	68db      	ldr	r3, [r3, #12]
 80067c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067c8:	d908      	bls.n	80067dc <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067d8:	605a      	str	r2, [r3, #4]
 80067da:	e042      	b.n	8006862 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	685a      	ldr	r2, [r3, #4]
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067ea:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f0:	699b      	ldr	r3, [r3, #24]
 80067f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f6:	d134      	bne.n	8006862 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	685a      	ldr	r2, [r3, #4]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006806:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800680e:	b29b      	uxth	r3, r3
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	d111      	bne.n	800683c <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	685a      	ldr	r2, [r3, #4]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006826:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800682e:	b29b      	uxth	r3, r3
 8006830:	085b      	lsrs	r3, r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800683a:	e012      	b.n	8006862 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800684a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006852:	b29b      	uxth	r3, r3
 8006854:	085b      	lsrs	r3, r3, #1
 8006856:	b29b      	uxth	r3, r3
 8006858:	3301      	adds	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	4a2a      	ldr	r2, [pc, #168]	; (8006910 <HAL_SPI_Receive_DMA+0x23c>)
 8006868:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800686e:	4a29      	ldr	r2, [pc, #164]	; (8006914 <HAL_SPI_Receive_DMA+0x240>)
 8006870:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006876:	4a28      	ldr	r2, [pc, #160]	; (8006918 <HAL_SPI_Receive_DMA+0x244>)
 8006878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800687e:	2200      	movs	r2, #0
 8006880:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	330c      	adds	r3, #12
 800688c:	4619      	mov	r1, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006892:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800689a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800689c:	f7fc fc5a 	bl	8003154 <HAL_DMA_Start_IT>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d00c      	beq.n	80068c0 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068aa:	f043 0210 	orr.w	r2, r3, #16
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80068be:	e01e      	b.n	80068fe <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ca:	2b40      	cmp	r3, #64	; 0x40
 80068cc:	d007      	beq.n	80068de <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068dc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	685a      	ldr	r2, [r3, #4]
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	f042 0220 	orr.w	r2, r2, #32
 80068ec:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f042 0201 	orr.w	r2, r2, #1
 80068fc:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006906:	7dfb      	ldrb	r3, [r7, #23]
}
 8006908:	4618      	mov	r0, r3
 800690a:	3718      	adds	r7, #24
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}
 8006910:	08006dbd 	.word	0x08006dbd
 8006914:	08006c85 	.word	0x08006c85
 8006918:	08006df5 	.word	0x08006df5

0800691c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
 8006928:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d101      	bne.n	800693c <HAL_SPI_TransmitReceive_DMA+0x20>
 8006938:	2302      	movs	r3, #2
 800693a:	e16c      	b.n	8006c16 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800694a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006952:	7dbb      	ldrb	r3, [r7, #22]
 8006954:	2b01      	cmp	r3, #1
 8006956:	d00d      	beq.n	8006974 <HAL_SPI_TransmitReceive_DMA+0x58>
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695e:	d106      	bne.n	800696e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d102      	bne.n	800696e <HAL_SPI_TransmitReceive_DMA+0x52>
 8006968:	7dbb      	ldrb	r3, [r7, #22]
 800696a:	2b04      	cmp	r3, #4
 800696c:	d002      	beq.n	8006974 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800696e:	2302      	movs	r3, #2
 8006970:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006972:	e14b      	b.n	8006c0c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d005      	beq.n	8006986 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d002      	beq.n	8006986 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006980:	887b      	ldrh	r3, [r7, #2]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d102      	bne.n	800698c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	75fb      	strb	r3, [r7, #23]
    goto error;
 800698a:	e13f      	b.n	8006c0c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b04      	cmp	r3, #4
 8006996:	d003      	beq.n	80069a0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2205      	movs	r2, #5
 800699c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	2200      	movs	r2, #0
 80069a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	887a      	ldrh	r2, [r7, #2]
 80069b0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	887a      	ldrh	r2, [r7, #2]
 80069b6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	887a      	ldrh	r2, [r7, #2]
 80069c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	887a      	ldrh	r2, [r7, #2]
 80069ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2200      	movs	r2, #0
 80069d8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80069e8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80069f2:	d908      	bls.n	8006a06 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	685a      	ldr	r2, [r3, #4]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a02:	605a      	str	r2, [r3, #4]
 8006a04:	e06f      	b.n	8006ae6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a14:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a1a:	699b      	ldr	r3, [r3, #24]
 8006a1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a20:	d126      	bne.n	8006a70 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8006a26:	f003 0301 	and.w	r3, r3, #1
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10f      	bne.n	8006a4e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	685a      	ldr	r2, [r3, #4]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006a3c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	085b      	lsrs	r3, r3, #1
 8006a46:	b29a      	uxth	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a4c:	e010      	b.n	8006a70 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a5c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a62:	b29b      	uxth	r3, r3
 8006a64:	085b      	lsrs	r3, r3, #1
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3301      	adds	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a7a:	d134      	bne.n	8006ae6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	685a      	ldr	r2, [r3, #4]
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a8a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d111      	bne.n	8006ac0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685a      	ldr	r2, [r3, #4]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006aaa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006abe:	e012      	b.n	8006ae6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ace:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ad6:	b29b      	uxth	r3, r3
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3301      	adds	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006aec:	b2db      	uxtb	r3, r3
 8006aee:	2b04      	cmp	r3, #4
 8006af0:	d108      	bne.n	8006b04 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006af6:	4a4a      	ldr	r2, [pc, #296]	; (8006c20 <HAL_SPI_TransmitReceive_DMA+0x304>)
 8006af8:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006afe:	4a49      	ldr	r2, [pc, #292]	; (8006c24 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006b00:	62da      	str	r2, [r3, #44]	; 0x2c
 8006b02:	e007      	b.n	8006b14 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b08:	4a47      	ldr	r2, [pc, #284]	; (8006c28 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 8006b0a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b10:	4a46      	ldr	r2, [pc, #280]	; (8006c2c <HAL_SPI_TransmitReceive_DMA+0x310>)
 8006b12:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b18:	4a45      	ldr	r2, [pc, #276]	; (8006c30 <HAL_SPI_TransmitReceive_DMA+0x314>)
 8006b1a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b20:	2200      	movs	r2, #0
 8006b22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	330c      	adds	r3, #12
 8006b2e:	4619      	mov	r1, r3
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b34:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b3c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006b3e:	f7fc fb09 	bl	8003154 <HAL_DMA_Start_IT>
 8006b42:	4603      	mov	r3, r0
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d00c      	beq.n	8006b62 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4c:	f043 0210 	orr.w	r2, r3, #16
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006b60:	e054      	b.n	8006c0c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685a      	ldr	r2, [r3, #4]
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f042 0201 	orr.w	r2, r2, #1
 8006b70:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b76:	2200      	movs	r2, #0
 8006b78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b7e:	2200      	movs	r2, #0
 8006b80:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b86:	2200      	movs	r2, #0
 8006b88:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b8e:	2200      	movs	r2, #0
 8006b90:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ba8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006baa:	f7fc fad3 	bl	8003154 <HAL_DMA_Start_IT>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d00c      	beq.n	8006bce <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb8:	f043 0210 	orr.w	r2, r3, #16
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006bcc:	e01e      	b.n	8006c0c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bd8:	2b40      	cmp	r3, #64	; 0x40
 8006bda:	d007      	beq.n	8006bec <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bea:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685a      	ldr	r2, [r3, #4]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0220 	orr.w	r2, r2, #32
 8006bfa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	685a      	ldr	r2, [r3, #4]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0202 	orr.w	r2, r2, #2
 8006c0a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop
 8006c20:	08006dbd 	.word	0x08006dbd
 8006c24:	08006c85 	.word	0x08006c85
 8006c28:	08006dd9 	.word	0x08006dd9
 8006c2c:	08006d2d 	.word	0x08006d2d
 8006c30:	08006df5 	.word	0x08006df5

08006c34 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006c78:	bf00      	nop
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c82:	4770      	bx	lr

08006c84 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c90:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c92:	f7fc f865 	bl	8002d60 <HAL_GetTick>
 8006c96:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0320 	and.w	r3, r3, #32
 8006ca2:	2b20      	cmp	r3, #32
 8006ca4:	d03c      	beq.n	8006d20 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f022 0220 	bic.w	r2, r2, #32
 8006cb4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10d      	bne.n	8006cda <SPI_DMAReceiveCplt+0x56>
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006cc6:	d108      	bne.n	8006cda <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	685a      	ldr	r2, [r3, #4]
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0203 	bic.w	r2, r2, #3
 8006cd6:	605a      	str	r2, [r3, #4]
 8006cd8:	e007      	b.n	8006cea <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 0201 	bic.w	r2, r2, #1
 8006ce8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	2164      	movs	r1, #100	; 0x64
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f9be 	bl	8007070 <SPI_EndRxTransaction>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2220      	movs	r2, #32
 8006cfe:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2201      	movs	r2, #1
 8006d0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d003      	beq.n	8006d20 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f7ff ffa9 	bl	8006c70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006d1e:	e002      	b.n	8006d26 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f7fa ffe7 	bl	8001cf4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006d26:	3710      	adds	r7, #16
 8006d28:	46bd      	mov	sp, r7
 8006d2a:	bd80      	pop	{r7, pc}

08006d2c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d38:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d3a:	f7fc f811 	bl	8002d60 <HAL_GetTick>
 8006d3e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	f003 0320 	and.w	r3, r3, #32
 8006d4a:	2b20      	cmp	r3, #32
 8006d4c:	d030      	beq.n	8006db0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	685a      	ldr	r2, [r3, #4]
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0220 	bic.w	r2, r2, #32
 8006d5c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006d5e:	68ba      	ldr	r2, [r7, #8]
 8006d60:	2164      	movs	r1, #100	; 0x64
 8006d62:	68f8      	ldr	r0, [r7, #12]
 8006d64:	f000 f9dc 	bl	8007120 <SPI_EndRxTxTransaction>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d005      	beq.n	8006d7a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d72:	f043 0220 	orr.w	r2, r3, #32
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f022 0203 	bic.w	r2, r2, #3
 8006d88:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d003      	beq.n	8006db0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	f7ff ff61 	bl	8006c70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006dae:	e002      	b.n	8006db6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f7ff ff3f 	bl	8006c34 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dc8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f7ff ff3c 	bl	8006c48 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dd0:	bf00      	nop
 8006dd2:	3710      	adds	r7, #16
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	bd80      	pop	{r7, pc}

08006dd8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006dd8:	b580      	push	{r7, lr}
 8006dda:	b084      	sub	sp, #16
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f7ff ff38 	bl	8006c5c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006dec:	bf00      	nop
 8006dee:	3710      	adds	r7, #16
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b084      	sub	sp, #16
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e00:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	685a      	ldr	r2, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f022 0203 	bic.w	r2, r2, #3
 8006e10:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e16:	f043 0210 	orr.w	r2, r3, #16
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff ff22 	bl	8006c70 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e2c:	bf00      	nop
 8006e2e:	3710      	adds	r7, #16
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b088      	sub	sp, #32
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	603b      	str	r3, [r7, #0]
 8006e40:	4613      	mov	r3, r2
 8006e42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006e44:	f7fb ff8c 	bl	8002d60 <HAL_GetTick>
 8006e48:	4602      	mov	r2, r0
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	1a9b      	subs	r3, r3, r2
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	4413      	add	r3, r2
 8006e52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006e54:	f7fb ff84 	bl	8002d60 <HAL_GetTick>
 8006e58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006e5a:	4b39      	ldr	r3, [pc, #228]	; (8006f40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	015b      	lsls	r3, r3, #5
 8006e60:	0d1b      	lsrs	r3, r3, #20
 8006e62:	69fa      	ldr	r2, [r7, #28]
 8006e64:	fb02 f303 	mul.w	r3, r2, r3
 8006e68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e6a:	e054      	b.n	8006f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e72:	d050      	beq.n	8006f16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006e74:	f7fb ff74 	bl	8002d60 <HAL_GetTick>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	1ad3      	subs	r3, r2, r3
 8006e7e:	69fa      	ldr	r2, [r7, #28]
 8006e80:	429a      	cmp	r2, r3
 8006e82:	d902      	bls.n	8006e8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006e84:	69fb      	ldr	r3, [r7, #28]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d13d      	bne.n	8006f06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006e98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ea2:	d111      	bne.n	8006ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eac:	d004      	beq.n	8006eb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	689b      	ldr	r3, [r3, #8]
 8006eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eb6:	d107      	bne.n	8006ec8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed0:	d10f      	bne.n	8006ef2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006ef0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f02:	2303      	movs	r3, #3
 8006f04:	e017      	b.n	8006f36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d101      	bne.n	8006f10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	3b01      	subs	r3, #1
 8006f14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689a      	ldr	r2, [r3, #8]
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	4013      	ands	r3, r2
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	bf0c      	ite	eq
 8006f26:	2301      	moveq	r3, #1
 8006f28:	2300      	movne	r3, #0
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	79fb      	ldrb	r3, [r7, #7]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d19b      	bne.n	8006e6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	3720      	adds	r7, #32
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	bd80      	pop	{r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	20000000 	.word	0x20000000

08006f44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006f44:	b580      	push	{r7, lr}
 8006f46:	b08a      	sub	sp, #40	; 0x28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]
 8006f50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006f52:	2300      	movs	r3, #0
 8006f54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006f56:	f7fb ff03 	bl	8002d60 <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5e:	1a9b      	subs	r3, r3, r2
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	4413      	add	r3, r2
 8006f64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006f66:	f7fb fefb 	bl	8002d60 <HAL_GetTick>
 8006f6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	330c      	adds	r3, #12
 8006f72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006f74:	4b3d      	ldr	r3, [pc, #244]	; (800706c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	00da      	lsls	r2, r3, #3
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	0d1b      	lsrs	r3, r3, #20
 8006f84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
 8006f8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006f8c:	e060      	b.n	8007050 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006f94:	d107      	bne.n	8006fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006fa4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fac:	d050      	beq.n	8007050 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006fae:	f7fb fed7 	bl	8002d60 <HAL_GetTick>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	6a3b      	ldr	r3, [r7, #32]
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d902      	bls.n	8006fc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d13d      	bne.n	8007040 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	685a      	ldr	r2, [r3, #4]
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006fd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fdc:	d111      	bne.n	8007002 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fe6:	d004      	beq.n	8006ff2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ff0:	d107      	bne.n	8007002 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007000:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700a:	d10f      	bne.n	800702c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800701a:	601a      	str	r2, [r3, #0]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800702a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e010      	b.n	8007062 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007040:	69bb      	ldr	r3, [r7, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d101      	bne.n	800704a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	3b01      	subs	r3, #1
 800704e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	689a      	ldr	r2, [r3, #8]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	4013      	ands	r3, r2
 800705a:	687a      	ldr	r2, [r7, #4]
 800705c:	429a      	cmp	r2, r3
 800705e:	d196      	bne.n	8006f8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3728      	adds	r7, #40	; 0x28
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}
 800706a:	bf00      	nop
 800706c:	20000000 	.word	0x20000000

08007070 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af02      	add	r7, sp, #8
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	60b9      	str	r1, [r7, #8]
 800707a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007084:	d111      	bne.n	80070aa <SPI_EndRxTransaction+0x3a>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708e:	d004      	beq.n	800709a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	689b      	ldr	r3, [r3, #8]
 8007094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007098:	d107      	bne.n	80070aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070a8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	9300      	str	r3, [sp, #0]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	2200      	movs	r2, #0
 80070b2:	2180      	movs	r1, #128	; 0x80
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f7ff febd 	bl	8006e34 <SPI_WaitFlagStateUntilTimeout>
 80070ba:	4603      	mov	r3, r0
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d007      	beq.n	80070d0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070c4:	f043 0220 	orr.w	r2, r3, #32
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e023      	b.n	8007118 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80070d8:	d11d      	bne.n	8007116 <SPI_EndRxTransaction+0xa6>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070e2:	d004      	beq.n	80070ee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070ec:	d113      	bne.n	8007116 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	9300      	str	r3, [sp, #0]
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	2200      	movs	r2, #0
 80070f6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f7ff ff22 	bl	8006f44 <SPI_WaitFifoStateUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d007      	beq.n	8007116 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e000      	b.n	8007118 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b086      	sub	sp, #24
 8007124:	af02      	add	r7, sp, #8
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	9300      	str	r3, [sp, #0]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2200      	movs	r2, #0
 8007134:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007138:	68f8      	ldr	r0, [r7, #12]
 800713a:	f7ff ff03 	bl	8006f44 <SPI_WaitFifoStateUntilTimeout>
 800713e:	4603      	mov	r3, r0
 8007140:	2b00      	cmp	r3, #0
 8007142:	d007      	beq.n	8007154 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007148:	f043 0220 	orr.w	r2, r3, #32
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e027      	b.n	80071a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	9300      	str	r3, [sp, #0]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2200      	movs	r2, #0
 800715c:	2180      	movs	r1, #128	; 0x80
 800715e:	68f8      	ldr	r0, [r7, #12]
 8007160:	f7ff fe68 	bl	8006e34 <SPI_WaitFlagStateUntilTimeout>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	d007      	beq.n	800717a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800716e:	f043 0220 	orr.w	r2, r3, #32
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e014      	b.n	80071a4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	9300      	str	r3, [sp, #0]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2200      	movs	r2, #0
 8007182:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007186:	68f8      	ldr	r0, [r7, #12]
 8007188:	f7ff fedc 	bl	8006f44 <SPI_WaitFifoStateUntilTimeout>
 800718c:	4603      	mov	r3, r0
 800718e:	2b00      	cmp	r3, #0
 8007190:	d007      	beq.n	80071a2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007196:	f043 0220 	orr.w	r2, r3, #32
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e000      	b.n	80071a4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3710      	adds	r7, #16
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b082      	sub	sp, #8
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d101      	bne.n	80071be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	e049      	b.n	8007252 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2200      	movs	r2, #0
 80071ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7fb fb3e 	bl	8002854 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2202      	movs	r2, #2
 80071dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681a      	ldr	r2, [r3, #0]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	3304      	adds	r3, #4
 80071e8:	4619      	mov	r1, r3
 80071ea:	4610      	mov	r0, r2
 80071ec:	f000 fb1e 	bl	800782c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
	...

0800725c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	d001      	beq.n	8007274 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e047      	b.n	8007304 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2202      	movs	r2, #2
 8007278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a23      	ldr	r2, [pc, #140]	; (8007310 <HAL_TIM_Base_Start+0xb4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d01d      	beq.n	80072c2 <HAL_TIM_Base_Start+0x66>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800728e:	d018      	beq.n	80072c2 <HAL_TIM_Base_Start+0x66>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a1f      	ldr	r2, [pc, #124]	; (8007314 <HAL_TIM_Base_Start+0xb8>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <HAL_TIM_Base_Start+0x66>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a1e      	ldr	r2, [pc, #120]	; (8007318 <HAL_TIM_Base_Start+0xbc>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <HAL_TIM_Base_Start+0x66>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1c      	ldr	r2, [pc, #112]	; (800731c <HAL_TIM_Base_Start+0xc0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_TIM_Base_Start+0x66>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1b      	ldr	r2, [pc, #108]	; (8007320 <HAL_TIM_Base_Start+0xc4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <HAL_TIM_Base_Start+0x66>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a19      	ldr	r2, [pc, #100]	; (8007324 <HAL_TIM_Base_Start+0xc8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d115      	bne.n	80072ee <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	689a      	ldr	r2, [r3, #8]
 80072c8:	4b17      	ldr	r3, [pc, #92]	; (8007328 <HAL_TIM_Base_Start+0xcc>)
 80072ca:	4013      	ands	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b06      	cmp	r3, #6
 80072d2:	d015      	beq.n	8007300 <HAL_TIM_Base_Start+0xa4>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072da:	d011      	beq.n	8007300 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072ec:	e008      	b.n	8007300 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f042 0201 	orr.w	r2, r2, #1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	e000      	b.n	8007302 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007300:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007302:	2300      	movs	r3, #0
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	40012c00 	.word	0x40012c00
 8007314:	40000400 	.word	0x40000400
 8007318:	40000800 	.word	0x40000800
 800731c:	40000c00 	.word	0x40000c00
 8007320:	40013400 	.word	0x40013400
 8007324:	40014000 	.word	0x40014000
 8007328:	00010007 	.word	0x00010007

0800732c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800733a:	b2db      	uxtb	r3, r3
 800733c:	2b01      	cmp	r3, #1
 800733e:	d001      	beq.n	8007344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	e04f      	b.n	80073e4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68da      	ldr	r2, [r3, #12]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f042 0201 	orr.w	r2, r2, #1
 800735a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01d      	beq.n	80073a2 <HAL_TIM_Base_Start_IT+0x76>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736e:	d018      	beq.n	80073a2 <HAL_TIM_Base_Start_IT+0x76>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a1f      	ldr	r2, [pc, #124]	; (80073f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <HAL_TIM_Base_Start_IT+0x76>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a1e      	ldr	r2, [pc, #120]	; (80073f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00e      	beq.n	80073a2 <HAL_TIM_Base_Start_IT+0x76>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <HAL_TIM_Base_Start_IT+0xd0>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_TIM_Base_Start_IT+0x76>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a1b      	ldr	r2, [pc, #108]	; (8007400 <HAL_TIM_Base_Start_IT+0xd4>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_TIM_Base_Start_IT+0x76>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a19      	ldr	r2, [pc, #100]	; (8007404 <HAL_TIM_Base_Start_IT+0xd8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d115      	bne.n	80073ce <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	689a      	ldr	r2, [r3, #8]
 80073a8:	4b17      	ldr	r3, [pc, #92]	; (8007408 <HAL_TIM_Base_Start_IT+0xdc>)
 80073aa:	4013      	ands	r3, r2
 80073ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2b06      	cmp	r3, #6
 80073b2:	d015      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0xb4>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073ba:	d011      	beq.n	80073e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681a      	ldr	r2, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f042 0201 	orr.w	r2, r2, #1
 80073ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073cc:	e008      	b.n	80073e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f042 0201 	orr.w	r2, r2, #1
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e000      	b.n	80073e2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073e0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr
 80073f0:	40012c00 	.word	0x40012c00
 80073f4:	40000400 	.word	0x40000400
 80073f8:	40000800 	.word	0x40000800
 80073fc:	40000c00 	.word	0x40000c00
 8007400:	40013400 	.word	0x40013400
 8007404:	40014000 	.word	0x40014000
 8007408:	00010007 	.word	0x00010007

0800740c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	f003 0302 	and.w	r3, r3, #2
 800741e:	2b02      	cmp	r3, #2
 8007420:	d122      	bne.n	8007468 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	f003 0302 	and.w	r3, r3, #2
 800742c:	2b02      	cmp	r3, #2
 800742e:	d11b      	bne.n	8007468 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f06f 0202 	mvn.w	r2, #2
 8007438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2201      	movs	r2, #1
 800743e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f003 0303 	and.w	r3, r3, #3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d003      	beq.n	8007456 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f000 f9ce 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007454:	e005      	b.n	8007462 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f9c0 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f000 f9d1 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2200      	movs	r2, #0
 8007466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	f003 0304 	and.w	r3, r3, #4
 8007472:	2b04      	cmp	r3, #4
 8007474:	d122      	bne.n	80074bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	f003 0304 	and.w	r3, r3, #4
 8007480:	2b04      	cmp	r3, #4
 8007482:	d11b      	bne.n	80074bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f06f 0204 	mvn.w	r2, #4
 800748c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2202      	movs	r2, #2
 8007492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d003      	beq.n	80074aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074a2:	6878      	ldr	r0, [r7, #4]
 80074a4:	f000 f9a4 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 80074a8:	e005      	b.n	80074b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 f996 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 f9a7 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2200      	movs	r2, #0
 80074ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	691b      	ldr	r3, [r3, #16]
 80074c2:	f003 0308 	and.w	r3, r3, #8
 80074c6:	2b08      	cmp	r3, #8
 80074c8:	d122      	bne.n	8007510 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	f003 0308 	and.w	r3, r3, #8
 80074d4:	2b08      	cmp	r3, #8
 80074d6:	d11b      	bne.n	8007510 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f06f 0208 	mvn.w	r2, #8
 80074e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2204      	movs	r2, #4
 80074e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69db      	ldr	r3, [r3, #28]
 80074ee:	f003 0303 	and.w	r3, r3, #3
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d003      	beq.n	80074fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f000 f97a 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 80074fc:	e005      	b.n	800750a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 f96c 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f97d 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	691b      	ldr	r3, [r3, #16]
 8007516:	f003 0310 	and.w	r3, r3, #16
 800751a:	2b10      	cmp	r3, #16
 800751c:	d122      	bne.n	8007564 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	f003 0310 	and.w	r3, r3, #16
 8007528:	2b10      	cmp	r3, #16
 800752a:	d11b      	bne.n	8007564 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f06f 0210 	mvn.w	r2, #16
 8007534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2208      	movs	r2, #8
 800753a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007546:	2b00      	cmp	r3, #0
 8007548:	d003      	beq.n	8007552 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800754a:	6878      	ldr	r0, [r7, #4]
 800754c:	f000 f950 	bl	80077f0 <HAL_TIM_IC_CaptureCallback>
 8007550:	e005      	b.n	800755e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f942 	bl	80077dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f000 f953 	bl	8007804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2200      	movs	r2, #0
 8007562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b01      	cmp	r3, #1
 8007570:	d10e      	bne.n	8007590 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	68db      	ldr	r3, [r3, #12]
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	2b01      	cmp	r3, #1
 800757e:	d107      	bne.n	8007590 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f06f 0201 	mvn.w	r2, #1
 8007588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f7f9 ffc6 	bl	800151c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	691b      	ldr	r3, [r3, #16]
 8007596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800759a:	2b80      	cmp	r3, #128	; 0x80
 800759c:	d10e      	bne.n	80075bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075a8:	2b80      	cmp	r3, #128	; 0x80
 80075aa:	d107      	bne.n	80075bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80075b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f000 fafe 	bl	8007bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	691b      	ldr	r3, [r3, #16]
 80075c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075ca:	d10e      	bne.n	80075ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075d6:	2b80      	cmp	r3, #128	; 0x80
 80075d8:	d107      	bne.n	80075ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 faf1 	bl	8007bcc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075f4:	2b40      	cmp	r3, #64	; 0x40
 80075f6:	d10e      	bne.n	8007616 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	68db      	ldr	r3, [r3, #12]
 80075fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007602:	2b40      	cmp	r3, #64	; 0x40
 8007604:	d107      	bne.n	8007616 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800760e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f901 	bl	8007818 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	f003 0320 	and.w	r3, r3, #32
 8007620:	2b20      	cmp	r3, #32
 8007622:	d10e      	bne.n	8007642 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	f003 0320 	and.w	r3, r3, #32
 800762e:	2b20      	cmp	r3, #32
 8007630:	d107      	bne.n	8007642 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f06f 0220 	mvn.w	r2, #32
 800763a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800763c:	6878      	ldr	r0, [r7, #4]
 800763e:	f000 fab1 	bl	8007ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007642:	bf00      	nop
 8007644:	3708      	adds	r7, #8
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007654:	2300      	movs	r3, #0
 8007656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800765e:	2b01      	cmp	r3, #1
 8007660:	d101      	bne.n	8007666 <HAL_TIM_ConfigClockSource+0x1c>
 8007662:	2302      	movs	r3, #2
 8007664:	e0b6      	b.n	80077d4 <HAL_TIM_ConfigClockSource+0x18a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2202      	movs	r2, #2
 8007672:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	689b      	ldr	r3, [r3, #8]
 800767c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007684:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007688:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007690:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	68ba      	ldr	r2, [r7, #8]
 8007698:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a2:	d03e      	beq.n	8007722 <HAL_TIM_ConfigClockSource+0xd8>
 80076a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076a8:	f200 8087 	bhi.w	80077ba <HAL_TIM_ConfigClockSource+0x170>
 80076ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b0:	f000 8086 	beq.w	80077c0 <HAL_TIM_ConfigClockSource+0x176>
 80076b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076b8:	d87f      	bhi.n	80077ba <HAL_TIM_ConfigClockSource+0x170>
 80076ba:	2b70      	cmp	r3, #112	; 0x70
 80076bc:	d01a      	beq.n	80076f4 <HAL_TIM_ConfigClockSource+0xaa>
 80076be:	2b70      	cmp	r3, #112	; 0x70
 80076c0:	d87b      	bhi.n	80077ba <HAL_TIM_ConfigClockSource+0x170>
 80076c2:	2b60      	cmp	r3, #96	; 0x60
 80076c4:	d050      	beq.n	8007768 <HAL_TIM_ConfigClockSource+0x11e>
 80076c6:	2b60      	cmp	r3, #96	; 0x60
 80076c8:	d877      	bhi.n	80077ba <HAL_TIM_ConfigClockSource+0x170>
 80076ca:	2b50      	cmp	r3, #80	; 0x50
 80076cc:	d03c      	beq.n	8007748 <HAL_TIM_ConfigClockSource+0xfe>
 80076ce:	2b50      	cmp	r3, #80	; 0x50
 80076d0:	d873      	bhi.n	80077ba <HAL_TIM_ConfigClockSource+0x170>
 80076d2:	2b40      	cmp	r3, #64	; 0x40
 80076d4:	d058      	beq.n	8007788 <HAL_TIM_ConfigClockSource+0x13e>
 80076d6:	2b40      	cmp	r3, #64	; 0x40
 80076d8:	d86f      	bhi.n	80077ba <HAL_TIM_ConfigClockSource+0x170>
 80076da:	2b30      	cmp	r3, #48	; 0x30
 80076dc:	d064      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x15e>
 80076de:	2b30      	cmp	r3, #48	; 0x30
 80076e0:	d86b      	bhi.n	80077ba <HAL_TIM_ConfigClockSource+0x170>
 80076e2:	2b20      	cmp	r3, #32
 80076e4:	d060      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x15e>
 80076e6:	2b20      	cmp	r3, #32
 80076e8:	d867      	bhi.n	80077ba <HAL_TIM_ConfigClockSource+0x170>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d05c      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x15e>
 80076ee:	2b10      	cmp	r3, #16
 80076f0:	d05a      	beq.n	80077a8 <HAL_TIM_ConfigClockSource+0x15e>
 80076f2:	e062      	b.n	80077ba <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6818      	ldr	r0, [r3, #0]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	6899      	ldr	r1, [r3, #8]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	68db      	ldr	r3, [r3, #12]
 8007704:	f000 f9a6 	bl	8007a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007716:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	609a      	str	r2, [r3, #8]
      break;
 8007720:	e04f      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	6899      	ldr	r1, [r3, #8]
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	685a      	ldr	r2, [r3, #4]
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f000 f98f 	bl	8007a54 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	689a      	ldr	r2, [r3, #8]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007744:	609a      	str	r2, [r3, #8]
      break;
 8007746:	e03c      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6818      	ldr	r0, [r3, #0]
 800774c:	683b      	ldr	r3, [r7, #0]
 800774e:	6859      	ldr	r1, [r3, #4]
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	68db      	ldr	r3, [r3, #12]
 8007754:	461a      	mov	r2, r3
 8007756:	f000 f903 	bl	8007960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	2150      	movs	r1, #80	; 0x50
 8007760:	4618      	mov	r0, r3
 8007762:	f000 f95c 	bl	8007a1e <TIM_ITRx_SetConfig>
      break;
 8007766:	e02c      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6818      	ldr	r0, [r3, #0]
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	6859      	ldr	r1, [r3, #4]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	461a      	mov	r2, r3
 8007776:	f000 f922 	bl	80079be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	2160      	movs	r1, #96	; 0x60
 8007780:	4618      	mov	r0, r3
 8007782:	f000 f94c 	bl	8007a1e <TIM_ITRx_SetConfig>
      break;
 8007786:	e01c      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6818      	ldr	r0, [r3, #0]
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	6859      	ldr	r1, [r3, #4]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	461a      	mov	r2, r3
 8007796:	f000 f8e3 	bl	8007960 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	2140      	movs	r1, #64	; 0x40
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 f93c 	bl	8007a1e <TIM_ITRx_SetConfig>
      break;
 80077a6:	e00c      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4619      	mov	r1, r3
 80077b2:	4610      	mov	r0, r2
 80077b4:	f000 f933 	bl	8007a1e <TIM_ITRx_SetConfig>
      break;
 80077b8:	e003      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	73fb      	strb	r3, [r7, #15]
      break;
 80077be:	e000      	b.n	80077c2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80077c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2201      	movs	r2, #1
 80077c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	2200      	movs	r2, #0
 80077ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3710      	adds	r7, #16
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr

080077f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077f8:	bf00      	nop
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr

08007804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	4a40      	ldr	r2, [pc, #256]	; (8007940 <TIM_Base_SetConfig+0x114>)
 8007840:	4293      	cmp	r3, r2
 8007842:	d013      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800784a:	d00f      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	4a3d      	ldr	r2, [pc, #244]	; (8007944 <TIM_Base_SetConfig+0x118>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d00b      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a3c      	ldr	r2, [pc, #240]	; (8007948 <TIM_Base_SetConfig+0x11c>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d007      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	4a3b      	ldr	r2, [pc, #236]	; (800794c <TIM_Base_SetConfig+0x120>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d003      	beq.n	800786c <TIM_Base_SetConfig+0x40>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	4a3a      	ldr	r2, [pc, #232]	; (8007950 <TIM_Base_SetConfig+0x124>)
 8007868:	4293      	cmp	r3, r2
 800786a:	d108      	bne.n	800787e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	4313      	orrs	r3, r2
 800787c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a2f      	ldr	r2, [pc, #188]	; (8007940 <TIM_Base_SetConfig+0x114>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d01f      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800788c:	d01b      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	4a2c      	ldr	r2, [pc, #176]	; (8007944 <TIM_Base_SetConfig+0x118>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d017      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	4a2b      	ldr	r2, [pc, #172]	; (8007948 <TIM_Base_SetConfig+0x11c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d013      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	4a2a      	ldr	r2, [pc, #168]	; (800794c <TIM_Base_SetConfig+0x120>)
 80078a2:	4293      	cmp	r3, r2
 80078a4:	d00f      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	4a29      	ldr	r2, [pc, #164]	; (8007950 <TIM_Base_SetConfig+0x124>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d00b      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	4a28      	ldr	r2, [pc, #160]	; (8007954 <TIM_Base_SetConfig+0x128>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d007      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	4a27      	ldr	r2, [pc, #156]	; (8007958 <TIM_Base_SetConfig+0x12c>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d003      	beq.n	80078c6 <TIM_Base_SetConfig+0x9a>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	4a26      	ldr	r2, [pc, #152]	; (800795c <TIM_Base_SetConfig+0x130>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d108      	bne.n	80078d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	695b      	ldr	r3, [r3, #20]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	681a      	ldr	r2, [r3, #0]
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	4a10      	ldr	r2, [pc, #64]	; (8007940 <TIM_Base_SetConfig+0x114>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d00f      	beq.n	8007924 <TIM_Base_SetConfig+0xf8>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	4a12      	ldr	r2, [pc, #72]	; (8007950 <TIM_Base_SetConfig+0x124>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d00b      	beq.n	8007924 <TIM_Base_SetConfig+0xf8>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	4a11      	ldr	r2, [pc, #68]	; (8007954 <TIM_Base_SetConfig+0x128>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d007      	beq.n	8007924 <TIM_Base_SetConfig+0xf8>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	4a10      	ldr	r2, [pc, #64]	; (8007958 <TIM_Base_SetConfig+0x12c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d003      	beq.n	8007924 <TIM_Base_SetConfig+0xf8>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	4a0f      	ldr	r2, [pc, #60]	; (800795c <TIM_Base_SetConfig+0x130>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d103      	bne.n	800792c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	691a      	ldr	r2, [r3, #16]
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2201      	movs	r2, #1
 8007930:	615a      	str	r2, [r3, #20]
}
 8007932:	bf00      	nop
 8007934:	3714      	adds	r7, #20
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	40012c00 	.word	0x40012c00
 8007944:	40000400 	.word	0x40000400
 8007948:	40000800 	.word	0x40000800
 800794c:	40000c00 	.word	0x40000c00
 8007950:	40013400 	.word	0x40013400
 8007954:	40014000 	.word	0x40014000
 8007958:	40014400 	.word	0x40014400
 800795c:	40014800 	.word	0x40014800

08007960 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007960:	b480      	push	{r7}
 8007962:	b087      	sub	sp, #28
 8007964:	af00      	add	r7, sp, #0
 8007966:	60f8      	str	r0, [r7, #12]
 8007968:	60b9      	str	r1, [r7, #8]
 800796a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6a1b      	ldr	r3, [r3, #32]
 8007970:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	6a1b      	ldr	r3, [r3, #32]
 8007976:	f023 0201 	bic.w	r2, r3, #1
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	699b      	ldr	r3, [r3, #24]
 8007982:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800798a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	011b      	lsls	r3, r3, #4
 8007990:	693a      	ldr	r2, [r7, #16]
 8007992:	4313      	orrs	r3, r2
 8007994:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	f023 030a 	bic.w	r3, r3, #10
 800799c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800799e:	697a      	ldr	r2, [r7, #20]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	4313      	orrs	r3, r2
 80079a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	693a      	ldr	r2, [r7, #16]
 80079aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	697a      	ldr	r2, [r7, #20]
 80079b0:	621a      	str	r2, [r3, #32]
}
 80079b2:	bf00      	nop
 80079b4:	371c      	adds	r7, #28
 80079b6:	46bd      	mov	sp, r7
 80079b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079bc:	4770      	bx	lr

080079be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80079be:	b480      	push	{r7}
 80079c0:	b087      	sub	sp, #28
 80079c2:	af00      	add	r7, sp, #0
 80079c4:	60f8      	str	r0, [r7, #12]
 80079c6:	60b9      	str	r1, [r7, #8]
 80079c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6a1b      	ldr	r3, [r3, #32]
 80079ce:	f023 0210 	bic.w	r2, r3, #16
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	699b      	ldr	r3, [r3, #24]
 80079da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80079e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	031b      	lsls	r3, r3, #12
 80079ee:	697a      	ldr	r2, [r7, #20]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	011b      	lsls	r3, r3, #4
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	697a      	ldr	r2, [r7, #20]
 8007a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	693a      	ldr	r2, [r7, #16]
 8007a10:	621a      	str	r2, [r3, #32]
}
 8007a12:	bf00      	nop
 8007a14:	371c      	adds	r7, #28
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr

08007a1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007a1e:	b480      	push	{r7}
 8007a20:	b085      	sub	sp, #20
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	6078      	str	r0, [r7, #4]
 8007a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a36:	683a      	ldr	r2, [r7, #0]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	f043 0307 	orr.w	r3, r3, #7
 8007a40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68fa      	ldr	r2, [r7, #12]
 8007a46:	609a      	str	r2, [r3, #8]
}
 8007a48:	bf00      	nop
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	689b      	ldr	r3, [r3, #8]
 8007a66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	021a      	lsls	r2, r3, #8
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	431a      	orrs	r2, r3
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	609a      	str	r2, [r3, #8]
}
 8007a88:	bf00      	nop
 8007a8a:	371c      	adds	r7, #28
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e068      	b.n	8007b7e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a2e      	ldr	r2, [pc, #184]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d004      	beq.n	8007ae0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a2d      	ldr	r2, [pc, #180]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d108      	bne.n	8007af2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007ae6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007af8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68fa      	ldr	r2, [r7, #12]
 8007b00:	4313      	orrs	r3, r2
 8007b02:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a1e      	ldr	r2, [pc, #120]	; (8007b8c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d01d      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b1e:	d018      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a1b      	ldr	r2, [pc, #108]	; (8007b94 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d013      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a1a      	ldr	r2, [pc, #104]	; (8007b98 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d00e      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a18      	ldr	r2, [pc, #96]	; (8007b9c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d009      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	4a13      	ldr	r2, [pc, #76]	; (8007b90 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007b44:	4293      	cmp	r3, r2
 8007b46:	d004      	beq.n	8007b52 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a14      	ldr	r2, [pc, #80]	; (8007ba0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d10c      	bne.n	8007b6c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007b58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3714      	adds	r7, #20
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	40012c00 	.word	0x40012c00
 8007b90:	40013400 	.word	0x40013400
 8007b94:	40000400 	.word	0x40000400
 8007b98:	40000800 	.word	0x40000800
 8007b9c:	40000c00 	.word	0x40000c00
 8007ba0:	40014000 	.word	0x40014000

08007ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr

08007bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bc0:	bf00      	nop
 8007bc2:	370c      	adds	r7, #12
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bca:	4770      	bx	lr

08007bcc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b083      	sub	sp, #12
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bd4:	bf00      	nop
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d101      	bne.n	8007bf2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007bee:	2301      	movs	r3, #1
 8007bf0:	e040      	b.n	8007c74 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d106      	bne.n	8007c08 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7fa fe4a 	bl	800289c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2224      	movs	r2, #36	; 0x24
 8007c0c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f022 0201 	bic.w	r2, r2, #1
 8007c1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fbc8 	bl	80083b4 <UART_SetConfig>
 8007c24:	4603      	mov	r3, r0
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d101      	bne.n	8007c2e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e022      	b.n	8007c74 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d002      	beq.n	8007c3c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fe74 	bl	8008924 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007c4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	689a      	ldr	r2, [r3, #8]
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007c5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f042 0201 	orr.w	r2, r2, #1
 8007c6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f000 fefb 	bl	8008a68 <UART_CheckIdleState>
 8007c72:	4603      	mov	r3, r0
}
 8007c74:	4618      	mov	r0, r3
 8007c76:	3708      	adds	r7, #8
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b08a      	sub	sp, #40	; 0x28
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	4613      	mov	r3, r2
 8007c88:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c8e:	2b20      	cmp	r3, #32
 8007c90:	d178      	bne.n	8007d84 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d002      	beq.n	8007c9e <HAL_UART_Transmit_DMA+0x22>
 8007c98:	88fb      	ldrh	r3, [r7, #6]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d101      	bne.n	8007ca2 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e071      	b.n	8007d86 <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d101      	bne.n	8007cb0 <HAL_UART_Transmit_DMA+0x34>
 8007cac:	2302      	movs	r3, #2
 8007cae:	e06a      	b.n	8007d86 <HAL_UART_Transmit_DMA+0x10a>
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	88fa      	ldrh	r2, [r7, #6]
 8007cc2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	88fa      	ldrh	r2, [r7, #6]
 8007cca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2221      	movs	r2, #33	; 0x21
 8007cda:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d02b      	beq.n	8007d3c <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ce8:	4a29      	ldr	r2, [pc, #164]	; (8007d90 <HAL_UART_Transmit_DMA+0x114>)
 8007cea:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf0:	4a28      	ldr	r2, [pc, #160]	; (8007d94 <HAL_UART_Transmit_DMA+0x118>)
 8007cf2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf8:	4a27      	ldr	r2, [pc, #156]	; (8007d98 <HAL_UART_Transmit_DMA+0x11c>)
 8007cfa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d00:	2200      	movs	r2, #0
 8007d02:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d0c:	4619      	mov	r1, r3
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3328      	adds	r3, #40	; 0x28
 8007d14:	461a      	mov	r2, r3
 8007d16:	88fb      	ldrh	r3, [r7, #6]
 8007d18:	f7fb fa1c 	bl	8003154 <HAL_DMA_Start_IT>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d00c      	beq.n	8007d3c <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2210      	movs	r2, #16
 8007d26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e024      	b.n	8007d86 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	2240      	movs	r2, #64	; 0x40
 8007d42:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	3308      	adds	r3, #8
 8007d52:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	e853 3f00 	ldrex	r3, [r3]
 8007d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d62:	627b      	str	r3, [r7, #36]	; 0x24
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	3308      	adds	r3, #8
 8007d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d6c:	623a      	str	r2, [r7, #32]
 8007d6e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	69f9      	ldr	r1, [r7, #28]
 8007d72:	6a3a      	ldr	r2, [r7, #32]
 8007d74:	e841 2300 	strex	r3, r2, [r1]
 8007d78:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e5      	bne.n	8007d4c <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8007d84:	2302      	movs	r3, #2
  }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3728      	adds	r7, #40	; 0x28
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	08008d95 	.word	0x08008d95
 8007d94:	08008e2f 	.word	0x08008e2f
 8007d98:	08008e4b 	.word	0x08008e4b

08007d9c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b0ba      	sub	sp, #232	; 0xe8
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	69db      	ldr	r3, [r3, #28]
 8007daa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007dc2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007dc6:	f640 030f 	movw	r3, #2063	; 0x80f
 8007dca:	4013      	ands	r3, r2
 8007dcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007dd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d115      	bne.n	8007e04 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ddc:	f003 0320 	and.w	r3, r3, #32
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d00f      	beq.n	8007e04 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007de8:	f003 0320 	and.w	r3, r3, #32
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d009      	beq.n	8007e04 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	f000 82a6 	beq.w	8008346 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	4798      	blx	r3
      }
      return;
 8007e02:	e2a0      	b.n	8008346 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007e04:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 8117 	beq.w	800803c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e12:	f003 0301 	and.w	r3, r3, #1
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d106      	bne.n	8007e28 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007e1a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007e1e:	4b85      	ldr	r3, [pc, #532]	; (8008034 <HAL_UART_IRQHandler+0x298>)
 8007e20:	4013      	ands	r3, r2
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 810a 	beq.w	800803c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d011      	beq.n	8007e58 <HAL_UART_IRQHandler+0xbc>
 8007e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d00b      	beq.n	8007e58 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2201      	movs	r2, #1
 8007e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e4e:	f043 0201 	orr.w	r2, r3, #1
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e5c:	f003 0302 	and.w	r3, r3, #2
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d011      	beq.n	8007e88 <HAL_UART_IRQHandler+0xec>
 8007e64:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d00b      	beq.n	8007e88 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	2202      	movs	r2, #2
 8007e76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007e7e:	f043 0204 	orr.w	r2, r3, #4
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e8c:	f003 0304 	and.w	r3, r3, #4
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d011      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x11c>
 8007e94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007e98:	f003 0301 	and.w	r3, r3, #1
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d00b      	beq.n	8007eb8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	2204      	movs	r2, #4
 8007ea6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eae:	f043 0202 	orr.w	r2, r3, #2
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d017      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ec8:	f003 0320 	and.w	r3, r3, #32
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d105      	bne.n	8007edc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ed0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00b      	beq.n	8007ef4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007eea:	f043 0208 	orr.w	r2, r3, #8
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d012      	beq.n	8007f26 <HAL_UART_IRQHandler+0x18a>
 8007f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d00c      	beq.n	8007f26 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f14:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f1c:	f043 0220 	orr.w	r2, r3, #32
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	f000 820c 	beq.w	800834a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007f32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00d      	beq.n	8007f5a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007f3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f42:	f003 0320 	and.w	r3, r3, #32
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d007      	beq.n	8007f5a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f60:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	689b      	ldr	r3, [r3, #8]
 8007f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f6e:	2b40      	cmp	r3, #64	; 0x40
 8007f70:	d005      	beq.n	8007f7e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f76:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d04f      	beq.n	800801e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 fea5 	bl	8008cce <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8e:	2b40      	cmp	r3, #64	; 0x40
 8007f90:	d141      	bne.n	8008016 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	3308      	adds	r3, #8
 8007f98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fa0:	e853 3f00 	ldrex	r3, [r3]
 8007fa4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007fa8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007fac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fb0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	3308      	adds	r3, #8
 8007fba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007fbe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007fc2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fc6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007fca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007fce:	e841 2300 	strex	r3, r2, [r1]
 8007fd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007fd6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d1d9      	bne.n	8007f92 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d013      	beq.n	800800e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fea:	4a13      	ldr	r2, [pc, #76]	; (8008038 <HAL_UART_IRQHandler+0x29c>)
 8007fec:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fb f94c 	bl	8003290 <HAL_DMA_Abort_IT>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d017      	beq.n	800802e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008008:	4610      	mov	r0, r2
 800800a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800800c:	e00f      	b.n	800802e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f9ba 	bl	8008388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008014:	e00b      	b.n	800802e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f9b6 	bl	8008388 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800801c:	e007      	b.n	800802e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f9b2 	bl	8008388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800802c:	e18d      	b.n	800834a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800802e:	bf00      	nop
    return;
 8008030:	e18b      	b.n	800834a <HAL_UART_IRQHandler+0x5ae>
 8008032:	bf00      	nop
 8008034:	04000120 	.word	0x04000120
 8008038:	08008ec7 	.word	0x08008ec7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008040:	2b01      	cmp	r3, #1
 8008042:	f040 8146 	bne.w	80082d2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804a:	f003 0310 	and.w	r3, r3, #16
 800804e:	2b00      	cmp	r3, #0
 8008050:	f000 813f 	beq.w	80082d2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008058:	f003 0310 	and.w	r3, r3, #16
 800805c:	2b00      	cmp	r3, #0
 800805e:	f000 8138 	beq.w	80082d2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	2210      	movs	r2, #16
 8008068:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008074:	2b40      	cmp	r3, #64	; 0x40
 8008076:	f040 80b4 	bne.w	80081e2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008086:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 815f 	beq.w	800834e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008096:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800809a:	429a      	cmp	r2, r3
 800809c:	f080 8157 	bcs.w	800834e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80080a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	f040 8085 	bne.w	80081c6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80080c8:	e853 3f00 	ldrex	r3, [r3]
 80080cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80080d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80080d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	461a      	mov	r2, r3
 80080e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80080e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80080ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80080f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80080fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1da      	bne.n	80080bc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	3308      	adds	r3, #8
 800810c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008110:	e853 3f00 	ldrex	r3, [r3]
 8008114:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008116:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008118:	f023 0301 	bic.w	r3, r3, #1
 800811c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3308      	adds	r3, #8
 8008126:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800812a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800812e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008130:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008132:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008136:	e841 2300 	strex	r3, r2, [r1]
 800813a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800813c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800813e:	2b00      	cmp	r3, #0
 8008140:	d1e1      	bne.n	8008106 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3308      	adds	r3, #8
 8008148:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800814a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800814c:	e853 3f00 	ldrex	r3, [r3]
 8008150:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008152:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008154:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008158:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	3308      	adds	r3, #8
 8008162:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008166:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008168:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800816a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800816c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800816e:	e841 2300 	strex	r3, r2, [r1]
 8008172:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008174:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008176:	2b00      	cmp	r3, #0
 8008178:	d1e3      	bne.n	8008142 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2220      	movs	r2, #32
 800817e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2200      	movs	r2, #0
 8008184:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800818c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800818e:	e853 3f00 	ldrex	r3, [r3]
 8008192:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008196:	f023 0310 	bic.w	r3, r3, #16
 800819a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80081a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80081aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80081ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80081b0:	e841 2300 	strex	r3, r2, [r1]
 80081b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80081b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d1e4      	bne.n	8008186 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c0:	4618      	mov	r0, r3
 80081c2:	f7fb f827 	bl	8003214 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	1ad3      	subs	r3, r2, r3
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f8de 	bl	800839c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80081e0:	e0b5      	b.n	800834e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081ee:	b29b      	uxth	r3, r3
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	f000 80a7 	beq.w	8008352 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8008204:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80a2 	beq.w	8008352 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	e853 3f00 	ldrex	r3, [r3]
 800821a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800821c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800821e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008222:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008230:	647b      	str	r3, [r7, #68]	; 0x44
 8008232:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008234:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008238:	e841 2300 	strex	r3, r2, [r1]
 800823c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800823e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008240:	2b00      	cmp	r3, #0
 8008242:	d1e4      	bne.n	800820e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3308      	adds	r3, #8
 800824a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800824c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824e:	e853 3f00 	ldrex	r3, [r3]
 8008252:	623b      	str	r3, [r7, #32]
   return(result);
 8008254:	6a3b      	ldr	r3, [r7, #32]
 8008256:	f023 0301 	bic.w	r3, r3, #1
 800825a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	3308      	adds	r3, #8
 8008264:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008268:	633a      	str	r2, [r7, #48]	; 0x30
 800826a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800826e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e3      	bne.n	8008244 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2220      	movs	r2, #32
 8008280:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2200      	movs	r2, #0
 8008286:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	e853 3f00 	ldrex	r3, [r3]
 800829a:	60fb      	str	r3, [r7, #12]
   return(result);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	f023 0310 	bic.w	r3, r3, #16
 80082a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	461a      	mov	r2, r3
 80082ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80082b0:	61fb      	str	r3, [r7, #28]
 80082b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b4:	69b9      	ldr	r1, [r7, #24]
 80082b6:	69fa      	ldr	r2, [r7, #28]
 80082b8:	e841 2300 	strex	r3, r2, [r1]
 80082bc:	617b      	str	r3, [r7, #20]
   return(result);
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1e4      	bne.n	800828e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80082c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80082c8:	4619      	mov	r1, r3
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f866 	bl	800839c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80082d0:	e03f      	b.n	8008352 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80082d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80082d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d00e      	beq.n	80082fc <HAL_UART_IRQHandler+0x560>
 80082de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d008      	beq.n	80082fc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80082f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fe26 	bl	8008f46 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80082fa:	e02d      	b.n	8008358 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80082fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00e      	beq.n	8008326 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008308:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800830c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008310:	2b00      	cmp	r3, #0
 8008312:	d008      	beq.n	8008326 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01c      	beq.n	8008356 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	4798      	blx	r3
    }
    return;
 8008324:	e017      	b.n	8008356 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800832a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800832e:	2b00      	cmp	r3, #0
 8008330:	d012      	beq.n	8008358 <HAL_UART_IRQHandler+0x5bc>
 8008332:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00c      	beq.n	8008358 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800833e:	6878      	ldr	r0, [r7, #4]
 8008340:	f000 fdd7 	bl	8008ef2 <UART_EndTransmit_IT>
    return;
 8008344:	e008      	b.n	8008358 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008346:	bf00      	nop
 8008348:	e006      	b.n	8008358 <HAL_UART_IRQHandler+0x5bc>
    return;
 800834a:	bf00      	nop
 800834c:	e004      	b.n	8008358 <HAL_UART_IRQHandler+0x5bc>
      return;
 800834e:	bf00      	nop
 8008350:	e002      	b.n	8008358 <HAL_UART_IRQHandler+0x5bc>
      return;
 8008352:	bf00      	nop
 8008354:	e000      	b.n	8008358 <HAL_UART_IRQHandler+0x5bc>
    return;
 8008356:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8008358:	37e8      	adds	r7, #232	; 0xe8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop

08008360 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008368:	bf00      	nop
 800836a:	370c      	adds	r7, #12
 800836c:	46bd      	mov	sp, r7
 800836e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008372:	4770      	bx	lr

08008374 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008374:	b480      	push	{r7}
 8008376:	b083      	sub	sp, #12
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800839c:	b480      	push	{r7}
 800839e:	b083      	sub	sp, #12
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr

080083b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80083b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80083b8:	b08a      	sub	sp, #40	; 0x28
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80083be:	2300      	movs	r3, #0
 80083c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	689a      	ldr	r2, [r3, #8]
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	431a      	orrs	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	431a      	orrs	r2, r3
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	4313      	orrs	r3, r2
 80083da:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	4ba4      	ldr	r3, [pc, #656]	; (8008674 <UART_SetConfig+0x2c0>)
 80083e4:	4013      	ands	r3, r2
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	6812      	ldr	r2, [r2, #0]
 80083ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80083ec:	430b      	orrs	r3, r1
 80083ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68da      	ldr	r2, [r3, #12]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	699b      	ldr	r3, [r3, #24]
 800840a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a99      	ldr	r2, [pc, #612]	; (8008678 <UART_SetConfig+0x2c4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d004      	beq.n	8008420 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	6a1b      	ldr	r3, [r3, #32]
 800841a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841c:	4313      	orrs	r3, r2
 800841e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008430:	430a      	orrs	r2, r1
 8008432:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a90      	ldr	r2, [pc, #576]	; (800867c <UART_SetConfig+0x2c8>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d126      	bne.n	800848c <UART_SetConfig+0xd8>
 800843e:	4b90      	ldr	r3, [pc, #576]	; (8008680 <UART_SetConfig+0x2cc>)
 8008440:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008444:	f003 0303 	and.w	r3, r3, #3
 8008448:	2b03      	cmp	r3, #3
 800844a:	d81b      	bhi.n	8008484 <UART_SetConfig+0xd0>
 800844c:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <UART_SetConfig+0xa0>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	08008465 	.word	0x08008465
 8008458:	08008475 	.word	0x08008475
 800845c:	0800846d 	.word	0x0800846d
 8008460:	0800847d 	.word	0x0800847d
 8008464:	2301      	movs	r3, #1
 8008466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800846a:	e116      	b.n	800869a <UART_SetConfig+0x2e6>
 800846c:	2302      	movs	r3, #2
 800846e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008472:	e112      	b.n	800869a <UART_SetConfig+0x2e6>
 8008474:	2304      	movs	r3, #4
 8008476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800847a:	e10e      	b.n	800869a <UART_SetConfig+0x2e6>
 800847c:	2308      	movs	r3, #8
 800847e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008482:	e10a      	b.n	800869a <UART_SetConfig+0x2e6>
 8008484:	2310      	movs	r3, #16
 8008486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800848a:	e106      	b.n	800869a <UART_SetConfig+0x2e6>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	4a7c      	ldr	r2, [pc, #496]	; (8008684 <UART_SetConfig+0x2d0>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d138      	bne.n	8008508 <UART_SetConfig+0x154>
 8008496:	4b7a      	ldr	r3, [pc, #488]	; (8008680 <UART_SetConfig+0x2cc>)
 8008498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800849c:	f003 030c 	and.w	r3, r3, #12
 80084a0:	2b0c      	cmp	r3, #12
 80084a2:	d82d      	bhi.n	8008500 <UART_SetConfig+0x14c>
 80084a4:	a201      	add	r2, pc, #4	; (adr r2, 80084ac <UART_SetConfig+0xf8>)
 80084a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084aa:	bf00      	nop
 80084ac:	080084e1 	.word	0x080084e1
 80084b0:	08008501 	.word	0x08008501
 80084b4:	08008501 	.word	0x08008501
 80084b8:	08008501 	.word	0x08008501
 80084bc:	080084f1 	.word	0x080084f1
 80084c0:	08008501 	.word	0x08008501
 80084c4:	08008501 	.word	0x08008501
 80084c8:	08008501 	.word	0x08008501
 80084cc:	080084e9 	.word	0x080084e9
 80084d0:	08008501 	.word	0x08008501
 80084d4:	08008501 	.word	0x08008501
 80084d8:	08008501 	.word	0x08008501
 80084dc:	080084f9 	.word	0x080084f9
 80084e0:	2300      	movs	r3, #0
 80084e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084e6:	e0d8      	b.n	800869a <UART_SetConfig+0x2e6>
 80084e8:	2302      	movs	r3, #2
 80084ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ee:	e0d4      	b.n	800869a <UART_SetConfig+0x2e6>
 80084f0:	2304      	movs	r3, #4
 80084f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084f6:	e0d0      	b.n	800869a <UART_SetConfig+0x2e6>
 80084f8:	2308      	movs	r3, #8
 80084fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084fe:	e0cc      	b.n	800869a <UART_SetConfig+0x2e6>
 8008500:	2310      	movs	r3, #16
 8008502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008506:	e0c8      	b.n	800869a <UART_SetConfig+0x2e6>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a5e      	ldr	r2, [pc, #376]	; (8008688 <UART_SetConfig+0x2d4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d125      	bne.n	800855e <UART_SetConfig+0x1aa>
 8008512:	4b5b      	ldr	r3, [pc, #364]	; (8008680 <UART_SetConfig+0x2cc>)
 8008514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008518:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800851c:	2b30      	cmp	r3, #48	; 0x30
 800851e:	d016      	beq.n	800854e <UART_SetConfig+0x19a>
 8008520:	2b30      	cmp	r3, #48	; 0x30
 8008522:	d818      	bhi.n	8008556 <UART_SetConfig+0x1a2>
 8008524:	2b20      	cmp	r3, #32
 8008526:	d00a      	beq.n	800853e <UART_SetConfig+0x18a>
 8008528:	2b20      	cmp	r3, #32
 800852a:	d814      	bhi.n	8008556 <UART_SetConfig+0x1a2>
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <UART_SetConfig+0x182>
 8008530:	2b10      	cmp	r3, #16
 8008532:	d008      	beq.n	8008546 <UART_SetConfig+0x192>
 8008534:	e00f      	b.n	8008556 <UART_SetConfig+0x1a2>
 8008536:	2300      	movs	r3, #0
 8008538:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800853c:	e0ad      	b.n	800869a <UART_SetConfig+0x2e6>
 800853e:	2302      	movs	r3, #2
 8008540:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008544:	e0a9      	b.n	800869a <UART_SetConfig+0x2e6>
 8008546:	2304      	movs	r3, #4
 8008548:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800854c:	e0a5      	b.n	800869a <UART_SetConfig+0x2e6>
 800854e:	2308      	movs	r3, #8
 8008550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008554:	e0a1      	b.n	800869a <UART_SetConfig+0x2e6>
 8008556:	2310      	movs	r3, #16
 8008558:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800855c:	e09d      	b.n	800869a <UART_SetConfig+0x2e6>
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a4a      	ldr	r2, [pc, #296]	; (800868c <UART_SetConfig+0x2d8>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d125      	bne.n	80085b4 <UART_SetConfig+0x200>
 8008568:	4b45      	ldr	r3, [pc, #276]	; (8008680 <UART_SetConfig+0x2cc>)
 800856a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800856e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008572:	2bc0      	cmp	r3, #192	; 0xc0
 8008574:	d016      	beq.n	80085a4 <UART_SetConfig+0x1f0>
 8008576:	2bc0      	cmp	r3, #192	; 0xc0
 8008578:	d818      	bhi.n	80085ac <UART_SetConfig+0x1f8>
 800857a:	2b80      	cmp	r3, #128	; 0x80
 800857c:	d00a      	beq.n	8008594 <UART_SetConfig+0x1e0>
 800857e:	2b80      	cmp	r3, #128	; 0x80
 8008580:	d814      	bhi.n	80085ac <UART_SetConfig+0x1f8>
 8008582:	2b00      	cmp	r3, #0
 8008584:	d002      	beq.n	800858c <UART_SetConfig+0x1d8>
 8008586:	2b40      	cmp	r3, #64	; 0x40
 8008588:	d008      	beq.n	800859c <UART_SetConfig+0x1e8>
 800858a:	e00f      	b.n	80085ac <UART_SetConfig+0x1f8>
 800858c:	2300      	movs	r3, #0
 800858e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008592:	e082      	b.n	800869a <UART_SetConfig+0x2e6>
 8008594:	2302      	movs	r3, #2
 8008596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800859a:	e07e      	b.n	800869a <UART_SetConfig+0x2e6>
 800859c:	2304      	movs	r3, #4
 800859e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085a2:	e07a      	b.n	800869a <UART_SetConfig+0x2e6>
 80085a4:	2308      	movs	r3, #8
 80085a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085aa:	e076      	b.n	800869a <UART_SetConfig+0x2e6>
 80085ac:	2310      	movs	r3, #16
 80085ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085b2:	e072      	b.n	800869a <UART_SetConfig+0x2e6>
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a35      	ldr	r2, [pc, #212]	; (8008690 <UART_SetConfig+0x2dc>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d12a      	bne.n	8008614 <UART_SetConfig+0x260>
 80085be:	4b30      	ldr	r3, [pc, #192]	; (8008680 <UART_SetConfig+0x2cc>)
 80085c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085cc:	d01a      	beq.n	8008604 <UART_SetConfig+0x250>
 80085ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085d2:	d81b      	bhi.n	800860c <UART_SetConfig+0x258>
 80085d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085d8:	d00c      	beq.n	80085f4 <UART_SetConfig+0x240>
 80085da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085de:	d815      	bhi.n	800860c <UART_SetConfig+0x258>
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d003      	beq.n	80085ec <UART_SetConfig+0x238>
 80085e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e8:	d008      	beq.n	80085fc <UART_SetConfig+0x248>
 80085ea:	e00f      	b.n	800860c <UART_SetConfig+0x258>
 80085ec:	2300      	movs	r3, #0
 80085ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085f2:	e052      	b.n	800869a <UART_SetConfig+0x2e6>
 80085f4:	2302      	movs	r3, #2
 80085f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80085fa:	e04e      	b.n	800869a <UART_SetConfig+0x2e6>
 80085fc:	2304      	movs	r3, #4
 80085fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008602:	e04a      	b.n	800869a <UART_SetConfig+0x2e6>
 8008604:	2308      	movs	r3, #8
 8008606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800860a:	e046      	b.n	800869a <UART_SetConfig+0x2e6>
 800860c:	2310      	movs	r3, #16
 800860e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008612:	e042      	b.n	800869a <UART_SetConfig+0x2e6>
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a17      	ldr	r2, [pc, #92]	; (8008678 <UART_SetConfig+0x2c4>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d13a      	bne.n	8008694 <UART_SetConfig+0x2e0>
 800861e:	4b18      	ldr	r3, [pc, #96]	; (8008680 <UART_SetConfig+0x2cc>)
 8008620:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008624:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008628:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800862c:	d01a      	beq.n	8008664 <UART_SetConfig+0x2b0>
 800862e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008632:	d81b      	bhi.n	800866c <UART_SetConfig+0x2b8>
 8008634:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008638:	d00c      	beq.n	8008654 <UART_SetConfig+0x2a0>
 800863a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800863e:	d815      	bhi.n	800866c <UART_SetConfig+0x2b8>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d003      	beq.n	800864c <UART_SetConfig+0x298>
 8008644:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008648:	d008      	beq.n	800865c <UART_SetConfig+0x2a8>
 800864a:	e00f      	b.n	800866c <UART_SetConfig+0x2b8>
 800864c:	2300      	movs	r3, #0
 800864e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008652:	e022      	b.n	800869a <UART_SetConfig+0x2e6>
 8008654:	2302      	movs	r3, #2
 8008656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800865a:	e01e      	b.n	800869a <UART_SetConfig+0x2e6>
 800865c:	2304      	movs	r3, #4
 800865e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008662:	e01a      	b.n	800869a <UART_SetConfig+0x2e6>
 8008664:	2308      	movs	r3, #8
 8008666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800866a:	e016      	b.n	800869a <UART_SetConfig+0x2e6>
 800866c:	2310      	movs	r3, #16
 800866e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008672:	e012      	b.n	800869a <UART_SetConfig+0x2e6>
 8008674:	efff69f3 	.word	0xefff69f3
 8008678:	40008000 	.word	0x40008000
 800867c:	40013800 	.word	0x40013800
 8008680:	40021000 	.word	0x40021000
 8008684:	40004400 	.word	0x40004400
 8008688:	40004800 	.word	0x40004800
 800868c:	40004c00 	.word	0x40004c00
 8008690:	40005000 	.word	0x40005000
 8008694:	2310      	movs	r3, #16
 8008696:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a9f      	ldr	r2, [pc, #636]	; (800891c <UART_SetConfig+0x568>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d17a      	bne.n	800879a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80086a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086a8:	2b08      	cmp	r3, #8
 80086aa:	d824      	bhi.n	80086f6 <UART_SetConfig+0x342>
 80086ac:	a201      	add	r2, pc, #4	; (adr r2, 80086b4 <UART_SetConfig+0x300>)
 80086ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086b2:	bf00      	nop
 80086b4:	080086d9 	.word	0x080086d9
 80086b8:	080086f7 	.word	0x080086f7
 80086bc:	080086e1 	.word	0x080086e1
 80086c0:	080086f7 	.word	0x080086f7
 80086c4:	080086e7 	.word	0x080086e7
 80086c8:	080086f7 	.word	0x080086f7
 80086cc:	080086f7 	.word	0x080086f7
 80086d0:	080086f7 	.word	0x080086f7
 80086d4:	080086ef 	.word	0x080086ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d8:	f7fc fd60 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 80086dc:	61f8      	str	r0, [r7, #28]
        break;
 80086de:	e010      	b.n	8008702 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e0:	4b8f      	ldr	r3, [pc, #572]	; (8008920 <UART_SetConfig+0x56c>)
 80086e2:	61fb      	str	r3, [r7, #28]
        break;
 80086e4:	e00d      	b.n	8008702 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086e6:	f7fc fcc1 	bl	800506c <HAL_RCC_GetSysClockFreq>
 80086ea:	61f8      	str	r0, [r7, #28]
        break;
 80086ec:	e009      	b.n	8008702 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f2:	61fb      	str	r3, [r7, #28]
        break;
 80086f4:	e005      	b.n	8008702 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008700:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	2b00      	cmp	r3, #0
 8008706:	f000 80fb 	beq.w	8008900 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	685a      	ldr	r2, [r3, #4]
 800870e:	4613      	mov	r3, r2
 8008710:	005b      	lsls	r3, r3, #1
 8008712:	4413      	add	r3, r2
 8008714:	69fa      	ldr	r2, [r7, #28]
 8008716:	429a      	cmp	r2, r3
 8008718:	d305      	bcc.n	8008726 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008720:	69fa      	ldr	r2, [r7, #28]
 8008722:	429a      	cmp	r2, r3
 8008724:	d903      	bls.n	800872e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800872c:	e0e8      	b.n	8008900 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800872e:	69fb      	ldr	r3, [r7, #28]
 8008730:	2200      	movs	r2, #0
 8008732:	461c      	mov	r4, r3
 8008734:	4615      	mov	r5, r2
 8008736:	f04f 0200 	mov.w	r2, #0
 800873a:	f04f 0300 	mov.w	r3, #0
 800873e:	022b      	lsls	r3, r5, #8
 8008740:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008744:	0222      	lsls	r2, r4, #8
 8008746:	68f9      	ldr	r1, [r7, #12]
 8008748:	6849      	ldr	r1, [r1, #4]
 800874a:	0849      	lsrs	r1, r1, #1
 800874c:	2000      	movs	r0, #0
 800874e:	4688      	mov	r8, r1
 8008750:	4681      	mov	r9, r0
 8008752:	eb12 0a08 	adds.w	sl, r2, r8
 8008756:	eb43 0b09 	adc.w	fp, r3, r9
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	685b      	ldr	r3, [r3, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	603b      	str	r3, [r7, #0]
 8008762:	607a      	str	r2, [r7, #4]
 8008764:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008768:	4650      	mov	r0, sl
 800876a:	4659      	mov	r1, fp
 800876c:	f7f8 fa6c 	bl	8000c48 <__aeabi_uldivmod>
 8008770:	4602      	mov	r2, r0
 8008772:	460b      	mov	r3, r1
 8008774:	4613      	mov	r3, r2
 8008776:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008778:	69bb      	ldr	r3, [r7, #24]
 800877a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800877e:	d308      	bcc.n	8008792 <UART_SetConfig+0x3de>
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008786:	d204      	bcs.n	8008792 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	60da      	str	r2, [r3, #12]
 8008790:	e0b6      	b.n	8008900 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008798:	e0b2      	b.n	8008900 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	69db      	ldr	r3, [r3, #28]
 800879e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80087a2:	d15e      	bne.n	8008862 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80087a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087a8:	2b08      	cmp	r3, #8
 80087aa:	d828      	bhi.n	80087fe <UART_SetConfig+0x44a>
 80087ac:	a201      	add	r2, pc, #4	; (adr r2, 80087b4 <UART_SetConfig+0x400>)
 80087ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087b2:	bf00      	nop
 80087b4:	080087d9 	.word	0x080087d9
 80087b8:	080087e1 	.word	0x080087e1
 80087bc:	080087e9 	.word	0x080087e9
 80087c0:	080087ff 	.word	0x080087ff
 80087c4:	080087ef 	.word	0x080087ef
 80087c8:	080087ff 	.word	0x080087ff
 80087cc:	080087ff 	.word	0x080087ff
 80087d0:	080087ff 	.word	0x080087ff
 80087d4:	080087f7 	.word	0x080087f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087d8:	f7fc fce0 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 80087dc:	61f8      	str	r0, [r7, #28]
        break;
 80087de:	e014      	b.n	800880a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80087e0:	f7fc fcf2 	bl	80051c8 <HAL_RCC_GetPCLK2Freq>
 80087e4:	61f8      	str	r0, [r7, #28]
        break;
 80087e6:	e010      	b.n	800880a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80087e8:	4b4d      	ldr	r3, [pc, #308]	; (8008920 <UART_SetConfig+0x56c>)
 80087ea:	61fb      	str	r3, [r7, #28]
        break;
 80087ec:	e00d      	b.n	800880a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087ee:	f7fc fc3d 	bl	800506c <HAL_RCC_GetSysClockFreq>
 80087f2:	61f8      	str	r0, [r7, #28]
        break;
 80087f4:	e009      	b.n	800880a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087fa:	61fb      	str	r3, [r7, #28]
        break;
 80087fc:	e005      	b.n	800880a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80087fe:	2300      	movs	r3, #0
 8008800:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008802:	2301      	movs	r3, #1
 8008804:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008808:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d077      	beq.n	8008900 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	005a      	lsls	r2, r3, #1
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	085b      	lsrs	r3, r3, #1
 800881a:	441a      	add	r2, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008826:	69bb      	ldr	r3, [r7, #24]
 8008828:	2b0f      	cmp	r3, #15
 800882a:	d916      	bls.n	800885a <UART_SetConfig+0x4a6>
 800882c:	69bb      	ldr	r3, [r7, #24]
 800882e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008832:	d212      	bcs.n	800885a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	b29b      	uxth	r3, r3
 8008838:	f023 030f 	bic.w	r3, r3, #15
 800883c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800883e:	69bb      	ldr	r3, [r7, #24]
 8008840:	085b      	lsrs	r3, r3, #1
 8008842:	b29b      	uxth	r3, r3
 8008844:	f003 0307 	and.w	r3, r3, #7
 8008848:	b29a      	uxth	r2, r3
 800884a:	8afb      	ldrh	r3, [r7, #22]
 800884c:	4313      	orrs	r3, r2
 800884e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	8afa      	ldrh	r2, [r7, #22]
 8008856:	60da      	str	r2, [r3, #12]
 8008858:	e052      	b.n	8008900 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008860:	e04e      	b.n	8008900 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008862:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008866:	2b08      	cmp	r3, #8
 8008868:	d827      	bhi.n	80088ba <UART_SetConfig+0x506>
 800886a:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <UART_SetConfig+0x4bc>)
 800886c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008870:	08008895 	.word	0x08008895
 8008874:	0800889d 	.word	0x0800889d
 8008878:	080088a5 	.word	0x080088a5
 800887c:	080088bb 	.word	0x080088bb
 8008880:	080088ab 	.word	0x080088ab
 8008884:	080088bb 	.word	0x080088bb
 8008888:	080088bb 	.word	0x080088bb
 800888c:	080088bb 	.word	0x080088bb
 8008890:	080088b3 	.word	0x080088b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008894:	f7fc fc82 	bl	800519c <HAL_RCC_GetPCLK1Freq>
 8008898:	61f8      	str	r0, [r7, #28]
        break;
 800889a:	e014      	b.n	80088c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800889c:	f7fc fc94 	bl	80051c8 <HAL_RCC_GetPCLK2Freq>
 80088a0:	61f8      	str	r0, [r7, #28]
        break;
 80088a2:	e010      	b.n	80088c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088a4:	4b1e      	ldr	r3, [pc, #120]	; (8008920 <UART_SetConfig+0x56c>)
 80088a6:	61fb      	str	r3, [r7, #28]
        break;
 80088a8:	e00d      	b.n	80088c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088aa:	f7fc fbdf 	bl	800506c <HAL_RCC_GetSysClockFreq>
 80088ae:	61f8      	str	r0, [r7, #28]
        break;
 80088b0:	e009      	b.n	80088c6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088b6:	61fb      	str	r3, [r7, #28]
        break;
 80088b8:	e005      	b.n	80088c6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80088c4:	bf00      	nop
    }

    if (pclk != 0U)
 80088c6:	69fb      	ldr	r3, [r7, #28]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d019      	beq.n	8008900 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	085a      	lsrs	r2, r3, #1
 80088d2:	69fb      	ldr	r3, [r7, #28]
 80088d4:	441a      	add	r2, r3
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	fbb2 f3f3 	udiv	r3, r2, r3
 80088de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088e0:	69bb      	ldr	r3, [r7, #24]
 80088e2:	2b0f      	cmp	r3, #15
 80088e4:	d909      	bls.n	80088fa <UART_SetConfig+0x546>
 80088e6:	69bb      	ldr	r3, [r7, #24]
 80088e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ec:	d205      	bcs.n	80088fa <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	b29a      	uxth	r2, r3
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	60da      	str	r2, [r3, #12]
 80088f8:	e002      	b.n	8008900 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2200      	movs	r2, #0
 800890a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800890c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008910:	4618      	mov	r0, r3
 8008912:	3728      	adds	r7, #40	; 0x28
 8008914:	46bd      	mov	sp, r7
 8008916:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800891a:	bf00      	nop
 800891c:	40008000 	.word	0x40008000
 8008920:	00f42400 	.word	0x00f42400

08008924 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008930:	f003 0301 	and.w	r3, r3, #1
 8008934:	2b00      	cmp	r3, #0
 8008936:	d00a      	beq.n	800894e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	685b      	ldr	r3, [r3, #4]
 800893e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d00a      	beq.n	8008970 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008974:	f003 0304 	and.w	r3, r3, #4
 8008978:	2b00      	cmp	r3, #0
 800897a:	d00a      	beq.n	8008992 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	430a      	orrs	r2, r1
 8008990:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008996:	f003 0308 	and.w	r3, r3, #8
 800899a:	2b00      	cmp	r3, #0
 800899c:	d00a      	beq.n	80089b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	430a      	orrs	r2, r1
 80089b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089b8:	f003 0310 	and.w	r3, r3, #16
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d00a      	beq.n	80089d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	430a      	orrs	r2, r1
 80089d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089da:	f003 0320 	and.w	r3, r3, #32
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d00a      	beq.n	80089f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d01a      	beq.n	8008a3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	685b      	ldr	r3, [r3, #4]
 8008a0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	430a      	orrs	r2, r1
 8008a18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a22:	d10a      	bne.n	8008a3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	685b      	ldr	r3, [r3, #4]
 8008a2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	430a      	orrs	r2, r1
 8008a38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d00a      	beq.n	8008a5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	430a      	orrs	r2, r1
 8008a5a:	605a      	str	r2, [r3, #4]
  }
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b086      	sub	sp, #24
 8008a6c:	af02      	add	r7, sp, #8
 8008a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008a78:	f7fa f972 	bl	8002d60 <HAL_GetTick>
 8008a7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f003 0308 	and.w	r3, r3, #8
 8008a88:	2b08      	cmp	r3, #8
 8008a8a:	d10e      	bne.n	8008aaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008a90:	9300      	str	r3, [sp, #0]
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	f000 f82d 	bl	8008afa <UART_WaitOnFlagUntilTimeout>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e023      	b.n	8008af2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	f003 0304 	and.w	r3, r3, #4
 8008ab4:	2b04      	cmp	r3, #4
 8008ab6:	d10e      	bne.n	8008ad6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008abc:	9300      	str	r3, [sp, #0]
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008ac6:	6878      	ldr	r0, [r7, #4]
 8008ac8:	f000 f817 	bl	8008afa <UART_WaitOnFlagUntilTimeout>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d001      	beq.n	8008ad6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ad2:	2303      	movs	r3, #3
 8008ad4:	e00d      	b.n	8008af2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2220      	movs	r2, #32
 8008ada:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2220      	movs	r2, #32
 8008ae0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2200      	movs	r2, #0
 8008aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3710      	adds	r7, #16
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}

08008afa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008afa:	b580      	push	{r7, lr}
 8008afc:	b09c      	sub	sp, #112	; 0x70
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	60f8      	str	r0, [r7, #12]
 8008b02:	60b9      	str	r1, [r7, #8]
 8008b04:	603b      	str	r3, [r7, #0]
 8008b06:	4613      	mov	r3, r2
 8008b08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008b0a:	e0a5      	b.n	8008c58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008b0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b12:	f000 80a1 	beq.w	8008c58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008b16:	f7fa f923 	bl	8002d60 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008b22:	429a      	cmp	r2, r3
 8008b24:	d302      	bcc.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x32>
 8008b26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d13e      	bne.n	8008baa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008b40:	667b      	str	r3, [r7, #100]	; 0x64
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008b4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b4c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008b50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008b58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e6      	bne.n	8008b2c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3308      	adds	r3, #8
 8008b64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	663b      	str	r3, [r7, #96]	; 0x60
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008b7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e5      	bne.n	8008b5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	2220      	movs	r2, #32
 8008b96:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	2220      	movs	r2, #32
 8008b9c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008ba6:	2303      	movs	r3, #3
 8008ba8:	e067      	b.n	8008c7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d04f      	beq.n	8008c58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	69db      	ldr	r3, [r3, #28]
 8008bbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008bc6:	d147      	bne.n	8008c58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bd0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bda:	e853 3f00 	ldrex	r3, [r3]
 8008bde:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008be6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	461a      	mov	r2, r3
 8008bee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008bf2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008bf6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008bf8:	e841 2300 	strex	r3, r2, [r1]
 8008bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d1e6      	bne.n	8008bd2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	3308      	adds	r3, #8
 8008c0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	613b      	str	r3, [r7, #16]
   return(result);
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	f023 0301 	bic.w	r3, r3, #1
 8008c1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	3308      	adds	r3, #8
 8008c22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008c24:	623a      	str	r2, [r7, #32]
 8008c26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	69f9      	ldr	r1, [r7, #28]
 8008c2a:	6a3a      	ldr	r2, [r7, #32]
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	61bb      	str	r3, [r7, #24]
   return(result);
 8008c32:	69bb      	ldr	r3, [r7, #24]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e5      	bne.n	8008c04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2220      	movs	r2, #32
 8008c3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2220      	movs	r2, #32
 8008c42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008c54:	2303      	movs	r3, #3
 8008c56:	e010      	b.n	8008c7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	69da      	ldr	r2, [r3, #28]
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	4013      	ands	r3, r2
 8008c62:	68ba      	ldr	r2, [r7, #8]
 8008c64:	429a      	cmp	r2, r3
 8008c66:	bf0c      	ite	eq
 8008c68:	2301      	moveq	r3, #1
 8008c6a:	2300      	movne	r3, #0
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	461a      	mov	r2, r3
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	f43f af4a 	beq.w	8008b0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008c78:	2300      	movs	r3, #0
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3770      	adds	r7, #112	; 0x70
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c82:	b480      	push	{r7}
 8008c84:	b089      	sub	sp, #36	; 0x24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	e853 3f00 	ldrex	r3, [r3]
 8008c96:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008c9e:	61fb      	str	r3, [r7, #28]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	61bb      	str	r3, [r7, #24]
 8008caa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cac:	6979      	ldr	r1, [r7, #20]
 8008cae:	69ba      	ldr	r2, [r7, #24]
 8008cb0:	e841 2300 	strex	r3, r2, [r1]
 8008cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8008cb6:	693b      	ldr	r3, [r7, #16]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1e6      	bne.n	8008c8a <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2220      	movs	r2, #32
 8008cc0:	679a      	str	r2, [r3, #120]	; 0x78
}
 8008cc2:	bf00      	nop
 8008cc4:	3724      	adds	r7, #36	; 0x24
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b095      	sub	sp, #84	; 0x54
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ce6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8008cf6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008cfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e6      	bne.n	8008cd6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	3308      	adds	r3, #8
 8008d0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d10:	6a3b      	ldr	r3, [r7, #32]
 8008d12:	e853 3f00 	ldrex	r3, [r3]
 8008d16:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	f023 0301 	bic.w	r3, r3, #1
 8008d1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	3308      	adds	r3, #8
 8008d26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d30:	e841 2300 	strex	r3, r2, [r1]
 8008d34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d1e5      	bne.n	8008d08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d118      	bne.n	8008d76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d52:	68bb      	ldr	r3, [r7, #8]
 8008d54:	f023 0310 	bic.w	r3, r3, #16
 8008d58:	647b      	str	r3, [r7, #68]	; 0x44
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	461a      	mov	r2, r3
 8008d60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d62:	61bb      	str	r3, [r7, #24]
 8008d64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	6979      	ldr	r1, [r7, #20]
 8008d68:	69ba      	ldr	r2, [r7, #24]
 8008d6a:	e841 2300 	strex	r3, r2, [r1]
 8008d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d1e6      	bne.n	8008d44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	2220      	movs	r2, #32
 8008d7a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	2200      	movs	r2, #0
 8008d86:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008d88:	bf00      	nop
 8008d8a:	3754      	adds	r7, #84	; 0x54
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b090      	sub	sp, #64	; 0x40
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008da0:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 0320 	and.w	r3, r3, #32
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d137      	bne.n	8008e20 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008db2:	2200      	movs	r2, #0
 8008db4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc2:	e853 3f00 	ldrex	r3, [r3]
 8008dc6:	623b      	str	r3, [r7, #32]
   return(result);
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008dce:	63bb      	str	r3, [r7, #56]	; 0x38
 8008dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	3308      	adds	r3, #8
 8008dd6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008dd8:	633a      	str	r2, [r7, #48]	; 0x30
 8008dda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ddc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008de0:	e841 2300 	strex	r3, r2, [r1]
 8008de4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d1e5      	bne.n	8008db8 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	693b      	ldr	r3, [r7, #16]
 8008df4:	e853 3f00 	ldrex	r3, [r3]
 8008df8:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
 8008e02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0e:	69b9      	ldr	r1, [r7, #24]
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	e841 2300 	strex	r3, r2, [r1]
 8008e16:	617b      	str	r3, [r7, #20]
   return(result);
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1e6      	bne.n	8008dec <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008e1e:	e002      	b.n	8008e26 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008e20:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008e22:	f7ff fa9d 	bl	8008360 <HAL_UART_TxCpltCallback>
}
 8008e26:	bf00      	nop
 8008e28:	3740      	adds	r7, #64	; 0x40
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}

08008e2e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008e2e:	b580      	push	{r7, lr}
 8008e30:	b084      	sub	sp, #16
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008e3c:	68f8      	ldr	r0, [r7, #12]
 8008e3e:	f7ff fa99 	bl	8008374 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e42:	bf00      	nop
 8008e44:	3710      	adds	r7, #16
 8008e46:	46bd      	mov	sp, r7
 8008e48:	bd80      	pop	{r7, pc}

08008e4a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b086      	sub	sp, #24
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e5c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008e5e:	697b      	ldr	r3, [r7, #20]
 8008e60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008e62:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e6e:	2b80      	cmp	r3, #128	; 0x80
 8008e70:	d109      	bne.n	8008e86 <UART_DMAError+0x3c>
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b21      	cmp	r3, #33	; 0x21
 8008e76:	d106      	bne.n	8008e86 <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008e78:	697b      	ldr	r3, [r7, #20]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8008e80:	6978      	ldr	r0, [r7, #20]
 8008e82:	f7ff fefe 	bl	8008c82 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008e86:	697b      	ldr	r3, [r7, #20]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e90:	2b40      	cmp	r3, #64	; 0x40
 8008e92:	d109      	bne.n	8008ea8 <UART_DMAError+0x5e>
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2b22      	cmp	r3, #34	; 0x22
 8008e98:	d106      	bne.n	8008ea8 <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8008ea2:	6978      	ldr	r0, [r7, #20]
 8008ea4:	f7ff ff13 	bl	8008cce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008eae:	f043 0210 	orr.w	r2, r3, #16
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008eb8:	6978      	ldr	r0, [r7, #20]
 8008eba:	f7ff fa65 	bl	8008388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ebe:	bf00      	nop
 8008ec0:	3718      	adds	r7, #24
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}

08008ec6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008ec6:	b580      	push	{r7, lr}
 8008ec8:	b084      	sub	sp, #16
 8008eca:	af00      	add	r7, sp, #0
 8008ecc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f7ff fa4f 	bl	8008388 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008eea:	bf00      	nop
 8008eec:	3710      	adds	r7, #16
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ef2:	b580      	push	{r7, lr}
 8008ef4:	b088      	sub	sp, #32
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f08:	68bb      	ldr	r3, [r7, #8]
 8008f0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f0e:	61fb      	str	r3, [r7, #28]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	61bb      	str	r3, [r7, #24]
 8008f1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	6979      	ldr	r1, [r7, #20]
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	613b      	str	r3, [r7, #16]
   return(result);
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e6      	bne.n	8008efa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2220      	movs	r2, #32
 8008f30:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2200      	movs	r2, #0
 8008f36:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f7ff fa11 	bl	8008360 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008f3e:	bf00      	nop
 8008f40:	3720      	adds	r7, #32
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bd80      	pop	{r7, pc}

08008f46 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008f46:	b480      	push	{r7}
 8008f48:	b083      	sub	sp, #12
 8008f4a:	af00      	add	r7, sp, #0
 8008f4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008f4e:	bf00      	nop
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr
	...

08008f5c <__errno>:
 8008f5c:	4b01      	ldr	r3, [pc, #4]	; (8008f64 <__errno+0x8>)
 8008f5e:	6818      	ldr	r0, [r3, #0]
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	2000000c 	.word	0x2000000c

08008f68 <__libc_init_array>:
 8008f68:	b570      	push	{r4, r5, r6, lr}
 8008f6a:	4d0d      	ldr	r5, [pc, #52]	; (8008fa0 <__libc_init_array+0x38>)
 8008f6c:	4c0d      	ldr	r4, [pc, #52]	; (8008fa4 <__libc_init_array+0x3c>)
 8008f6e:	1b64      	subs	r4, r4, r5
 8008f70:	10a4      	asrs	r4, r4, #2
 8008f72:	2600      	movs	r6, #0
 8008f74:	42a6      	cmp	r6, r4
 8008f76:	d109      	bne.n	8008f8c <__libc_init_array+0x24>
 8008f78:	4d0b      	ldr	r5, [pc, #44]	; (8008fa8 <__libc_init_array+0x40>)
 8008f7a:	4c0c      	ldr	r4, [pc, #48]	; (8008fac <__libc_init_array+0x44>)
 8008f7c:	f004 f99e 	bl	800d2bc <_init>
 8008f80:	1b64      	subs	r4, r4, r5
 8008f82:	10a4      	asrs	r4, r4, #2
 8008f84:	2600      	movs	r6, #0
 8008f86:	42a6      	cmp	r6, r4
 8008f88:	d105      	bne.n	8008f96 <__libc_init_array+0x2e>
 8008f8a:	bd70      	pop	{r4, r5, r6, pc}
 8008f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f90:	4798      	blx	r3
 8008f92:	3601      	adds	r6, #1
 8008f94:	e7ee      	b.n	8008f74 <__libc_init_array+0xc>
 8008f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f9a:	4798      	blx	r3
 8008f9c:	3601      	adds	r6, #1
 8008f9e:	e7f2      	b.n	8008f86 <__libc_init_array+0x1e>
 8008fa0:	0800d950 	.word	0x0800d950
 8008fa4:	0800d950 	.word	0x0800d950
 8008fa8:	0800d950 	.word	0x0800d950
 8008fac:	0800d954 	.word	0x0800d954

08008fb0 <memset>:
 8008fb0:	4402      	add	r2, r0
 8008fb2:	4603      	mov	r3, r0
 8008fb4:	4293      	cmp	r3, r2
 8008fb6:	d100      	bne.n	8008fba <memset+0xa>
 8008fb8:	4770      	bx	lr
 8008fba:	f803 1b01 	strb.w	r1, [r3], #1
 8008fbe:	e7f9      	b.n	8008fb4 <memset+0x4>

08008fc0 <__cvt>:
 8008fc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fc4:	ec55 4b10 	vmov	r4, r5, d0
 8008fc8:	2d00      	cmp	r5, #0
 8008fca:	460e      	mov	r6, r1
 8008fcc:	4619      	mov	r1, r3
 8008fce:	462b      	mov	r3, r5
 8008fd0:	bfbb      	ittet	lt
 8008fd2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008fd6:	461d      	movlt	r5, r3
 8008fd8:	2300      	movge	r3, #0
 8008fda:	232d      	movlt	r3, #45	; 0x2d
 8008fdc:	700b      	strb	r3, [r1, #0]
 8008fde:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fe0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008fe4:	4691      	mov	r9, r2
 8008fe6:	f023 0820 	bic.w	r8, r3, #32
 8008fea:	bfbc      	itt	lt
 8008fec:	4622      	movlt	r2, r4
 8008fee:	4614      	movlt	r4, r2
 8008ff0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ff4:	d005      	beq.n	8009002 <__cvt+0x42>
 8008ff6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ffa:	d100      	bne.n	8008ffe <__cvt+0x3e>
 8008ffc:	3601      	adds	r6, #1
 8008ffe:	2102      	movs	r1, #2
 8009000:	e000      	b.n	8009004 <__cvt+0x44>
 8009002:	2103      	movs	r1, #3
 8009004:	ab03      	add	r3, sp, #12
 8009006:	9301      	str	r3, [sp, #4]
 8009008:	ab02      	add	r3, sp, #8
 800900a:	9300      	str	r3, [sp, #0]
 800900c:	ec45 4b10 	vmov	d0, r4, r5
 8009010:	4653      	mov	r3, sl
 8009012:	4632      	mov	r2, r6
 8009014:	f000 fe00 	bl	8009c18 <_dtoa_r>
 8009018:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800901c:	4607      	mov	r7, r0
 800901e:	d102      	bne.n	8009026 <__cvt+0x66>
 8009020:	f019 0f01 	tst.w	r9, #1
 8009024:	d022      	beq.n	800906c <__cvt+0xac>
 8009026:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800902a:	eb07 0906 	add.w	r9, r7, r6
 800902e:	d110      	bne.n	8009052 <__cvt+0x92>
 8009030:	783b      	ldrb	r3, [r7, #0]
 8009032:	2b30      	cmp	r3, #48	; 0x30
 8009034:	d10a      	bne.n	800904c <__cvt+0x8c>
 8009036:	2200      	movs	r2, #0
 8009038:	2300      	movs	r3, #0
 800903a:	4620      	mov	r0, r4
 800903c:	4629      	mov	r1, r5
 800903e:	f7f7 fd43 	bl	8000ac8 <__aeabi_dcmpeq>
 8009042:	b918      	cbnz	r0, 800904c <__cvt+0x8c>
 8009044:	f1c6 0601 	rsb	r6, r6, #1
 8009048:	f8ca 6000 	str.w	r6, [sl]
 800904c:	f8da 3000 	ldr.w	r3, [sl]
 8009050:	4499      	add	r9, r3
 8009052:	2200      	movs	r2, #0
 8009054:	2300      	movs	r3, #0
 8009056:	4620      	mov	r0, r4
 8009058:	4629      	mov	r1, r5
 800905a:	f7f7 fd35 	bl	8000ac8 <__aeabi_dcmpeq>
 800905e:	b108      	cbz	r0, 8009064 <__cvt+0xa4>
 8009060:	f8cd 900c 	str.w	r9, [sp, #12]
 8009064:	2230      	movs	r2, #48	; 0x30
 8009066:	9b03      	ldr	r3, [sp, #12]
 8009068:	454b      	cmp	r3, r9
 800906a:	d307      	bcc.n	800907c <__cvt+0xbc>
 800906c:	9b03      	ldr	r3, [sp, #12]
 800906e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009070:	1bdb      	subs	r3, r3, r7
 8009072:	4638      	mov	r0, r7
 8009074:	6013      	str	r3, [r2, #0]
 8009076:	b004      	add	sp, #16
 8009078:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800907c:	1c59      	adds	r1, r3, #1
 800907e:	9103      	str	r1, [sp, #12]
 8009080:	701a      	strb	r2, [r3, #0]
 8009082:	e7f0      	b.n	8009066 <__cvt+0xa6>

08009084 <__exponent>:
 8009084:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009086:	4603      	mov	r3, r0
 8009088:	2900      	cmp	r1, #0
 800908a:	bfb8      	it	lt
 800908c:	4249      	neglt	r1, r1
 800908e:	f803 2b02 	strb.w	r2, [r3], #2
 8009092:	bfb4      	ite	lt
 8009094:	222d      	movlt	r2, #45	; 0x2d
 8009096:	222b      	movge	r2, #43	; 0x2b
 8009098:	2909      	cmp	r1, #9
 800909a:	7042      	strb	r2, [r0, #1]
 800909c:	dd2a      	ble.n	80090f4 <__exponent+0x70>
 800909e:	f10d 0407 	add.w	r4, sp, #7
 80090a2:	46a4      	mov	ip, r4
 80090a4:	270a      	movs	r7, #10
 80090a6:	46a6      	mov	lr, r4
 80090a8:	460a      	mov	r2, r1
 80090aa:	fb91 f6f7 	sdiv	r6, r1, r7
 80090ae:	fb07 1516 	mls	r5, r7, r6, r1
 80090b2:	3530      	adds	r5, #48	; 0x30
 80090b4:	2a63      	cmp	r2, #99	; 0x63
 80090b6:	f104 34ff 	add.w	r4, r4, #4294967295
 80090ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090be:	4631      	mov	r1, r6
 80090c0:	dcf1      	bgt.n	80090a6 <__exponent+0x22>
 80090c2:	3130      	adds	r1, #48	; 0x30
 80090c4:	f1ae 0502 	sub.w	r5, lr, #2
 80090c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80090cc:	1c44      	adds	r4, r0, #1
 80090ce:	4629      	mov	r1, r5
 80090d0:	4561      	cmp	r1, ip
 80090d2:	d30a      	bcc.n	80090ea <__exponent+0x66>
 80090d4:	f10d 0209 	add.w	r2, sp, #9
 80090d8:	eba2 020e 	sub.w	r2, r2, lr
 80090dc:	4565      	cmp	r5, ip
 80090de:	bf88      	it	hi
 80090e0:	2200      	movhi	r2, #0
 80090e2:	4413      	add	r3, r2
 80090e4:	1a18      	subs	r0, r3, r0
 80090e6:	b003      	add	sp, #12
 80090e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80090ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 80090f2:	e7ed      	b.n	80090d0 <__exponent+0x4c>
 80090f4:	2330      	movs	r3, #48	; 0x30
 80090f6:	3130      	adds	r1, #48	; 0x30
 80090f8:	7083      	strb	r3, [r0, #2]
 80090fa:	70c1      	strb	r1, [r0, #3]
 80090fc:	1d03      	adds	r3, r0, #4
 80090fe:	e7f1      	b.n	80090e4 <__exponent+0x60>

08009100 <_printf_float>:
 8009100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009104:	ed2d 8b02 	vpush	{d8}
 8009108:	b08d      	sub	sp, #52	; 0x34
 800910a:	460c      	mov	r4, r1
 800910c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009110:	4616      	mov	r6, r2
 8009112:	461f      	mov	r7, r3
 8009114:	4605      	mov	r5, r0
 8009116:	f001 fd25 	bl	800ab64 <_localeconv_r>
 800911a:	f8d0 a000 	ldr.w	sl, [r0]
 800911e:	4650      	mov	r0, sl
 8009120:	f7f7 f856 	bl	80001d0 <strlen>
 8009124:	2300      	movs	r3, #0
 8009126:	930a      	str	r3, [sp, #40]	; 0x28
 8009128:	6823      	ldr	r3, [r4, #0]
 800912a:	9305      	str	r3, [sp, #20]
 800912c:	f8d8 3000 	ldr.w	r3, [r8]
 8009130:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009134:	3307      	adds	r3, #7
 8009136:	f023 0307 	bic.w	r3, r3, #7
 800913a:	f103 0208 	add.w	r2, r3, #8
 800913e:	f8c8 2000 	str.w	r2, [r8]
 8009142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009146:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800914a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800914e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009152:	9307      	str	r3, [sp, #28]
 8009154:	f8cd 8018 	str.w	r8, [sp, #24]
 8009158:	ee08 0a10 	vmov	s16, r0
 800915c:	4b9f      	ldr	r3, [pc, #636]	; (80093dc <_printf_float+0x2dc>)
 800915e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009162:	f04f 32ff 	mov.w	r2, #4294967295
 8009166:	f7f7 fce1 	bl	8000b2c <__aeabi_dcmpun>
 800916a:	bb88      	cbnz	r0, 80091d0 <_printf_float+0xd0>
 800916c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009170:	4b9a      	ldr	r3, [pc, #616]	; (80093dc <_printf_float+0x2dc>)
 8009172:	f04f 32ff 	mov.w	r2, #4294967295
 8009176:	f7f7 fcbb 	bl	8000af0 <__aeabi_dcmple>
 800917a:	bb48      	cbnz	r0, 80091d0 <_printf_float+0xd0>
 800917c:	2200      	movs	r2, #0
 800917e:	2300      	movs	r3, #0
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 fcaa 	bl	8000adc <__aeabi_dcmplt>
 8009188:	b110      	cbz	r0, 8009190 <_printf_float+0x90>
 800918a:	232d      	movs	r3, #45	; 0x2d
 800918c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009190:	4b93      	ldr	r3, [pc, #588]	; (80093e0 <_printf_float+0x2e0>)
 8009192:	4894      	ldr	r0, [pc, #592]	; (80093e4 <_printf_float+0x2e4>)
 8009194:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009198:	bf94      	ite	ls
 800919a:	4698      	movls	r8, r3
 800919c:	4680      	movhi	r8, r0
 800919e:	2303      	movs	r3, #3
 80091a0:	6123      	str	r3, [r4, #16]
 80091a2:	9b05      	ldr	r3, [sp, #20]
 80091a4:	f023 0204 	bic.w	r2, r3, #4
 80091a8:	6022      	str	r2, [r4, #0]
 80091aa:	f04f 0900 	mov.w	r9, #0
 80091ae:	9700      	str	r7, [sp, #0]
 80091b0:	4633      	mov	r3, r6
 80091b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80091b4:	4621      	mov	r1, r4
 80091b6:	4628      	mov	r0, r5
 80091b8:	f000 f9d8 	bl	800956c <_printf_common>
 80091bc:	3001      	adds	r0, #1
 80091be:	f040 8090 	bne.w	80092e2 <_printf_float+0x1e2>
 80091c2:	f04f 30ff 	mov.w	r0, #4294967295
 80091c6:	b00d      	add	sp, #52	; 0x34
 80091c8:	ecbd 8b02 	vpop	{d8}
 80091cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d0:	4642      	mov	r2, r8
 80091d2:	464b      	mov	r3, r9
 80091d4:	4640      	mov	r0, r8
 80091d6:	4649      	mov	r1, r9
 80091d8:	f7f7 fca8 	bl	8000b2c <__aeabi_dcmpun>
 80091dc:	b140      	cbz	r0, 80091f0 <_printf_float+0xf0>
 80091de:	464b      	mov	r3, r9
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	bfbc      	itt	lt
 80091e4:	232d      	movlt	r3, #45	; 0x2d
 80091e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80091ea:	487f      	ldr	r0, [pc, #508]	; (80093e8 <_printf_float+0x2e8>)
 80091ec:	4b7f      	ldr	r3, [pc, #508]	; (80093ec <_printf_float+0x2ec>)
 80091ee:	e7d1      	b.n	8009194 <_printf_float+0x94>
 80091f0:	6863      	ldr	r3, [r4, #4]
 80091f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80091f6:	9206      	str	r2, [sp, #24]
 80091f8:	1c5a      	adds	r2, r3, #1
 80091fa:	d13f      	bne.n	800927c <_printf_float+0x17c>
 80091fc:	2306      	movs	r3, #6
 80091fe:	6063      	str	r3, [r4, #4]
 8009200:	9b05      	ldr	r3, [sp, #20]
 8009202:	6861      	ldr	r1, [r4, #4]
 8009204:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009208:	2300      	movs	r3, #0
 800920a:	9303      	str	r3, [sp, #12]
 800920c:	ab0a      	add	r3, sp, #40	; 0x28
 800920e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009212:	ab09      	add	r3, sp, #36	; 0x24
 8009214:	ec49 8b10 	vmov	d0, r8, r9
 8009218:	9300      	str	r3, [sp, #0]
 800921a:	6022      	str	r2, [r4, #0]
 800921c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009220:	4628      	mov	r0, r5
 8009222:	f7ff fecd 	bl	8008fc0 <__cvt>
 8009226:	9b06      	ldr	r3, [sp, #24]
 8009228:	9909      	ldr	r1, [sp, #36]	; 0x24
 800922a:	2b47      	cmp	r3, #71	; 0x47
 800922c:	4680      	mov	r8, r0
 800922e:	d108      	bne.n	8009242 <_printf_float+0x142>
 8009230:	1cc8      	adds	r0, r1, #3
 8009232:	db02      	blt.n	800923a <_printf_float+0x13a>
 8009234:	6863      	ldr	r3, [r4, #4]
 8009236:	4299      	cmp	r1, r3
 8009238:	dd41      	ble.n	80092be <_printf_float+0x1be>
 800923a:	f1ab 0b02 	sub.w	fp, fp, #2
 800923e:	fa5f fb8b 	uxtb.w	fp, fp
 8009242:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009246:	d820      	bhi.n	800928a <_printf_float+0x18a>
 8009248:	3901      	subs	r1, #1
 800924a:	465a      	mov	r2, fp
 800924c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009250:	9109      	str	r1, [sp, #36]	; 0x24
 8009252:	f7ff ff17 	bl	8009084 <__exponent>
 8009256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009258:	1813      	adds	r3, r2, r0
 800925a:	2a01      	cmp	r2, #1
 800925c:	4681      	mov	r9, r0
 800925e:	6123      	str	r3, [r4, #16]
 8009260:	dc02      	bgt.n	8009268 <_printf_float+0x168>
 8009262:	6822      	ldr	r2, [r4, #0]
 8009264:	07d2      	lsls	r2, r2, #31
 8009266:	d501      	bpl.n	800926c <_printf_float+0x16c>
 8009268:	3301      	adds	r3, #1
 800926a:	6123      	str	r3, [r4, #16]
 800926c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009270:	2b00      	cmp	r3, #0
 8009272:	d09c      	beq.n	80091ae <_printf_float+0xae>
 8009274:	232d      	movs	r3, #45	; 0x2d
 8009276:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800927a:	e798      	b.n	80091ae <_printf_float+0xae>
 800927c:	9a06      	ldr	r2, [sp, #24]
 800927e:	2a47      	cmp	r2, #71	; 0x47
 8009280:	d1be      	bne.n	8009200 <_printf_float+0x100>
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1bc      	bne.n	8009200 <_printf_float+0x100>
 8009286:	2301      	movs	r3, #1
 8009288:	e7b9      	b.n	80091fe <_printf_float+0xfe>
 800928a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800928e:	d118      	bne.n	80092c2 <_printf_float+0x1c2>
 8009290:	2900      	cmp	r1, #0
 8009292:	6863      	ldr	r3, [r4, #4]
 8009294:	dd0b      	ble.n	80092ae <_printf_float+0x1ae>
 8009296:	6121      	str	r1, [r4, #16]
 8009298:	b913      	cbnz	r3, 80092a0 <_printf_float+0x1a0>
 800929a:	6822      	ldr	r2, [r4, #0]
 800929c:	07d0      	lsls	r0, r2, #31
 800929e:	d502      	bpl.n	80092a6 <_printf_float+0x1a6>
 80092a0:	3301      	adds	r3, #1
 80092a2:	440b      	add	r3, r1
 80092a4:	6123      	str	r3, [r4, #16]
 80092a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80092a8:	f04f 0900 	mov.w	r9, #0
 80092ac:	e7de      	b.n	800926c <_printf_float+0x16c>
 80092ae:	b913      	cbnz	r3, 80092b6 <_printf_float+0x1b6>
 80092b0:	6822      	ldr	r2, [r4, #0]
 80092b2:	07d2      	lsls	r2, r2, #31
 80092b4:	d501      	bpl.n	80092ba <_printf_float+0x1ba>
 80092b6:	3302      	adds	r3, #2
 80092b8:	e7f4      	b.n	80092a4 <_printf_float+0x1a4>
 80092ba:	2301      	movs	r3, #1
 80092bc:	e7f2      	b.n	80092a4 <_printf_float+0x1a4>
 80092be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092c4:	4299      	cmp	r1, r3
 80092c6:	db05      	blt.n	80092d4 <_printf_float+0x1d4>
 80092c8:	6823      	ldr	r3, [r4, #0]
 80092ca:	6121      	str	r1, [r4, #16]
 80092cc:	07d8      	lsls	r0, r3, #31
 80092ce:	d5ea      	bpl.n	80092a6 <_printf_float+0x1a6>
 80092d0:	1c4b      	adds	r3, r1, #1
 80092d2:	e7e7      	b.n	80092a4 <_printf_float+0x1a4>
 80092d4:	2900      	cmp	r1, #0
 80092d6:	bfd4      	ite	le
 80092d8:	f1c1 0202 	rsble	r2, r1, #2
 80092dc:	2201      	movgt	r2, #1
 80092de:	4413      	add	r3, r2
 80092e0:	e7e0      	b.n	80092a4 <_printf_float+0x1a4>
 80092e2:	6823      	ldr	r3, [r4, #0]
 80092e4:	055a      	lsls	r2, r3, #21
 80092e6:	d407      	bmi.n	80092f8 <_printf_float+0x1f8>
 80092e8:	6923      	ldr	r3, [r4, #16]
 80092ea:	4642      	mov	r2, r8
 80092ec:	4631      	mov	r1, r6
 80092ee:	4628      	mov	r0, r5
 80092f0:	47b8      	blx	r7
 80092f2:	3001      	adds	r0, #1
 80092f4:	d12c      	bne.n	8009350 <_printf_float+0x250>
 80092f6:	e764      	b.n	80091c2 <_printf_float+0xc2>
 80092f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80092fc:	f240 80e0 	bls.w	80094c0 <_printf_float+0x3c0>
 8009300:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009304:	2200      	movs	r2, #0
 8009306:	2300      	movs	r3, #0
 8009308:	f7f7 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800930c:	2800      	cmp	r0, #0
 800930e:	d034      	beq.n	800937a <_printf_float+0x27a>
 8009310:	4a37      	ldr	r2, [pc, #220]	; (80093f0 <_printf_float+0x2f0>)
 8009312:	2301      	movs	r3, #1
 8009314:	4631      	mov	r1, r6
 8009316:	4628      	mov	r0, r5
 8009318:	47b8      	blx	r7
 800931a:	3001      	adds	r0, #1
 800931c:	f43f af51 	beq.w	80091c2 <_printf_float+0xc2>
 8009320:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009324:	429a      	cmp	r2, r3
 8009326:	db02      	blt.n	800932e <_printf_float+0x22e>
 8009328:	6823      	ldr	r3, [r4, #0]
 800932a:	07d8      	lsls	r0, r3, #31
 800932c:	d510      	bpl.n	8009350 <_printf_float+0x250>
 800932e:	ee18 3a10 	vmov	r3, s16
 8009332:	4652      	mov	r2, sl
 8009334:	4631      	mov	r1, r6
 8009336:	4628      	mov	r0, r5
 8009338:	47b8      	blx	r7
 800933a:	3001      	adds	r0, #1
 800933c:	f43f af41 	beq.w	80091c2 <_printf_float+0xc2>
 8009340:	f04f 0800 	mov.w	r8, #0
 8009344:	f104 091a 	add.w	r9, r4, #26
 8009348:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800934a:	3b01      	subs	r3, #1
 800934c:	4543      	cmp	r3, r8
 800934e:	dc09      	bgt.n	8009364 <_printf_float+0x264>
 8009350:	6823      	ldr	r3, [r4, #0]
 8009352:	079b      	lsls	r3, r3, #30
 8009354:	f100 8105 	bmi.w	8009562 <_printf_float+0x462>
 8009358:	68e0      	ldr	r0, [r4, #12]
 800935a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800935c:	4298      	cmp	r0, r3
 800935e:	bfb8      	it	lt
 8009360:	4618      	movlt	r0, r3
 8009362:	e730      	b.n	80091c6 <_printf_float+0xc6>
 8009364:	2301      	movs	r3, #1
 8009366:	464a      	mov	r2, r9
 8009368:	4631      	mov	r1, r6
 800936a:	4628      	mov	r0, r5
 800936c:	47b8      	blx	r7
 800936e:	3001      	adds	r0, #1
 8009370:	f43f af27 	beq.w	80091c2 <_printf_float+0xc2>
 8009374:	f108 0801 	add.w	r8, r8, #1
 8009378:	e7e6      	b.n	8009348 <_printf_float+0x248>
 800937a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800937c:	2b00      	cmp	r3, #0
 800937e:	dc39      	bgt.n	80093f4 <_printf_float+0x2f4>
 8009380:	4a1b      	ldr	r2, [pc, #108]	; (80093f0 <_printf_float+0x2f0>)
 8009382:	2301      	movs	r3, #1
 8009384:	4631      	mov	r1, r6
 8009386:	4628      	mov	r0, r5
 8009388:	47b8      	blx	r7
 800938a:	3001      	adds	r0, #1
 800938c:	f43f af19 	beq.w	80091c2 <_printf_float+0xc2>
 8009390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009394:	4313      	orrs	r3, r2
 8009396:	d102      	bne.n	800939e <_printf_float+0x29e>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	07d9      	lsls	r1, r3, #31
 800939c:	d5d8      	bpl.n	8009350 <_printf_float+0x250>
 800939e:	ee18 3a10 	vmov	r3, s16
 80093a2:	4652      	mov	r2, sl
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	f43f af09 	beq.w	80091c2 <_printf_float+0xc2>
 80093b0:	f04f 0900 	mov.w	r9, #0
 80093b4:	f104 0a1a 	add.w	sl, r4, #26
 80093b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093ba:	425b      	negs	r3, r3
 80093bc:	454b      	cmp	r3, r9
 80093be:	dc01      	bgt.n	80093c4 <_printf_float+0x2c4>
 80093c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093c2:	e792      	b.n	80092ea <_printf_float+0x1ea>
 80093c4:	2301      	movs	r3, #1
 80093c6:	4652      	mov	r2, sl
 80093c8:	4631      	mov	r1, r6
 80093ca:	4628      	mov	r0, r5
 80093cc:	47b8      	blx	r7
 80093ce:	3001      	adds	r0, #1
 80093d0:	f43f aef7 	beq.w	80091c2 <_printf_float+0xc2>
 80093d4:	f109 0901 	add.w	r9, r9, #1
 80093d8:	e7ee      	b.n	80093b8 <_printf_float+0x2b8>
 80093da:	bf00      	nop
 80093dc:	7fefffff 	.word	0x7fefffff
 80093e0:	0800d328 	.word	0x0800d328
 80093e4:	0800d32c 	.word	0x0800d32c
 80093e8:	0800d334 	.word	0x0800d334
 80093ec:	0800d330 	.word	0x0800d330
 80093f0:	0800d338 	.word	0x0800d338
 80093f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80093f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80093f8:	429a      	cmp	r2, r3
 80093fa:	bfa8      	it	ge
 80093fc:	461a      	movge	r2, r3
 80093fe:	2a00      	cmp	r2, #0
 8009400:	4691      	mov	r9, r2
 8009402:	dc37      	bgt.n	8009474 <_printf_float+0x374>
 8009404:	f04f 0b00 	mov.w	fp, #0
 8009408:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800940c:	f104 021a 	add.w	r2, r4, #26
 8009410:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009412:	9305      	str	r3, [sp, #20]
 8009414:	eba3 0309 	sub.w	r3, r3, r9
 8009418:	455b      	cmp	r3, fp
 800941a:	dc33      	bgt.n	8009484 <_printf_float+0x384>
 800941c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009420:	429a      	cmp	r2, r3
 8009422:	db3b      	blt.n	800949c <_printf_float+0x39c>
 8009424:	6823      	ldr	r3, [r4, #0]
 8009426:	07da      	lsls	r2, r3, #31
 8009428:	d438      	bmi.n	800949c <_printf_float+0x39c>
 800942a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800942c:	9a05      	ldr	r2, [sp, #20]
 800942e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009430:	1a9a      	subs	r2, r3, r2
 8009432:	eba3 0901 	sub.w	r9, r3, r1
 8009436:	4591      	cmp	r9, r2
 8009438:	bfa8      	it	ge
 800943a:	4691      	movge	r9, r2
 800943c:	f1b9 0f00 	cmp.w	r9, #0
 8009440:	dc35      	bgt.n	80094ae <_printf_float+0x3ae>
 8009442:	f04f 0800 	mov.w	r8, #0
 8009446:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800944a:	f104 0a1a 	add.w	sl, r4, #26
 800944e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009452:	1a9b      	subs	r3, r3, r2
 8009454:	eba3 0309 	sub.w	r3, r3, r9
 8009458:	4543      	cmp	r3, r8
 800945a:	f77f af79 	ble.w	8009350 <_printf_float+0x250>
 800945e:	2301      	movs	r3, #1
 8009460:	4652      	mov	r2, sl
 8009462:	4631      	mov	r1, r6
 8009464:	4628      	mov	r0, r5
 8009466:	47b8      	blx	r7
 8009468:	3001      	adds	r0, #1
 800946a:	f43f aeaa 	beq.w	80091c2 <_printf_float+0xc2>
 800946e:	f108 0801 	add.w	r8, r8, #1
 8009472:	e7ec      	b.n	800944e <_printf_float+0x34e>
 8009474:	4613      	mov	r3, r2
 8009476:	4631      	mov	r1, r6
 8009478:	4642      	mov	r2, r8
 800947a:	4628      	mov	r0, r5
 800947c:	47b8      	blx	r7
 800947e:	3001      	adds	r0, #1
 8009480:	d1c0      	bne.n	8009404 <_printf_float+0x304>
 8009482:	e69e      	b.n	80091c2 <_printf_float+0xc2>
 8009484:	2301      	movs	r3, #1
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	9205      	str	r2, [sp, #20]
 800948c:	47b8      	blx	r7
 800948e:	3001      	adds	r0, #1
 8009490:	f43f ae97 	beq.w	80091c2 <_printf_float+0xc2>
 8009494:	9a05      	ldr	r2, [sp, #20]
 8009496:	f10b 0b01 	add.w	fp, fp, #1
 800949a:	e7b9      	b.n	8009410 <_printf_float+0x310>
 800949c:	ee18 3a10 	vmov	r3, s16
 80094a0:	4652      	mov	r2, sl
 80094a2:	4631      	mov	r1, r6
 80094a4:	4628      	mov	r0, r5
 80094a6:	47b8      	blx	r7
 80094a8:	3001      	adds	r0, #1
 80094aa:	d1be      	bne.n	800942a <_printf_float+0x32a>
 80094ac:	e689      	b.n	80091c2 <_printf_float+0xc2>
 80094ae:	9a05      	ldr	r2, [sp, #20]
 80094b0:	464b      	mov	r3, r9
 80094b2:	4442      	add	r2, r8
 80094b4:	4631      	mov	r1, r6
 80094b6:	4628      	mov	r0, r5
 80094b8:	47b8      	blx	r7
 80094ba:	3001      	adds	r0, #1
 80094bc:	d1c1      	bne.n	8009442 <_printf_float+0x342>
 80094be:	e680      	b.n	80091c2 <_printf_float+0xc2>
 80094c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094c2:	2a01      	cmp	r2, #1
 80094c4:	dc01      	bgt.n	80094ca <_printf_float+0x3ca>
 80094c6:	07db      	lsls	r3, r3, #31
 80094c8:	d538      	bpl.n	800953c <_printf_float+0x43c>
 80094ca:	2301      	movs	r3, #1
 80094cc:	4642      	mov	r2, r8
 80094ce:	4631      	mov	r1, r6
 80094d0:	4628      	mov	r0, r5
 80094d2:	47b8      	blx	r7
 80094d4:	3001      	adds	r0, #1
 80094d6:	f43f ae74 	beq.w	80091c2 <_printf_float+0xc2>
 80094da:	ee18 3a10 	vmov	r3, s16
 80094de:	4652      	mov	r2, sl
 80094e0:	4631      	mov	r1, r6
 80094e2:	4628      	mov	r0, r5
 80094e4:	47b8      	blx	r7
 80094e6:	3001      	adds	r0, #1
 80094e8:	f43f ae6b 	beq.w	80091c2 <_printf_float+0xc2>
 80094ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80094f0:	2200      	movs	r2, #0
 80094f2:	2300      	movs	r3, #0
 80094f4:	f7f7 fae8 	bl	8000ac8 <__aeabi_dcmpeq>
 80094f8:	b9d8      	cbnz	r0, 8009532 <_printf_float+0x432>
 80094fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094fc:	f108 0201 	add.w	r2, r8, #1
 8009500:	3b01      	subs	r3, #1
 8009502:	4631      	mov	r1, r6
 8009504:	4628      	mov	r0, r5
 8009506:	47b8      	blx	r7
 8009508:	3001      	adds	r0, #1
 800950a:	d10e      	bne.n	800952a <_printf_float+0x42a>
 800950c:	e659      	b.n	80091c2 <_printf_float+0xc2>
 800950e:	2301      	movs	r3, #1
 8009510:	4652      	mov	r2, sl
 8009512:	4631      	mov	r1, r6
 8009514:	4628      	mov	r0, r5
 8009516:	47b8      	blx	r7
 8009518:	3001      	adds	r0, #1
 800951a:	f43f ae52 	beq.w	80091c2 <_printf_float+0xc2>
 800951e:	f108 0801 	add.w	r8, r8, #1
 8009522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009524:	3b01      	subs	r3, #1
 8009526:	4543      	cmp	r3, r8
 8009528:	dcf1      	bgt.n	800950e <_printf_float+0x40e>
 800952a:	464b      	mov	r3, r9
 800952c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009530:	e6dc      	b.n	80092ec <_printf_float+0x1ec>
 8009532:	f04f 0800 	mov.w	r8, #0
 8009536:	f104 0a1a 	add.w	sl, r4, #26
 800953a:	e7f2      	b.n	8009522 <_printf_float+0x422>
 800953c:	2301      	movs	r3, #1
 800953e:	4642      	mov	r2, r8
 8009540:	e7df      	b.n	8009502 <_printf_float+0x402>
 8009542:	2301      	movs	r3, #1
 8009544:	464a      	mov	r2, r9
 8009546:	4631      	mov	r1, r6
 8009548:	4628      	mov	r0, r5
 800954a:	47b8      	blx	r7
 800954c:	3001      	adds	r0, #1
 800954e:	f43f ae38 	beq.w	80091c2 <_printf_float+0xc2>
 8009552:	f108 0801 	add.w	r8, r8, #1
 8009556:	68e3      	ldr	r3, [r4, #12]
 8009558:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800955a:	1a5b      	subs	r3, r3, r1
 800955c:	4543      	cmp	r3, r8
 800955e:	dcf0      	bgt.n	8009542 <_printf_float+0x442>
 8009560:	e6fa      	b.n	8009358 <_printf_float+0x258>
 8009562:	f04f 0800 	mov.w	r8, #0
 8009566:	f104 0919 	add.w	r9, r4, #25
 800956a:	e7f4      	b.n	8009556 <_printf_float+0x456>

0800956c <_printf_common>:
 800956c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009570:	4616      	mov	r6, r2
 8009572:	4699      	mov	r9, r3
 8009574:	688a      	ldr	r2, [r1, #8]
 8009576:	690b      	ldr	r3, [r1, #16]
 8009578:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800957c:	4293      	cmp	r3, r2
 800957e:	bfb8      	it	lt
 8009580:	4613      	movlt	r3, r2
 8009582:	6033      	str	r3, [r6, #0]
 8009584:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009588:	4607      	mov	r7, r0
 800958a:	460c      	mov	r4, r1
 800958c:	b10a      	cbz	r2, 8009592 <_printf_common+0x26>
 800958e:	3301      	adds	r3, #1
 8009590:	6033      	str	r3, [r6, #0]
 8009592:	6823      	ldr	r3, [r4, #0]
 8009594:	0699      	lsls	r1, r3, #26
 8009596:	bf42      	ittt	mi
 8009598:	6833      	ldrmi	r3, [r6, #0]
 800959a:	3302      	addmi	r3, #2
 800959c:	6033      	strmi	r3, [r6, #0]
 800959e:	6825      	ldr	r5, [r4, #0]
 80095a0:	f015 0506 	ands.w	r5, r5, #6
 80095a4:	d106      	bne.n	80095b4 <_printf_common+0x48>
 80095a6:	f104 0a19 	add.w	sl, r4, #25
 80095aa:	68e3      	ldr	r3, [r4, #12]
 80095ac:	6832      	ldr	r2, [r6, #0]
 80095ae:	1a9b      	subs	r3, r3, r2
 80095b0:	42ab      	cmp	r3, r5
 80095b2:	dc26      	bgt.n	8009602 <_printf_common+0x96>
 80095b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095b8:	1e13      	subs	r3, r2, #0
 80095ba:	6822      	ldr	r2, [r4, #0]
 80095bc:	bf18      	it	ne
 80095be:	2301      	movne	r3, #1
 80095c0:	0692      	lsls	r2, r2, #26
 80095c2:	d42b      	bmi.n	800961c <_printf_common+0xb0>
 80095c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80095c8:	4649      	mov	r1, r9
 80095ca:	4638      	mov	r0, r7
 80095cc:	47c0      	blx	r8
 80095ce:	3001      	adds	r0, #1
 80095d0:	d01e      	beq.n	8009610 <_printf_common+0xa4>
 80095d2:	6823      	ldr	r3, [r4, #0]
 80095d4:	68e5      	ldr	r5, [r4, #12]
 80095d6:	6832      	ldr	r2, [r6, #0]
 80095d8:	f003 0306 	and.w	r3, r3, #6
 80095dc:	2b04      	cmp	r3, #4
 80095de:	bf08      	it	eq
 80095e0:	1aad      	subeq	r5, r5, r2
 80095e2:	68a3      	ldr	r3, [r4, #8]
 80095e4:	6922      	ldr	r2, [r4, #16]
 80095e6:	bf0c      	ite	eq
 80095e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80095ec:	2500      	movne	r5, #0
 80095ee:	4293      	cmp	r3, r2
 80095f0:	bfc4      	itt	gt
 80095f2:	1a9b      	subgt	r3, r3, r2
 80095f4:	18ed      	addgt	r5, r5, r3
 80095f6:	2600      	movs	r6, #0
 80095f8:	341a      	adds	r4, #26
 80095fa:	42b5      	cmp	r5, r6
 80095fc:	d11a      	bne.n	8009634 <_printf_common+0xc8>
 80095fe:	2000      	movs	r0, #0
 8009600:	e008      	b.n	8009614 <_printf_common+0xa8>
 8009602:	2301      	movs	r3, #1
 8009604:	4652      	mov	r2, sl
 8009606:	4649      	mov	r1, r9
 8009608:	4638      	mov	r0, r7
 800960a:	47c0      	blx	r8
 800960c:	3001      	adds	r0, #1
 800960e:	d103      	bne.n	8009618 <_printf_common+0xac>
 8009610:	f04f 30ff 	mov.w	r0, #4294967295
 8009614:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009618:	3501      	adds	r5, #1
 800961a:	e7c6      	b.n	80095aa <_printf_common+0x3e>
 800961c:	18e1      	adds	r1, r4, r3
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	2030      	movs	r0, #48	; 0x30
 8009622:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009626:	4422      	add	r2, r4
 8009628:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800962c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009630:	3302      	adds	r3, #2
 8009632:	e7c7      	b.n	80095c4 <_printf_common+0x58>
 8009634:	2301      	movs	r3, #1
 8009636:	4622      	mov	r2, r4
 8009638:	4649      	mov	r1, r9
 800963a:	4638      	mov	r0, r7
 800963c:	47c0      	blx	r8
 800963e:	3001      	adds	r0, #1
 8009640:	d0e6      	beq.n	8009610 <_printf_common+0xa4>
 8009642:	3601      	adds	r6, #1
 8009644:	e7d9      	b.n	80095fa <_printf_common+0x8e>
	...

08009648 <_printf_i>:
 8009648:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800964c:	7e0f      	ldrb	r7, [r1, #24]
 800964e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009650:	2f78      	cmp	r7, #120	; 0x78
 8009652:	4691      	mov	r9, r2
 8009654:	4680      	mov	r8, r0
 8009656:	460c      	mov	r4, r1
 8009658:	469a      	mov	sl, r3
 800965a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800965e:	d807      	bhi.n	8009670 <_printf_i+0x28>
 8009660:	2f62      	cmp	r7, #98	; 0x62
 8009662:	d80a      	bhi.n	800967a <_printf_i+0x32>
 8009664:	2f00      	cmp	r7, #0
 8009666:	f000 80d8 	beq.w	800981a <_printf_i+0x1d2>
 800966a:	2f58      	cmp	r7, #88	; 0x58
 800966c:	f000 80a3 	beq.w	80097b6 <_printf_i+0x16e>
 8009670:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009674:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009678:	e03a      	b.n	80096f0 <_printf_i+0xa8>
 800967a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800967e:	2b15      	cmp	r3, #21
 8009680:	d8f6      	bhi.n	8009670 <_printf_i+0x28>
 8009682:	a101      	add	r1, pc, #4	; (adr r1, 8009688 <_printf_i+0x40>)
 8009684:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009688:	080096e1 	.word	0x080096e1
 800968c:	080096f5 	.word	0x080096f5
 8009690:	08009671 	.word	0x08009671
 8009694:	08009671 	.word	0x08009671
 8009698:	08009671 	.word	0x08009671
 800969c:	08009671 	.word	0x08009671
 80096a0:	080096f5 	.word	0x080096f5
 80096a4:	08009671 	.word	0x08009671
 80096a8:	08009671 	.word	0x08009671
 80096ac:	08009671 	.word	0x08009671
 80096b0:	08009671 	.word	0x08009671
 80096b4:	08009801 	.word	0x08009801
 80096b8:	08009725 	.word	0x08009725
 80096bc:	080097e3 	.word	0x080097e3
 80096c0:	08009671 	.word	0x08009671
 80096c4:	08009671 	.word	0x08009671
 80096c8:	08009823 	.word	0x08009823
 80096cc:	08009671 	.word	0x08009671
 80096d0:	08009725 	.word	0x08009725
 80096d4:	08009671 	.word	0x08009671
 80096d8:	08009671 	.word	0x08009671
 80096dc:	080097eb 	.word	0x080097eb
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	1d1a      	adds	r2, r3, #4
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	602a      	str	r2, [r5, #0]
 80096e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80096f0:	2301      	movs	r3, #1
 80096f2:	e0a3      	b.n	800983c <_printf_i+0x1f4>
 80096f4:	6820      	ldr	r0, [r4, #0]
 80096f6:	6829      	ldr	r1, [r5, #0]
 80096f8:	0606      	lsls	r6, r0, #24
 80096fa:	f101 0304 	add.w	r3, r1, #4
 80096fe:	d50a      	bpl.n	8009716 <_printf_i+0xce>
 8009700:	680e      	ldr	r6, [r1, #0]
 8009702:	602b      	str	r3, [r5, #0]
 8009704:	2e00      	cmp	r6, #0
 8009706:	da03      	bge.n	8009710 <_printf_i+0xc8>
 8009708:	232d      	movs	r3, #45	; 0x2d
 800970a:	4276      	negs	r6, r6
 800970c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009710:	485e      	ldr	r0, [pc, #376]	; (800988c <_printf_i+0x244>)
 8009712:	230a      	movs	r3, #10
 8009714:	e019      	b.n	800974a <_printf_i+0x102>
 8009716:	680e      	ldr	r6, [r1, #0]
 8009718:	602b      	str	r3, [r5, #0]
 800971a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800971e:	bf18      	it	ne
 8009720:	b236      	sxthne	r6, r6
 8009722:	e7ef      	b.n	8009704 <_printf_i+0xbc>
 8009724:	682b      	ldr	r3, [r5, #0]
 8009726:	6820      	ldr	r0, [r4, #0]
 8009728:	1d19      	adds	r1, r3, #4
 800972a:	6029      	str	r1, [r5, #0]
 800972c:	0601      	lsls	r1, r0, #24
 800972e:	d501      	bpl.n	8009734 <_printf_i+0xec>
 8009730:	681e      	ldr	r6, [r3, #0]
 8009732:	e002      	b.n	800973a <_printf_i+0xf2>
 8009734:	0646      	lsls	r6, r0, #25
 8009736:	d5fb      	bpl.n	8009730 <_printf_i+0xe8>
 8009738:	881e      	ldrh	r6, [r3, #0]
 800973a:	4854      	ldr	r0, [pc, #336]	; (800988c <_printf_i+0x244>)
 800973c:	2f6f      	cmp	r7, #111	; 0x6f
 800973e:	bf0c      	ite	eq
 8009740:	2308      	moveq	r3, #8
 8009742:	230a      	movne	r3, #10
 8009744:	2100      	movs	r1, #0
 8009746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800974a:	6865      	ldr	r5, [r4, #4]
 800974c:	60a5      	str	r5, [r4, #8]
 800974e:	2d00      	cmp	r5, #0
 8009750:	bfa2      	ittt	ge
 8009752:	6821      	ldrge	r1, [r4, #0]
 8009754:	f021 0104 	bicge.w	r1, r1, #4
 8009758:	6021      	strge	r1, [r4, #0]
 800975a:	b90e      	cbnz	r6, 8009760 <_printf_i+0x118>
 800975c:	2d00      	cmp	r5, #0
 800975e:	d04d      	beq.n	80097fc <_printf_i+0x1b4>
 8009760:	4615      	mov	r5, r2
 8009762:	fbb6 f1f3 	udiv	r1, r6, r3
 8009766:	fb03 6711 	mls	r7, r3, r1, r6
 800976a:	5dc7      	ldrb	r7, [r0, r7]
 800976c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009770:	4637      	mov	r7, r6
 8009772:	42bb      	cmp	r3, r7
 8009774:	460e      	mov	r6, r1
 8009776:	d9f4      	bls.n	8009762 <_printf_i+0x11a>
 8009778:	2b08      	cmp	r3, #8
 800977a:	d10b      	bne.n	8009794 <_printf_i+0x14c>
 800977c:	6823      	ldr	r3, [r4, #0]
 800977e:	07de      	lsls	r6, r3, #31
 8009780:	d508      	bpl.n	8009794 <_printf_i+0x14c>
 8009782:	6923      	ldr	r3, [r4, #16]
 8009784:	6861      	ldr	r1, [r4, #4]
 8009786:	4299      	cmp	r1, r3
 8009788:	bfde      	ittt	le
 800978a:	2330      	movle	r3, #48	; 0x30
 800978c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009790:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009794:	1b52      	subs	r2, r2, r5
 8009796:	6122      	str	r2, [r4, #16]
 8009798:	f8cd a000 	str.w	sl, [sp]
 800979c:	464b      	mov	r3, r9
 800979e:	aa03      	add	r2, sp, #12
 80097a0:	4621      	mov	r1, r4
 80097a2:	4640      	mov	r0, r8
 80097a4:	f7ff fee2 	bl	800956c <_printf_common>
 80097a8:	3001      	adds	r0, #1
 80097aa:	d14c      	bne.n	8009846 <_printf_i+0x1fe>
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295
 80097b0:	b004      	add	sp, #16
 80097b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097b6:	4835      	ldr	r0, [pc, #212]	; (800988c <_printf_i+0x244>)
 80097b8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097bc:	6829      	ldr	r1, [r5, #0]
 80097be:	6823      	ldr	r3, [r4, #0]
 80097c0:	f851 6b04 	ldr.w	r6, [r1], #4
 80097c4:	6029      	str	r1, [r5, #0]
 80097c6:	061d      	lsls	r5, r3, #24
 80097c8:	d514      	bpl.n	80097f4 <_printf_i+0x1ac>
 80097ca:	07df      	lsls	r7, r3, #31
 80097cc:	bf44      	itt	mi
 80097ce:	f043 0320 	orrmi.w	r3, r3, #32
 80097d2:	6023      	strmi	r3, [r4, #0]
 80097d4:	b91e      	cbnz	r6, 80097de <_printf_i+0x196>
 80097d6:	6823      	ldr	r3, [r4, #0]
 80097d8:	f023 0320 	bic.w	r3, r3, #32
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	2310      	movs	r3, #16
 80097e0:	e7b0      	b.n	8009744 <_printf_i+0xfc>
 80097e2:	6823      	ldr	r3, [r4, #0]
 80097e4:	f043 0320 	orr.w	r3, r3, #32
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	2378      	movs	r3, #120	; 0x78
 80097ec:	4828      	ldr	r0, [pc, #160]	; (8009890 <_printf_i+0x248>)
 80097ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80097f2:	e7e3      	b.n	80097bc <_printf_i+0x174>
 80097f4:	0659      	lsls	r1, r3, #25
 80097f6:	bf48      	it	mi
 80097f8:	b2b6      	uxthmi	r6, r6
 80097fa:	e7e6      	b.n	80097ca <_printf_i+0x182>
 80097fc:	4615      	mov	r5, r2
 80097fe:	e7bb      	b.n	8009778 <_printf_i+0x130>
 8009800:	682b      	ldr	r3, [r5, #0]
 8009802:	6826      	ldr	r6, [r4, #0]
 8009804:	6961      	ldr	r1, [r4, #20]
 8009806:	1d18      	adds	r0, r3, #4
 8009808:	6028      	str	r0, [r5, #0]
 800980a:	0635      	lsls	r5, r6, #24
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	d501      	bpl.n	8009814 <_printf_i+0x1cc>
 8009810:	6019      	str	r1, [r3, #0]
 8009812:	e002      	b.n	800981a <_printf_i+0x1d2>
 8009814:	0670      	lsls	r0, r6, #25
 8009816:	d5fb      	bpl.n	8009810 <_printf_i+0x1c8>
 8009818:	8019      	strh	r1, [r3, #0]
 800981a:	2300      	movs	r3, #0
 800981c:	6123      	str	r3, [r4, #16]
 800981e:	4615      	mov	r5, r2
 8009820:	e7ba      	b.n	8009798 <_printf_i+0x150>
 8009822:	682b      	ldr	r3, [r5, #0]
 8009824:	1d1a      	adds	r2, r3, #4
 8009826:	602a      	str	r2, [r5, #0]
 8009828:	681d      	ldr	r5, [r3, #0]
 800982a:	6862      	ldr	r2, [r4, #4]
 800982c:	2100      	movs	r1, #0
 800982e:	4628      	mov	r0, r5
 8009830:	f7f6 fcd6 	bl	80001e0 <memchr>
 8009834:	b108      	cbz	r0, 800983a <_printf_i+0x1f2>
 8009836:	1b40      	subs	r0, r0, r5
 8009838:	6060      	str	r0, [r4, #4]
 800983a:	6863      	ldr	r3, [r4, #4]
 800983c:	6123      	str	r3, [r4, #16]
 800983e:	2300      	movs	r3, #0
 8009840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009844:	e7a8      	b.n	8009798 <_printf_i+0x150>
 8009846:	6923      	ldr	r3, [r4, #16]
 8009848:	462a      	mov	r2, r5
 800984a:	4649      	mov	r1, r9
 800984c:	4640      	mov	r0, r8
 800984e:	47d0      	blx	sl
 8009850:	3001      	adds	r0, #1
 8009852:	d0ab      	beq.n	80097ac <_printf_i+0x164>
 8009854:	6823      	ldr	r3, [r4, #0]
 8009856:	079b      	lsls	r3, r3, #30
 8009858:	d413      	bmi.n	8009882 <_printf_i+0x23a>
 800985a:	68e0      	ldr	r0, [r4, #12]
 800985c:	9b03      	ldr	r3, [sp, #12]
 800985e:	4298      	cmp	r0, r3
 8009860:	bfb8      	it	lt
 8009862:	4618      	movlt	r0, r3
 8009864:	e7a4      	b.n	80097b0 <_printf_i+0x168>
 8009866:	2301      	movs	r3, #1
 8009868:	4632      	mov	r2, r6
 800986a:	4649      	mov	r1, r9
 800986c:	4640      	mov	r0, r8
 800986e:	47d0      	blx	sl
 8009870:	3001      	adds	r0, #1
 8009872:	d09b      	beq.n	80097ac <_printf_i+0x164>
 8009874:	3501      	adds	r5, #1
 8009876:	68e3      	ldr	r3, [r4, #12]
 8009878:	9903      	ldr	r1, [sp, #12]
 800987a:	1a5b      	subs	r3, r3, r1
 800987c:	42ab      	cmp	r3, r5
 800987e:	dcf2      	bgt.n	8009866 <_printf_i+0x21e>
 8009880:	e7eb      	b.n	800985a <_printf_i+0x212>
 8009882:	2500      	movs	r5, #0
 8009884:	f104 0619 	add.w	r6, r4, #25
 8009888:	e7f5      	b.n	8009876 <_printf_i+0x22e>
 800988a:	bf00      	nop
 800988c:	0800d33a 	.word	0x0800d33a
 8009890:	0800d34b 	.word	0x0800d34b

08009894 <_puts_r>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	460e      	mov	r6, r1
 8009898:	4605      	mov	r5, r0
 800989a:	b118      	cbz	r0, 80098a4 <_puts_r+0x10>
 800989c:	6983      	ldr	r3, [r0, #24]
 800989e:	b90b      	cbnz	r3, 80098a4 <_puts_r+0x10>
 80098a0:	f001 f8c2 	bl	800aa28 <__sinit>
 80098a4:	69ab      	ldr	r3, [r5, #24]
 80098a6:	68ac      	ldr	r4, [r5, #8]
 80098a8:	b913      	cbnz	r3, 80098b0 <_puts_r+0x1c>
 80098aa:	4628      	mov	r0, r5
 80098ac:	f001 f8bc 	bl	800aa28 <__sinit>
 80098b0:	4b2c      	ldr	r3, [pc, #176]	; (8009964 <_puts_r+0xd0>)
 80098b2:	429c      	cmp	r4, r3
 80098b4:	d120      	bne.n	80098f8 <_puts_r+0x64>
 80098b6:	686c      	ldr	r4, [r5, #4]
 80098b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80098ba:	07db      	lsls	r3, r3, #31
 80098bc:	d405      	bmi.n	80098ca <_puts_r+0x36>
 80098be:	89a3      	ldrh	r3, [r4, #12]
 80098c0:	0598      	lsls	r0, r3, #22
 80098c2:	d402      	bmi.n	80098ca <_puts_r+0x36>
 80098c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80098c6:	f001 f952 	bl	800ab6e <__retarget_lock_acquire_recursive>
 80098ca:	89a3      	ldrh	r3, [r4, #12]
 80098cc:	0719      	lsls	r1, r3, #28
 80098ce:	d51d      	bpl.n	800990c <_puts_r+0x78>
 80098d0:	6923      	ldr	r3, [r4, #16]
 80098d2:	b1db      	cbz	r3, 800990c <_puts_r+0x78>
 80098d4:	3e01      	subs	r6, #1
 80098d6:	68a3      	ldr	r3, [r4, #8]
 80098d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80098dc:	3b01      	subs	r3, #1
 80098de:	60a3      	str	r3, [r4, #8]
 80098e0:	bb39      	cbnz	r1, 8009932 <_puts_r+0x9e>
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	da38      	bge.n	8009958 <_puts_r+0xc4>
 80098e6:	4622      	mov	r2, r4
 80098e8:	210a      	movs	r1, #10
 80098ea:	4628      	mov	r0, r5
 80098ec:	f000 f848 	bl	8009980 <__swbuf_r>
 80098f0:	3001      	adds	r0, #1
 80098f2:	d011      	beq.n	8009918 <_puts_r+0x84>
 80098f4:	250a      	movs	r5, #10
 80098f6:	e011      	b.n	800991c <_puts_r+0x88>
 80098f8:	4b1b      	ldr	r3, [pc, #108]	; (8009968 <_puts_r+0xd4>)
 80098fa:	429c      	cmp	r4, r3
 80098fc:	d101      	bne.n	8009902 <_puts_r+0x6e>
 80098fe:	68ac      	ldr	r4, [r5, #8]
 8009900:	e7da      	b.n	80098b8 <_puts_r+0x24>
 8009902:	4b1a      	ldr	r3, [pc, #104]	; (800996c <_puts_r+0xd8>)
 8009904:	429c      	cmp	r4, r3
 8009906:	bf08      	it	eq
 8009908:	68ec      	ldreq	r4, [r5, #12]
 800990a:	e7d5      	b.n	80098b8 <_puts_r+0x24>
 800990c:	4621      	mov	r1, r4
 800990e:	4628      	mov	r0, r5
 8009910:	f000 f888 	bl	8009a24 <__swsetup_r>
 8009914:	2800      	cmp	r0, #0
 8009916:	d0dd      	beq.n	80098d4 <_puts_r+0x40>
 8009918:	f04f 35ff 	mov.w	r5, #4294967295
 800991c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800991e:	07da      	lsls	r2, r3, #31
 8009920:	d405      	bmi.n	800992e <_puts_r+0x9a>
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	059b      	lsls	r3, r3, #22
 8009926:	d402      	bmi.n	800992e <_puts_r+0x9a>
 8009928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800992a:	f001 f921 	bl	800ab70 <__retarget_lock_release_recursive>
 800992e:	4628      	mov	r0, r5
 8009930:	bd70      	pop	{r4, r5, r6, pc}
 8009932:	2b00      	cmp	r3, #0
 8009934:	da04      	bge.n	8009940 <_puts_r+0xac>
 8009936:	69a2      	ldr	r2, [r4, #24]
 8009938:	429a      	cmp	r2, r3
 800993a:	dc06      	bgt.n	800994a <_puts_r+0xb6>
 800993c:	290a      	cmp	r1, #10
 800993e:	d004      	beq.n	800994a <_puts_r+0xb6>
 8009940:	6823      	ldr	r3, [r4, #0]
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	6022      	str	r2, [r4, #0]
 8009946:	7019      	strb	r1, [r3, #0]
 8009948:	e7c5      	b.n	80098d6 <_puts_r+0x42>
 800994a:	4622      	mov	r2, r4
 800994c:	4628      	mov	r0, r5
 800994e:	f000 f817 	bl	8009980 <__swbuf_r>
 8009952:	3001      	adds	r0, #1
 8009954:	d1bf      	bne.n	80098d6 <_puts_r+0x42>
 8009956:	e7df      	b.n	8009918 <_puts_r+0x84>
 8009958:	6823      	ldr	r3, [r4, #0]
 800995a:	250a      	movs	r5, #10
 800995c:	1c5a      	adds	r2, r3, #1
 800995e:	6022      	str	r2, [r4, #0]
 8009960:	701d      	strb	r5, [r3, #0]
 8009962:	e7db      	b.n	800991c <_puts_r+0x88>
 8009964:	0800d40c 	.word	0x0800d40c
 8009968:	0800d42c 	.word	0x0800d42c
 800996c:	0800d3ec 	.word	0x0800d3ec

08009970 <puts>:
 8009970:	4b02      	ldr	r3, [pc, #8]	; (800997c <puts+0xc>)
 8009972:	4601      	mov	r1, r0
 8009974:	6818      	ldr	r0, [r3, #0]
 8009976:	f7ff bf8d 	b.w	8009894 <_puts_r>
 800997a:	bf00      	nop
 800997c:	2000000c 	.word	0x2000000c

08009980 <__swbuf_r>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	460e      	mov	r6, r1
 8009984:	4614      	mov	r4, r2
 8009986:	4605      	mov	r5, r0
 8009988:	b118      	cbz	r0, 8009992 <__swbuf_r+0x12>
 800998a:	6983      	ldr	r3, [r0, #24]
 800998c:	b90b      	cbnz	r3, 8009992 <__swbuf_r+0x12>
 800998e:	f001 f84b 	bl	800aa28 <__sinit>
 8009992:	4b21      	ldr	r3, [pc, #132]	; (8009a18 <__swbuf_r+0x98>)
 8009994:	429c      	cmp	r4, r3
 8009996:	d12b      	bne.n	80099f0 <__swbuf_r+0x70>
 8009998:	686c      	ldr	r4, [r5, #4]
 800999a:	69a3      	ldr	r3, [r4, #24]
 800999c:	60a3      	str	r3, [r4, #8]
 800999e:	89a3      	ldrh	r3, [r4, #12]
 80099a0:	071a      	lsls	r2, r3, #28
 80099a2:	d52f      	bpl.n	8009a04 <__swbuf_r+0x84>
 80099a4:	6923      	ldr	r3, [r4, #16]
 80099a6:	b36b      	cbz	r3, 8009a04 <__swbuf_r+0x84>
 80099a8:	6923      	ldr	r3, [r4, #16]
 80099aa:	6820      	ldr	r0, [r4, #0]
 80099ac:	1ac0      	subs	r0, r0, r3
 80099ae:	6963      	ldr	r3, [r4, #20]
 80099b0:	b2f6      	uxtb	r6, r6
 80099b2:	4283      	cmp	r3, r0
 80099b4:	4637      	mov	r7, r6
 80099b6:	dc04      	bgt.n	80099c2 <__swbuf_r+0x42>
 80099b8:	4621      	mov	r1, r4
 80099ba:	4628      	mov	r0, r5
 80099bc:	f000 ffa0 	bl	800a900 <_fflush_r>
 80099c0:	bb30      	cbnz	r0, 8009a10 <__swbuf_r+0x90>
 80099c2:	68a3      	ldr	r3, [r4, #8]
 80099c4:	3b01      	subs	r3, #1
 80099c6:	60a3      	str	r3, [r4, #8]
 80099c8:	6823      	ldr	r3, [r4, #0]
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	6022      	str	r2, [r4, #0]
 80099ce:	701e      	strb	r6, [r3, #0]
 80099d0:	6963      	ldr	r3, [r4, #20]
 80099d2:	3001      	adds	r0, #1
 80099d4:	4283      	cmp	r3, r0
 80099d6:	d004      	beq.n	80099e2 <__swbuf_r+0x62>
 80099d8:	89a3      	ldrh	r3, [r4, #12]
 80099da:	07db      	lsls	r3, r3, #31
 80099dc:	d506      	bpl.n	80099ec <__swbuf_r+0x6c>
 80099de:	2e0a      	cmp	r6, #10
 80099e0:	d104      	bne.n	80099ec <__swbuf_r+0x6c>
 80099e2:	4621      	mov	r1, r4
 80099e4:	4628      	mov	r0, r5
 80099e6:	f000 ff8b 	bl	800a900 <_fflush_r>
 80099ea:	b988      	cbnz	r0, 8009a10 <__swbuf_r+0x90>
 80099ec:	4638      	mov	r0, r7
 80099ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099f0:	4b0a      	ldr	r3, [pc, #40]	; (8009a1c <__swbuf_r+0x9c>)
 80099f2:	429c      	cmp	r4, r3
 80099f4:	d101      	bne.n	80099fa <__swbuf_r+0x7a>
 80099f6:	68ac      	ldr	r4, [r5, #8]
 80099f8:	e7cf      	b.n	800999a <__swbuf_r+0x1a>
 80099fa:	4b09      	ldr	r3, [pc, #36]	; (8009a20 <__swbuf_r+0xa0>)
 80099fc:	429c      	cmp	r4, r3
 80099fe:	bf08      	it	eq
 8009a00:	68ec      	ldreq	r4, [r5, #12]
 8009a02:	e7ca      	b.n	800999a <__swbuf_r+0x1a>
 8009a04:	4621      	mov	r1, r4
 8009a06:	4628      	mov	r0, r5
 8009a08:	f000 f80c 	bl	8009a24 <__swsetup_r>
 8009a0c:	2800      	cmp	r0, #0
 8009a0e:	d0cb      	beq.n	80099a8 <__swbuf_r+0x28>
 8009a10:	f04f 37ff 	mov.w	r7, #4294967295
 8009a14:	e7ea      	b.n	80099ec <__swbuf_r+0x6c>
 8009a16:	bf00      	nop
 8009a18:	0800d40c 	.word	0x0800d40c
 8009a1c:	0800d42c 	.word	0x0800d42c
 8009a20:	0800d3ec 	.word	0x0800d3ec

08009a24 <__swsetup_r>:
 8009a24:	4b32      	ldr	r3, [pc, #200]	; (8009af0 <__swsetup_r+0xcc>)
 8009a26:	b570      	push	{r4, r5, r6, lr}
 8009a28:	681d      	ldr	r5, [r3, #0]
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460c      	mov	r4, r1
 8009a2e:	b125      	cbz	r5, 8009a3a <__swsetup_r+0x16>
 8009a30:	69ab      	ldr	r3, [r5, #24]
 8009a32:	b913      	cbnz	r3, 8009a3a <__swsetup_r+0x16>
 8009a34:	4628      	mov	r0, r5
 8009a36:	f000 fff7 	bl	800aa28 <__sinit>
 8009a3a:	4b2e      	ldr	r3, [pc, #184]	; (8009af4 <__swsetup_r+0xd0>)
 8009a3c:	429c      	cmp	r4, r3
 8009a3e:	d10f      	bne.n	8009a60 <__swsetup_r+0x3c>
 8009a40:	686c      	ldr	r4, [r5, #4]
 8009a42:	89a3      	ldrh	r3, [r4, #12]
 8009a44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009a48:	0719      	lsls	r1, r3, #28
 8009a4a:	d42c      	bmi.n	8009aa6 <__swsetup_r+0x82>
 8009a4c:	06dd      	lsls	r5, r3, #27
 8009a4e:	d411      	bmi.n	8009a74 <__swsetup_r+0x50>
 8009a50:	2309      	movs	r3, #9
 8009a52:	6033      	str	r3, [r6, #0]
 8009a54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009a58:	81a3      	strh	r3, [r4, #12]
 8009a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5e:	e03e      	b.n	8009ade <__swsetup_r+0xba>
 8009a60:	4b25      	ldr	r3, [pc, #148]	; (8009af8 <__swsetup_r+0xd4>)
 8009a62:	429c      	cmp	r4, r3
 8009a64:	d101      	bne.n	8009a6a <__swsetup_r+0x46>
 8009a66:	68ac      	ldr	r4, [r5, #8]
 8009a68:	e7eb      	b.n	8009a42 <__swsetup_r+0x1e>
 8009a6a:	4b24      	ldr	r3, [pc, #144]	; (8009afc <__swsetup_r+0xd8>)
 8009a6c:	429c      	cmp	r4, r3
 8009a6e:	bf08      	it	eq
 8009a70:	68ec      	ldreq	r4, [r5, #12]
 8009a72:	e7e6      	b.n	8009a42 <__swsetup_r+0x1e>
 8009a74:	0758      	lsls	r0, r3, #29
 8009a76:	d512      	bpl.n	8009a9e <__swsetup_r+0x7a>
 8009a78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009a7a:	b141      	cbz	r1, 8009a8e <__swsetup_r+0x6a>
 8009a7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009a80:	4299      	cmp	r1, r3
 8009a82:	d002      	beq.n	8009a8a <__swsetup_r+0x66>
 8009a84:	4630      	mov	r0, r6
 8009a86:	f001 fc89 	bl	800b39c <_free_r>
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	6363      	str	r3, [r4, #52]	; 0x34
 8009a8e:	89a3      	ldrh	r3, [r4, #12]
 8009a90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009a94:	81a3      	strh	r3, [r4, #12]
 8009a96:	2300      	movs	r3, #0
 8009a98:	6063      	str	r3, [r4, #4]
 8009a9a:	6923      	ldr	r3, [r4, #16]
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	f043 0308 	orr.w	r3, r3, #8
 8009aa4:	81a3      	strh	r3, [r4, #12]
 8009aa6:	6923      	ldr	r3, [r4, #16]
 8009aa8:	b94b      	cbnz	r3, 8009abe <__swsetup_r+0x9a>
 8009aaa:	89a3      	ldrh	r3, [r4, #12]
 8009aac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009ab0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ab4:	d003      	beq.n	8009abe <__swsetup_r+0x9a>
 8009ab6:	4621      	mov	r1, r4
 8009ab8:	4630      	mov	r0, r6
 8009aba:	f001 f87f 	bl	800abbc <__smakebuf_r>
 8009abe:	89a0      	ldrh	r0, [r4, #12]
 8009ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009ac4:	f010 0301 	ands.w	r3, r0, #1
 8009ac8:	d00a      	beq.n	8009ae0 <__swsetup_r+0xbc>
 8009aca:	2300      	movs	r3, #0
 8009acc:	60a3      	str	r3, [r4, #8]
 8009ace:	6963      	ldr	r3, [r4, #20]
 8009ad0:	425b      	negs	r3, r3
 8009ad2:	61a3      	str	r3, [r4, #24]
 8009ad4:	6923      	ldr	r3, [r4, #16]
 8009ad6:	b943      	cbnz	r3, 8009aea <__swsetup_r+0xc6>
 8009ad8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009adc:	d1ba      	bne.n	8009a54 <__swsetup_r+0x30>
 8009ade:	bd70      	pop	{r4, r5, r6, pc}
 8009ae0:	0781      	lsls	r1, r0, #30
 8009ae2:	bf58      	it	pl
 8009ae4:	6963      	ldrpl	r3, [r4, #20]
 8009ae6:	60a3      	str	r3, [r4, #8]
 8009ae8:	e7f4      	b.n	8009ad4 <__swsetup_r+0xb0>
 8009aea:	2000      	movs	r0, #0
 8009aec:	e7f7      	b.n	8009ade <__swsetup_r+0xba>
 8009aee:	bf00      	nop
 8009af0:	2000000c 	.word	0x2000000c
 8009af4:	0800d40c 	.word	0x0800d40c
 8009af8:	0800d42c 	.word	0x0800d42c
 8009afc:	0800d3ec 	.word	0x0800d3ec

08009b00 <quorem>:
 8009b00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b04:	6903      	ldr	r3, [r0, #16]
 8009b06:	690c      	ldr	r4, [r1, #16]
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	4607      	mov	r7, r0
 8009b0c:	f2c0 8081 	blt.w	8009c12 <quorem+0x112>
 8009b10:	3c01      	subs	r4, #1
 8009b12:	f101 0814 	add.w	r8, r1, #20
 8009b16:	f100 0514 	add.w	r5, r0, #20
 8009b1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b1e:	9301      	str	r3, [sp, #4]
 8009b20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b28:	3301      	adds	r3, #1
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b34:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b38:	d331      	bcc.n	8009b9e <quorem+0x9e>
 8009b3a:	f04f 0e00 	mov.w	lr, #0
 8009b3e:	4640      	mov	r0, r8
 8009b40:	46ac      	mov	ip, r5
 8009b42:	46f2      	mov	sl, lr
 8009b44:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b48:	b293      	uxth	r3, r2
 8009b4a:	fb06 e303 	mla	r3, r6, r3, lr
 8009b4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	ebaa 0303 	sub.w	r3, sl, r3
 8009b58:	f8dc a000 	ldr.w	sl, [ip]
 8009b5c:	0c12      	lsrs	r2, r2, #16
 8009b5e:	fa13 f38a 	uxtah	r3, r3, sl
 8009b62:	fb06 e202 	mla	r2, r6, r2, lr
 8009b66:	9300      	str	r3, [sp, #0]
 8009b68:	9b00      	ldr	r3, [sp, #0]
 8009b6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b6e:	b292      	uxth	r2, r2
 8009b70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b78:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b7c:	4581      	cmp	r9, r0
 8009b7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b82:	f84c 3b04 	str.w	r3, [ip], #4
 8009b86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b8a:	d2db      	bcs.n	8009b44 <quorem+0x44>
 8009b8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b90:	b92b      	cbnz	r3, 8009b9e <quorem+0x9e>
 8009b92:	9b01      	ldr	r3, [sp, #4]
 8009b94:	3b04      	subs	r3, #4
 8009b96:	429d      	cmp	r5, r3
 8009b98:	461a      	mov	r2, r3
 8009b9a:	d32e      	bcc.n	8009bfa <quorem+0xfa>
 8009b9c:	613c      	str	r4, [r7, #16]
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	f001 fae4 	bl	800b16c <__mcmp>
 8009ba4:	2800      	cmp	r0, #0
 8009ba6:	db24      	blt.n	8009bf2 <quorem+0xf2>
 8009ba8:	3601      	adds	r6, #1
 8009baa:	4628      	mov	r0, r5
 8009bac:	f04f 0c00 	mov.w	ip, #0
 8009bb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bb4:	f8d0 e000 	ldr.w	lr, [r0]
 8009bb8:	b293      	uxth	r3, r2
 8009bba:	ebac 0303 	sub.w	r3, ip, r3
 8009bbe:	0c12      	lsrs	r2, r2, #16
 8009bc0:	fa13 f38e 	uxtah	r3, r3, lr
 8009bc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bcc:	b29b      	uxth	r3, r3
 8009bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bd2:	45c1      	cmp	r9, r8
 8009bd4:	f840 3b04 	str.w	r3, [r0], #4
 8009bd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bdc:	d2e8      	bcs.n	8009bb0 <quorem+0xb0>
 8009bde:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009be2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009be6:	b922      	cbnz	r2, 8009bf2 <quorem+0xf2>
 8009be8:	3b04      	subs	r3, #4
 8009bea:	429d      	cmp	r5, r3
 8009bec:	461a      	mov	r2, r3
 8009bee:	d30a      	bcc.n	8009c06 <quorem+0x106>
 8009bf0:	613c      	str	r4, [r7, #16]
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	b003      	add	sp, #12
 8009bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bfa:	6812      	ldr	r2, [r2, #0]
 8009bfc:	3b04      	subs	r3, #4
 8009bfe:	2a00      	cmp	r2, #0
 8009c00:	d1cc      	bne.n	8009b9c <quorem+0x9c>
 8009c02:	3c01      	subs	r4, #1
 8009c04:	e7c7      	b.n	8009b96 <quorem+0x96>
 8009c06:	6812      	ldr	r2, [r2, #0]
 8009c08:	3b04      	subs	r3, #4
 8009c0a:	2a00      	cmp	r2, #0
 8009c0c:	d1f0      	bne.n	8009bf0 <quorem+0xf0>
 8009c0e:	3c01      	subs	r4, #1
 8009c10:	e7eb      	b.n	8009bea <quorem+0xea>
 8009c12:	2000      	movs	r0, #0
 8009c14:	e7ee      	b.n	8009bf4 <quorem+0xf4>
	...

08009c18 <_dtoa_r>:
 8009c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c1c:	ed2d 8b04 	vpush	{d8-d9}
 8009c20:	ec57 6b10 	vmov	r6, r7, d0
 8009c24:	b093      	sub	sp, #76	; 0x4c
 8009c26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c2c:	9106      	str	r1, [sp, #24]
 8009c2e:	ee10 aa10 	vmov	sl, s0
 8009c32:	4604      	mov	r4, r0
 8009c34:	9209      	str	r2, [sp, #36]	; 0x24
 8009c36:	930c      	str	r3, [sp, #48]	; 0x30
 8009c38:	46bb      	mov	fp, r7
 8009c3a:	b975      	cbnz	r5, 8009c5a <_dtoa_r+0x42>
 8009c3c:	2010      	movs	r0, #16
 8009c3e:	f000 fffd 	bl	800ac3c <malloc>
 8009c42:	4602      	mov	r2, r0
 8009c44:	6260      	str	r0, [r4, #36]	; 0x24
 8009c46:	b920      	cbnz	r0, 8009c52 <_dtoa_r+0x3a>
 8009c48:	4ba7      	ldr	r3, [pc, #668]	; (8009ee8 <_dtoa_r+0x2d0>)
 8009c4a:	21ea      	movs	r1, #234	; 0xea
 8009c4c:	48a7      	ldr	r0, [pc, #668]	; (8009eec <_dtoa_r+0x2d4>)
 8009c4e:	f001 fe45 	bl	800b8dc <__assert_func>
 8009c52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c56:	6005      	str	r5, [r0, #0]
 8009c58:	60c5      	str	r5, [r0, #12]
 8009c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c5c:	6819      	ldr	r1, [r3, #0]
 8009c5e:	b151      	cbz	r1, 8009c76 <_dtoa_r+0x5e>
 8009c60:	685a      	ldr	r2, [r3, #4]
 8009c62:	604a      	str	r2, [r1, #4]
 8009c64:	2301      	movs	r3, #1
 8009c66:	4093      	lsls	r3, r2
 8009c68:	608b      	str	r3, [r1, #8]
 8009c6a:	4620      	mov	r0, r4
 8009c6c:	f001 f83c 	bl	800ace8 <_Bfree>
 8009c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c72:	2200      	movs	r2, #0
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	1e3b      	subs	r3, r7, #0
 8009c78:	bfaa      	itet	ge
 8009c7a:	2300      	movge	r3, #0
 8009c7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009c80:	f8c8 3000 	strge.w	r3, [r8]
 8009c84:	4b9a      	ldr	r3, [pc, #616]	; (8009ef0 <_dtoa_r+0x2d8>)
 8009c86:	bfbc      	itt	lt
 8009c88:	2201      	movlt	r2, #1
 8009c8a:	f8c8 2000 	strlt.w	r2, [r8]
 8009c8e:	ea33 030b 	bics.w	r3, r3, fp
 8009c92:	d11b      	bne.n	8009ccc <_dtoa_r+0xb4>
 8009c94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c96:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c9a:	6013      	str	r3, [r2, #0]
 8009c9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ca0:	4333      	orrs	r3, r6
 8009ca2:	f000 8592 	beq.w	800a7ca <_dtoa_r+0xbb2>
 8009ca6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ca8:	b963      	cbnz	r3, 8009cc4 <_dtoa_r+0xac>
 8009caa:	4b92      	ldr	r3, [pc, #584]	; (8009ef4 <_dtoa_r+0x2dc>)
 8009cac:	e022      	b.n	8009cf4 <_dtoa_r+0xdc>
 8009cae:	4b92      	ldr	r3, [pc, #584]	; (8009ef8 <_dtoa_r+0x2e0>)
 8009cb0:	9301      	str	r3, [sp, #4]
 8009cb2:	3308      	adds	r3, #8
 8009cb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cb6:	6013      	str	r3, [r2, #0]
 8009cb8:	9801      	ldr	r0, [sp, #4]
 8009cba:	b013      	add	sp, #76	; 0x4c
 8009cbc:	ecbd 8b04 	vpop	{d8-d9}
 8009cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc4:	4b8b      	ldr	r3, [pc, #556]	; (8009ef4 <_dtoa_r+0x2dc>)
 8009cc6:	9301      	str	r3, [sp, #4]
 8009cc8:	3303      	adds	r3, #3
 8009cca:	e7f3      	b.n	8009cb4 <_dtoa_r+0x9c>
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2300      	movs	r3, #0
 8009cd0:	4650      	mov	r0, sl
 8009cd2:	4659      	mov	r1, fp
 8009cd4:	f7f6 fef8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cd8:	ec4b ab19 	vmov	d9, sl, fp
 8009cdc:	4680      	mov	r8, r0
 8009cde:	b158      	cbz	r0, 8009cf8 <_dtoa_r+0xe0>
 8009ce0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	6013      	str	r3, [r2, #0]
 8009ce6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	f000 856b 	beq.w	800a7c4 <_dtoa_r+0xbac>
 8009cee:	4883      	ldr	r0, [pc, #524]	; (8009efc <_dtoa_r+0x2e4>)
 8009cf0:	6018      	str	r0, [r3, #0]
 8009cf2:	1e43      	subs	r3, r0, #1
 8009cf4:	9301      	str	r3, [sp, #4]
 8009cf6:	e7df      	b.n	8009cb8 <_dtoa_r+0xa0>
 8009cf8:	ec4b ab10 	vmov	d0, sl, fp
 8009cfc:	aa10      	add	r2, sp, #64	; 0x40
 8009cfe:	a911      	add	r1, sp, #68	; 0x44
 8009d00:	4620      	mov	r0, r4
 8009d02:	f001 fad9 	bl	800b2b8 <__d2b>
 8009d06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009d0a:	ee08 0a10 	vmov	s16, r0
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	f000 8084 	beq.w	8009e1c <_dtoa_r+0x204>
 8009d14:	ee19 3a90 	vmov	r3, s19
 8009d18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d20:	4656      	mov	r6, sl
 8009d22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d2e:	4b74      	ldr	r3, [pc, #464]	; (8009f00 <_dtoa_r+0x2e8>)
 8009d30:	2200      	movs	r2, #0
 8009d32:	4630      	mov	r0, r6
 8009d34:	4639      	mov	r1, r7
 8009d36:	f7f6 faa7 	bl	8000288 <__aeabi_dsub>
 8009d3a:	a365      	add	r3, pc, #404	; (adr r3, 8009ed0 <_dtoa_r+0x2b8>)
 8009d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d40:	f7f6 fc5a 	bl	80005f8 <__aeabi_dmul>
 8009d44:	a364      	add	r3, pc, #400	; (adr r3, 8009ed8 <_dtoa_r+0x2c0>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	f7f6 fa9f 	bl	800028c <__adddf3>
 8009d4e:	4606      	mov	r6, r0
 8009d50:	4628      	mov	r0, r5
 8009d52:	460f      	mov	r7, r1
 8009d54:	f7f6 fbe6 	bl	8000524 <__aeabi_i2d>
 8009d58:	a361      	add	r3, pc, #388	; (adr r3, 8009ee0 <_dtoa_r+0x2c8>)
 8009d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d5e:	f7f6 fc4b 	bl	80005f8 <__aeabi_dmul>
 8009d62:	4602      	mov	r2, r0
 8009d64:	460b      	mov	r3, r1
 8009d66:	4630      	mov	r0, r6
 8009d68:	4639      	mov	r1, r7
 8009d6a:	f7f6 fa8f 	bl	800028c <__adddf3>
 8009d6e:	4606      	mov	r6, r0
 8009d70:	460f      	mov	r7, r1
 8009d72:	f7f6 fef1 	bl	8000b58 <__aeabi_d2iz>
 8009d76:	2200      	movs	r2, #0
 8009d78:	9000      	str	r0, [sp, #0]
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 feac 	bl	8000adc <__aeabi_dcmplt>
 8009d84:	b150      	cbz	r0, 8009d9c <_dtoa_r+0x184>
 8009d86:	9800      	ldr	r0, [sp, #0]
 8009d88:	f7f6 fbcc 	bl	8000524 <__aeabi_i2d>
 8009d8c:	4632      	mov	r2, r6
 8009d8e:	463b      	mov	r3, r7
 8009d90:	f7f6 fe9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d94:	b910      	cbnz	r0, 8009d9c <_dtoa_r+0x184>
 8009d96:	9b00      	ldr	r3, [sp, #0]
 8009d98:	3b01      	subs	r3, #1
 8009d9a:	9300      	str	r3, [sp, #0]
 8009d9c:	9b00      	ldr	r3, [sp, #0]
 8009d9e:	2b16      	cmp	r3, #22
 8009da0:	d85a      	bhi.n	8009e58 <_dtoa_r+0x240>
 8009da2:	9a00      	ldr	r2, [sp, #0]
 8009da4:	4b57      	ldr	r3, [pc, #348]	; (8009f04 <_dtoa_r+0x2ec>)
 8009da6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	ec51 0b19 	vmov	r0, r1, d9
 8009db2:	f7f6 fe93 	bl	8000adc <__aeabi_dcmplt>
 8009db6:	2800      	cmp	r0, #0
 8009db8:	d050      	beq.n	8009e5c <_dtoa_r+0x244>
 8009dba:	9b00      	ldr	r3, [sp, #0]
 8009dbc:	3b01      	subs	r3, #1
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dc6:	1b5d      	subs	r5, r3, r5
 8009dc8:	1e6b      	subs	r3, r5, #1
 8009dca:	9305      	str	r3, [sp, #20]
 8009dcc:	bf45      	ittet	mi
 8009dce:	f1c5 0301 	rsbmi	r3, r5, #1
 8009dd2:	9304      	strmi	r3, [sp, #16]
 8009dd4:	2300      	movpl	r3, #0
 8009dd6:	2300      	movmi	r3, #0
 8009dd8:	bf4c      	ite	mi
 8009dda:	9305      	strmi	r3, [sp, #20]
 8009ddc:	9304      	strpl	r3, [sp, #16]
 8009dde:	9b00      	ldr	r3, [sp, #0]
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	db3d      	blt.n	8009e60 <_dtoa_r+0x248>
 8009de4:	9b05      	ldr	r3, [sp, #20]
 8009de6:	9a00      	ldr	r2, [sp, #0]
 8009de8:	920a      	str	r2, [sp, #40]	; 0x28
 8009dea:	4413      	add	r3, r2
 8009dec:	9305      	str	r3, [sp, #20]
 8009dee:	2300      	movs	r3, #0
 8009df0:	9307      	str	r3, [sp, #28]
 8009df2:	9b06      	ldr	r3, [sp, #24]
 8009df4:	2b09      	cmp	r3, #9
 8009df6:	f200 8089 	bhi.w	8009f0c <_dtoa_r+0x2f4>
 8009dfa:	2b05      	cmp	r3, #5
 8009dfc:	bfc4      	itt	gt
 8009dfe:	3b04      	subgt	r3, #4
 8009e00:	9306      	strgt	r3, [sp, #24]
 8009e02:	9b06      	ldr	r3, [sp, #24]
 8009e04:	f1a3 0302 	sub.w	r3, r3, #2
 8009e08:	bfcc      	ite	gt
 8009e0a:	2500      	movgt	r5, #0
 8009e0c:	2501      	movle	r5, #1
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	f200 8087 	bhi.w	8009f22 <_dtoa_r+0x30a>
 8009e14:	e8df f003 	tbb	[pc, r3]
 8009e18:	59383a2d 	.word	0x59383a2d
 8009e1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009e20:	441d      	add	r5, r3
 8009e22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e26:	2b20      	cmp	r3, #32
 8009e28:	bfc1      	itttt	gt
 8009e2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e32:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e3a:	bfda      	itte	le
 8009e3c:	f1c3 0320 	rsble	r3, r3, #32
 8009e40:	fa06 f003 	lslle.w	r0, r6, r3
 8009e44:	4318      	orrgt	r0, r3
 8009e46:	f7f6 fb5d 	bl	8000504 <__aeabi_ui2d>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	4606      	mov	r6, r0
 8009e4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e52:	3d01      	subs	r5, #1
 8009e54:	930e      	str	r3, [sp, #56]	; 0x38
 8009e56:	e76a      	b.n	8009d2e <_dtoa_r+0x116>
 8009e58:	2301      	movs	r3, #1
 8009e5a:	e7b2      	b.n	8009dc2 <_dtoa_r+0x1aa>
 8009e5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e5e:	e7b1      	b.n	8009dc4 <_dtoa_r+0x1ac>
 8009e60:	9b04      	ldr	r3, [sp, #16]
 8009e62:	9a00      	ldr	r2, [sp, #0]
 8009e64:	1a9b      	subs	r3, r3, r2
 8009e66:	9304      	str	r3, [sp, #16]
 8009e68:	4253      	negs	r3, r2
 8009e6a:	9307      	str	r3, [sp, #28]
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009e70:	e7bf      	b.n	8009df2 <_dtoa_r+0x1da>
 8009e72:	2300      	movs	r3, #0
 8009e74:	9308      	str	r3, [sp, #32]
 8009e76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	dc55      	bgt.n	8009f28 <_dtoa_r+0x310>
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e82:	461a      	mov	r2, r3
 8009e84:	9209      	str	r2, [sp, #36]	; 0x24
 8009e86:	e00c      	b.n	8009ea2 <_dtoa_r+0x28a>
 8009e88:	2301      	movs	r3, #1
 8009e8a:	e7f3      	b.n	8009e74 <_dtoa_r+0x25c>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e90:	9308      	str	r3, [sp, #32]
 8009e92:	9b00      	ldr	r3, [sp, #0]
 8009e94:	4413      	add	r3, r2
 8009e96:	9302      	str	r3, [sp, #8]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	2b01      	cmp	r3, #1
 8009e9c:	9303      	str	r3, [sp, #12]
 8009e9e:	bfb8      	it	lt
 8009ea0:	2301      	movlt	r3, #1
 8009ea2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	6042      	str	r2, [r0, #4]
 8009ea8:	2204      	movs	r2, #4
 8009eaa:	f102 0614 	add.w	r6, r2, #20
 8009eae:	429e      	cmp	r6, r3
 8009eb0:	6841      	ldr	r1, [r0, #4]
 8009eb2:	d93d      	bls.n	8009f30 <_dtoa_r+0x318>
 8009eb4:	4620      	mov	r0, r4
 8009eb6:	f000 fed7 	bl	800ac68 <_Balloc>
 8009eba:	9001      	str	r0, [sp, #4]
 8009ebc:	2800      	cmp	r0, #0
 8009ebe:	d13b      	bne.n	8009f38 <_dtoa_r+0x320>
 8009ec0:	4b11      	ldr	r3, [pc, #68]	; (8009f08 <_dtoa_r+0x2f0>)
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ec8:	e6c0      	b.n	8009c4c <_dtoa_r+0x34>
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e7df      	b.n	8009e8e <_dtoa_r+0x276>
 8009ece:	bf00      	nop
 8009ed0:	636f4361 	.word	0x636f4361
 8009ed4:	3fd287a7 	.word	0x3fd287a7
 8009ed8:	8b60c8b3 	.word	0x8b60c8b3
 8009edc:	3fc68a28 	.word	0x3fc68a28
 8009ee0:	509f79fb 	.word	0x509f79fb
 8009ee4:	3fd34413 	.word	0x3fd34413
 8009ee8:	0800d369 	.word	0x0800d369
 8009eec:	0800d380 	.word	0x0800d380
 8009ef0:	7ff00000 	.word	0x7ff00000
 8009ef4:	0800d365 	.word	0x0800d365
 8009ef8:	0800d35c 	.word	0x0800d35c
 8009efc:	0800d339 	.word	0x0800d339
 8009f00:	3ff80000 	.word	0x3ff80000
 8009f04:	0800d4d0 	.word	0x0800d4d0
 8009f08:	0800d3db 	.word	0x0800d3db
 8009f0c:	2501      	movs	r5, #1
 8009f0e:	2300      	movs	r3, #0
 8009f10:	9306      	str	r3, [sp, #24]
 8009f12:	9508      	str	r5, [sp, #32]
 8009f14:	f04f 33ff 	mov.w	r3, #4294967295
 8009f18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	2312      	movs	r3, #18
 8009f20:	e7b0      	b.n	8009e84 <_dtoa_r+0x26c>
 8009f22:	2301      	movs	r3, #1
 8009f24:	9308      	str	r3, [sp, #32]
 8009f26:	e7f5      	b.n	8009f14 <_dtoa_r+0x2fc>
 8009f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f2e:	e7b8      	b.n	8009ea2 <_dtoa_r+0x28a>
 8009f30:	3101      	adds	r1, #1
 8009f32:	6041      	str	r1, [r0, #4]
 8009f34:	0052      	lsls	r2, r2, #1
 8009f36:	e7b8      	b.n	8009eaa <_dtoa_r+0x292>
 8009f38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f3a:	9a01      	ldr	r2, [sp, #4]
 8009f3c:	601a      	str	r2, [r3, #0]
 8009f3e:	9b03      	ldr	r3, [sp, #12]
 8009f40:	2b0e      	cmp	r3, #14
 8009f42:	f200 809d 	bhi.w	800a080 <_dtoa_r+0x468>
 8009f46:	2d00      	cmp	r5, #0
 8009f48:	f000 809a 	beq.w	800a080 <_dtoa_r+0x468>
 8009f4c:	9b00      	ldr	r3, [sp, #0]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	dd32      	ble.n	8009fb8 <_dtoa_r+0x3a0>
 8009f52:	4ab7      	ldr	r2, [pc, #732]	; (800a230 <_dtoa_r+0x618>)
 8009f54:	f003 030f 	and.w	r3, r3, #15
 8009f58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f60:	9b00      	ldr	r3, [sp, #0]
 8009f62:	05d8      	lsls	r0, r3, #23
 8009f64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009f68:	d516      	bpl.n	8009f98 <_dtoa_r+0x380>
 8009f6a:	4bb2      	ldr	r3, [pc, #712]	; (800a234 <_dtoa_r+0x61c>)
 8009f6c:	ec51 0b19 	vmov	r0, r1, d9
 8009f70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f74:	f7f6 fc6a 	bl	800084c <__aeabi_ddiv>
 8009f78:	f007 070f 	and.w	r7, r7, #15
 8009f7c:	4682      	mov	sl, r0
 8009f7e:	468b      	mov	fp, r1
 8009f80:	2503      	movs	r5, #3
 8009f82:	4eac      	ldr	r6, [pc, #688]	; (800a234 <_dtoa_r+0x61c>)
 8009f84:	b957      	cbnz	r7, 8009f9c <_dtoa_r+0x384>
 8009f86:	4642      	mov	r2, r8
 8009f88:	464b      	mov	r3, r9
 8009f8a:	4650      	mov	r0, sl
 8009f8c:	4659      	mov	r1, fp
 8009f8e:	f7f6 fc5d 	bl	800084c <__aeabi_ddiv>
 8009f92:	4682      	mov	sl, r0
 8009f94:	468b      	mov	fp, r1
 8009f96:	e028      	b.n	8009fea <_dtoa_r+0x3d2>
 8009f98:	2502      	movs	r5, #2
 8009f9a:	e7f2      	b.n	8009f82 <_dtoa_r+0x36a>
 8009f9c:	07f9      	lsls	r1, r7, #31
 8009f9e:	d508      	bpl.n	8009fb2 <_dtoa_r+0x39a>
 8009fa0:	4640      	mov	r0, r8
 8009fa2:	4649      	mov	r1, r9
 8009fa4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fa8:	f7f6 fb26 	bl	80005f8 <__aeabi_dmul>
 8009fac:	3501      	adds	r5, #1
 8009fae:	4680      	mov	r8, r0
 8009fb0:	4689      	mov	r9, r1
 8009fb2:	107f      	asrs	r7, r7, #1
 8009fb4:	3608      	adds	r6, #8
 8009fb6:	e7e5      	b.n	8009f84 <_dtoa_r+0x36c>
 8009fb8:	f000 809b 	beq.w	800a0f2 <_dtoa_r+0x4da>
 8009fbc:	9b00      	ldr	r3, [sp, #0]
 8009fbe:	4f9d      	ldr	r7, [pc, #628]	; (800a234 <_dtoa_r+0x61c>)
 8009fc0:	425e      	negs	r6, r3
 8009fc2:	4b9b      	ldr	r3, [pc, #620]	; (800a230 <_dtoa_r+0x618>)
 8009fc4:	f006 020f 	and.w	r2, r6, #15
 8009fc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fd0:	ec51 0b19 	vmov	r0, r1, d9
 8009fd4:	f7f6 fb10 	bl	80005f8 <__aeabi_dmul>
 8009fd8:	1136      	asrs	r6, r6, #4
 8009fda:	4682      	mov	sl, r0
 8009fdc:	468b      	mov	fp, r1
 8009fde:	2300      	movs	r3, #0
 8009fe0:	2502      	movs	r5, #2
 8009fe2:	2e00      	cmp	r6, #0
 8009fe4:	d17a      	bne.n	800a0dc <_dtoa_r+0x4c4>
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d1d3      	bne.n	8009f92 <_dtoa_r+0x37a>
 8009fea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	f000 8082 	beq.w	800a0f6 <_dtoa_r+0x4de>
 8009ff2:	4b91      	ldr	r3, [pc, #580]	; (800a238 <_dtoa_r+0x620>)
 8009ff4:	2200      	movs	r2, #0
 8009ff6:	4650      	mov	r0, sl
 8009ff8:	4659      	mov	r1, fp
 8009ffa:	f7f6 fd6f 	bl	8000adc <__aeabi_dcmplt>
 8009ffe:	2800      	cmp	r0, #0
 800a000:	d079      	beq.n	800a0f6 <_dtoa_r+0x4de>
 800a002:	9b03      	ldr	r3, [sp, #12]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d076      	beq.n	800a0f6 <_dtoa_r+0x4de>
 800a008:	9b02      	ldr	r3, [sp, #8]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	dd36      	ble.n	800a07c <_dtoa_r+0x464>
 800a00e:	9b00      	ldr	r3, [sp, #0]
 800a010:	4650      	mov	r0, sl
 800a012:	4659      	mov	r1, fp
 800a014:	1e5f      	subs	r7, r3, #1
 800a016:	2200      	movs	r2, #0
 800a018:	4b88      	ldr	r3, [pc, #544]	; (800a23c <_dtoa_r+0x624>)
 800a01a:	f7f6 faed 	bl	80005f8 <__aeabi_dmul>
 800a01e:	9e02      	ldr	r6, [sp, #8]
 800a020:	4682      	mov	sl, r0
 800a022:	468b      	mov	fp, r1
 800a024:	3501      	adds	r5, #1
 800a026:	4628      	mov	r0, r5
 800a028:	f7f6 fa7c 	bl	8000524 <__aeabi_i2d>
 800a02c:	4652      	mov	r2, sl
 800a02e:	465b      	mov	r3, fp
 800a030:	f7f6 fae2 	bl	80005f8 <__aeabi_dmul>
 800a034:	4b82      	ldr	r3, [pc, #520]	; (800a240 <_dtoa_r+0x628>)
 800a036:	2200      	movs	r2, #0
 800a038:	f7f6 f928 	bl	800028c <__adddf3>
 800a03c:	46d0      	mov	r8, sl
 800a03e:	46d9      	mov	r9, fp
 800a040:	4682      	mov	sl, r0
 800a042:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a046:	2e00      	cmp	r6, #0
 800a048:	d158      	bne.n	800a0fc <_dtoa_r+0x4e4>
 800a04a:	4b7e      	ldr	r3, [pc, #504]	; (800a244 <_dtoa_r+0x62c>)
 800a04c:	2200      	movs	r2, #0
 800a04e:	4640      	mov	r0, r8
 800a050:	4649      	mov	r1, r9
 800a052:	f7f6 f919 	bl	8000288 <__aeabi_dsub>
 800a056:	4652      	mov	r2, sl
 800a058:	465b      	mov	r3, fp
 800a05a:	4680      	mov	r8, r0
 800a05c:	4689      	mov	r9, r1
 800a05e:	f7f6 fd5b 	bl	8000b18 <__aeabi_dcmpgt>
 800a062:	2800      	cmp	r0, #0
 800a064:	f040 8295 	bne.w	800a592 <_dtoa_r+0x97a>
 800a068:	4652      	mov	r2, sl
 800a06a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a06e:	4640      	mov	r0, r8
 800a070:	4649      	mov	r1, r9
 800a072:	f7f6 fd33 	bl	8000adc <__aeabi_dcmplt>
 800a076:	2800      	cmp	r0, #0
 800a078:	f040 8289 	bne.w	800a58e <_dtoa_r+0x976>
 800a07c:	ec5b ab19 	vmov	sl, fp, d9
 800a080:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a082:	2b00      	cmp	r3, #0
 800a084:	f2c0 8148 	blt.w	800a318 <_dtoa_r+0x700>
 800a088:	9a00      	ldr	r2, [sp, #0]
 800a08a:	2a0e      	cmp	r2, #14
 800a08c:	f300 8144 	bgt.w	800a318 <_dtoa_r+0x700>
 800a090:	4b67      	ldr	r3, [pc, #412]	; (800a230 <_dtoa_r+0x618>)
 800a092:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a096:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a09a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f280 80d5 	bge.w	800a24c <_dtoa_r+0x634>
 800a0a2:	9b03      	ldr	r3, [sp, #12]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f300 80d1 	bgt.w	800a24c <_dtoa_r+0x634>
 800a0aa:	f040 826f 	bne.w	800a58c <_dtoa_r+0x974>
 800a0ae:	4b65      	ldr	r3, [pc, #404]	; (800a244 <_dtoa_r+0x62c>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4640      	mov	r0, r8
 800a0b4:	4649      	mov	r1, r9
 800a0b6:	f7f6 fa9f 	bl	80005f8 <__aeabi_dmul>
 800a0ba:	4652      	mov	r2, sl
 800a0bc:	465b      	mov	r3, fp
 800a0be:	f7f6 fd21 	bl	8000b04 <__aeabi_dcmpge>
 800a0c2:	9e03      	ldr	r6, [sp, #12]
 800a0c4:	4637      	mov	r7, r6
 800a0c6:	2800      	cmp	r0, #0
 800a0c8:	f040 8245 	bne.w	800a556 <_dtoa_r+0x93e>
 800a0cc:	9d01      	ldr	r5, [sp, #4]
 800a0ce:	2331      	movs	r3, #49	; 0x31
 800a0d0:	f805 3b01 	strb.w	r3, [r5], #1
 800a0d4:	9b00      	ldr	r3, [sp, #0]
 800a0d6:	3301      	adds	r3, #1
 800a0d8:	9300      	str	r3, [sp, #0]
 800a0da:	e240      	b.n	800a55e <_dtoa_r+0x946>
 800a0dc:	07f2      	lsls	r2, r6, #31
 800a0de:	d505      	bpl.n	800a0ec <_dtoa_r+0x4d4>
 800a0e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0e4:	f7f6 fa88 	bl	80005f8 <__aeabi_dmul>
 800a0e8:	3501      	adds	r5, #1
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	1076      	asrs	r6, r6, #1
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	e777      	b.n	8009fe2 <_dtoa_r+0x3ca>
 800a0f2:	2502      	movs	r5, #2
 800a0f4:	e779      	b.n	8009fea <_dtoa_r+0x3d2>
 800a0f6:	9f00      	ldr	r7, [sp, #0]
 800a0f8:	9e03      	ldr	r6, [sp, #12]
 800a0fa:	e794      	b.n	800a026 <_dtoa_r+0x40e>
 800a0fc:	9901      	ldr	r1, [sp, #4]
 800a0fe:	4b4c      	ldr	r3, [pc, #304]	; (800a230 <_dtoa_r+0x618>)
 800a100:	4431      	add	r1, r6
 800a102:	910d      	str	r1, [sp, #52]	; 0x34
 800a104:	9908      	ldr	r1, [sp, #32]
 800a106:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a10a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a10e:	2900      	cmp	r1, #0
 800a110:	d043      	beq.n	800a19a <_dtoa_r+0x582>
 800a112:	494d      	ldr	r1, [pc, #308]	; (800a248 <_dtoa_r+0x630>)
 800a114:	2000      	movs	r0, #0
 800a116:	f7f6 fb99 	bl	800084c <__aeabi_ddiv>
 800a11a:	4652      	mov	r2, sl
 800a11c:	465b      	mov	r3, fp
 800a11e:	f7f6 f8b3 	bl	8000288 <__aeabi_dsub>
 800a122:	9d01      	ldr	r5, [sp, #4]
 800a124:	4682      	mov	sl, r0
 800a126:	468b      	mov	fp, r1
 800a128:	4649      	mov	r1, r9
 800a12a:	4640      	mov	r0, r8
 800a12c:	f7f6 fd14 	bl	8000b58 <__aeabi_d2iz>
 800a130:	4606      	mov	r6, r0
 800a132:	f7f6 f9f7 	bl	8000524 <__aeabi_i2d>
 800a136:	4602      	mov	r2, r0
 800a138:	460b      	mov	r3, r1
 800a13a:	4640      	mov	r0, r8
 800a13c:	4649      	mov	r1, r9
 800a13e:	f7f6 f8a3 	bl	8000288 <__aeabi_dsub>
 800a142:	3630      	adds	r6, #48	; 0x30
 800a144:	f805 6b01 	strb.w	r6, [r5], #1
 800a148:	4652      	mov	r2, sl
 800a14a:	465b      	mov	r3, fp
 800a14c:	4680      	mov	r8, r0
 800a14e:	4689      	mov	r9, r1
 800a150:	f7f6 fcc4 	bl	8000adc <__aeabi_dcmplt>
 800a154:	2800      	cmp	r0, #0
 800a156:	d163      	bne.n	800a220 <_dtoa_r+0x608>
 800a158:	4642      	mov	r2, r8
 800a15a:	464b      	mov	r3, r9
 800a15c:	4936      	ldr	r1, [pc, #216]	; (800a238 <_dtoa_r+0x620>)
 800a15e:	2000      	movs	r0, #0
 800a160:	f7f6 f892 	bl	8000288 <__aeabi_dsub>
 800a164:	4652      	mov	r2, sl
 800a166:	465b      	mov	r3, fp
 800a168:	f7f6 fcb8 	bl	8000adc <__aeabi_dcmplt>
 800a16c:	2800      	cmp	r0, #0
 800a16e:	f040 80b5 	bne.w	800a2dc <_dtoa_r+0x6c4>
 800a172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a174:	429d      	cmp	r5, r3
 800a176:	d081      	beq.n	800a07c <_dtoa_r+0x464>
 800a178:	4b30      	ldr	r3, [pc, #192]	; (800a23c <_dtoa_r+0x624>)
 800a17a:	2200      	movs	r2, #0
 800a17c:	4650      	mov	r0, sl
 800a17e:	4659      	mov	r1, fp
 800a180:	f7f6 fa3a 	bl	80005f8 <__aeabi_dmul>
 800a184:	4b2d      	ldr	r3, [pc, #180]	; (800a23c <_dtoa_r+0x624>)
 800a186:	4682      	mov	sl, r0
 800a188:	468b      	mov	fp, r1
 800a18a:	4640      	mov	r0, r8
 800a18c:	4649      	mov	r1, r9
 800a18e:	2200      	movs	r2, #0
 800a190:	f7f6 fa32 	bl	80005f8 <__aeabi_dmul>
 800a194:	4680      	mov	r8, r0
 800a196:	4689      	mov	r9, r1
 800a198:	e7c6      	b.n	800a128 <_dtoa_r+0x510>
 800a19a:	4650      	mov	r0, sl
 800a19c:	4659      	mov	r1, fp
 800a19e:	f7f6 fa2b 	bl	80005f8 <__aeabi_dmul>
 800a1a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1a4:	9d01      	ldr	r5, [sp, #4]
 800a1a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1a8:	4682      	mov	sl, r0
 800a1aa:	468b      	mov	fp, r1
 800a1ac:	4649      	mov	r1, r9
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	f7f6 fcd2 	bl	8000b58 <__aeabi_d2iz>
 800a1b4:	4606      	mov	r6, r0
 800a1b6:	f7f6 f9b5 	bl	8000524 <__aeabi_i2d>
 800a1ba:	3630      	adds	r6, #48	; 0x30
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4640      	mov	r0, r8
 800a1c2:	4649      	mov	r1, r9
 800a1c4:	f7f6 f860 	bl	8000288 <__aeabi_dsub>
 800a1c8:	f805 6b01 	strb.w	r6, [r5], #1
 800a1cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1ce:	429d      	cmp	r5, r3
 800a1d0:	4680      	mov	r8, r0
 800a1d2:	4689      	mov	r9, r1
 800a1d4:	f04f 0200 	mov.w	r2, #0
 800a1d8:	d124      	bne.n	800a224 <_dtoa_r+0x60c>
 800a1da:	4b1b      	ldr	r3, [pc, #108]	; (800a248 <_dtoa_r+0x630>)
 800a1dc:	4650      	mov	r0, sl
 800a1de:	4659      	mov	r1, fp
 800a1e0:	f7f6 f854 	bl	800028c <__adddf3>
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	4640      	mov	r0, r8
 800a1ea:	4649      	mov	r1, r9
 800a1ec:	f7f6 fc94 	bl	8000b18 <__aeabi_dcmpgt>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d173      	bne.n	800a2dc <_dtoa_r+0x6c4>
 800a1f4:	4652      	mov	r2, sl
 800a1f6:	465b      	mov	r3, fp
 800a1f8:	4913      	ldr	r1, [pc, #76]	; (800a248 <_dtoa_r+0x630>)
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	f7f6 f844 	bl	8000288 <__aeabi_dsub>
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4640      	mov	r0, r8
 800a206:	4649      	mov	r1, r9
 800a208:	f7f6 fc68 	bl	8000adc <__aeabi_dcmplt>
 800a20c:	2800      	cmp	r0, #0
 800a20e:	f43f af35 	beq.w	800a07c <_dtoa_r+0x464>
 800a212:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a214:	1e6b      	subs	r3, r5, #1
 800a216:	930f      	str	r3, [sp, #60]	; 0x3c
 800a218:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a21c:	2b30      	cmp	r3, #48	; 0x30
 800a21e:	d0f8      	beq.n	800a212 <_dtoa_r+0x5fa>
 800a220:	9700      	str	r7, [sp, #0]
 800a222:	e049      	b.n	800a2b8 <_dtoa_r+0x6a0>
 800a224:	4b05      	ldr	r3, [pc, #20]	; (800a23c <_dtoa_r+0x624>)
 800a226:	f7f6 f9e7 	bl	80005f8 <__aeabi_dmul>
 800a22a:	4680      	mov	r8, r0
 800a22c:	4689      	mov	r9, r1
 800a22e:	e7bd      	b.n	800a1ac <_dtoa_r+0x594>
 800a230:	0800d4d0 	.word	0x0800d4d0
 800a234:	0800d4a8 	.word	0x0800d4a8
 800a238:	3ff00000 	.word	0x3ff00000
 800a23c:	40240000 	.word	0x40240000
 800a240:	401c0000 	.word	0x401c0000
 800a244:	40140000 	.word	0x40140000
 800a248:	3fe00000 	.word	0x3fe00000
 800a24c:	9d01      	ldr	r5, [sp, #4]
 800a24e:	4656      	mov	r6, sl
 800a250:	465f      	mov	r7, fp
 800a252:	4642      	mov	r2, r8
 800a254:	464b      	mov	r3, r9
 800a256:	4630      	mov	r0, r6
 800a258:	4639      	mov	r1, r7
 800a25a:	f7f6 faf7 	bl	800084c <__aeabi_ddiv>
 800a25e:	f7f6 fc7b 	bl	8000b58 <__aeabi_d2iz>
 800a262:	4682      	mov	sl, r0
 800a264:	f7f6 f95e 	bl	8000524 <__aeabi_i2d>
 800a268:	4642      	mov	r2, r8
 800a26a:	464b      	mov	r3, r9
 800a26c:	f7f6 f9c4 	bl	80005f8 <__aeabi_dmul>
 800a270:	4602      	mov	r2, r0
 800a272:	460b      	mov	r3, r1
 800a274:	4630      	mov	r0, r6
 800a276:	4639      	mov	r1, r7
 800a278:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a27c:	f7f6 f804 	bl	8000288 <__aeabi_dsub>
 800a280:	f805 6b01 	strb.w	r6, [r5], #1
 800a284:	9e01      	ldr	r6, [sp, #4]
 800a286:	9f03      	ldr	r7, [sp, #12]
 800a288:	1bae      	subs	r6, r5, r6
 800a28a:	42b7      	cmp	r7, r6
 800a28c:	4602      	mov	r2, r0
 800a28e:	460b      	mov	r3, r1
 800a290:	d135      	bne.n	800a2fe <_dtoa_r+0x6e6>
 800a292:	f7f5 fffb 	bl	800028c <__adddf3>
 800a296:	4642      	mov	r2, r8
 800a298:	464b      	mov	r3, r9
 800a29a:	4606      	mov	r6, r0
 800a29c:	460f      	mov	r7, r1
 800a29e:	f7f6 fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 800a2a2:	b9d0      	cbnz	r0, 800a2da <_dtoa_r+0x6c2>
 800a2a4:	4642      	mov	r2, r8
 800a2a6:	464b      	mov	r3, r9
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	4639      	mov	r1, r7
 800a2ac:	f7f6 fc0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2b0:	b110      	cbz	r0, 800a2b8 <_dtoa_r+0x6a0>
 800a2b2:	f01a 0f01 	tst.w	sl, #1
 800a2b6:	d110      	bne.n	800a2da <_dtoa_r+0x6c2>
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	ee18 1a10 	vmov	r1, s16
 800a2be:	f000 fd13 	bl	800ace8 <_Bfree>
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	9800      	ldr	r0, [sp, #0]
 800a2c6:	702b      	strb	r3, [r5, #0]
 800a2c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2ca:	3001      	adds	r0, #1
 800a2cc:	6018      	str	r0, [r3, #0]
 800a2ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	f43f acf1 	beq.w	8009cb8 <_dtoa_r+0xa0>
 800a2d6:	601d      	str	r5, [r3, #0]
 800a2d8:	e4ee      	b.n	8009cb8 <_dtoa_r+0xa0>
 800a2da:	9f00      	ldr	r7, [sp, #0]
 800a2dc:	462b      	mov	r3, r5
 800a2de:	461d      	mov	r5, r3
 800a2e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2e4:	2a39      	cmp	r2, #57	; 0x39
 800a2e6:	d106      	bne.n	800a2f6 <_dtoa_r+0x6de>
 800a2e8:	9a01      	ldr	r2, [sp, #4]
 800a2ea:	429a      	cmp	r2, r3
 800a2ec:	d1f7      	bne.n	800a2de <_dtoa_r+0x6c6>
 800a2ee:	9901      	ldr	r1, [sp, #4]
 800a2f0:	2230      	movs	r2, #48	; 0x30
 800a2f2:	3701      	adds	r7, #1
 800a2f4:	700a      	strb	r2, [r1, #0]
 800a2f6:	781a      	ldrb	r2, [r3, #0]
 800a2f8:	3201      	adds	r2, #1
 800a2fa:	701a      	strb	r2, [r3, #0]
 800a2fc:	e790      	b.n	800a220 <_dtoa_r+0x608>
 800a2fe:	4ba6      	ldr	r3, [pc, #664]	; (800a598 <_dtoa_r+0x980>)
 800a300:	2200      	movs	r2, #0
 800a302:	f7f6 f979 	bl	80005f8 <__aeabi_dmul>
 800a306:	2200      	movs	r2, #0
 800a308:	2300      	movs	r3, #0
 800a30a:	4606      	mov	r6, r0
 800a30c:	460f      	mov	r7, r1
 800a30e:	f7f6 fbdb 	bl	8000ac8 <__aeabi_dcmpeq>
 800a312:	2800      	cmp	r0, #0
 800a314:	d09d      	beq.n	800a252 <_dtoa_r+0x63a>
 800a316:	e7cf      	b.n	800a2b8 <_dtoa_r+0x6a0>
 800a318:	9a08      	ldr	r2, [sp, #32]
 800a31a:	2a00      	cmp	r2, #0
 800a31c:	f000 80d7 	beq.w	800a4ce <_dtoa_r+0x8b6>
 800a320:	9a06      	ldr	r2, [sp, #24]
 800a322:	2a01      	cmp	r2, #1
 800a324:	f300 80ba 	bgt.w	800a49c <_dtoa_r+0x884>
 800a328:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	f000 80b2 	beq.w	800a494 <_dtoa_r+0x87c>
 800a330:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a334:	9e07      	ldr	r6, [sp, #28]
 800a336:	9d04      	ldr	r5, [sp, #16]
 800a338:	9a04      	ldr	r2, [sp, #16]
 800a33a:	441a      	add	r2, r3
 800a33c:	9204      	str	r2, [sp, #16]
 800a33e:	9a05      	ldr	r2, [sp, #20]
 800a340:	2101      	movs	r1, #1
 800a342:	441a      	add	r2, r3
 800a344:	4620      	mov	r0, r4
 800a346:	9205      	str	r2, [sp, #20]
 800a348:	f000 fd86 	bl	800ae58 <__i2b>
 800a34c:	4607      	mov	r7, r0
 800a34e:	2d00      	cmp	r5, #0
 800a350:	dd0c      	ble.n	800a36c <_dtoa_r+0x754>
 800a352:	9b05      	ldr	r3, [sp, #20]
 800a354:	2b00      	cmp	r3, #0
 800a356:	dd09      	ble.n	800a36c <_dtoa_r+0x754>
 800a358:	42ab      	cmp	r3, r5
 800a35a:	9a04      	ldr	r2, [sp, #16]
 800a35c:	bfa8      	it	ge
 800a35e:	462b      	movge	r3, r5
 800a360:	1ad2      	subs	r2, r2, r3
 800a362:	9204      	str	r2, [sp, #16]
 800a364:	9a05      	ldr	r2, [sp, #20]
 800a366:	1aed      	subs	r5, r5, r3
 800a368:	1ad3      	subs	r3, r2, r3
 800a36a:	9305      	str	r3, [sp, #20]
 800a36c:	9b07      	ldr	r3, [sp, #28]
 800a36e:	b31b      	cbz	r3, 800a3b8 <_dtoa_r+0x7a0>
 800a370:	9b08      	ldr	r3, [sp, #32]
 800a372:	2b00      	cmp	r3, #0
 800a374:	f000 80af 	beq.w	800a4d6 <_dtoa_r+0x8be>
 800a378:	2e00      	cmp	r6, #0
 800a37a:	dd13      	ble.n	800a3a4 <_dtoa_r+0x78c>
 800a37c:	4639      	mov	r1, r7
 800a37e:	4632      	mov	r2, r6
 800a380:	4620      	mov	r0, r4
 800a382:	f000 fe29 	bl	800afd8 <__pow5mult>
 800a386:	ee18 2a10 	vmov	r2, s16
 800a38a:	4601      	mov	r1, r0
 800a38c:	4607      	mov	r7, r0
 800a38e:	4620      	mov	r0, r4
 800a390:	f000 fd78 	bl	800ae84 <__multiply>
 800a394:	ee18 1a10 	vmov	r1, s16
 800a398:	4680      	mov	r8, r0
 800a39a:	4620      	mov	r0, r4
 800a39c:	f000 fca4 	bl	800ace8 <_Bfree>
 800a3a0:	ee08 8a10 	vmov	s16, r8
 800a3a4:	9b07      	ldr	r3, [sp, #28]
 800a3a6:	1b9a      	subs	r2, r3, r6
 800a3a8:	d006      	beq.n	800a3b8 <_dtoa_r+0x7a0>
 800a3aa:	ee18 1a10 	vmov	r1, s16
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	f000 fe12 	bl	800afd8 <__pow5mult>
 800a3b4:	ee08 0a10 	vmov	s16, r0
 800a3b8:	2101      	movs	r1, #1
 800a3ba:	4620      	mov	r0, r4
 800a3bc:	f000 fd4c 	bl	800ae58 <__i2b>
 800a3c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	4606      	mov	r6, r0
 800a3c6:	f340 8088 	ble.w	800a4da <_dtoa_r+0x8c2>
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	4601      	mov	r1, r0
 800a3ce:	4620      	mov	r0, r4
 800a3d0:	f000 fe02 	bl	800afd8 <__pow5mult>
 800a3d4:	9b06      	ldr	r3, [sp, #24]
 800a3d6:	2b01      	cmp	r3, #1
 800a3d8:	4606      	mov	r6, r0
 800a3da:	f340 8081 	ble.w	800a4e0 <_dtoa_r+0x8c8>
 800a3de:	f04f 0800 	mov.w	r8, #0
 800a3e2:	6933      	ldr	r3, [r6, #16]
 800a3e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a3e8:	6918      	ldr	r0, [r3, #16]
 800a3ea:	f000 fce5 	bl	800adb8 <__hi0bits>
 800a3ee:	f1c0 0020 	rsb	r0, r0, #32
 800a3f2:	9b05      	ldr	r3, [sp, #20]
 800a3f4:	4418      	add	r0, r3
 800a3f6:	f010 001f 	ands.w	r0, r0, #31
 800a3fa:	f000 8092 	beq.w	800a522 <_dtoa_r+0x90a>
 800a3fe:	f1c0 0320 	rsb	r3, r0, #32
 800a402:	2b04      	cmp	r3, #4
 800a404:	f340 808a 	ble.w	800a51c <_dtoa_r+0x904>
 800a408:	f1c0 001c 	rsb	r0, r0, #28
 800a40c:	9b04      	ldr	r3, [sp, #16]
 800a40e:	4403      	add	r3, r0
 800a410:	9304      	str	r3, [sp, #16]
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	4403      	add	r3, r0
 800a416:	4405      	add	r5, r0
 800a418:	9305      	str	r3, [sp, #20]
 800a41a:	9b04      	ldr	r3, [sp, #16]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	dd07      	ble.n	800a430 <_dtoa_r+0x818>
 800a420:	ee18 1a10 	vmov	r1, s16
 800a424:	461a      	mov	r2, r3
 800a426:	4620      	mov	r0, r4
 800a428:	f000 fe30 	bl	800b08c <__lshift>
 800a42c:	ee08 0a10 	vmov	s16, r0
 800a430:	9b05      	ldr	r3, [sp, #20]
 800a432:	2b00      	cmp	r3, #0
 800a434:	dd05      	ble.n	800a442 <_dtoa_r+0x82a>
 800a436:	4631      	mov	r1, r6
 800a438:	461a      	mov	r2, r3
 800a43a:	4620      	mov	r0, r4
 800a43c:	f000 fe26 	bl	800b08c <__lshift>
 800a440:	4606      	mov	r6, r0
 800a442:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a444:	2b00      	cmp	r3, #0
 800a446:	d06e      	beq.n	800a526 <_dtoa_r+0x90e>
 800a448:	ee18 0a10 	vmov	r0, s16
 800a44c:	4631      	mov	r1, r6
 800a44e:	f000 fe8d 	bl	800b16c <__mcmp>
 800a452:	2800      	cmp	r0, #0
 800a454:	da67      	bge.n	800a526 <_dtoa_r+0x90e>
 800a456:	9b00      	ldr	r3, [sp, #0]
 800a458:	3b01      	subs	r3, #1
 800a45a:	ee18 1a10 	vmov	r1, s16
 800a45e:	9300      	str	r3, [sp, #0]
 800a460:	220a      	movs	r2, #10
 800a462:	2300      	movs	r3, #0
 800a464:	4620      	mov	r0, r4
 800a466:	f000 fc61 	bl	800ad2c <__multadd>
 800a46a:	9b08      	ldr	r3, [sp, #32]
 800a46c:	ee08 0a10 	vmov	s16, r0
 800a470:	2b00      	cmp	r3, #0
 800a472:	f000 81b1 	beq.w	800a7d8 <_dtoa_r+0xbc0>
 800a476:	2300      	movs	r3, #0
 800a478:	4639      	mov	r1, r7
 800a47a:	220a      	movs	r2, #10
 800a47c:	4620      	mov	r0, r4
 800a47e:	f000 fc55 	bl	800ad2c <__multadd>
 800a482:	9b02      	ldr	r3, [sp, #8]
 800a484:	2b00      	cmp	r3, #0
 800a486:	4607      	mov	r7, r0
 800a488:	f300 808e 	bgt.w	800a5a8 <_dtoa_r+0x990>
 800a48c:	9b06      	ldr	r3, [sp, #24]
 800a48e:	2b02      	cmp	r3, #2
 800a490:	dc51      	bgt.n	800a536 <_dtoa_r+0x91e>
 800a492:	e089      	b.n	800a5a8 <_dtoa_r+0x990>
 800a494:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a496:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a49a:	e74b      	b.n	800a334 <_dtoa_r+0x71c>
 800a49c:	9b03      	ldr	r3, [sp, #12]
 800a49e:	1e5e      	subs	r6, r3, #1
 800a4a0:	9b07      	ldr	r3, [sp, #28]
 800a4a2:	42b3      	cmp	r3, r6
 800a4a4:	bfbf      	itttt	lt
 800a4a6:	9b07      	ldrlt	r3, [sp, #28]
 800a4a8:	9607      	strlt	r6, [sp, #28]
 800a4aa:	1af2      	sublt	r2, r6, r3
 800a4ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4ae:	bfb6      	itet	lt
 800a4b0:	189b      	addlt	r3, r3, r2
 800a4b2:	1b9e      	subge	r6, r3, r6
 800a4b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a4b6:	9b03      	ldr	r3, [sp, #12]
 800a4b8:	bfb8      	it	lt
 800a4ba:	2600      	movlt	r6, #0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	bfb7      	itett	lt
 800a4c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a4c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a4c8:	1a9d      	sublt	r5, r3, r2
 800a4ca:	2300      	movlt	r3, #0
 800a4cc:	e734      	b.n	800a338 <_dtoa_r+0x720>
 800a4ce:	9e07      	ldr	r6, [sp, #28]
 800a4d0:	9d04      	ldr	r5, [sp, #16]
 800a4d2:	9f08      	ldr	r7, [sp, #32]
 800a4d4:	e73b      	b.n	800a34e <_dtoa_r+0x736>
 800a4d6:	9a07      	ldr	r2, [sp, #28]
 800a4d8:	e767      	b.n	800a3aa <_dtoa_r+0x792>
 800a4da:	9b06      	ldr	r3, [sp, #24]
 800a4dc:	2b01      	cmp	r3, #1
 800a4de:	dc18      	bgt.n	800a512 <_dtoa_r+0x8fa>
 800a4e0:	f1ba 0f00 	cmp.w	sl, #0
 800a4e4:	d115      	bne.n	800a512 <_dtoa_r+0x8fa>
 800a4e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4ea:	b993      	cbnz	r3, 800a512 <_dtoa_r+0x8fa>
 800a4ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4f0:	0d1b      	lsrs	r3, r3, #20
 800a4f2:	051b      	lsls	r3, r3, #20
 800a4f4:	b183      	cbz	r3, 800a518 <_dtoa_r+0x900>
 800a4f6:	9b04      	ldr	r3, [sp, #16]
 800a4f8:	3301      	adds	r3, #1
 800a4fa:	9304      	str	r3, [sp, #16]
 800a4fc:	9b05      	ldr	r3, [sp, #20]
 800a4fe:	3301      	adds	r3, #1
 800a500:	9305      	str	r3, [sp, #20]
 800a502:	f04f 0801 	mov.w	r8, #1
 800a506:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a508:	2b00      	cmp	r3, #0
 800a50a:	f47f af6a 	bne.w	800a3e2 <_dtoa_r+0x7ca>
 800a50e:	2001      	movs	r0, #1
 800a510:	e76f      	b.n	800a3f2 <_dtoa_r+0x7da>
 800a512:	f04f 0800 	mov.w	r8, #0
 800a516:	e7f6      	b.n	800a506 <_dtoa_r+0x8ee>
 800a518:	4698      	mov	r8, r3
 800a51a:	e7f4      	b.n	800a506 <_dtoa_r+0x8ee>
 800a51c:	f43f af7d 	beq.w	800a41a <_dtoa_r+0x802>
 800a520:	4618      	mov	r0, r3
 800a522:	301c      	adds	r0, #28
 800a524:	e772      	b.n	800a40c <_dtoa_r+0x7f4>
 800a526:	9b03      	ldr	r3, [sp, #12]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	dc37      	bgt.n	800a59c <_dtoa_r+0x984>
 800a52c:	9b06      	ldr	r3, [sp, #24]
 800a52e:	2b02      	cmp	r3, #2
 800a530:	dd34      	ble.n	800a59c <_dtoa_r+0x984>
 800a532:	9b03      	ldr	r3, [sp, #12]
 800a534:	9302      	str	r3, [sp, #8]
 800a536:	9b02      	ldr	r3, [sp, #8]
 800a538:	b96b      	cbnz	r3, 800a556 <_dtoa_r+0x93e>
 800a53a:	4631      	mov	r1, r6
 800a53c:	2205      	movs	r2, #5
 800a53e:	4620      	mov	r0, r4
 800a540:	f000 fbf4 	bl	800ad2c <__multadd>
 800a544:	4601      	mov	r1, r0
 800a546:	4606      	mov	r6, r0
 800a548:	ee18 0a10 	vmov	r0, s16
 800a54c:	f000 fe0e 	bl	800b16c <__mcmp>
 800a550:	2800      	cmp	r0, #0
 800a552:	f73f adbb 	bgt.w	800a0cc <_dtoa_r+0x4b4>
 800a556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a558:	9d01      	ldr	r5, [sp, #4]
 800a55a:	43db      	mvns	r3, r3
 800a55c:	9300      	str	r3, [sp, #0]
 800a55e:	f04f 0800 	mov.w	r8, #0
 800a562:	4631      	mov	r1, r6
 800a564:	4620      	mov	r0, r4
 800a566:	f000 fbbf 	bl	800ace8 <_Bfree>
 800a56a:	2f00      	cmp	r7, #0
 800a56c:	f43f aea4 	beq.w	800a2b8 <_dtoa_r+0x6a0>
 800a570:	f1b8 0f00 	cmp.w	r8, #0
 800a574:	d005      	beq.n	800a582 <_dtoa_r+0x96a>
 800a576:	45b8      	cmp	r8, r7
 800a578:	d003      	beq.n	800a582 <_dtoa_r+0x96a>
 800a57a:	4641      	mov	r1, r8
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 fbb3 	bl	800ace8 <_Bfree>
 800a582:	4639      	mov	r1, r7
 800a584:	4620      	mov	r0, r4
 800a586:	f000 fbaf 	bl	800ace8 <_Bfree>
 800a58a:	e695      	b.n	800a2b8 <_dtoa_r+0x6a0>
 800a58c:	2600      	movs	r6, #0
 800a58e:	4637      	mov	r7, r6
 800a590:	e7e1      	b.n	800a556 <_dtoa_r+0x93e>
 800a592:	9700      	str	r7, [sp, #0]
 800a594:	4637      	mov	r7, r6
 800a596:	e599      	b.n	800a0cc <_dtoa_r+0x4b4>
 800a598:	40240000 	.word	0x40240000
 800a59c:	9b08      	ldr	r3, [sp, #32]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f000 80ca 	beq.w	800a738 <_dtoa_r+0xb20>
 800a5a4:	9b03      	ldr	r3, [sp, #12]
 800a5a6:	9302      	str	r3, [sp, #8]
 800a5a8:	2d00      	cmp	r5, #0
 800a5aa:	dd05      	ble.n	800a5b8 <_dtoa_r+0x9a0>
 800a5ac:	4639      	mov	r1, r7
 800a5ae:	462a      	mov	r2, r5
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	f000 fd6b 	bl	800b08c <__lshift>
 800a5b6:	4607      	mov	r7, r0
 800a5b8:	f1b8 0f00 	cmp.w	r8, #0
 800a5bc:	d05b      	beq.n	800a676 <_dtoa_r+0xa5e>
 800a5be:	6879      	ldr	r1, [r7, #4]
 800a5c0:	4620      	mov	r0, r4
 800a5c2:	f000 fb51 	bl	800ac68 <_Balloc>
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	b928      	cbnz	r0, 800a5d6 <_dtoa_r+0x9be>
 800a5ca:	4b87      	ldr	r3, [pc, #540]	; (800a7e8 <_dtoa_r+0xbd0>)
 800a5cc:	4602      	mov	r2, r0
 800a5ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a5d2:	f7ff bb3b 	b.w	8009c4c <_dtoa_r+0x34>
 800a5d6:	693a      	ldr	r2, [r7, #16]
 800a5d8:	3202      	adds	r2, #2
 800a5da:	0092      	lsls	r2, r2, #2
 800a5dc:	f107 010c 	add.w	r1, r7, #12
 800a5e0:	300c      	adds	r0, #12
 800a5e2:	f000 fb33 	bl	800ac4c <memcpy>
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	4629      	mov	r1, r5
 800a5ea:	4620      	mov	r0, r4
 800a5ec:	f000 fd4e 	bl	800b08c <__lshift>
 800a5f0:	9b01      	ldr	r3, [sp, #4]
 800a5f2:	f103 0901 	add.w	r9, r3, #1
 800a5f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	f00a 0301 	and.w	r3, sl, #1
 800a602:	46b8      	mov	r8, r7
 800a604:	9304      	str	r3, [sp, #16]
 800a606:	4607      	mov	r7, r0
 800a608:	4631      	mov	r1, r6
 800a60a:	ee18 0a10 	vmov	r0, s16
 800a60e:	f7ff fa77 	bl	8009b00 <quorem>
 800a612:	4641      	mov	r1, r8
 800a614:	9002      	str	r0, [sp, #8]
 800a616:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a61a:	ee18 0a10 	vmov	r0, s16
 800a61e:	f000 fda5 	bl	800b16c <__mcmp>
 800a622:	463a      	mov	r2, r7
 800a624:	9003      	str	r0, [sp, #12]
 800a626:	4631      	mov	r1, r6
 800a628:	4620      	mov	r0, r4
 800a62a:	f000 fdbb 	bl	800b1a4 <__mdiff>
 800a62e:	68c2      	ldr	r2, [r0, #12]
 800a630:	f109 3bff 	add.w	fp, r9, #4294967295
 800a634:	4605      	mov	r5, r0
 800a636:	bb02      	cbnz	r2, 800a67a <_dtoa_r+0xa62>
 800a638:	4601      	mov	r1, r0
 800a63a:	ee18 0a10 	vmov	r0, s16
 800a63e:	f000 fd95 	bl	800b16c <__mcmp>
 800a642:	4602      	mov	r2, r0
 800a644:	4629      	mov	r1, r5
 800a646:	4620      	mov	r0, r4
 800a648:	9207      	str	r2, [sp, #28]
 800a64a:	f000 fb4d 	bl	800ace8 <_Bfree>
 800a64e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a652:	ea43 0102 	orr.w	r1, r3, r2
 800a656:	9b04      	ldr	r3, [sp, #16]
 800a658:	430b      	orrs	r3, r1
 800a65a:	464d      	mov	r5, r9
 800a65c:	d10f      	bne.n	800a67e <_dtoa_r+0xa66>
 800a65e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a662:	d02a      	beq.n	800a6ba <_dtoa_r+0xaa2>
 800a664:	9b03      	ldr	r3, [sp, #12]
 800a666:	2b00      	cmp	r3, #0
 800a668:	dd02      	ble.n	800a670 <_dtoa_r+0xa58>
 800a66a:	9b02      	ldr	r3, [sp, #8]
 800a66c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a670:	f88b a000 	strb.w	sl, [fp]
 800a674:	e775      	b.n	800a562 <_dtoa_r+0x94a>
 800a676:	4638      	mov	r0, r7
 800a678:	e7ba      	b.n	800a5f0 <_dtoa_r+0x9d8>
 800a67a:	2201      	movs	r2, #1
 800a67c:	e7e2      	b.n	800a644 <_dtoa_r+0xa2c>
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	2b00      	cmp	r3, #0
 800a682:	db04      	blt.n	800a68e <_dtoa_r+0xa76>
 800a684:	9906      	ldr	r1, [sp, #24]
 800a686:	430b      	orrs	r3, r1
 800a688:	9904      	ldr	r1, [sp, #16]
 800a68a:	430b      	orrs	r3, r1
 800a68c:	d122      	bne.n	800a6d4 <_dtoa_r+0xabc>
 800a68e:	2a00      	cmp	r2, #0
 800a690:	ddee      	ble.n	800a670 <_dtoa_r+0xa58>
 800a692:	ee18 1a10 	vmov	r1, s16
 800a696:	2201      	movs	r2, #1
 800a698:	4620      	mov	r0, r4
 800a69a:	f000 fcf7 	bl	800b08c <__lshift>
 800a69e:	4631      	mov	r1, r6
 800a6a0:	ee08 0a10 	vmov	s16, r0
 800a6a4:	f000 fd62 	bl	800b16c <__mcmp>
 800a6a8:	2800      	cmp	r0, #0
 800a6aa:	dc03      	bgt.n	800a6b4 <_dtoa_r+0xa9c>
 800a6ac:	d1e0      	bne.n	800a670 <_dtoa_r+0xa58>
 800a6ae:	f01a 0f01 	tst.w	sl, #1
 800a6b2:	d0dd      	beq.n	800a670 <_dtoa_r+0xa58>
 800a6b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6b8:	d1d7      	bne.n	800a66a <_dtoa_r+0xa52>
 800a6ba:	2339      	movs	r3, #57	; 0x39
 800a6bc:	f88b 3000 	strb.w	r3, [fp]
 800a6c0:	462b      	mov	r3, r5
 800a6c2:	461d      	mov	r5, r3
 800a6c4:	3b01      	subs	r3, #1
 800a6c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6ca:	2a39      	cmp	r2, #57	; 0x39
 800a6cc:	d071      	beq.n	800a7b2 <_dtoa_r+0xb9a>
 800a6ce:	3201      	adds	r2, #1
 800a6d0:	701a      	strb	r2, [r3, #0]
 800a6d2:	e746      	b.n	800a562 <_dtoa_r+0x94a>
 800a6d4:	2a00      	cmp	r2, #0
 800a6d6:	dd07      	ble.n	800a6e8 <_dtoa_r+0xad0>
 800a6d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6dc:	d0ed      	beq.n	800a6ba <_dtoa_r+0xaa2>
 800a6de:	f10a 0301 	add.w	r3, sl, #1
 800a6e2:	f88b 3000 	strb.w	r3, [fp]
 800a6e6:	e73c      	b.n	800a562 <_dtoa_r+0x94a>
 800a6e8:	9b05      	ldr	r3, [sp, #20]
 800a6ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a6ee:	4599      	cmp	r9, r3
 800a6f0:	d047      	beq.n	800a782 <_dtoa_r+0xb6a>
 800a6f2:	ee18 1a10 	vmov	r1, s16
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	220a      	movs	r2, #10
 800a6fa:	4620      	mov	r0, r4
 800a6fc:	f000 fb16 	bl	800ad2c <__multadd>
 800a700:	45b8      	cmp	r8, r7
 800a702:	ee08 0a10 	vmov	s16, r0
 800a706:	f04f 0300 	mov.w	r3, #0
 800a70a:	f04f 020a 	mov.w	r2, #10
 800a70e:	4641      	mov	r1, r8
 800a710:	4620      	mov	r0, r4
 800a712:	d106      	bne.n	800a722 <_dtoa_r+0xb0a>
 800a714:	f000 fb0a 	bl	800ad2c <__multadd>
 800a718:	4680      	mov	r8, r0
 800a71a:	4607      	mov	r7, r0
 800a71c:	f109 0901 	add.w	r9, r9, #1
 800a720:	e772      	b.n	800a608 <_dtoa_r+0x9f0>
 800a722:	f000 fb03 	bl	800ad2c <__multadd>
 800a726:	4639      	mov	r1, r7
 800a728:	4680      	mov	r8, r0
 800a72a:	2300      	movs	r3, #0
 800a72c:	220a      	movs	r2, #10
 800a72e:	4620      	mov	r0, r4
 800a730:	f000 fafc 	bl	800ad2c <__multadd>
 800a734:	4607      	mov	r7, r0
 800a736:	e7f1      	b.n	800a71c <_dtoa_r+0xb04>
 800a738:	9b03      	ldr	r3, [sp, #12]
 800a73a:	9302      	str	r3, [sp, #8]
 800a73c:	9d01      	ldr	r5, [sp, #4]
 800a73e:	ee18 0a10 	vmov	r0, s16
 800a742:	4631      	mov	r1, r6
 800a744:	f7ff f9dc 	bl	8009b00 <quorem>
 800a748:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a74c:	9b01      	ldr	r3, [sp, #4]
 800a74e:	f805 ab01 	strb.w	sl, [r5], #1
 800a752:	1aea      	subs	r2, r5, r3
 800a754:	9b02      	ldr	r3, [sp, #8]
 800a756:	4293      	cmp	r3, r2
 800a758:	dd09      	ble.n	800a76e <_dtoa_r+0xb56>
 800a75a:	ee18 1a10 	vmov	r1, s16
 800a75e:	2300      	movs	r3, #0
 800a760:	220a      	movs	r2, #10
 800a762:	4620      	mov	r0, r4
 800a764:	f000 fae2 	bl	800ad2c <__multadd>
 800a768:	ee08 0a10 	vmov	s16, r0
 800a76c:	e7e7      	b.n	800a73e <_dtoa_r+0xb26>
 800a76e:	9b02      	ldr	r3, [sp, #8]
 800a770:	2b00      	cmp	r3, #0
 800a772:	bfc8      	it	gt
 800a774:	461d      	movgt	r5, r3
 800a776:	9b01      	ldr	r3, [sp, #4]
 800a778:	bfd8      	it	le
 800a77a:	2501      	movle	r5, #1
 800a77c:	441d      	add	r5, r3
 800a77e:	f04f 0800 	mov.w	r8, #0
 800a782:	ee18 1a10 	vmov	r1, s16
 800a786:	2201      	movs	r2, #1
 800a788:	4620      	mov	r0, r4
 800a78a:	f000 fc7f 	bl	800b08c <__lshift>
 800a78e:	4631      	mov	r1, r6
 800a790:	ee08 0a10 	vmov	s16, r0
 800a794:	f000 fcea 	bl	800b16c <__mcmp>
 800a798:	2800      	cmp	r0, #0
 800a79a:	dc91      	bgt.n	800a6c0 <_dtoa_r+0xaa8>
 800a79c:	d102      	bne.n	800a7a4 <_dtoa_r+0xb8c>
 800a79e:	f01a 0f01 	tst.w	sl, #1
 800a7a2:	d18d      	bne.n	800a6c0 <_dtoa_r+0xaa8>
 800a7a4:	462b      	mov	r3, r5
 800a7a6:	461d      	mov	r5, r3
 800a7a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7ac:	2a30      	cmp	r2, #48	; 0x30
 800a7ae:	d0fa      	beq.n	800a7a6 <_dtoa_r+0xb8e>
 800a7b0:	e6d7      	b.n	800a562 <_dtoa_r+0x94a>
 800a7b2:	9a01      	ldr	r2, [sp, #4]
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d184      	bne.n	800a6c2 <_dtoa_r+0xaaa>
 800a7b8:	9b00      	ldr	r3, [sp, #0]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	2331      	movs	r3, #49	; 0x31
 800a7c0:	7013      	strb	r3, [r2, #0]
 800a7c2:	e6ce      	b.n	800a562 <_dtoa_r+0x94a>
 800a7c4:	4b09      	ldr	r3, [pc, #36]	; (800a7ec <_dtoa_r+0xbd4>)
 800a7c6:	f7ff ba95 	b.w	8009cf4 <_dtoa_r+0xdc>
 800a7ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f47f aa6e 	bne.w	8009cae <_dtoa_r+0x96>
 800a7d2:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <_dtoa_r+0xbd8>)
 800a7d4:	f7ff ba8e 	b.w	8009cf4 <_dtoa_r+0xdc>
 800a7d8:	9b02      	ldr	r3, [sp, #8]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	dcae      	bgt.n	800a73c <_dtoa_r+0xb24>
 800a7de:	9b06      	ldr	r3, [sp, #24]
 800a7e0:	2b02      	cmp	r3, #2
 800a7e2:	f73f aea8 	bgt.w	800a536 <_dtoa_r+0x91e>
 800a7e6:	e7a9      	b.n	800a73c <_dtoa_r+0xb24>
 800a7e8:	0800d3db 	.word	0x0800d3db
 800a7ec:	0800d338 	.word	0x0800d338
 800a7f0:	0800d35c 	.word	0x0800d35c

0800a7f4 <__sflush_r>:
 800a7f4:	898a      	ldrh	r2, [r1, #12]
 800a7f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7fa:	4605      	mov	r5, r0
 800a7fc:	0710      	lsls	r0, r2, #28
 800a7fe:	460c      	mov	r4, r1
 800a800:	d458      	bmi.n	800a8b4 <__sflush_r+0xc0>
 800a802:	684b      	ldr	r3, [r1, #4]
 800a804:	2b00      	cmp	r3, #0
 800a806:	dc05      	bgt.n	800a814 <__sflush_r+0x20>
 800a808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	dc02      	bgt.n	800a814 <__sflush_r+0x20>
 800a80e:	2000      	movs	r0, #0
 800a810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a816:	2e00      	cmp	r6, #0
 800a818:	d0f9      	beq.n	800a80e <__sflush_r+0x1a>
 800a81a:	2300      	movs	r3, #0
 800a81c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a820:	682f      	ldr	r7, [r5, #0]
 800a822:	602b      	str	r3, [r5, #0]
 800a824:	d032      	beq.n	800a88c <__sflush_r+0x98>
 800a826:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	075a      	lsls	r2, r3, #29
 800a82c:	d505      	bpl.n	800a83a <__sflush_r+0x46>
 800a82e:	6863      	ldr	r3, [r4, #4]
 800a830:	1ac0      	subs	r0, r0, r3
 800a832:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a834:	b10b      	cbz	r3, 800a83a <__sflush_r+0x46>
 800a836:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a838:	1ac0      	subs	r0, r0, r3
 800a83a:	2300      	movs	r3, #0
 800a83c:	4602      	mov	r2, r0
 800a83e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a840:	6a21      	ldr	r1, [r4, #32]
 800a842:	4628      	mov	r0, r5
 800a844:	47b0      	blx	r6
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	89a3      	ldrh	r3, [r4, #12]
 800a84a:	d106      	bne.n	800a85a <__sflush_r+0x66>
 800a84c:	6829      	ldr	r1, [r5, #0]
 800a84e:	291d      	cmp	r1, #29
 800a850:	d82c      	bhi.n	800a8ac <__sflush_r+0xb8>
 800a852:	4a2a      	ldr	r2, [pc, #168]	; (800a8fc <__sflush_r+0x108>)
 800a854:	40ca      	lsrs	r2, r1
 800a856:	07d6      	lsls	r6, r2, #31
 800a858:	d528      	bpl.n	800a8ac <__sflush_r+0xb8>
 800a85a:	2200      	movs	r2, #0
 800a85c:	6062      	str	r2, [r4, #4]
 800a85e:	04d9      	lsls	r1, r3, #19
 800a860:	6922      	ldr	r2, [r4, #16]
 800a862:	6022      	str	r2, [r4, #0]
 800a864:	d504      	bpl.n	800a870 <__sflush_r+0x7c>
 800a866:	1c42      	adds	r2, r0, #1
 800a868:	d101      	bne.n	800a86e <__sflush_r+0x7a>
 800a86a:	682b      	ldr	r3, [r5, #0]
 800a86c:	b903      	cbnz	r3, 800a870 <__sflush_r+0x7c>
 800a86e:	6560      	str	r0, [r4, #84]	; 0x54
 800a870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a872:	602f      	str	r7, [r5, #0]
 800a874:	2900      	cmp	r1, #0
 800a876:	d0ca      	beq.n	800a80e <__sflush_r+0x1a>
 800a878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a87c:	4299      	cmp	r1, r3
 800a87e:	d002      	beq.n	800a886 <__sflush_r+0x92>
 800a880:	4628      	mov	r0, r5
 800a882:	f000 fd8b 	bl	800b39c <_free_r>
 800a886:	2000      	movs	r0, #0
 800a888:	6360      	str	r0, [r4, #52]	; 0x34
 800a88a:	e7c1      	b.n	800a810 <__sflush_r+0x1c>
 800a88c:	6a21      	ldr	r1, [r4, #32]
 800a88e:	2301      	movs	r3, #1
 800a890:	4628      	mov	r0, r5
 800a892:	47b0      	blx	r6
 800a894:	1c41      	adds	r1, r0, #1
 800a896:	d1c7      	bne.n	800a828 <__sflush_r+0x34>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d0c4      	beq.n	800a828 <__sflush_r+0x34>
 800a89e:	2b1d      	cmp	r3, #29
 800a8a0:	d001      	beq.n	800a8a6 <__sflush_r+0xb2>
 800a8a2:	2b16      	cmp	r3, #22
 800a8a4:	d101      	bne.n	800a8aa <__sflush_r+0xb6>
 800a8a6:	602f      	str	r7, [r5, #0]
 800a8a8:	e7b1      	b.n	800a80e <__sflush_r+0x1a>
 800a8aa:	89a3      	ldrh	r3, [r4, #12]
 800a8ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8b0:	81a3      	strh	r3, [r4, #12]
 800a8b2:	e7ad      	b.n	800a810 <__sflush_r+0x1c>
 800a8b4:	690f      	ldr	r7, [r1, #16]
 800a8b6:	2f00      	cmp	r7, #0
 800a8b8:	d0a9      	beq.n	800a80e <__sflush_r+0x1a>
 800a8ba:	0793      	lsls	r3, r2, #30
 800a8bc:	680e      	ldr	r6, [r1, #0]
 800a8be:	bf08      	it	eq
 800a8c0:	694b      	ldreq	r3, [r1, #20]
 800a8c2:	600f      	str	r7, [r1, #0]
 800a8c4:	bf18      	it	ne
 800a8c6:	2300      	movne	r3, #0
 800a8c8:	eba6 0807 	sub.w	r8, r6, r7
 800a8cc:	608b      	str	r3, [r1, #8]
 800a8ce:	f1b8 0f00 	cmp.w	r8, #0
 800a8d2:	dd9c      	ble.n	800a80e <__sflush_r+0x1a>
 800a8d4:	6a21      	ldr	r1, [r4, #32]
 800a8d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8d8:	4643      	mov	r3, r8
 800a8da:	463a      	mov	r2, r7
 800a8dc:	4628      	mov	r0, r5
 800a8de:	47b0      	blx	r6
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	dc06      	bgt.n	800a8f2 <__sflush_r+0xfe>
 800a8e4:	89a3      	ldrh	r3, [r4, #12]
 800a8e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ea:	81a3      	strh	r3, [r4, #12]
 800a8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800a8f0:	e78e      	b.n	800a810 <__sflush_r+0x1c>
 800a8f2:	4407      	add	r7, r0
 800a8f4:	eba8 0800 	sub.w	r8, r8, r0
 800a8f8:	e7e9      	b.n	800a8ce <__sflush_r+0xda>
 800a8fa:	bf00      	nop
 800a8fc:	20400001 	.word	0x20400001

0800a900 <_fflush_r>:
 800a900:	b538      	push	{r3, r4, r5, lr}
 800a902:	690b      	ldr	r3, [r1, #16]
 800a904:	4605      	mov	r5, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b913      	cbnz	r3, 800a910 <_fflush_r+0x10>
 800a90a:	2500      	movs	r5, #0
 800a90c:	4628      	mov	r0, r5
 800a90e:	bd38      	pop	{r3, r4, r5, pc}
 800a910:	b118      	cbz	r0, 800a91a <_fflush_r+0x1a>
 800a912:	6983      	ldr	r3, [r0, #24]
 800a914:	b90b      	cbnz	r3, 800a91a <_fflush_r+0x1a>
 800a916:	f000 f887 	bl	800aa28 <__sinit>
 800a91a:	4b14      	ldr	r3, [pc, #80]	; (800a96c <_fflush_r+0x6c>)
 800a91c:	429c      	cmp	r4, r3
 800a91e:	d11b      	bne.n	800a958 <_fflush_r+0x58>
 800a920:	686c      	ldr	r4, [r5, #4]
 800a922:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d0ef      	beq.n	800a90a <_fflush_r+0xa>
 800a92a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a92c:	07d0      	lsls	r0, r2, #31
 800a92e:	d404      	bmi.n	800a93a <_fflush_r+0x3a>
 800a930:	0599      	lsls	r1, r3, #22
 800a932:	d402      	bmi.n	800a93a <_fflush_r+0x3a>
 800a934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a936:	f000 f91a 	bl	800ab6e <__retarget_lock_acquire_recursive>
 800a93a:	4628      	mov	r0, r5
 800a93c:	4621      	mov	r1, r4
 800a93e:	f7ff ff59 	bl	800a7f4 <__sflush_r>
 800a942:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a944:	07da      	lsls	r2, r3, #31
 800a946:	4605      	mov	r5, r0
 800a948:	d4e0      	bmi.n	800a90c <_fflush_r+0xc>
 800a94a:	89a3      	ldrh	r3, [r4, #12]
 800a94c:	059b      	lsls	r3, r3, #22
 800a94e:	d4dd      	bmi.n	800a90c <_fflush_r+0xc>
 800a950:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a952:	f000 f90d 	bl	800ab70 <__retarget_lock_release_recursive>
 800a956:	e7d9      	b.n	800a90c <_fflush_r+0xc>
 800a958:	4b05      	ldr	r3, [pc, #20]	; (800a970 <_fflush_r+0x70>)
 800a95a:	429c      	cmp	r4, r3
 800a95c:	d101      	bne.n	800a962 <_fflush_r+0x62>
 800a95e:	68ac      	ldr	r4, [r5, #8]
 800a960:	e7df      	b.n	800a922 <_fflush_r+0x22>
 800a962:	4b04      	ldr	r3, [pc, #16]	; (800a974 <_fflush_r+0x74>)
 800a964:	429c      	cmp	r4, r3
 800a966:	bf08      	it	eq
 800a968:	68ec      	ldreq	r4, [r5, #12]
 800a96a:	e7da      	b.n	800a922 <_fflush_r+0x22>
 800a96c:	0800d40c 	.word	0x0800d40c
 800a970:	0800d42c 	.word	0x0800d42c
 800a974:	0800d3ec 	.word	0x0800d3ec

0800a978 <std>:
 800a978:	2300      	movs	r3, #0
 800a97a:	b510      	push	{r4, lr}
 800a97c:	4604      	mov	r4, r0
 800a97e:	e9c0 3300 	strd	r3, r3, [r0]
 800a982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a986:	6083      	str	r3, [r0, #8]
 800a988:	8181      	strh	r1, [r0, #12]
 800a98a:	6643      	str	r3, [r0, #100]	; 0x64
 800a98c:	81c2      	strh	r2, [r0, #14]
 800a98e:	6183      	str	r3, [r0, #24]
 800a990:	4619      	mov	r1, r3
 800a992:	2208      	movs	r2, #8
 800a994:	305c      	adds	r0, #92	; 0x5c
 800a996:	f7fe fb0b 	bl	8008fb0 <memset>
 800a99a:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <std+0x38>)
 800a99c:	6263      	str	r3, [r4, #36]	; 0x24
 800a99e:	4b05      	ldr	r3, [pc, #20]	; (800a9b4 <std+0x3c>)
 800a9a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9a2:	4b05      	ldr	r3, [pc, #20]	; (800a9b8 <std+0x40>)
 800a9a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a9a6:	4b05      	ldr	r3, [pc, #20]	; (800a9bc <std+0x44>)
 800a9a8:	6224      	str	r4, [r4, #32]
 800a9aa:	6323      	str	r3, [r4, #48]	; 0x30
 800a9ac:	bd10      	pop	{r4, pc}
 800a9ae:	bf00      	nop
 800a9b0:	0800b831 	.word	0x0800b831
 800a9b4:	0800b853 	.word	0x0800b853
 800a9b8:	0800b88b 	.word	0x0800b88b
 800a9bc:	0800b8af 	.word	0x0800b8af

0800a9c0 <_cleanup_r>:
 800a9c0:	4901      	ldr	r1, [pc, #4]	; (800a9c8 <_cleanup_r+0x8>)
 800a9c2:	f000 b8af 	b.w	800ab24 <_fwalk_reent>
 800a9c6:	bf00      	nop
 800a9c8:	0800a901 	.word	0x0800a901

0800a9cc <__sfmoreglue>:
 800a9cc:	b570      	push	{r4, r5, r6, lr}
 800a9ce:	2268      	movs	r2, #104	; 0x68
 800a9d0:	1e4d      	subs	r5, r1, #1
 800a9d2:	4355      	muls	r5, r2
 800a9d4:	460e      	mov	r6, r1
 800a9d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9da:	f000 fd4b 	bl	800b474 <_malloc_r>
 800a9de:	4604      	mov	r4, r0
 800a9e0:	b140      	cbz	r0, 800a9f4 <__sfmoreglue+0x28>
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	e9c0 1600 	strd	r1, r6, [r0]
 800a9e8:	300c      	adds	r0, #12
 800a9ea:	60a0      	str	r0, [r4, #8]
 800a9ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9f0:	f7fe fade 	bl	8008fb0 <memset>
 800a9f4:	4620      	mov	r0, r4
 800a9f6:	bd70      	pop	{r4, r5, r6, pc}

0800a9f8 <__sfp_lock_acquire>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	; (800aa00 <__sfp_lock_acquire+0x8>)
 800a9fa:	f000 b8b8 	b.w	800ab6e <__retarget_lock_acquire_recursive>
 800a9fe:	bf00      	nop
 800aa00:	20001345 	.word	0x20001345

0800aa04 <__sfp_lock_release>:
 800aa04:	4801      	ldr	r0, [pc, #4]	; (800aa0c <__sfp_lock_release+0x8>)
 800aa06:	f000 b8b3 	b.w	800ab70 <__retarget_lock_release_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	20001345 	.word	0x20001345

0800aa10 <__sinit_lock_acquire>:
 800aa10:	4801      	ldr	r0, [pc, #4]	; (800aa18 <__sinit_lock_acquire+0x8>)
 800aa12:	f000 b8ac 	b.w	800ab6e <__retarget_lock_acquire_recursive>
 800aa16:	bf00      	nop
 800aa18:	20001346 	.word	0x20001346

0800aa1c <__sinit_lock_release>:
 800aa1c:	4801      	ldr	r0, [pc, #4]	; (800aa24 <__sinit_lock_release+0x8>)
 800aa1e:	f000 b8a7 	b.w	800ab70 <__retarget_lock_release_recursive>
 800aa22:	bf00      	nop
 800aa24:	20001346 	.word	0x20001346

0800aa28 <__sinit>:
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	4604      	mov	r4, r0
 800aa2c:	f7ff fff0 	bl	800aa10 <__sinit_lock_acquire>
 800aa30:	69a3      	ldr	r3, [r4, #24]
 800aa32:	b11b      	cbz	r3, 800aa3c <__sinit+0x14>
 800aa34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa38:	f7ff bff0 	b.w	800aa1c <__sinit_lock_release>
 800aa3c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa40:	6523      	str	r3, [r4, #80]	; 0x50
 800aa42:	4b13      	ldr	r3, [pc, #76]	; (800aa90 <__sinit+0x68>)
 800aa44:	4a13      	ldr	r2, [pc, #76]	; (800aa94 <__sinit+0x6c>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa4a:	42a3      	cmp	r3, r4
 800aa4c:	bf04      	itt	eq
 800aa4e:	2301      	moveq	r3, #1
 800aa50:	61a3      	streq	r3, [r4, #24]
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 f820 	bl	800aa98 <__sfp>
 800aa58:	6060      	str	r0, [r4, #4]
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	f000 f81c 	bl	800aa98 <__sfp>
 800aa60:	60a0      	str	r0, [r4, #8]
 800aa62:	4620      	mov	r0, r4
 800aa64:	f000 f818 	bl	800aa98 <__sfp>
 800aa68:	2200      	movs	r2, #0
 800aa6a:	60e0      	str	r0, [r4, #12]
 800aa6c:	2104      	movs	r1, #4
 800aa6e:	6860      	ldr	r0, [r4, #4]
 800aa70:	f7ff ff82 	bl	800a978 <std>
 800aa74:	68a0      	ldr	r0, [r4, #8]
 800aa76:	2201      	movs	r2, #1
 800aa78:	2109      	movs	r1, #9
 800aa7a:	f7ff ff7d 	bl	800a978 <std>
 800aa7e:	68e0      	ldr	r0, [r4, #12]
 800aa80:	2202      	movs	r2, #2
 800aa82:	2112      	movs	r1, #18
 800aa84:	f7ff ff78 	bl	800a978 <std>
 800aa88:	2301      	movs	r3, #1
 800aa8a:	61a3      	str	r3, [r4, #24]
 800aa8c:	e7d2      	b.n	800aa34 <__sinit+0xc>
 800aa8e:	bf00      	nop
 800aa90:	0800d324 	.word	0x0800d324
 800aa94:	0800a9c1 	.word	0x0800a9c1

0800aa98 <__sfp>:
 800aa98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9a:	4607      	mov	r7, r0
 800aa9c:	f7ff ffac 	bl	800a9f8 <__sfp_lock_acquire>
 800aaa0:	4b1e      	ldr	r3, [pc, #120]	; (800ab1c <__sfp+0x84>)
 800aaa2:	681e      	ldr	r6, [r3, #0]
 800aaa4:	69b3      	ldr	r3, [r6, #24]
 800aaa6:	b913      	cbnz	r3, 800aaae <__sfp+0x16>
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f7ff ffbd 	bl	800aa28 <__sinit>
 800aaae:	3648      	adds	r6, #72	; 0x48
 800aab0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aab4:	3b01      	subs	r3, #1
 800aab6:	d503      	bpl.n	800aac0 <__sfp+0x28>
 800aab8:	6833      	ldr	r3, [r6, #0]
 800aaba:	b30b      	cbz	r3, 800ab00 <__sfp+0x68>
 800aabc:	6836      	ldr	r6, [r6, #0]
 800aabe:	e7f7      	b.n	800aab0 <__sfp+0x18>
 800aac0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aac4:	b9d5      	cbnz	r5, 800aafc <__sfp+0x64>
 800aac6:	4b16      	ldr	r3, [pc, #88]	; (800ab20 <__sfp+0x88>)
 800aac8:	60e3      	str	r3, [r4, #12]
 800aaca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aace:	6665      	str	r5, [r4, #100]	; 0x64
 800aad0:	f000 f84c 	bl	800ab6c <__retarget_lock_init_recursive>
 800aad4:	f7ff ff96 	bl	800aa04 <__sfp_lock_release>
 800aad8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aadc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aae0:	6025      	str	r5, [r4, #0]
 800aae2:	61a5      	str	r5, [r4, #24]
 800aae4:	2208      	movs	r2, #8
 800aae6:	4629      	mov	r1, r5
 800aae8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aaec:	f7fe fa60 	bl	8008fb0 <memset>
 800aaf0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aaf4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aaf8:	4620      	mov	r0, r4
 800aafa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aafc:	3468      	adds	r4, #104	; 0x68
 800aafe:	e7d9      	b.n	800aab4 <__sfp+0x1c>
 800ab00:	2104      	movs	r1, #4
 800ab02:	4638      	mov	r0, r7
 800ab04:	f7ff ff62 	bl	800a9cc <__sfmoreglue>
 800ab08:	4604      	mov	r4, r0
 800ab0a:	6030      	str	r0, [r6, #0]
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	d1d5      	bne.n	800aabc <__sfp+0x24>
 800ab10:	f7ff ff78 	bl	800aa04 <__sfp_lock_release>
 800ab14:	230c      	movs	r3, #12
 800ab16:	603b      	str	r3, [r7, #0]
 800ab18:	e7ee      	b.n	800aaf8 <__sfp+0x60>
 800ab1a:	bf00      	nop
 800ab1c:	0800d324 	.word	0x0800d324
 800ab20:	ffff0001 	.word	0xffff0001

0800ab24 <_fwalk_reent>:
 800ab24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab28:	4606      	mov	r6, r0
 800ab2a:	4688      	mov	r8, r1
 800ab2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab30:	2700      	movs	r7, #0
 800ab32:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab36:	f1b9 0901 	subs.w	r9, r9, #1
 800ab3a:	d505      	bpl.n	800ab48 <_fwalk_reent+0x24>
 800ab3c:	6824      	ldr	r4, [r4, #0]
 800ab3e:	2c00      	cmp	r4, #0
 800ab40:	d1f7      	bne.n	800ab32 <_fwalk_reent+0xe>
 800ab42:	4638      	mov	r0, r7
 800ab44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab48:	89ab      	ldrh	r3, [r5, #12]
 800ab4a:	2b01      	cmp	r3, #1
 800ab4c:	d907      	bls.n	800ab5e <_fwalk_reent+0x3a>
 800ab4e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab52:	3301      	adds	r3, #1
 800ab54:	d003      	beq.n	800ab5e <_fwalk_reent+0x3a>
 800ab56:	4629      	mov	r1, r5
 800ab58:	4630      	mov	r0, r6
 800ab5a:	47c0      	blx	r8
 800ab5c:	4307      	orrs	r7, r0
 800ab5e:	3568      	adds	r5, #104	; 0x68
 800ab60:	e7e9      	b.n	800ab36 <_fwalk_reent+0x12>
	...

0800ab64 <_localeconv_r>:
 800ab64:	4800      	ldr	r0, [pc, #0]	; (800ab68 <_localeconv_r+0x4>)
 800ab66:	4770      	bx	lr
 800ab68:	20000160 	.word	0x20000160

0800ab6c <__retarget_lock_init_recursive>:
 800ab6c:	4770      	bx	lr

0800ab6e <__retarget_lock_acquire_recursive>:
 800ab6e:	4770      	bx	lr

0800ab70 <__retarget_lock_release_recursive>:
 800ab70:	4770      	bx	lr

0800ab72 <__swhatbuf_r>:
 800ab72:	b570      	push	{r4, r5, r6, lr}
 800ab74:	460e      	mov	r6, r1
 800ab76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab7a:	2900      	cmp	r1, #0
 800ab7c:	b096      	sub	sp, #88	; 0x58
 800ab7e:	4614      	mov	r4, r2
 800ab80:	461d      	mov	r5, r3
 800ab82:	da08      	bge.n	800ab96 <__swhatbuf_r+0x24>
 800ab84:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	602a      	str	r2, [r5, #0]
 800ab8c:	061a      	lsls	r2, r3, #24
 800ab8e:	d410      	bmi.n	800abb2 <__swhatbuf_r+0x40>
 800ab90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab94:	e00e      	b.n	800abb4 <__swhatbuf_r+0x42>
 800ab96:	466a      	mov	r2, sp
 800ab98:	f000 fee0 	bl	800b95c <_fstat_r>
 800ab9c:	2800      	cmp	r0, #0
 800ab9e:	dbf1      	blt.n	800ab84 <__swhatbuf_r+0x12>
 800aba0:	9a01      	ldr	r2, [sp, #4]
 800aba2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aba6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800abaa:	425a      	negs	r2, r3
 800abac:	415a      	adcs	r2, r3
 800abae:	602a      	str	r2, [r5, #0]
 800abb0:	e7ee      	b.n	800ab90 <__swhatbuf_r+0x1e>
 800abb2:	2340      	movs	r3, #64	; 0x40
 800abb4:	2000      	movs	r0, #0
 800abb6:	6023      	str	r3, [r4, #0]
 800abb8:	b016      	add	sp, #88	; 0x58
 800abba:	bd70      	pop	{r4, r5, r6, pc}

0800abbc <__smakebuf_r>:
 800abbc:	898b      	ldrh	r3, [r1, #12]
 800abbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abc0:	079d      	lsls	r5, r3, #30
 800abc2:	4606      	mov	r6, r0
 800abc4:	460c      	mov	r4, r1
 800abc6:	d507      	bpl.n	800abd8 <__smakebuf_r+0x1c>
 800abc8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	6123      	str	r3, [r4, #16]
 800abd0:	2301      	movs	r3, #1
 800abd2:	6163      	str	r3, [r4, #20]
 800abd4:	b002      	add	sp, #8
 800abd6:	bd70      	pop	{r4, r5, r6, pc}
 800abd8:	ab01      	add	r3, sp, #4
 800abda:	466a      	mov	r2, sp
 800abdc:	f7ff ffc9 	bl	800ab72 <__swhatbuf_r>
 800abe0:	9900      	ldr	r1, [sp, #0]
 800abe2:	4605      	mov	r5, r0
 800abe4:	4630      	mov	r0, r6
 800abe6:	f000 fc45 	bl	800b474 <_malloc_r>
 800abea:	b948      	cbnz	r0, 800ac00 <__smakebuf_r+0x44>
 800abec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abf0:	059a      	lsls	r2, r3, #22
 800abf2:	d4ef      	bmi.n	800abd4 <__smakebuf_r+0x18>
 800abf4:	f023 0303 	bic.w	r3, r3, #3
 800abf8:	f043 0302 	orr.w	r3, r3, #2
 800abfc:	81a3      	strh	r3, [r4, #12]
 800abfe:	e7e3      	b.n	800abc8 <__smakebuf_r+0xc>
 800ac00:	4b0d      	ldr	r3, [pc, #52]	; (800ac38 <__smakebuf_r+0x7c>)
 800ac02:	62b3      	str	r3, [r6, #40]	; 0x28
 800ac04:	89a3      	ldrh	r3, [r4, #12]
 800ac06:	6020      	str	r0, [r4, #0]
 800ac08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac0c:	81a3      	strh	r3, [r4, #12]
 800ac0e:	9b00      	ldr	r3, [sp, #0]
 800ac10:	6163      	str	r3, [r4, #20]
 800ac12:	9b01      	ldr	r3, [sp, #4]
 800ac14:	6120      	str	r0, [r4, #16]
 800ac16:	b15b      	cbz	r3, 800ac30 <__smakebuf_r+0x74>
 800ac18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f000 feaf 	bl	800b980 <_isatty_r>
 800ac22:	b128      	cbz	r0, 800ac30 <__smakebuf_r+0x74>
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	f023 0303 	bic.w	r3, r3, #3
 800ac2a:	f043 0301 	orr.w	r3, r3, #1
 800ac2e:	81a3      	strh	r3, [r4, #12]
 800ac30:	89a0      	ldrh	r0, [r4, #12]
 800ac32:	4305      	orrs	r5, r0
 800ac34:	81a5      	strh	r5, [r4, #12]
 800ac36:	e7cd      	b.n	800abd4 <__smakebuf_r+0x18>
 800ac38:	0800a9c1 	.word	0x0800a9c1

0800ac3c <malloc>:
 800ac3c:	4b02      	ldr	r3, [pc, #8]	; (800ac48 <malloc+0xc>)
 800ac3e:	4601      	mov	r1, r0
 800ac40:	6818      	ldr	r0, [r3, #0]
 800ac42:	f000 bc17 	b.w	800b474 <_malloc_r>
 800ac46:	bf00      	nop
 800ac48:	2000000c 	.word	0x2000000c

0800ac4c <memcpy>:
 800ac4c:	440a      	add	r2, r1
 800ac4e:	4291      	cmp	r1, r2
 800ac50:	f100 33ff 	add.w	r3, r0, #4294967295
 800ac54:	d100      	bne.n	800ac58 <memcpy+0xc>
 800ac56:	4770      	bx	lr
 800ac58:	b510      	push	{r4, lr}
 800ac5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ac5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ac62:	4291      	cmp	r1, r2
 800ac64:	d1f9      	bne.n	800ac5a <memcpy+0xe>
 800ac66:	bd10      	pop	{r4, pc}

0800ac68 <_Balloc>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	460d      	mov	r5, r1
 800ac70:	b976      	cbnz	r6, 800ac90 <_Balloc+0x28>
 800ac72:	2010      	movs	r0, #16
 800ac74:	f7ff ffe2 	bl	800ac3c <malloc>
 800ac78:	4602      	mov	r2, r0
 800ac7a:	6260      	str	r0, [r4, #36]	; 0x24
 800ac7c:	b920      	cbnz	r0, 800ac88 <_Balloc+0x20>
 800ac7e:	4b18      	ldr	r3, [pc, #96]	; (800ace0 <_Balloc+0x78>)
 800ac80:	4818      	ldr	r0, [pc, #96]	; (800ace4 <_Balloc+0x7c>)
 800ac82:	2166      	movs	r1, #102	; 0x66
 800ac84:	f000 fe2a 	bl	800b8dc <__assert_func>
 800ac88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ac8c:	6006      	str	r6, [r0, #0]
 800ac8e:	60c6      	str	r6, [r0, #12]
 800ac90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ac92:	68f3      	ldr	r3, [r6, #12]
 800ac94:	b183      	cbz	r3, 800acb8 <_Balloc+0x50>
 800ac96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ac9e:	b9b8      	cbnz	r0, 800acd0 <_Balloc+0x68>
 800aca0:	2101      	movs	r1, #1
 800aca2:	fa01 f605 	lsl.w	r6, r1, r5
 800aca6:	1d72      	adds	r2, r6, #5
 800aca8:	0092      	lsls	r2, r2, #2
 800acaa:	4620      	mov	r0, r4
 800acac:	f000 fb60 	bl	800b370 <_calloc_r>
 800acb0:	b160      	cbz	r0, 800accc <_Balloc+0x64>
 800acb2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800acb6:	e00e      	b.n	800acd6 <_Balloc+0x6e>
 800acb8:	2221      	movs	r2, #33	; 0x21
 800acba:	2104      	movs	r1, #4
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 fb57 	bl	800b370 <_calloc_r>
 800acc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800acc4:	60f0      	str	r0, [r6, #12]
 800acc6:	68db      	ldr	r3, [r3, #12]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1e4      	bne.n	800ac96 <_Balloc+0x2e>
 800accc:	2000      	movs	r0, #0
 800acce:	bd70      	pop	{r4, r5, r6, pc}
 800acd0:	6802      	ldr	r2, [r0, #0]
 800acd2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800acd6:	2300      	movs	r3, #0
 800acd8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800acdc:	e7f7      	b.n	800acce <_Balloc+0x66>
 800acde:	bf00      	nop
 800ace0:	0800d369 	.word	0x0800d369
 800ace4:	0800d44c 	.word	0x0800d44c

0800ace8 <_Bfree>:
 800ace8:	b570      	push	{r4, r5, r6, lr}
 800acea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800acec:	4605      	mov	r5, r0
 800acee:	460c      	mov	r4, r1
 800acf0:	b976      	cbnz	r6, 800ad10 <_Bfree+0x28>
 800acf2:	2010      	movs	r0, #16
 800acf4:	f7ff ffa2 	bl	800ac3c <malloc>
 800acf8:	4602      	mov	r2, r0
 800acfa:	6268      	str	r0, [r5, #36]	; 0x24
 800acfc:	b920      	cbnz	r0, 800ad08 <_Bfree+0x20>
 800acfe:	4b09      	ldr	r3, [pc, #36]	; (800ad24 <_Bfree+0x3c>)
 800ad00:	4809      	ldr	r0, [pc, #36]	; (800ad28 <_Bfree+0x40>)
 800ad02:	218a      	movs	r1, #138	; 0x8a
 800ad04:	f000 fdea 	bl	800b8dc <__assert_func>
 800ad08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ad0c:	6006      	str	r6, [r0, #0]
 800ad0e:	60c6      	str	r6, [r0, #12]
 800ad10:	b13c      	cbz	r4, 800ad22 <_Bfree+0x3a>
 800ad12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ad14:	6862      	ldr	r2, [r4, #4]
 800ad16:	68db      	ldr	r3, [r3, #12]
 800ad18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad1c:	6021      	str	r1, [r4, #0]
 800ad1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ad22:	bd70      	pop	{r4, r5, r6, pc}
 800ad24:	0800d369 	.word	0x0800d369
 800ad28:	0800d44c 	.word	0x0800d44c

0800ad2c <__multadd>:
 800ad2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad30:	690d      	ldr	r5, [r1, #16]
 800ad32:	4607      	mov	r7, r0
 800ad34:	460c      	mov	r4, r1
 800ad36:	461e      	mov	r6, r3
 800ad38:	f101 0c14 	add.w	ip, r1, #20
 800ad3c:	2000      	movs	r0, #0
 800ad3e:	f8dc 3000 	ldr.w	r3, [ip]
 800ad42:	b299      	uxth	r1, r3
 800ad44:	fb02 6101 	mla	r1, r2, r1, r6
 800ad48:	0c1e      	lsrs	r6, r3, #16
 800ad4a:	0c0b      	lsrs	r3, r1, #16
 800ad4c:	fb02 3306 	mla	r3, r2, r6, r3
 800ad50:	b289      	uxth	r1, r1
 800ad52:	3001      	adds	r0, #1
 800ad54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ad58:	4285      	cmp	r5, r0
 800ad5a:	f84c 1b04 	str.w	r1, [ip], #4
 800ad5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ad62:	dcec      	bgt.n	800ad3e <__multadd+0x12>
 800ad64:	b30e      	cbz	r6, 800adaa <__multadd+0x7e>
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	42ab      	cmp	r3, r5
 800ad6a:	dc19      	bgt.n	800ada0 <__multadd+0x74>
 800ad6c:	6861      	ldr	r1, [r4, #4]
 800ad6e:	4638      	mov	r0, r7
 800ad70:	3101      	adds	r1, #1
 800ad72:	f7ff ff79 	bl	800ac68 <_Balloc>
 800ad76:	4680      	mov	r8, r0
 800ad78:	b928      	cbnz	r0, 800ad86 <__multadd+0x5a>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	4b0c      	ldr	r3, [pc, #48]	; (800adb0 <__multadd+0x84>)
 800ad7e:	480d      	ldr	r0, [pc, #52]	; (800adb4 <__multadd+0x88>)
 800ad80:	21b5      	movs	r1, #181	; 0xb5
 800ad82:	f000 fdab 	bl	800b8dc <__assert_func>
 800ad86:	6922      	ldr	r2, [r4, #16]
 800ad88:	3202      	adds	r2, #2
 800ad8a:	f104 010c 	add.w	r1, r4, #12
 800ad8e:	0092      	lsls	r2, r2, #2
 800ad90:	300c      	adds	r0, #12
 800ad92:	f7ff ff5b 	bl	800ac4c <memcpy>
 800ad96:	4621      	mov	r1, r4
 800ad98:	4638      	mov	r0, r7
 800ad9a:	f7ff ffa5 	bl	800ace8 <_Bfree>
 800ad9e:	4644      	mov	r4, r8
 800ada0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ada4:	3501      	adds	r5, #1
 800ada6:	615e      	str	r6, [r3, #20]
 800ada8:	6125      	str	r5, [r4, #16]
 800adaa:	4620      	mov	r0, r4
 800adac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb0:	0800d3db 	.word	0x0800d3db
 800adb4:	0800d44c 	.word	0x0800d44c

0800adb8 <__hi0bits>:
 800adb8:	0c03      	lsrs	r3, r0, #16
 800adba:	041b      	lsls	r3, r3, #16
 800adbc:	b9d3      	cbnz	r3, 800adf4 <__hi0bits+0x3c>
 800adbe:	0400      	lsls	r0, r0, #16
 800adc0:	2310      	movs	r3, #16
 800adc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800adc6:	bf04      	itt	eq
 800adc8:	0200      	lsleq	r0, r0, #8
 800adca:	3308      	addeq	r3, #8
 800adcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800add0:	bf04      	itt	eq
 800add2:	0100      	lsleq	r0, r0, #4
 800add4:	3304      	addeq	r3, #4
 800add6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800adda:	bf04      	itt	eq
 800addc:	0080      	lsleq	r0, r0, #2
 800adde:	3302      	addeq	r3, #2
 800ade0:	2800      	cmp	r0, #0
 800ade2:	db05      	blt.n	800adf0 <__hi0bits+0x38>
 800ade4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ade8:	f103 0301 	add.w	r3, r3, #1
 800adec:	bf08      	it	eq
 800adee:	2320      	moveq	r3, #32
 800adf0:	4618      	mov	r0, r3
 800adf2:	4770      	bx	lr
 800adf4:	2300      	movs	r3, #0
 800adf6:	e7e4      	b.n	800adc2 <__hi0bits+0xa>

0800adf8 <__lo0bits>:
 800adf8:	6803      	ldr	r3, [r0, #0]
 800adfa:	f013 0207 	ands.w	r2, r3, #7
 800adfe:	4601      	mov	r1, r0
 800ae00:	d00b      	beq.n	800ae1a <__lo0bits+0x22>
 800ae02:	07da      	lsls	r2, r3, #31
 800ae04:	d423      	bmi.n	800ae4e <__lo0bits+0x56>
 800ae06:	0798      	lsls	r0, r3, #30
 800ae08:	bf49      	itett	mi
 800ae0a:	085b      	lsrmi	r3, r3, #1
 800ae0c:	089b      	lsrpl	r3, r3, #2
 800ae0e:	2001      	movmi	r0, #1
 800ae10:	600b      	strmi	r3, [r1, #0]
 800ae12:	bf5c      	itt	pl
 800ae14:	600b      	strpl	r3, [r1, #0]
 800ae16:	2002      	movpl	r0, #2
 800ae18:	4770      	bx	lr
 800ae1a:	b298      	uxth	r0, r3
 800ae1c:	b9a8      	cbnz	r0, 800ae4a <__lo0bits+0x52>
 800ae1e:	0c1b      	lsrs	r3, r3, #16
 800ae20:	2010      	movs	r0, #16
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	b90a      	cbnz	r2, 800ae2a <__lo0bits+0x32>
 800ae26:	3008      	adds	r0, #8
 800ae28:	0a1b      	lsrs	r3, r3, #8
 800ae2a:	071a      	lsls	r2, r3, #28
 800ae2c:	bf04      	itt	eq
 800ae2e:	091b      	lsreq	r3, r3, #4
 800ae30:	3004      	addeq	r0, #4
 800ae32:	079a      	lsls	r2, r3, #30
 800ae34:	bf04      	itt	eq
 800ae36:	089b      	lsreq	r3, r3, #2
 800ae38:	3002      	addeq	r0, #2
 800ae3a:	07da      	lsls	r2, r3, #31
 800ae3c:	d403      	bmi.n	800ae46 <__lo0bits+0x4e>
 800ae3e:	085b      	lsrs	r3, r3, #1
 800ae40:	f100 0001 	add.w	r0, r0, #1
 800ae44:	d005      	beq.n	800ae52 <__lo0bits+0x5a>
 800ae46:	600b      	str	r3, [r1, #0]
 800ae48:	4770      	bx	lr
 800ae4a:	4610      	mov	r0, r2
 800ae4c:	e7e9      	b.n	800ae22 <__lo0bits+0x2a>
 800ae4e:	2000      	movs	r0, #0
 800ae50:	4770      	bx	lr
 800ae52:	2020      	movs	r0, #32
 800ae54:	4770      	bx	lr
	...

0800ae58 <__i2b>:
 800ae58:	b510      	push	{r4, lr}
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	2101      	movs	r1, #1
 800ae5e:	f7ff ff03 	bl	800ac68 <_Balloc>
 800ae62:	4602      	mov	r2, r0
 800ae64:	b928      	cbnz	r0, 800ae72 <__i2b+0x1a>
 800ae66:	4b05      	ldr	r3, [pc, #20]	; (800ae7c <__i2b+0x24>)
 800ae68:	4805      	ldr	r0, [pc, #20]	; (800ae80 <__i2b+0x28>)
 800ae6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ae6e:	f000 fd35 	bl	800b8dc <__assert_func>
 800ae72:	2301      	movs	r3, #1
 800ae74:	6144      	str	r4, [r0, #20]
 800ae76:	6103      	str	r3, [r0, #16]
 800ae78:	bd10      	pop	{r4, pc}
 800ae7a:	bf00      	nop
 800ae7c:	0800d3db 	.word	0x0800d3db
 800ae80:	0800d44c 	.word	0x0800d44c

0800ae84 <__multiply>:
 800ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae88:	4691      	mov	r9, r2
 800ae8a:	690a      	ldr	r2, [r1, #16]
 800ae8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ae90:	429a      	cmp	r2, r3
 800ae92:	bfb8      	it	lt
 800ae94:	460b      	movlt	r3, r1
 800ae96:	460c      	mov	r4, r1
 800ae98:	bfbc      	itt	lt
 800ae9a:	464c      	movlt	r4, r9
 800ae9c:	4699      	movlt	r9, r3
 800ae9e:	6927      	ldr	r7, [r4, #16]
 800aea0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aea4:	68a3      	ldr	r3, [r4, #8]
 800aea6:	6861      	ldr	r1, [r4, #4]
 800aea8:	eb07 060a 	add.w	r6, r7, sl
 800aeac:	42b3      	cmp	r3, r6
 800aeae:	b085      	sub	sp, #20
 800aeb0:	bfb8      	it	lt
 800aeb2:	3101      	addlt	r1, #1
 800aeb4:	f7ff fed8 	bl	800ac68 <_Balloc>
 800aeb8:	b930      	cbnz	r0, 800aec8 <__multiply+0x44>
 800aeba:	4602      	mov	r2, r0
 800aebc:	4b44      	ldr	r3, [pc, #272]	; (800afd0 <__multiply+0x14c>)
 800aebe:	4845      	ldr	r0, [pc, #276]	; (800afd4 <__multiply+0x150>)
 800aec0:	f240 115d 	movw	r1, #349	; 0x15d
 800aec4:	f000 fd0a 	bl	800b8dc <__assert_func>
 800aec8:	f100 0514 	add.w	r5, r0, #20
 800aecc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aed0:	462b      	mov	r3, r5
 800aed2:	2200      	movs	r2, #0
 800aed4:	4543      	cmp	r3, r8
 800aed6:	d321      	bcc.n	800af1c <__multiply+0x98>
 800aed8:	f104 0314 	add.w	r3, r4, #20
 800aedc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aee0:	f109 0314 	add.w	r3, r9, #20
 800aee4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aee8:	9202      	str	r2, [sp, #8]
 800aeea:	1b3a      	subs	r2, r7, r4
 800aeec:	3a15      	subs	r2, #21
 800aeee:	f022 0203 	bic.w	r2, r2, #3
 800aef2:	3204      	adds	r2, #4
 800aef4:	f104 0115 	add.w	r1, r4, #21
 800aef8:	428f      	cmp	r7, r1
 800aefa:	bf38      	it	cc
 800aefc:	2204      	movcc	r2, #4
 800aefe:	9201      	str	r2, [sp, #4]
 800af00:	9a02      	ldr	r2, [sp, #8]
 800af02:	9303      	str	r3, [sp, #12]
 800af04:	429a      	cmp	r2, r3
 800af06:	d80c      	bhi.n	800af22 <__multiply+0x9e>
 800af08:	2e00      	cmp	r6, #0
 800af0a:	dd03      	ble.n	800af14 <__multiply+0x90>
 800af0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800af10:	2b00      	cmp	r3, #0
 800af12:	d05a      	beq.n	800afca <__multiply+0x146>
 800af14:	6106      	str	r6, [r0, #16]
 800af16:	b005      	add	sp, #20
 800af18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af1c:	f843 2b04 	str.w	r2, [r3], #4
 800af20:	e7d8      	b.n	800aed4 <__multiply+0x50>
 800af22:	f8b3 a000 	ldrh.w	sl, [r3]
 800af26:	f1ba 0f00 	cmp.w	sl, #0
 800af2a:	d024      	beq.n	800af76 <__multiply+0xf2>
 800af2c:	f104 0e14 	add.w	lr, r4, #20
 800af30:	46a9      	mov	r9, r5
 800af32:	f04f 0c00 	mov.w	ip, #0
 800af36:	f85e 2b04 	ldr.w	r2, [lr], #4
 800af3a:	f8d9 1000 	ldr.w	r1, [r9]
 800af3e:	fa1f fb82 	uxth.w	fp, r2
 800af42:	b289      	uxth	r1, r1
 800af44:	fb0a 110b 	mla	r1, sl, fp, r1
 800af48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800af4c:	f8d9 2000 	ldr.w	r2, [r9]
 800af50:	4461      	add	r1, ip
 800af52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af56:	fb0a c20b 	mla	r2, sl, fp, ip
 800af5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800af5e:	b289      	uxth	r1, r1
 800af60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800af64:	4577      	cmp	r7, lr
 800af66:	f849 1b04 	str.w	r1, [r9], #4
 800af6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800af6e:	d8e2      	bhi.n	800af36 <__multiply+0xb2>
 800af70:	9a01      	ldr	r2, [sp, #4]
 800af72:	f845 c002 	str.w	ip, [r5, r2]
 800af76:	9a03      	ldr	r2, [sp, #12]
 800af78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800af7c:	3304      	adds	r3, #4
 800af7e:	f1b9 0f00 	cmp.w	r9, #0
 800af82:	d020      	beq.n	800afc6 <__multiply+0x142>
 800af84:	6829      	ldr	r1, [r5, #0]
 800af86:	f104 0c14 	add.w	ip, r4, #20
 800af8a:	46ae      	mov	lr, r5
 800af8c:	f04f 0a00 	mov.w	sl, #0
 800af90:	f8bc b000 	ldrh.w	fp, [ip]
 800af94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800af98:	fb09 220b 	mla	r2, r9, fp, r2
 800af9c:	4492      	add	sl, r2
 800af9e:	b289      	uxth	r1, r1
 800afa0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800afa4:	f84e 1b04 	str.w	r1, [lr], #4
 800afa8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800afac:	f8be 1000 	ldrh.w	r1, [lr]
 800afb0:	0c12      	lsrs	r2, r2, #16
 800afb2:	fb09 1102 	mla	r1, r9, r2, r1
 800afb6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800afba:	4567      	cmp	r7, ip
 800afbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800afc0:	d8e6      	bhi.n	800af90 <__multiply+0x10c>
 800afc2:	9a01      	ldr	r2, [sp, #4]
 800afc4:	50a9      	str	r1, [r5, r2]
 800afc6:	3504      	adds	r5, #4
 800afc8:	e79a      	b.n	800af00 <__multiply+0x7c>
 800afca:	3e01      	subs	r6, #1
 800afcc:	e79c      	b.n	800af08 <__multiply+0x84>
 800afce:	bf00      	nop
 800afd0:	0800d3db 	.word	0x0800d3db
 800afd4:	0800d44c 	.word	0x0800d44c

0800afd8 <__pow5mult>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	4615      	mov	r5, r2
 800afde:	f012 0203 	ands.w	r2, r2, #3
 800afe2:	4606      	mov	r6, r0
 800afe4:	460f      	mov	r7, r1
 800afe6:	d007      	beq.n	800aff8 <__pow5mult+0x20>
 800afe8:	4c25      	ldr	r4, [pc, #148]	; (800b080 <__pow5mult+0xa8>)
 800afea:	3a01      	subs	r2, #1
 800afec:	2300      	movs	r3, #0
 800afee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aff2:	f7ff fe9b 	bl	800ad2c <__multadd>
 800aff6:	4607      	mov	r7, r0
 800aff8:	10ad      	asrs	r5, r5, #2
 800affa:	d03d      	beq.n	800b078 <__pow5mult+0xa0>
 800affc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800affe:	b97c      	cbnz	r4, 800b020 <__pow5mult+0x48>
 800b000:	2010      	movs	r0, #16
 800b002:	f7ff fe1b 	bl	800ac3c <malloc>
 800b006:	4602      	mov	r2, r0
 800b008:	6270      	str	r0, [r6, #36]	; 0x24
 800b00a:	b928      	cbnz	r0, 800b018 <__pow5mult+0x40>
 800b00c:	4b1d      	ldr	r3, [pc, #116]	; (800b084 <__pow5mult+0xac>)
 800b00e:	481e      	ldr	r0, [pc, #120]	; (800b088 <__pow5mult+0xb0>)
 800b010:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b014:	f000 fc62 	bl	800b8dc <__assert_func>
 800b018:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b01c:	6004      	str	r4, [r0, #0]
 800b01e:	60c4      	str	r4, [r0, #12]
 800b020:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b024:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b028:	b94c      	cbnz	r4, 800b03e <__pow5mult+0x66>
 800b02a:	f240 2171 	movw	r1, #625	; 0x271
 800b02e:	4630      	mov	r0, r6
 800b030:	f7ff ff12 	bl	800ae58 <__i2b>
 800b034:	2300      	movs	r3, #0
 800b036:	f8c8 0008 	str.w	r0, [r8, #8]
 800b03a:	4604      	mov	r4, r0
 800b03c:	6003      	str	r3, [r0, #0]
 800b03e:	f04f 0900 	mov.w	r9, #0
 800b042:	07eb      	lsls	r3, r5, #31
 800b044:	d50a      	bpl.n	800b05c <__pow5mult+0x84>
 800b046:	4639      	mov	r1, r7
 800b048:	4622      	mov	r2, r4
 800b04a:	4630      	mov	r0, r6
 800b04c:	f7ff ff1a 	bl	800ae84 <__multiply>
 800b050:	4639      	mov	r1, r7
 800b052:	4680      	mov	r8, r0
 800b054:	4630      	mov	r0, r6
 800b056:	f7ff fe47 	bl	800ace8 <_Bfree>
 800b05a:	4647      	mov	r7, r8
 800b05c:	106d      	asrs	r5, r5, #1
 800b05e:	d00b      	beq.n	800b078 <__pow5mult+0xa0>
 800b060:	6820      	ldr	r0, [r4, #0]
 800b062:	b938      	cbnz	r0, 800b074 <__pow5mult+0x9c>
 800b064:	4622      	mov	r2, r4
 800b066:	4621      	mov	r1, r4
 800b068:	4630      	mov	r0, r6
 800b06a:	f7ff ff0b 	bl	800ae84 <__multiply>
 800b06e:	6020      	str	r0, [r4, #0]
 800b070:	f8c0 9000 	str.w	r9, [r0]
 800b074:	4604      	mov	r4, r0
 800b076:	e7e4      	b.n	800b042 <__pow5mult+0x6a>
 800b078:	4638      	mov	r0, r7
 800b07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b07e:	bf00      	nop
 800b080:	0800d598 	.word	0x0800d598
 800b084:	0800d369 	.word	0x0800d369
 800b088:	0800d44c 	.word	0x0800d44c

0800b08c <__lshift>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	460c      	mov	r4, r1
 800b092:	6849      	ldr	r1, [r1, #4]
 800b094:	6923      	ldr	r3, [r4, #16]
 800b096:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b09a:	68a3      	ldr	r3, [r4, #8]
 800b09c:	4607      	mov	r7, r0
 800b09e:	4691      	mov	r9, r2
 800b0a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b0a4:	f108 0601 	add.w	r6, r8, #1
 800b0a8:	42b3      	cmp	r3, r6
 800b0aa:	db0b      	blt.n	800b0c4 <__lshift+0x38>
 800b0ac:	4638      	mov	r0, r7
 800b0ae:	f7ff fddb 	bl	800ac68 <_Balloc>
 800b0b2:	4605      	mov	r5, r0
 800b0b4:	b948      	cbnz	r0, 800b0ca <__lshift+0x3e>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	4b2a      	ldr	r3, [pc, #168]	; (800b164 <__lshift+0xd8>)
 800b0ba:	482b      	ldr	r0, [pc, #172]	; (800b168 <__lshift+0xdc>)
 800b0bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b0c0:	f000 fc0c 	bl	800b8dc <__assert_func>
 800b0c4:	3101      	adds	r1, #1
 800b0c6:	005b      	lsls	r3, r3, #1
 800b0c8:	e7ee      	b.n	800b0a8 <__lshift+0x1c>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	f100 0114 	add.w	r1, r0, #20
 800b0d0:	f100 0210 	add.w	r2, r0, #16
 800b0d4:	4618      	mov	r0, r3
 800b0d6:	4553      	cmp	r3, sl
 800b0d8:	db37      	blt.n	800b14a <__lshift+0xbe>
 800b0da:	6920      	ldr	r0, [r4, #16]
 800b0dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b0e0:	f104 0314 	add.w	r3, r4, #20
 800b0e4:	f019 091f 	ands.w	r9, r9, #31
 800b0e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b0ec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b0f0:	d02f      	beq.n	800b152 <__lshift+0xc6>
 800b0f2:	f1c9 0e20 	rsb	lr, r9, #32
 800b0f6:	468a      	mov	sl, r1
 800b0f8:	f04f 0c00 	mov.w	ip, #0
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	fa02 f209 	lsl.w	r2, r2, r9
 800b102:	ea42 020c 	orr.w	r2, r2, ip
 800b106:	f84a 2b04 	str.w	r2, [sl], #4
 800b10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b10e:	4298      	cmp	r0, r3
 800b110:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b114:	d8f2      	bhi.n	800b0fc <__lshift+0x70>
 800b116:	1b03      	subs	r3, r0, r4
 800b118:	3b15      	subs	r3, #21
 800b11a:	f023 0303 	bic.w	r3, r3, #3
 800b11e:	3304      	adds	r3, #4
 800b120:	f104 0215 	add.w	r2, r4, #21
 800b124:	4290      	cmp	r0, r2
 800b126:	bf38      	it	cc
 800b128:	2304      	movcc	r3, #4
 800b12a:	f841 c003 	str.w	ip, [r1, r3]
 800b12e:	f1bc 0f00 	cmp.w	ip, #0
 800b132:	d001      	beq.n	800b138 <__lshift+0xac>
 800b134:	f108 0602 	add.w	r6, r8, #2
 800b138:	3e01      	subs	r6, #1
 800b13a:	4638      	mov	r0, r7
 800b13c:	612e      	str	r6, [r5, #16]
 800b13e:	4621      	mov	r1, r4
 800b140:	f7ff fdd2 	bl	800ace8 <_Bfree>
 800b144:	4628      	mov	r0, r5
 800b146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b14a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b14e:	3301      	adds	r3, #1
 800b150:	e7c1      	b.n	800b0d6 <__lshift+0x4a>
 800b152:	3904      	subs	r1, #4
 800b154:	f853 2b04 	ldr.w	r2, [r3], #4
 800b158:	f841 2f04 	str.w	r2, [r1, #4]!
 800b15c:	4298      	cmp	r0, r3
 800b15e:	d8f9      	bhi.n	800b154 <__lshift+0xc8>
 800b160:	e7ea      	b.n	800b138 <__lshift+0xac>
 800b162:	bf00      	nop
 800b164:	0800d3db 	.word	0x0800d3db
 800b168:	0800d44c 	.word	0x0800d44c

0800b16c <__mcmp>:
 800b16c:	b530      	push	{r4, r5, lr}
 800b16e:	6902      	ldr	r2, [r0, #16]
 800b170:	690c      	ldr	r4, [r1, #16]
 800b172:	1b12      	subs	r2, r2, r4
 800b174:	d10e      	bne.n	800b194 <__mcmp+0x28>
 800b176:	f100 0314 	add.w	r3, r0, #20
 800b17a:	3114      	adds	r1, #20
 800b17c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b180:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b184:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b188:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b18c:	42a5      	cmp	r5, r4
 800b18e:	d003      	beq.n	800b198 <__mcmp+0x2c>
 800b190:	d305      	bcc.n	800b19e <__mcmp+0x32>
 800b192:	2201      	movs	r2, #1
 800b194:	4610      	mov	r0, r2
 800b196:	bd30      	pop	{r4, r5, pc}
 800b198:	4283      	cmp	r3, r0
 800b19a:	d3f3      	bcc.n	800b184 <__mcmp+0x18>
 800b19c:	e7fa      	b.n	800b194 <__mcmp+0x28>
 800b19e:	f04f 32ff 	mov.w	r2, #4294967295
 800b1a2:	e7f7      	b.n	800b194 <__mcmp+0x28>

0800b1a4 <__mdiff>:
 800b1a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1a8:	460c      	mov	r4, r1
 800b1aa:	4606      	mov	r6, r0
 800b1ac:	4611      	mov	r1, r2
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	4690      	mov	r8, r2
 800b1b2:	f7ff ffdb 	bl	800b16c <__mcmp>
 800b1b6:	1e05      	subs	r5, r0, #0
 800b1b8:	d110      	bne.n	800b1dc <__mdiff+0x38>
 800b1ba:	4629      	mov	r1, r5
 800b1bc:	4630      	mov	r0, r6
 800b1be:	f7ff fd53 	bl	800ac68 <_Balloc>
 800b1c2:	b930      	cbnz	r0, 800b1d2 <__mdiff+0x2e>
 800b1c4:	4b3a      	ldr	r3, [pc, #232]	; (800b2b0 <__mdiff+0x10c>)
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	f240 2132 	movw	r1, #562	; 0x232
 800b1cc:	4839      	ldr	r0, [pc, #228]	; (800b2b4 <__mdiff+0x110>)
 800b1ce:	f000 fb85 	bl	800b8dc <__assert_func>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b1d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1dc:	bfa4      	itt	ge
 800b1de:	4643      	movge	r3, r8
 800b1e0:	46a0      	movge	r8, r4
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b1e8:	bfa6      	itte	ge
 800b1ea:	461c      	movge	r4, r3
 800b1ec:	2500      	movge	r5, #0
 800b1ee:	2501      	movlt	r5, #1
 800b1f0:	f7ff fd3a 	bl	800ac68 <_Balloc>
 800b1f4:	b920      	cbnz	r0, 800b200 <__mdiff+0x5c>
 800b1f6:	4b2e      	ldr	r3, [pc, #184]	; (800b2b0 <__mdiff+0x10c>)
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b1fe:	e7e5      	b.n	800b1cc <__mdiff+0x28>
 800b200:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b204:	6926      	ldr	r6, [r4, #16]
 800b206:	60c5      	str	r5, [r0, #12]
 800b208:	f104 0914 	add.w	r9, r4, #20
 800b20c:	f108 0514 	add.w	r5, r8, #20
 800b210:	f100 0e14 	add.w	lr, r0, #20
 800b214:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b218:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b21c:	f108 0210 	add.w	r2, r8, #16
 800b220:	46f2      	mov	sl, lr
 800b222:	2100      	movs	r1, #0
 800b224:	f859 3b04 	ldr.w	r3, [r9], #4
 800b228:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b22c:	fa1f f883 	uxth.w	r8, r3
 800b230:	fa11 f18b 	uxtah	r1, r1, fp
 800b234:	0c1b      	lsrs	r3, r3, #16
 800b236:	eba1 0808 	sub.w	r8, r1, r8
 800b23a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b23e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b242:	fa1f f888 	uxth.w	r8, r8
 800b246:	1419      	asrs	r1, r3, #16
 800b248:	454e      	cmp	r6, r9
 800b24a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b24e:	f84a 3b04 	str.w	r3, [sl], #4
 800b252:	d8e7      	bhi.n	800b224 <__mdiff+0x80>
 800b254:	1b33      	subs	r3, r6, r4
 800b256:	3b15      	subs	r3, #21
 800b258:	f023 0303 	bic.w	r3, r3, #3
 800b25c:	3304      	adds	r3, #4
 800b25e:	3415      	adds	r4, #21
 800b260:	42a6      	cmp	r6, r4
 800b262:	bf38      	it	cc
 800b264:	2304      	movcc	r3, #4
 800b266:	441d      	add	r5, r3
 800b268:	4473      	add	r3, lr
 800b26a:	469e      	mov	lr, r3
 800b26c:	462e      	mov	r6, r5
 800b26e:	4566      	cmp	r6, ip
 800b270:	d30e      	bcc.n	800b290 <__mdiff+0xec>
 800b272:	f10c 0203 	add.w	r2, ip, #3
 800b276:	1b52      	subs	r2, r2, r5
 800b278:	f022 0203 	bic.w	r2, r2, #3
 800b27c:	3d03      	subs	r5, #3
 800b27e:	45ac      	cmp	ip, r5
 800b280:	bf38      	it	cc
 800b282:	2200      	movcc	r2, #0
 800b284:	441a      	add	r2, r3
 800b286:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b28a:	b17b      	cbz	r3, 800b2ac <__mdiff+0x108>
 800b28c:	6107      	str	r7, [r0, #16]
 800b28e:	e7a3      	b.n	800b1d8 <__mdiff+0x34>
 800b290:	f856 8b04 	ldr.w	r8, [r6], #4
 800b294:	fa11 f288 	uxtah	r2, r1, r8
 800b298:	1414      	asrs	r4, r2, #16
 800b29a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b29e:	b292      	uxth	r2, r2
 800b2a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b2a4:	f84e 2b04 	str.w	r2, [lr], #4
 800b2a8:	1421      	asrs	r1, r4, #16
 800b2aa:	e7e0      	b.n	800b26e <__mdiff+0xca>
 800b2ac:	3f01      	subs	r7, #1
 800b2ae:	e7ea      	b.n	800b286 <__mdiff+0xe2>
 800b2b0:	0800d3db 	.word	0x0800d3db
 800b2b4:	0800d44c 	.word	0x0800d44c

0800b2b8 <__d2b>:
 800b2b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b2bc:	4689      	mov	r9, r1
 800b2be:	2101      	movs	r1, #1
 800b2c0:	ec57 6b10 	vmov	r6, r7, d0
 800b2c4:	4690      	mov	r8, r2
 800b2c6:	f7ff fccf 	bl	800ac68 <_Balloc>
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	b930      	cbnz	r0, 800b2dc <__d2b+0x24>
 800b2ce:	4602      	mov	r2, r0
 800b2d0:	4b25      	ldr	r3, [pc, #148]	; (800b368 <__d2b+0xb0>)
 800b2d2:	4826      	ldr	r0, [pc, #152]	; (800b36c <__d2b+0xb4>)
 800b2d4:	f240 310a 	movw	r1, #778	; 0x30a
 800b2d8:	f000 fb00 	bl	800b8dc <__assert_func>
 800b2dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b2e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b2e4:	bb35      	cbnz	r5, 800b334 <__d2b+0x7c>
 800b2e6:	2e00      	cmp	r6, #0
 800b2e8:	9301      	str	r3, [sp, #4]
 800b2ea:	d028      	beq.n	800b33e <__d2b+0x86>
 800b2ec:	4668      	mov	r0, sp
 800b2ee:	9600      	str	r6, [sp, #0]
 800b2f0:	f7ff fd82 	bl	800adf8 <__lo0bits>
 800b2f4:	9900      	ldr	r1, [sp, #0]
 800b2f6:	b300      	cbz	r0, 800b33a <__d2b+0x82>
 800b2f8:	9a01      	ldr	r2, [sp, #4]
 800b2fa:	f1c0 0320 	rsb	r3, r0, #32
 800b2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800b302:	430b      	orrs	r3, r1
 800b304:	40c2      	lsrs	r2, r0
 800b306:	6163      	str	r3, [r4, #20]
 800b308:	9201      	str	r2, [sp, #4]
 800b30a:	9b01      	ldr	r3, [sp, #4]
 800b30c:	61a3      	str	r3, [r4, #24]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	bf14      	ite	ne
 800b312:	2202      	movne	r2, #2
 800b314:	2201      	moveq	r2, #1
 800b316:	6122      	str	r2, [r4, #16]
 800b318:	b1d5      	cbz	r5, 800b350 <__d2b+0x98>
 800b31a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b31e:	4405      	add	r5, r0
 800b320:	f8c9 5000 	str.w	r5, [r9]
 800b324:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b328:	f8c8 0000 	str.w	r0, [r8]
 800b32c:	4620      	mov	r0, r4
 800b32e:	b003      	add	sp, #12
 800b330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b334:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b338:	e7d5      	b.n	800b2e6 <__d2b+0x2e>
 800b33a:	6161      	str	r1, [r4, #20]
 800b33c:	e7e5      	b.n	800b30a <__d2b+0x52>
 800b33e:	a801      	add	r0, sp, #4
 800b340:	f7ff fd5a 	bl	800adf8 <__lo0bits>
 800b344:	9b01      	ldr	r3, [sp, #4]
 800b346:	6163      	str	r3, [r4, #20]
 800b348:	2201      	movs	r2, #1
 800b34a:	6122      	str	r2, [r4, #16]
 800b34c:	3020      	adds	r0, #32
 800b34e:	e7e3      	b.n	800b318 <__d2b+0x60>
 800b350:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b354:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b358:	f8c9 0000 	str.w	r0, [r9]
 800b35c:	6918      	ldr	r0, [r3, #16]
 800b35e:	f7ff fd2b 	bl	800adb8 <__hi0bits>
 800b362:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b366:	e7df      	b.n	800b328 <__d2b+0x70>
 800b368:	0800d3db 	.word	0x0800d3db
 800b36c:	0800d44c 	.word	0x0800d44c

0800b370 <_calloc_r>:
 800b370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b372:	fba1 2402 	umull	r2, r4, r1, r2
 800b376:	b94c      	cbnz	r4, 800b38c <_calloc_r+0x1c>
 800b378:	4611      	mov	r1, r2
 800b37a:	9201      	str	r2, [sp, #4]
 800b37c:	f000 f87a 	bl	800b474 <_malloc_r>
 800b380:	9a01      	ldr	r2, [sp, #4]
 800b382:	4605      	mov	r5, r0
 800b384:	b930      	cbnz	r0, 800b394 <_calloc_r+0x24>
 800b386:	4628      	mov	r0, r5
 800b388:	b003      	add	sp, #12
 800b38a:	bd30      	pop	{r4, r5, pc}
 800b38c:	220c      	movs	r2, #12
 800b38e:	6002      	str	r2, [r0, #0]
 800b390:	2500      	movs	r5, #0
 800b392:	e7f8      	b.n	800b386 <_calloc_r+0x16>
 800b394:	4621      	mov	r1, r4
 800b396:	f7fd fe0b 	bl	8008fb0 <memset>
 800b39a:	e7f4      	b.n	800b386 <_calloc_r+0x16>

0800b39c <_free_r>:
 800b39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b39e:	2900      	cmp	r1, #0
 800b3a0:	d044      	beq.n	800b42c <_free_r+0x90>
 800b3a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3a6:	9001      	str	r0, [sp, #4]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	f1a1 0404 	sub.w	r4, r1, #4
 800b3ae:	bfb8      	it	lt
 800b3b0:	18e4      	addlt	r4, r4, r3
 800b3b2:	f000 fb19 	bl	800b9e8 <__malloc_lock>
 800b3b6:	4a1e      	ldr	r2, [pc, #120]	; (800b430 <_free_r+0x94>)
 800b3b8:	9801      	ldr	r0, [sp, #4]
 800b3ba:	6813      	ldr	r3, [r2, #0]
 800b3bc:	b933      	cbnz	r3, 800b3cc <_free_r+0x30>
 800b3be:	6063      	str	r3, [r4, #4]
 800b3c0:	6014      	str	r4, [r2, #0]
 800b3c2:	b003      	add	sp, #12
 800b3c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b3c8:	f000 bb14 	b.w	800b9f4 <__malloc_unlock>
 800b3cc:	42a3      	cmp	r3, r4
 800b3ce:	d908      	bls.n	800b3e2 <_free_r+0x46>
 800b3d0:	6825      	ldr	r5, [r4, #0]
 800b3d2:	1961      	adds	r1, r4, r5
 800b3d4:	428b      	cmp	r3, r1
 800b3d6:	bf01      	itttt	eq
 800b3d8:	6819      	ldreq	r1, [r3, #0]
 800b3da:	685b      	ldreq	r3, [r3, #4]
 800b3dc:	1949      	addeq	r1, r1, r5
 800b3de:	6021      	streq	r1, [r4, #0]
 800b3e0:	e7ed      	b.n	800b3be <_free_r+0x22>
 800b3e2:	461a      	mov	r2, r3
 800b3e4:	685b      	ldr	r3, [r3, #4]
 800b3e6:	b10b      	cbz	r3, 800b3ec <_free_r+0x50>
 800b3e8:	42a3      	cmp	r3, r4
 800b3ea:	d9fa      	bls.n	800b3e2 <_free_r+0x46>
 800b3ec:	6811      	ldr	r1, [r2, #0]
 800b3ee:	1855      	adds	r5, r2, r1
 800b3f0:	42a5      	cmp	r5, r4
 800b3f2:	d10b      	bne.n	800b40c <_free_r+0x70>
 800b3f4:	6824      	ldr	r4, [r4, #0]
 800b3f6:	4421      	add	r1, r4
 800b3f8:	1854      	adds	r4, r2, r1
 800b3fa:	42a3      	cmp	r3, r4
 800b3fc:	6011      	str	r1, [r2, #0]
 800b3fe:	d1e0      	bne.n	800b3c2 <_free_r+0x26>
 800b400:	681c      	ldr	r4, [r3, #0]
 800b402:	685b      	ldr	r3, [r3, #4]
 800b404:	6053      	str	r3, [r2, #4]
 800b406:	4421      	add	r1, r4
 800b408:	6011      	str	r1, [r2, #0]
 800b40a:	e7da      	b.n	800b3c2 <_free_r+0x26>
 800b40c:	d902      	bls.n	800b414 <_free_r+0x78>
 800b40e:	230c      	movs	r3, #12
 800b410:	6003      	str	r3, [r0, #0]
 800b412:	e7d6      	b.n	800b3c2 <_free_r+0x26>
 800b414:	6825      	ldr	r5, [r4, #0]
 800b416:	1961      	adds	r1, r4, r5
 800b418:	428b      	cmp	r3, r1
 800b41a:	bf04      	itt	eq
 800b41c:	6819      	ldreq	r1, [r3, #0]
 800b41e:	685b      	ldreq	r3, [r3, #4]
 800b420:	6063      	str	r3, [r4, #4]
 800b422:	bf04      	itt	eq
 800b424:	1949      	addeq	r1, r1, r5
 800b426:	6021      	streq	r1, [r4, #0]
 800b428:	6054      	str	r4, [r2, #4]
 800b42a:	e7ca      	b.n	800b3c2 <_free_r+0x26>
 800b42c:	b003      	add	sp, #12
 800b42e:	bd30      	pop	{r4, r5, pc}
 800b430:	20001348 	.word	0x20001348

0800b434 <sbrk_aligned>:
 800b434:	b570      	push	{r4, r5, r6, lr}
 800b436:	4e0e      	ldr	r6, [pc, #56]	; (800b470 <sbrk_aligned+0x3c>)
 800b438:	460c      	mov	r4, r1
 800b43a:	6831      	ldr	r1, [r6, #0]
 800b43c:	4605      	mov	r5, r0
 800b43e:	b911      	cbnz	r1, 800b446 <sbrk_aligned+0x12>
 800b440:	f000 f9e6 	bl	800b810 <_sbrk_r>
 800b444:	6030      	str	r0, [r6, #0]
 800b446:	4621      	mov	r1, r4
 800b448:	4628      	mov	r0, r5
 800b44a:	f000 f9e1 	bl	800b810 <_sbrk_r>
 800b44e:	1c43      	adds	r3, r0, #1
 800b450:	d00a      	beq.n	800b468 <sbrk_aligned+0x34>
 800b452:	1cc4      	adds	r4, r0, #3
 800b454:	f024 0403 	bic.w	r4, r4, #3
 800b458:	42a0      	cmp	r0, r4
 800b45a:	d007      	beq.n	800b46c <sbrk_aligned+0x38>
 800b45c:	1a21      	subs	r1, r4, r0
 800b45e:	4628      	mov	r0, r5
 800b460:	f000 f9d6 	bl	800b810 <_sbrk_r>
 800b464:	3001      	adds	r0, #1
 800b466:	d101      	bne.n	800b46c <sbrk_aligned+0x38>
 800b468:	f04f 34ff 	mov.w	r4, #4294967295
 800b46c:	4620      	mov	r0, r4
 800b46e:	bd70      	pop	{r4, r5, r6, pc}
 800b470:	2000134c 	.word	0x2000134c

0800b474 <_malloc_r>:
 800b474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b478:	1ccd      	adds	r5, r1, #3
 800b47a:	f025 0503 	bic.w	r5, r5, #3
 800b47e:	3508      	adds	r5, #8
 800b480:	2d0c      	cmp	r5, #12
 800b482:	bf38      	it	cc
 800b484:	250c      	movcc	r5, #12
 800b486:	2d00      	cmp	r5, #0
 800b488:	4607      	mov	r7, r0
 800b48a:	db01      	blt.n	800b490 <_malloc_r+0x1c>
 800b48c:	42a9      	cmp	r1, r5
 800b48e:	d905      	bls.n	800b49c <_malloc_r+0x28>
 800b490:	230c      	movs	r3, #12
 800b492:	603b      	str	r3, [r7, #0]
 800b494:	2600      	movs	r6, #0
 800b496:	4630      	mov	r0, r6
 800b498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b49c:	4e2e      	ldr	r6, [pc, #184]	; (800b558 <_malloc_r+0xe4>)
 800b49e:	f000 faa3 	bl	800b9e8 <__malloc_lock>
 800b4a2:	6833      	ldr	r3, [r6, #0]
 800b4a4:	461c      	mov	r4, r3
 800b4a6:	bb34      	cbnz	r4, 800b4f6 <_malloc_r+0x82>
 800b4a8:	4629      	mov	r1, r5
 800b4aa:	4638      	mov	r0, r7
 800b4ac:	f7ff ffc2 	bl	800b434 <sbrk_aligned>
 800b4b0:	1c43      	adds	r3, r0, #1
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	d14d      	bne.n	800b552 <_malloc_r+0xde>
 800b4b6:	6834      	ldr	r4, [r6, #0]
 800b4b8:	4626      	mov	r6, r4
 800b4ba:	2e00      	cmp	r6, #0
 800b4bc:	d140      	bne.n	800b540 <_malloc_r+0xcc>
 800b4be:	6823      	ldr	r3, [r4, #0]
 800b4c0:	4631      	mov	r1, r6
 800b4c2:	4638      	mov	r0, r7
 800b4c4:	eb04 0803 	add.w	r8, r4, r3
 800b4c8:	f000 f9a2 	bl	800b810 <_sbrk_r>
 800b4cc:	4580      	cmp	r8, r0
 800b4ce:	d13a      	bne.n	800b546 <_malloc_r+0xd2>
 800b4d0:	6821      	ldr	r1, [r4, #0]
 800b4d2:	3503      	adds	r5, #3
 800b4d4:	1a6d      	subs	r5, r5, r1
 800b4d6:	f025 0503 	bic.w	r5, r5, #3
 800b4da:	3508      	adds	r5, #8
 800b4dc:	2d0c      	cmp	r5, #12
 800b4de:	bf38      	it	cc
 800b4e0:	250c      	movcc	r5, #12
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	4638      	mov	r0, r7
 800b4e6:	f7ff ffa5 	bl	800b434 <sbrk_aligned>
 800b4ea:	3001      	adds	r0, #1
 800b4ec:	d02b      	beq.n	800b546 <_malloc_r+0xd2>
 800b4ee:	6823      	ldr	r3, [r4, #0]
 800b4f0:	442b      	add	r3, r5
 800b4f2:	6023      	str	r3, [r4, #0]
 800b4f4:	e00e      	b.n	800b514 <_malloc_r+0xa0>
 800b4f6:	6822      	ldr	r2, [r4, #0]
 800b4f8:	1b52      	subs	r2, r2, r5
 800b4fa:	d41e      	bmi.n	800b53a <_malloc_r+0xc6>
 800b4fc:	2a0b      	cmp	r2, #11
 800b4fe:	d916      	bls.n	800b52e <_malloc_r+0xba>
 800b500:	1961      	adds	r1, r4, r5
 800b502:	42a3      	cmp	r3, r4
 800b504:	6025      	str	r5, [r4, #0]
 800b506:	bf18      	it	ne
 800b508:	6059      	strne	r1, [r3, #4]
 800b50a:	6863      	ldr	r3, [r4, #4]
 800b50c:	bf08      	it	eq
 800b50e:	6031      	streq	r1, [r6, #0]
 800b510:	5162      	str	r2, [r4, r5]
 800b512:	604b      	str	r3, [r1, #4]
 800b514:	4638      	mov	r0, r7
 800b516:	f104 060b 	add.w	r6, r4, #11
 800b51a:	f000 fa6b 	bl	800b9f4 <__malloc_unlock>
 800b51e:	f026 0607 	bic.w	r6, r6, #7
 800b522:	1d23      	adds	r3, r4, #4
 800b524:	1af2      	subs	r2, r6, r3
 800b526:	d0b6      	beq.n	800b496 <_malloc_r+0x22>
 800b528:	1b9b      	subs	r3, r3, r6
 800b52a:	50a3      	str	r3, [r4, r2]
 800b52c:	e7b3      	b.n	800b496 <_malloc_r+0x22>
 800b52e:	6862      	ldr	r2, [r4, #4]
 800b530:	42a3      	cmp	r3, r4
 800b532:	bf0c      	ite	eq
 800b534:	6032      	streq	r2, [r6, #0]
 800b536:	605a      	strne	r2, [r3, #4]
 800b538:	e7ec      	b.n	800b514 <_malloc_r+0xa0>
 800b53a:	4623      	mov	r3, r4
 800b53c:	6864      	ldr	r4, [r4, #4]
 800b53e:	e7b2      	b.n	800b4a6 <_malloc_r+0x32>
 800b540:	4634      	mov	r4, r6
 800b542:	6876      	ldr	r6, [r6, #4]
 800b544:	e7b9      	b.n	800b4ba <_malloc_r+0x46>
 800b546:	230c      	movs	r3, #12
 800b548:	603b      	str	r3, [r7, #0]
 800b54a:	4638      	mov	r0, r7
 800b54c:	f000 fa52 	bl	800b9f4 <__malloc_unlock>
 800b550:	e7a1      	b.n	800b496 <_malloc_r+0x22>
 800b552:	6025      	str	r5, [r4, #0]
 800b554:	e7de      	b.n	800b514 <_malloc_r+0xa0>
 800b556:	bf00      	nop
 800b558:	20001348 	.word	0x20001348

0800b55c <__sfputc_r>:
 800b55c:	6893      	ldr	r3, [r2, #8]
 800b55e:	3b01      	subs	r3, #1
 800b560:	2b00      	cmp	r3, #0
 800b562:	b410      	push	{r4}
 800b564:	6093      	str	r3, [r2, #8]
 800b566:	da08      	bge.n	800b57a <__sfputc_r+0x1e>
 800b568:	6994      	ldr	r4, [r2, #24]
 800b56a:	42a3      	cmp	r3, r4
 800b56c:	db01      	blt.n	800b572 <__sfputc_r+0x16>
 800b56e:	290a      	cmp	r1, #10
 800b570:	d103      	bne.n	800b57a <__sfputc_r+0x1e>
 800b572:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b576:	f7fe ba03 	b.w	8009980 <__swbuf_r>
 800b57a:	6813      	ldr	r3, [r2, #0]
 800b57c:	1c58      	adds	r0, r3, #1
 800b57e:	6010      	str	r0, [r2, #0]
 800b580:	7019      	strb	r1, [r3, #0]
 800b582:	4608      	mov	r0, r1
 800b584:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <__sfputs_r>:
 800b58a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b58c:	4606      	mov	r6, r0
 800b58e:	460f      	mov	r7, r1
 800b590:	4614      	mov	r4, r2
 800b592:	18d5      	adds	r5, r2, r3
 800b594:	42ac      	cmp	r4, r5
 800b596:	d101      	bne.n	800b59c <__sfputs_r+0x12>
 800b598:	2000      	movs	r0, #0
 800b59a:	e007      	b.n	800b5ac <__sfputs_r+0x22>
 800b59c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5a0:	463a      	mov	r2, r7
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f7ff ffda 	bl	800b55c <__sfputc_r>
 800b5a8:	1c43      	adds	r3, r0, #1
 800b5aa:	d1f3      	bne.n	800b594 <__sfputs_r+0xa>
 800b5ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b5b0 <_vfiprintf_r>:
 800b5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b4:	460d      	mov	r5, r1
 800b5b6:	b09d      	sub	sp, #116	; 0x74
 800b5b8:	4614      	mov	r4, r2
 800b5ba:	4698      	mov	r8, r3
 800b5bc:	4606      	mov	r6, r0
 800b5be:	b118      	cbz	r0, 800b5c8 <_vfiprintf_r+0x18>
 800b5c0:	6983      	ldr	r3, [r0, #24]
 800b5c2:	b90b      	cbnz	r3, 800b5c8 <_vfiprintf_r+0x18>
 800b5c4:	f7ff fa30 	bl	800aa28 <__sinit>
 800b5c8:	4b89      	ldr	r3, [pc, #548]	; (800b7f0 <_vfiprintf_r+0x240>)
 800b5ca:	429d      	cmp	r5, r3
 800b5cc:	d11b      	bne.n	800b606 <_vfiprintf_r+0x56>
 800b5ce:	6875      	ldr	r5, [r6, #4]
 800b5d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5d2:	07d9      	lsls	r1, r3, #31
 800b5d4:	d405      	bmi.n	800b5e2 <_vfiprintf_r+0x32>
 800b5d6:	89ab      	ldrh	r3, [r5, #12]
 800b5d8:	059a      	lsls	r2, r3, #22
 800b5da:	d402      	bmi.n	800b5e2 <_vfiprintf_r+0x32>
 800b5dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b5de:	f7ff fac6 	bl	800ab6e <__retarget_lock_acquire_recursive>
 800b5e2:	89ab      	ldrh	r3, [r5, #12]
 800b5e4:	071b      	lsls	r3, r3, #28
 800b5e6:	d501      	bpl.n	800b5ec <_vfiprintf_r+0x3c>
 800b5e8:	692b      	ldr	r3, [r5, #16]
 800b5ea:	b9eb      	cbnz	r3, 800b628 <_vfiprintf_r+0x78>
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f7fe fa18 	bl	8009a24 <__swsetup_r>
 800b5f4:	b1c0      	cbz	r0, 800b628 <_vfiprintf_r+0x78>
 800b5f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b5f8:	07dc      	lsls	r4, r3, #31
 800b5fa:	d50e      	bpl.n	800b61a <_vfiprintf_r+0x6a>
 800b5fc:	f04f 30ff 	mov.w	r0, #4294967295
 800b600:	b01d      	add	sp, #116	; 0x74
 800b602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b606:	4b7b      	ldr	r3, [pc, #492]	; (800b7f4 <_vfiprintf_r+0x244>)
 800b608:	429d      	cmp	r5, r3
 800b60a:	d101      	bne.n	800b610 <_vfiprintf_r+0x60>
 800b60c:	68b5      	ldr	r5, [r6, #8]
 800b60e:	e7df      	b.n	800b5d0 <_vfiprintf_r+0x20>
 800b610:	4b79      	ldr	r3, [pc, #484]	; (800b7f8 <_vfiprintf_r+0x248>)
 800b612:	429d      	cmp	r5, r3
 800b614:	bf08      	it	eq
 800b616:	68f5      	ldreq	r5, [r6, #12]
 800b618:	e7da      	b.n	800b5d0 <_vfiprintf_r+0x20>
 800b61a:	89ab      	ldrh	r3, [r5, #12]
 800b61c:	0598      	lsls	r0, r3, #22
 800b61e:	d4ed      	bmi.n	800b5fc <_vfiprintf_r+0x4c>
 800b620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b622:	f7ff faa5 	bl	800ab70 <__retarget_lock_release_recursive>
 800b626:	e7e9      	b.n	800b5fc <_vfiprintf_r+0x4c>
 800b628:	2300      	movs	r3, #0
 800b62a:	9309      	str	r3, [sp, #36]	; 0x24
 800b62c:	2320      	movs	r3, #32
 800b62e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b632:	f8cd 800c 	str.w	r8, [sp, #12]
 800b636:	2330      	movs	r3, #48	; 0x30
 800b638:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b7fc <_vfiprintf_r+0x24c>
 800b63c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b640:	f04f 0901 	mov.w	r9, #1
 800b644:	4623      	mov	r3, r4
 800b646:	469a      	mov	sl, r3
 800b648:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b64c:	b10a      	cbz	r2, 800b652 <_vfiprintf_r+0xa2>
 800b64e:	2a25      	cmp	r2, #37	; 0x25
 800b650:	d1f9      	bne.n	800b646 <_vfiprintf_r+0x96>
 800b652:	ebba 0b04 	subs.w	fp, sl, r4
 800b656:	d00b      	beq.n	800b670 <_vfiprintf_r+0xc0>
 800b658:	465b      	mov	r3, fp
 800b65a:	4622      	mov	r2, r4
 800b65c:	4629      	mov	r1, r5
 800b65e:	4630      	mov	r0, r6
 800b660:	f7ff ff93 	bl	800b58a <__sfputs_r>
 800b664:	3001      	adds	r0, #1
 800b666:	f000 80aa 	beq.w	800b7be <_vfiprintf_r+0x20e>
 800b66a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b66c:	445a      	add	r2, fp
 800b66e:	9209      	str	r2, [sp, #36]	; 0x24
 800b670:	f89a 3000 	ldrb.w	r3, [sl]
 800b674:	2b00      	cmp	r3, #0
 800b676:	f000 80a2 	beq.w	800b7be <_vfiprintf_r+0x20e>
 800b67a:	2300      	movs	r3, #0
 800b67c:	f04f 32ff 	mov.w	r2, #4294967295
 800b680:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b684:	f10a 0a01 	add.w	sl, sl, #1
 800b688:	9304      	str	r3, [sp, #16]
 800b68a:	9307      	str	r3, [sp, #28]
 800b68c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b690:	931a      	str	r3, [sp, #104]	; 0x68
 800b692:	4654      	mov	r4, sl
 800b694:	2205      	movs	r2, #5
 800b696:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b69a:	4858      	ldr	r0, [pc, #352]	; (800b7fc <_vfiprintf_r+0x24c>)
 800b69c:	f7f4 fda0 	bl	80001e0 <memchr>
 800b6a0:	9a04      	ldr	r2, [sp, #16]
 800b6a2:	b9d8      	cbnz	r0, 800b6dc <_vfiprintf_r+0x12c>
 800b6a4:	06d1      	lsls	r1, r2, #27
 800b6a6:	bf44      	itt	mi
 800b6a8:	2320      	movmi	r3, #32
 800b6aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6ae:	0713      	lsls	r3, r2, #28
 800b6b0:	bf44      	itt	mi
 800b6b2:	232b      	movmi	r3, #43	; 0x2b
 800b6b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b6b8:	f89a 3000 	ldrb.w	r3, [sl]
 800b6bc:	2b2a      	cmp	r3, #42	; 0x2a
 800b6be:	d015      	beq.n	800b6ec <_vfiprintf_r+0x13c>
 800b6c0:	9a07      	ldr	r2, [sp, #28]
 800b6c2:	4654      	mov	r4, sl
 800b6c4:	2000      	movs	r0, #0
 800b6c6:	f04f 0c0a 	mov.w	ip, #10
 800b6ca:	4621      	mov	r1, r4
 800b6cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6d0:	3b30      	subs	r3, #48	; 0x30
 800b6d2:	2b09      	cmp	r3, #9
 800b6d4:	d94e      	bls.n	800b774 <_vfiprintf_r+0x1c4>
 800b6d6:	b1b0      	cbz	r0, 800b706 <_vfiprintf_r+0x156>
 800b6d8:	9207      	str	r2, [sp, #28]
 800b6da:	e014      	b.n	800b706 <_vfiprintf_r+0x156>
 800b6dc:	eba0 0308 	sub.w	r3, r0, r8
 800b6e0:	fa09 f303 	lsl.w	r3, r9, r3
 800b6e4:	4313      	orrs	r3, r2
 800b6e6:	9304      	str	r3, [sp, #16]
 800b6e8:	46a2      	mov	sl, r4
 800b6ea:	e7d2      	b.n	800b692 <_vfiprintf_r+0xe2>
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	1d19      	adds	r1, r3, #4
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	9103      	str	r1, [sp, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	bfbb      	ittet	lt
 800b6f8:	425b      	neglt	r3, r3
 800b6fa:	f042 0202 	orrlt.w	r2, r2, #2
 800b6fe:	9307      	strge	r3, [sp, #28]
 800b700:	9307      	strlt	r3, [sp, #28]
 800b702:	bfb8      	it	lt
 800b704:	9204      	strlt	r2, [sp, #16]
 800b706:	7823      	ldrb	r3, [r4, #0]
 800b708:	2b2e      	cmp	r3, #46	; 0x2e
 800b70a:	d10c      	bne.n	800b726 <_vfiprintf_r+0x176>
 800b70c:	7863      	ldrb	r3, [r4, #1]
 800b70e:	2b2a      	cmp	r3, #42	; 0x2a
 800b710:	d135      	bne.n	800b77e <_vfiprintf_r+0x1ce>
 800b712:	9b03      	ldr	r3, [sp, #12]
 800b714:	1d1a      	adds	r2, r3, #4
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	9203      	str	r2, [sp, #12]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	bfb8      	it	lt
 800b71e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b722:	3402      	adds	r4, #2
 800b724:	9305      	str	r3, [sp, #20]
 800b726:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b80c <_vfiprintf_r+0x25c>
 800b72a:	7821      	ldrb	r1, [r4, #0]
 800b72c:	2203      	movs	r2, #3
 800b72e:	4650      	mov	r0, sl
 800b730:	f7f4 fd56 	bl	80001e0 <memchr>
 800b734:	b140      	cbz	r0, 800b748 <_vfiprintf_r+0x198>
 800b736:	2340      	movs	r3, #64	; 0x40
 800b738:	eba0 000a 	sub.w	r0, r0, sl
 800b73c:	fa03 f000 	lsl.w	r0, r3, r0
 800b740:	9b04      	ldr	r3, [sp, #16]
 800b742:	4303      	orrs	r3, r0
 800b744:	3401      	adds	r4, #1
 800b746:	9304      	str	r3, [sp, #16]
 800b748:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b74c:	482c      	ldr	r0, [pc, #176]	; (800b800 <_vfiprintf_r+0x250>)
 800b74e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b752:	2206      	movs	r2, #6
 800b754:	f7f4 fd44 	bl	80001e0 <memchr>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d03f      	beq.n	800b7dc <_vfiprintf_r+0x22c>
 800b75c:	4b29      	ldr	r3, [pc, #164]	; (800b804 <_vfiprintf_r+0x254>)
 800b75e:	bb1b      	cbnz	r3, 800b7a8 <_vfiprintf_r+0x1f8>
 800b760:	9b03      	ldr	r3, [sp, #12]
 800b762:	3307      	adds	r3, #7
 800b764:	f023 0307 	bic.w	r3, r3, #7
 800b768:	3308      	adds	r3, #8
 800b76a:	9303      	str	r3, [sp, #12]
 800b76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b76e:	443b      	add	r3, r7
 800b770:	9309      	str	r3, [sp, #36]	; 0x24
 800b772:	e767      	b.n	800b644 <_vfiprintf_r+0x94>
 800b774:	fb0c 3202 	mla	r2, ip, r2, r3
 800b778:	460c      	mov	r4, r1
 800b77a:	2001      	movs	r0, #1
 800b77c:	e7a5      	b.n	800b6ca <_vfiprintf_r+0x11a>
 800b77e:	2300      	movs	r3, #0
 800b780:	3401      	adds	r4, #1
 800b782:	9305      	str	r3, [sp, #20]
 800b784:	4619      	mov	r1, r3
 800b786:	f04f 0c0a 	mov.w	ip, #10
 800b78a:	4620      	mov	r0, r4
 800b78c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b790:	3a30      	subs	r2, #48	; 0x30
 800b792:	2a09      	cmp	r2, #9
 800b794:	d903      	bls.n	800b79e <_vfiprintf_r+0x1ee>
 800b796:	2b00      	cmp	r3, #0
 800b798:	d0c5      	beq.n	800b726 <_vfiprintf_r+0x176>
 800b79a:	9105      	str	r1, [sp, #20]
 800b79c:	e7c3      	b.n	800b726 <_vfiprintf_r+0x176>
 800b79e:	fb0c 2101 	mla	r1, ip, r1, r2
 800b7a2:	4604      	mov	r4, r0
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e7f0      	b.n	800b78a <_vfiprintf_r+0x1da>
 800b7a8:	ab03      	add	r3, sp, #12
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	4b16      	ldr	r3, [pc, #88]	; (800b808 <_vfiprintf_r+0x258>)
 800b7b0:	a904      	add	r1, sp, #16
 800b7b2:	4630      	mov	r0, r6
 800b7b4:	f7fd fca4 	bl	8009100 <_printf_float>
 800b7b8:	4607      	mov	r7, r0
 800b7ba:	1c78      	adds	r0, r7, #1
 800b7bc:	d1d6      	bne.n	800b76c <_vfiprintf_r+0x1bc>
 800b7be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b7c0:	07d9      	lsls	r1, r3, #31
 800b7c2:	d405      	bmi.n	800b7d0 <_vfiprintf_r+0x220>
 800b7c4:	89ab      	ldrh	r3, [r5, #12]
 800b7c6:	059a      	lsls	r2, r3, #22
 800b7c8:	d402      	bmi.n	800b7d0 <_vfiprintf_r+0x220>
 800b7ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b7cc:	f7ff f9d0 	bl	800ab70 <__retarget_lock_release_recursive>
 800b7d0:	89ab      	ldrh	r3, [r5, #12]
 800b7d2:	065b      	lsls	r3, r3, #25
 800b7d4:	f53f af12 	bmi.w	800b5fc <_vfiprintf_r+0x4c>
 800b7d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7da:	e711      	b.n	800b600 <_vfiprintf_r+0x50>
 800b7dc:	ab03      	add	r3, sp, #12
 800b7de:	9300      	str	r3, [sp, #0]
 800b7e0:	462a      	mov	r2, r5
 800b7e2:	4b09      	ldr	r3, [pc, #36]	; (800b808 <_vfiprintf_r+0x258>)
 800b7e4:	a904      	add	r1, sp, #16
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f7fd ff2e 	bl	8009648 <_printf_i>
 800b7ec:	e7e4      	b.n	800b7b8 <_vfiprintf_r+0x208>
 800b7ee:	bf00      	nop
 800b7f0:	0800d40c 	.word	0x0800d40c
 800b7f4:	0800d42c 	.word	0x0800d42c
 800b7f8:	0800d3ec 	.word	0x0800d3ec
 800b7fc:	0800d5a4 	.word	0x0800d5a4
 800b800:	0800d5ae 	.word	0x0800d5ae
 800b804:	08009101 	.word	0x08009101
 800b808:	0800b58b 	.word	0x0800b58b
 800b80c:	0800d5aa 	.word	0x0800d5aa

0800b810 <_sbrk_r>:
 800b810:	b538      	push	{r3, r4, r5, lr}
 800b812:	4d06      	ldr	r5, [pc, #24]	; (800b82c <_sbrk_r+0x1c>)
 800b814:	2300      	movs	r3, #0
 800b816:	4604      	mov	r4, r0
 800b818:	4608      	mov	r0, r1
 800b81a:	602b      	str	r3, [r5, #0]
 800b81c:	f7f7 f9be 	bl	8002b9c <_sbrk>
 800b820:	1c43      	adds	r3, r0, #1
 800b822:	d102      	bne.n	800b82a <_sbrk_r+0x1a>
 800b824:	682b      	ldr	r3, [r5, #0]
 800b826:	b103      	cbz	r3, 800b82a <_sbrk_r+0x1a>
 800b828:	6023      	str	r3, [r4, #0]
 800b82a:	bd38      	pop	{r3, r4, r5, pc}
 800b82c:	20001350 	.word	0x20001350

0800b830 <__sread>:
 800b830:	b510      	push	{r4, lr}
 800b832:	460c      	mov	r4, r1
 800b834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b838:	f000 f8e2 	bl	800ba00 <_read_r>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	bfab      	itete	ge
 800b840:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b842:	89a3      	ldrhlt	r3, [r4, #12]
 800b844:	181b      	addge	r3, r3, r0
 800b846:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b84a:	bfac      	ite	ge
 800b84c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b84e:	81a3      	strhlt	r3, [r4, #12]
 800b850:	bd10      	pop	{r4, pc}

0800b852 <__swrite>:
 800b852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b856:	461f      	mov	r7, r3
 800b858:	898b      	ldrh	r3, [r1, #12]
 800b85a:	05db      	lsls	r3, r3, #23
 800b85c:	4605      	mov	r5, r0
 800b85e:	460c      	mov	r4, r1
 800b860:	4616      	mov	r6, r2
 800b862:	d505      	bpl.n	800b870 <__swrite+0x1e>
 800b864:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b868:	2302      	movs	r3, #2
 800b86a:	2200      	movs	r2, #0
 800b86c:	f000 f898 	bl	800b9a0 <_lseek_r>
 800b870:	89a3      	ldrh	r3, [r4, #12]
 800b872:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b876:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	4632      	mov	r2, r6
 800b87e:	463b      	mov	r3, r7
 800b880:	4628      	mov	r0, r5
 800b882:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b886:	f000 b817 	b.w	800b8b8 <_write_r>

0800b88a <__sseek>:
 800b88a:	b510      	push	{r4, lr}
 800b88c:	460c      	mov	r4, r1
 800b88e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b892:	f000 f885 	bl	800b9a0 <_lseek_r>
 800b896:	1c43      	adds	r3, r0, #1
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	bf15      	itete	ne
 800b89c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b89e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b8a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b8a6:	81a3      	strheq	r3, [r4, #12]
 800b8a8:	bf18      	it	ne
 800b8aa:	81a3      	strhne	r3, [r4, #12]
 800b8ac:	bd10      	pop	{r4, pc}

0800b8ae <__sclose>:
 800b8ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8b2:	f000 b831 	b.w	800b918 <_close_r>
	...

0800b8b8 <_write_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d07      	ldr	r5, [pc, #28]	; (800b8d8 <_write_r+0x20>)
 800b8bc:	4604      	mov	r4, r0
 800b8be:	4608      	mov	r0, r1
 800b8c0:	4611      	mov	r1, r2
 800b8c2:	2200      	movs	r2, #0
 800b8c4:	602a      	str	r2, [r5, #0]
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f7f5 fe0c 	bl	80014e4 <_write>
 800b8cc:	1c43      	adds	r3, r0, #1
 800b8ce:	d102      	bne.n	800b8d6 <_write_r+0x1e>
 800b8d0:	682b      	ldr	r3, [r5, #0]
 800b8d2:	b103      	cbz	r3, 800b8d6 <_write_r+0x1e>
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	bd38      	pop	{r3, r4, r5, pc}
 800b8d8:	20001350 	.word	0x20001350

0800b8dc <__assert_func>:
 800b8dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b8de:	4614      	mov	r4, r2
 800b8e0:	461a      	mov	r2, r3
 800b8e2:	4b09      	ldr	r3, [pc, #36]	; (800b908 <__assert_func+0x2c>)
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	4605      	mov	r5, r0
 800b8e8:	68d8      	ldr	r0, [r3, #12]
 800b8ea:	b14c      	cbz	r4, 800b900 <__assert_func+0x24>
 800b8ec:	4b07      	ldr	r3, [pc, #28]	; (800b90c <__assert_func+0x30>)
 800b8ee:	9100      	str	r1, [sp, #0]
 800b8f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b8f4:	4906      	ldr	r1, [pc, #24]	; (800b910 <__assert_func+0x34>)
 800b8f6:	462b      	mov	r3, r5
 800b8f8:	f000 f81e 	bl	800b938 <fiprintf>
 800b8fc:	f000 f89f 	bl	800ba3e <abort>
 800b900:	4b04      	ldr	r3, [pc, #16]	; (800b914 <__assert_func+0x38>)
 800b902:	461c      	mov	r4, r3
 800b904:	e7f3      	b.n	800b8ee <__assert_func+0x12>
 800b906:	bf00      	nop
 800b908:	2000000c 	.word	0x2000000c
 800b90c:	0800d5b5 	.word	0x0800d5b5
 800b910:	0800d5c2 	.word	0x0800d5c2
 800b914:	0800d5f0 	.word	0x0800d5f0

0800b918 <_close_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4d06      	ldr	r5, [pc, #24]	; (800b934 <_close_r+0x1c>)
 800b91c:	2300      	movs	r3, #0
 800b91e:	4604      	mov	r4, r0
 800b920:	4608      	mov	r0, r1
 800b922:	602b      	str	r3, [r5, #0]
 800b924:	f7f7 f905 	bl	8002b32 <_close>
 800b928:	1c43      	adds	r3, r0, #1
 800b92a:	d102      	bne.n	800b932 <_close_r+0x1a>
 800b92c:	682b      	ldr	r3, [r5, #0]
 800b92e:	b103      	cbz	r3, 800b932 <_close_r+0x1a>
 800b930:	6023      	str	r3, [r4, #0]
 800b932:	bd38      	pop	{r3, r4, r5, pc}
 800b934:	20001350 	.word	0x20001350

0800b938 <fiprintf>:
 800b938:	b40e      	push	{r1, r2, r3}
 800b93a:	b503      	push	{r0, r1, lr}
 800b93c:	4601      	mov	r1, r0
 800b93e:	ab03      	add	r3, sp, #12
 800b940:	4805      	ldr	r0, [pc, #20]	; (800b958 <fiprintf+0x20>)
 800b942:	f853 2b04 	ldr.w	r2, [r3], #4
 800b946:	6800      	ldr	r0, [r0, #0]
 800b948:	9301      	str	r3, [sp, #4]
 800b94a:	f7ff fe31 	bl	800b5b0 <_vfiprintf_r>
 800b94e:	b002      	add	sp, #8
 800b950:	f85d eb04 	ldr.w	lr, [sp], #4
 800b954:	b003      	add	sp, #12
 800b956:	4770      	bx	lr
 800b958:	2000000c 	.word	0x2000000c

0800b95c <_fstat_r>:
 800b95c:	b538      	push	{r3, r4, r5, lr}
 800b95e:	4d07      	ldr	r5, [pc, #28]	; (800b97c <_fstat_r+0x20>)
 800b960:	2300      	movs	r3, #0
 800b962:	4604      	mov	r4, r0
 800b964:	4608      	mov	r0, r1
 800b966:	4611      	mov	r1, r2
 800b968:	602b      	str	r3, [r5, #0]
 800b96a:	f7f7 f8ee 	bl	8002b4a <_fstat>
 800b96e:	1c43      	adds	r3, r0, #1
 800b970:	d102      	bne.n	800b978 <_fstat_r+0x1c>
 800b972:	682b      	ldr	r3, [r5, #0]
 800b974:	b103      	cbz	r3, 800b978 <_fstat_r+0x1c>
 800b976:	6023      	str	r3, [r4, #0]
 800b978:	bd38      	pop	{r3, r4, r5, pc}
 800b97a:	bf00      	nop
 800b97c:	20001350 	.word	0x20001350

0800b980 <_isatty_r>:
 800b980:	b538      	push	{r3, r4, r5, lr}
 800b982:	4d06      	ldr	r5, [pc, #24]	; (800b99c <_isatty_r+0x1c>)
 800b984:	2300      	movs	r3, #0
 800b986:	4604      	mov	r4, r0
 800b988:	4608      	mov	r0, r1
 800b98a:	602b      	str	r3, [r5, #0]
 800b98c:	f7f7 f8ed 	bl	8002b6a <_isatty>
 800b990:	1c43      	adds	r3, r0, #1
 800b992:	d102      	bne.n	800b99a <_isatty_r+0x1a>
 800b994:	682b      	ldr	r3, [r5, #0]
 800b996:	b103      	cbz	r3, 800b99a <_isatty_r+0x1a>
 800b998:	6023      	str	r3, [r4, #0]
 800b99a:	bd38      	pop	{r3, r4, r5, pc}
 800b99c:	20001350 	.word	0x20001350

0800b9a0 <_lseek_r>:
 800b9a0:	b538      	push	{r3, r4, r5, lr}
 800b9a2:	4d07      	ldr	r5, [pc, #28]	; (800b9c0 <_lseek_r+0x20>)
 800b9a4:	4604      	mov	r4, r0
 800b9a6:	4608      	mov	r0, r1
 800b9a8:	4611      	mov	r1, r2
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	602a      	str	r2, [r5, #0]
 800b9ae:	461a      	mov	r2, r3
 800b9b0:	f7f7 f8e6 	bl	8002b80 <_lseek>
 800b9b4:	1c43      	adds	r3, r0, #1
 800b9b6:	d102      	bne.n	800b9be <_lseek_r+0x1e>
 800b9b8:	682b      	ldr	r3, [r5, #0]
 800b9ba:	b103      	cbz	r3, 800b9be <_lseek_r+0x1e>
 800b9bc:	6023      	str	r3, [r4, #0]
 800b9be:	bd38      	pop	{r3, r4, r5, pc}
 800b9c0:	20001350 	.word	0x20001350

0800b9c4 <__ascii_mbtowc>:
 800b9c4:	b082      	sub	sp, #8
 800b9c6:	b901      	cbnz	r1, 800b9ca <__ascii_mbtowc+0x6>
 800b9c8:	a901      	add	r1, sp, #4
 800b9ca:	b142      	cbz	r2, 800b9de <__ascii_mbtowc+0x1a>
 800b9cc:	b14b      	cbz	r3, 800b9e2 <__ascii_mbtowc+0x1e>
 800b9ce:	7813      	ldrb	r3, [r2, #0]
 800b9d0:	600b      	str	r3, [r1, #0]
 800b9d2:	7812      	ldrb	r2, [r2, #0]
 800b9d4:	1e10      	subs	r0, r2, #0
 800b9d6:	bf18      	it	ne
 800b9d8:	2001      	movne	r0, #1
 800b9da:	b002      	add	sp, #8
 800b9dc:	4770      	bx	lr
 800b9de:	4610      	mov	r0, r2
 800b9e0:	e7fb      	b.n	800b9da <__ascii_mbtowc+0x16>
 800b9e2:	f06f 0001 	mvn.w	r0, #1
 800b9e6:	e7f8      	b.n	800b9da <__ascii_mbtowc+0x16>

0800b9e8 <__malloc_lock>:
 800b9e8:	4801      	ldr	r0, [pc, #4]	; (800b9f0 <__malloc_lock+0x8>)
 800b9ea:	f7ff b8c0 	b.w	800ab6e <__retarget_lock_acquire_recursive>
 800b9ee:	bf00      	nop
 800b9f0:	20001344 	.word	0x20001344

0800b9f4 <__malloc_unlock>:
 800b9f4:	4801      	ldr	r0, [pc, #4]	; (800b9fc <__malloc_unlock+0x8>)
 800b9f6:	f7ff b8bb 	b.w	800ab70 <__retarget_lock_release_recursive>
 800b9fa:	bf00      	nop
 800b9fc:	20001344 	.word	0x20001344

0800ba00 <_read_r>:
 800ba00:	b538      	push	{r3, r4, r5, lr}
 800ba02:	4d07      	ldr	r5, [pc, #28]	; (800ba20 <_read_r+0x20>)
 800ba04:	4604      	mov	r4, r0
 800ba06:	4608      	mov	r0, r1
 800ba08:	4611      	mov	r1, r2
 800ba0a:	2200      	movs	r2, #0
 800ba0c:	602a      	str	r2, [r5, #0]
 800ba0e:	461a      	mov	r2, r3
 800ba10:	f7f7 f872 	bl	8002af8 <_read>
 800ba14:	1c43      	adds	r3, r0, #1
 800ba16:	d102      	bne.n	800ba1e <_read_r+0x1e>
 800ba18:	682b      	ldr	r3, [r5, #0]
 800ba1a:	b103      	cbz	r3, 800ba1e <_read_r+0x1e>
 800ba1c:	6023      	str	r3, [r4, #0]
 800ba1e:	bd38      	pop	{r3, r4, r5, pc}
 800ba20:	20001350 	.word	0x20001350

0800ba24 <__ascii_wctomb>:
 800ba24:	b149      	cbz	r1, 800ba3a <__ascii_wctomb+0x16>
 800ba26:	2aff      	cmp	r2, #255	; 0xff
 800ba28:	bf85      	ittet	hi
 800ba2a:	238a      	movhi	r3, #138	; 0x8a
 800ba2c:	6003      	strhi	r3, [r0, #0]
 800ba2e:	700a      	strbls	r2, [r1, #0]
 800ba30:	f04f 30ff 	movhi.w	r0, #4294967295
 800ba34:	bf98      	it	ls
 800ba36:	2001      	movls	r0, #1
 800ba38:	4770      	bx	lr
 800ba3a:	4608      	mov	r0, r1
 800ba3c:	4770      	bx	lr

0800ba3e <abort>:
 800ba3e:	b508      	push	{r3, lr}
 800ba40:	2006      	movs	r0, #6
 800ba42:	f000 f82b 	bl	800ba9c <raise>
 800ba46:	2001      	movs	r0, #1
 800ba48:	f7f7 f84c 	bl	8002ae4 <_exit>

0800ba4c <_raise_r>:
 800ba4c:	291f      	cmp	r1, #31
 800ba4e:	b538      	push	{r3, r4, r5, lr}
 800ba50:	4604      	mov	r4, r0
 800ba52:	460d      	mov	r5, r1
 800ba54:	d904      	bls.n	800ba60 <_raise_r+0x14>
 800ba56:	2316      	movs	r3, #22
 800ba58:	6003      	str	r3, [r0, #0]
 800ba5a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba5e:	bd38      	pop	{r3, r4, r5, pc}
 800ba60:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ba62:	b112      	cbz	r2, 800ba6a <_raise_r+0x1e>
 800ba64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ba68:	b94b      	cbnz	r3, 800ba7e <_raise_r+0x32>
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f000 f830 	bl	800bad0 <_getpid_r>
 800ba70:	462a      	mov	r2, r5
 800ba72:	4601      	mov	r1, r0
 800ba74:	4620      	mov	r0, r4
 800ba76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba7a:	f000 b817 	b.w	800baac <_kill_r>
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d00a      	beq.n	800ba98 <_raise_r+0x4c>
 800ba82:	1c59      	adds	r1, r3, #1
 800ba84:	d103      	bne.n	800ba8e <_raise_r+0x42>
 800ba86:	2316      	movs	r3, #22
 800ba88:	6003      	str	r3, [r0, #0]
 800ba8a:	2001      	movs	r0, #1
 800ba8c:	e7e7      	b.n	800ba5e <_raise_r+0x12>
 800ba8e:	2400      	movs	r4, #0
 800ba90:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba94:	4628      	mov	r0, r5
 800ba96:	4798      	blx	r3
 800ba98:	2000      	movs	r0, #0
 800ba9a:	e7e0      	b.n	800ba5e <_raise_r+0x12>

0800ba9c <raise>:
 800ba9c:	4b02      	ldr	r3, [pc, #8]	; (800baa8 <raise+0xc>)
 800ba9e:	4601      	mov	r1, r0
 800baa0:	6818      	ldr	r0, [r3, #0]
 800baa2:	f7ff bfd3 	b.w	800ba4c <_raise_r>
 800baa6:	bf00      	nop
 800baa8:	2000000c 	.word	0x2000000c

0800baac <_kill_r>:
 800baac:	b538      	push	{r3, r4, r5, lr}
 800baae:	4d07      	ldr	r5, [pc, #28]	; (800bacc <_kill_r+0x20>)
 800bab0:	2300      	movs	r3, #0
 800bab2:	4604      	mov	r4, r0
 800bab4:	4608      	mov	r0, r1
 800bab6:	4611      	mov	r1, r2
 800bab8:	602b      	str	r3, [r5, #0]
 800baba:	f7f7 f803 	bl	8002ac4 <_kill>
 800babe:	1c43      	adds	r3, r0, #1
 800bac0:	d102      	bne.n	800bac8 <_kill_r+0x1c>
 800bac2:	682b      	ldr	r3, [r5, #0]
 800bac4:	b103      	cbz	r3, 800bac8 <_kill_r+0x1c>
 800bac6:	6023      	str	r3, [r4, #0]
 800bac8:	bd38      	pop	{r3, r4, r5, pc}
 800baca:	bf00      	nop
 800bacc:	20001350 	.word	0x20001350

0800bad0 <_getpid_r>:
 800bad0:	f7f6 bff0 	b.w	8002ab4 <_getpid>
 800bad4:	0000      	movs	r0, r0
	...

0800bad8 <cos>:
 800bad8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bada:	ec53 2b10 	vmov	r2, r3, d0
 800bade:	4826      	ldr	r0, [pc, #152]	; (800bb78 <cos+0xa0>)
 800bae0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bae4:	4281      	cmp	r1, r0
 800bae6:	dc06      	bgt.n	800baf6 <cos+0x1e>
 800bae8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800bb70 <cos+0x98>
 800baec:	b005      	add	sp, #20
 800baee:	f85d eb04 	ldr.w	lr, [sp], #4
 800baf2:	f000 bc59 	b.w	800c3a8 <__kernel_cos>
 800baf6:	4821      	ldr	r0, [pc, #132]	; (800bb7c <cos+0xa4>)
 800baf8:	4281      	cmp	r1, r0
 800bafa:	dd09      	ble.n	800bb10 <cos+0x38>
 800bafc:	ee10 0a10 	vmov	r0, s0
 800bb00:	4619      	mov	r1, r3
 800bb02:	f7f4 fbc1 	bl	8000288 <__aeabi_dsub>
 800bb06:	ec41 0b10 	vmov	d0, r0, r1
 800bb0a:	b005      	add	sp, #20
 800bb0c:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb10:	4668      	mov	r0, sp
 800bb12:	f000 f989 	bl	800be28 <__ieee754_rem_pio2>
 800bb16:	f000 0003 	and.w	r0, r0, #3
 800bb1a:	2801      	cmp	r0, #1
 800bb1c:	d00b      	beq.n	800bb36 <cos+0x5e>
 800bb1e:	2802      	cmp	r0, #2
 800bb20:	d016      	beq.n	800bb50 <cos+0x78>
 800bb22:	b9e0      	cbnz	r0, 800bb5e <cos+0x86>
 800bb24:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb28:	ed9d 0b00 	vldr	d0, [sp]
 800bb2c:	f000 fc3c 	bl	800c3a8 <__kernel_cos>
 800bb30:	ec51 0b10 	vmov	r0, r1, d0
 800bb34:	e7e7      	b.n	800bb06 <cos+0x2e>
 800bb36:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb3a:	ed9d 0b00 	vldr	d0, [sp]
 800bb3e:	f001 f84b 	bl	800cbd8 <__kernel_sin>
 800bb42:	ec53 2b10 	vmov	r2, r3, d0
 800bb46:	ee10 0a10 	vmov	r0, s0
 800bb4a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bb4e:	e7da      	b.n	800bb06 <cos+0x2e>
 800bb50:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb54:	ed9d 0b00 	vldr	d0, [sp]
 800bb58:	f000 fc26 	bl	800c3a8 <__kernel_cos>
 800bb5c:	e7f1      	b.n	800bb42 <cos+0x6a>
 800bb5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bb62:	ed9d 0b00 	vldr	d0, [sp]
 800bb66:	2001      	movs	r0, #1
 800bb68:	f001 f836 	bl	800cbd8 <__kernel_sin>
 800bb6c:	e7e0      	b.n	800bb30 <cos+0x58>
 800bb6e:	bf00      	nop
	...
 800bb78:	3fe921fb 	.word	0x3fe921fb
 800bb7c:	7fefffff 	.word	0x7fefffff

0800bb80 <sin>:
 800bb80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb82:	ec53 2b10 	vmov	r2, r3, d0
 800bb86:	4828      	ldr	r0, [pc, #160]	; (800bc28 <sin+0xa8>)
 800bb88:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb8c:	4281      	cmp	r1, r0
 800bb8e:	dc07      	bgt.n	800bba0 <sin+0x20>
 800bb90:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800bc20 <sin+0xa0>
 800bb94:	2000      	movs	r0, #0
 800bb96:	b005      	add	sp, #20
 800bb98:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb9c:	f001 b81c 	b.w	800cbd8 <__kernel_sin>
 800bba0:	4822      	ldr	r0, [pc, #136]	; (800bc2c <sin+0xac>)
 800bba2:	4281      	cmp	r1, r0
 800bba4:	dd09      	ble.n	800bbba <sin+0x3a>
 800bba6:	ee10 0a10 	vmov	r0, s0
 800bbaa:	4619      	mov	r1, r3
 800bbac:	f7f4 fb6c 	bl	8000288 <__aeabi_dsub>
 800bbb0:	ec41 0b10 	vmov	d0, r0, r1
 800bbb4:	b005      	add	sp, #20
 800bbb6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbba:	4668      	mov	r0, sp
 800bbbc:	f000 f934 	bl	800be28 <__ieee754_rem_pio2>
 800bbc0:	f000 0003 	and.w	r0, r0, #3
 800bbc4:	2801      	cmp	r0, #1
 800bbc6:	d00c      	beq.n	800bbe2 <sin+0x62>
 800bbc8:	2802      	cmp	r0, #2
 800bbca:	d011      	beq.n	800bbf0 <sin+0x70>
 800bbcc:	b9f0      	cbnz	r0, 800bc0c <sin+0x8c>
 800bbce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbd2:	ed9d 0b00 	vldr	d0, [sp]
 800bbd6:	2001      	movs	r0, #1
 800bbd8:	f000 fffe 	bl	800cbd8 <__kernel_sin>
 800bbdc:	ec51 0b10 	vmov	r0, r1, d0
 800bbe0:	e7e6      	b.n	800bbb0 <sin+0x30>
 800bbe2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbe6:	ed9d 0b00 	vldr	d0, [sp]
 800bbea:	f000 fbdd 	bl	800c3a8 <__kernel_cos>
 800bbee:	e7f5      	b.n	800bbdc <sin+0x5c>
 800bbf0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bbf4:	ed9d 0b00 	vldr	d0, [sp]
 800bbf8:	2001      	movs	r0, #1
 800bbfa:	f000 ffed 	bl	800cbd8 <__kernel_sin>
 800bbfe:	ec53 2b10 	vmov	r2, r3, d0
 800bc02:	ee10 0a10 	vmov	r0, s0
 800bc06:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800bc0a:	e7d1      	b.n	800bbb0 <sin+0x30>
 800bc0c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800bc10:	ed9d 0b00 	vldr	d0, [sp]
 800bc14:	f000 fbc8 	bl	800c3a8 <__kernel_cos>
 800bc18:	e7f1      	b.n	800bbfe <sin+0x7e>
 800bc1a:	bf00      	nop
 800bc1c:	f3af 8000 	nop.w
	...
 800bc28:	3fe921fb 	.word	0x3fe921fb
 800bc2c:	7fefffff 	.word	0x7fefffff

0800bc30 <atan2>:
 800bc30:	f000 b82e 	b.w	800bc90 <__ieee754_atan2>

0800bc34 <sqrt>:
 800bc34:	b538      	push	{r3, r4, r5, lr}
 800bc36:	ed2d 8b02 	vpush	{d8}
 800bc3a:	ec55 4b10 	vmov	r4, r5, d0
 800bc3e:	f000 faff 	bl	800c240 <__ieee754_sqrt>
 800bc42:	4622      	mov	r2, r4
 800bc44:	462b      	mov	r3, r5
 800bc46:	4620      	mov	r0, r4
 800bc48:	4629      	mov	r1, r5
 800bc4a:	eeb0 8a40 	vmov.f32	s16, s0
 800bc4e:	eef0 8a60 	vmov.f32	s17, s1
 800bc52:	f7f4 ff6b 	bl	8000b2c <__aeabi_dcmpun>
 800bc56:	b990      	cbnz	r0, 800bc7e <sqrt+0x4a>
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	4629      	mov	r1, r5
 800bc60:	f7f4 ff3c 	bl	8000adc <__aeabi_dcmplt>
 800bc64:	b158      	cbz	r0, 800bc7e <sqrt+0x4a>
 800bc66:	f7fd f979 	bl	8008f5c <__errno>
 800bc6a:	2321      	movs	r3, #33	; 0x21
 800bc6c:	6003      	str	r3, [r0, #0]
 800bc6e:	2200      	movs	r2, #0
 800bc70:	2300      	movs	r3, #0
 800bc72:	4610      	mov	r0, r2
 800bc74:	4619      	mov	r1, r3
 800bc76:	f7f4 fde9 	bl	800084c <__aeabi_ddiv>
 800bc7a:	ec41 0b18 	vmov	d8, r0, r1
 800bc7e:	eeb0 0a48 	vmov.f32	s0, s16
 800bc82:	eef0 0a68 	vmov.f32	s1, s17
 800bc86:	ecbd 8b02 	vpop	{d8}
 800bc8a:	bd38      	pop	{r3, r4, r5, pc}
 800bc8c:	0000      	movs	r0, r0
	...

0800bc90 <__ieee754_atan2>:
 800bc90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc94:	ec57 6b11 	vmov	r6, r7, d1
 800bc98:	4273      	negs	r3, r6
 800bc9a:	f8df e184 	ldr.w	lr, [pc, #388]	; 800be20 <__ieee754_atan2+0x190>
 800bc9e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800bca2:	4333      	orrs	r3, r6
 800bca4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800bca8:	4573      	cmp	r3, lr
 800bcaa:	ec51 0b10 	vmov	r0, r1, d0
 800bcae:	ee11 8a10 	vmov	r8, s2
 800bcb2:	d80a      	bhi.n	800bcca <__ieee754_atan2+0x3a>
 800bcb4:	4244      	negs	r4, r0
 800bcb6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800bcba:	4304      	orrs	r4, r0
 800bcbc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800bcc0:	4574      	cmp	r4, lr
 800bcc2:	ee10 9a10 	vmov	r9, s0
 800bcc6:	468c      	mov	ip, r1
 800bcc8:	d907      	bls.n	800bcda <__ieee754_atan2+0x4a>
 800bcca:	4632      	mov	r2, r6
 800bccc:	463b      	mov	r3, r7
 800bcce:	f7f4 fadd 	bl	800028c <__adddf3>
 800bcd2:	ec41 0b10 	vmov	d0, r0, r1
 800bcd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcda:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800bcde:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800bce2:	4334      	orrs	r4, r6
 800bce4:	d103      	bne.n	800bcee <__ieee754_atan2+0x5e>
 800bce6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bcea:	f001 b835 	b.w	800cd58 <atan>
 800bcee:	17bc      	asrs	r4, r7, #30
 800bcf0:	f004 0402 	and.w	r4, r4, #2
 800bcf4:	ea53 0909 	orrs.w	r9, r3, r9
 800bcf8:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800bcfc:	d107      	bne.n	800bd0e <__ieee754_atan2+0x7e>
 800bcfe:	2c02      	cmp	r4, #2
 800bd00:	d060      	beq.n	800bdc4 <__ieee754_atan2+0x134>
 800bd02:	2c03      	cmp	r4, #3
 800bd04:	d1e5      	bne.n	800bcd2 <__ieee754_atan2+0x42>
 800bd06:	a142      	add	r1, pc, #264	; (adr r1, 800be10 <__ieee754_atan2+0x180>)
 800bd08:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd0c:	e7e1      	b.n	800bcd2 <__ieee754_atan2+0x42>
 800bd0e:	ea52 0808 	orrs.w	r8, r2, r8
 800bd12:	d106      	bne.n	800bd22 <__ieee754_atan2+0x92>
 800bd14:	f1bc 0f00 	cmp.w	ip, #0
 800bd18:	da5f      	bge.n	800bdda <__ieee754_atan2+0x14a>
 800bd1a:	a13f      	add	r1, pc, #252	; (adr r1, 800be18 <__ieee754_atan2+0x188>)
 800bd1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd20:	e7d7      	b.n	800bcd2 <__ieee754_atan2+0x42>
 800bd22:	4572      	cmp	r2, lr
 800bd24:	d10f      	bne.n	800bd46 <__ieee754_atan2+0xb6>
 800bd26:	4293      	cmp	r3, r2
 800bd28:	f104 34ff 	add.w	r4, r4, #4294967295
 800bd2c:	d107      	bne.n	800bd3e <__ieee754_atan2+0xae>
 800bd2e:	2c02      	cmp	r4, #2
 800bd30:	d84c      	bhi.n	800bdcc <__ieee754_atan2+0x13c>
 800bd32:	4b35      	ldr	r3, [pc, #212]	; (800be08 <__ieee754_atan2+0x178>)
 800bd34:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 800bd38:	e9d4 0100 	ldrd	r0, r1, [r4]
 800bd3c:	e7c9      	b.n	800bcd2 <__ieee754_atan2+0x42>
 800bd3e:	2c02      	cmp	r4, #2
 800bd40:	d848      	bhi.n	800bdd4 <__ieee754_atan2+0x144>
 800bd42:	4b32      	ldr	r3, [pc, #200]	; (800be0c <__ieee754_atan2+0x17c>)
 800bd44:	e7f6      	b.n	800bd34 <__ieee754_atan2+0xa4>
 800bd46:	4573      	cmp	r3, lr
 800bd48:	d0e4      	beq.n	800bd14 <__ieee754_atan2+0x84>
 800bd4a:	1a9b      	subs	r3, r3, r2
 800bd4c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800bd50:	ea4f 5223 	mov.w	r2, r3, asr #20
 800bd54:	da1e      	bge.n	800bd94 <__ieee754_atan2+0x104>
 800bd56:	2f00      	cmp	r7, #0
 800bd58:	da01      	bge.n	800bd5e <__ieee754_atan2+0xce>
 800bd5a:	323c      	adds	r2, #60	; 0x3c
 800bd5c:	db1e      	blt.n	800bd9c <__ieee754_atan2+0x10c>
 800bd5e:	4632      	mov	r2, r6
 800bd60:	463b      	mov	r3, r7
 800bd62:	f7f4 fd73 	bl	800084c <__aeabi_ddiv>
 800bd66:	ec41 0b10 	vmov	d0, r0, r1
 800bd6a:	f001 f995 	bl	800d098 <fabs>
 800bd6e:	f000 fff3 	bl	800cd58 <atan>
 800bd72:	ec51 0b10 	vmov	r0, r1, d0
 800bd76:	2c01      	cmp	r4, #1
 800bd78:	d013      	beq.n	800bda2 <__ieee754_atan2+0x112>
 800bd7a:	2c02      	cmp	r4, #2
 800bd7c:	d015      	beq.n	800bdaa <__ieee754_atan2+0x11a>
 800bd7e:	2c00      	cmp	r4, #0
 800bd80:	d0a7      	beq.n	800bcd2 <__ieee754_atan2+0x42>
 800bd82:	a319      	add	r3, pc, #100	; (adr r3, 800bde8 <__ieee754_atan2+0x158>)
 800bd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd88:	f7f4 fa7e 	bl	8000288 <__aeabi_dsub>
 800bd8c:	a318      	add	r3, pc, #96	; (adr r3, 800bdf0 <__ieee754_atan2+0x160>)
 800bd8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd92:	e014      	b.n	800bdbe <__ieee754_atan2+0x12e>
 800bd94:	a118      	add	r1, pc, #96	; (adr r1, 800bdf8 <__ieee754_atan2+0x168>)
 800bd96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd9a:	e7ec      	b.n	800bd76 <__ieee754_atan2+0xe6>
 800bd9c:	2000      	movs	r0, #0
 800bd9e:	2100      	movs	r1, #0
 800bda0:	e7e9      	b.n	800bd76 <__ieee754_atan2+0xe6>
 800bda2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bda6:	4619      	mov	r1, r3
 800bda8:	e793      	b.n	800bcd2 <__ieee754_atan2+0x42>
 800bdaa:	a30f      	add	r3, pc, #60	; (adr r3, 800bde8 <__ieee754_atan2+0x158>)
 800bdac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb0:	f7f4 fa6a 	bl	8000288 <__aeabi_dsub>
 800bdb4:	4602      	mov	r2, r0
 800bdb6:	460b      	mov	r3, r1
 800bdb8:	a10d      	add	r1, pc, #52	; (adr r1, 800bdf0 <__ieee754_atan2+0x160>)
 800bdba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdbe:	f7f4 fa63 	bl	8000288 <__aeabi_dsub>
 800bdc2:	e786      	b.n	800bcd2 <__ieee754_atan2+0x42>
 800bdc4:	a10a      	add	r1, pc, #40	; (adr r1, 800bdf0 <__ieee754_atan2+0x160>)
 800bdc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdca:	e782      	b.n	800bcd2 <__ieee754_atan2+0x42>
 800bdcc:	a10c      	add	r1, pc, #48	; (adr r1, 800be00 <__ieee754_atan2+0x170>)
 800bdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd2:	e77e      	b.n	800bcd2 <__ieee754_atan2+0x42>
 800bdd4:	2000      	movs	r0, #0
 800bdd6:	2100      	movs	r1, #0
 800bdd8:	e77b      	b.n	800bcd2 <__ieee754_atan2+0x42>
 800bdda:	a107      	add	r1, pc, #28	; (adr r1, 800bdf8 <__ieee754_atan2+0x168>)
 800bddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bde0:	e777      	b.n	800bcd2 <__ieee754_atan2+0x42>
 800bde2:	bf00      	nop
 800bde4:	f3af 8000 	nop.w
 800bde8:	33145c07 	.word	0x33145c07
 800bdec:	3ca1a626 	.word	0x3ca1a626
 800bdf0:	54442d18 	.word	0x54442d18
 800bdf4:	400921fb 	.word	0x400921fb
 800bdf8:	54442d18 	.word	0x54442d18
 800bdfc:	3ff921fb 	.word	0x3ff921fb
 800be00:	54442d18 	.word	0x54442d18
 800be04:	3fe921fb 	.word	0x3fe921fb
 800be08:	0800d700 	.word	0x0800d700
 800be0c:	0800d718 	.word	0x0800d718
 800be10:	54442d18 	.word	0x54442d18
 800be14:	c00921fb 	.word	0xc00921fb
 800be18:	54442d18 	.word	0x54442d18
 800be1c:	bff921fb 	.word	0xbff921fb
 800be20:	7ff00000 	.word	0x7ff00000
 800be24:	00000000 	.word	0x00000000

0800be28 <__ieee754_rem_pio2>:
 800be28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be2c:	ed2d 8b02 	vpush	{d8}
 800be30:	ec55 4b10 	vmov	r4, r5, d0
 800be34:	4bca      	ldr	r3, [pc, #808]	; (800c160 <__ieee754_rem_pio2+0x338>)
 800be36:	b08b      	sub	sp, #44	; 0x2c
 800be38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800be3c:	4598      	cmp	r8, r3
 800be3e:	4682      	mov	sl, r0
 800be40:	9502      	str	r5, [sp, #8]
 800be42:	dc08      	bgt.n	800be56 <__ieee754_rem_pio2+0x2e>
 800be44:	2200      	movs	r2, #0
 800be46:	2300      	movs	r3, #0
 800be48:	ed80 0b00 	vstr	d0, [r0]
 800be4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800be50:	f04f 0b00 	mov.w	fp, #0
 800be54:	e028      	b.n	800bea8 <__ieee754_rem_pio2+0x80>
 800be56:	4bc3      	ldr	r3, [pc, #780]	; (800c164 <__ieee754_rem_pio2+0x33c>)
 800be58:	4598      	cmp	r8, r3
 800be5a:	dc78      	bgt.n	800bf4e <__ieee754_rem_pio2+0x126>
 800be5c:	9b02      	ldr	r3, [sp, #8]
 800be5e:	4ec2      	ldr	r6, [pc, #776]	; (800c168 <__ieee754_rem_pio2+0x340>)
 800be60:	2b00      	cmp	r3, #0
 800be62:	ee10 0a10 	vmov	r0, s0
 800be66:	a3b0      	add	r3, pc, #704	; (adr r3, 800c128 <__ieee754_rem_pio2+0x300>)
 800be68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6c:	4629      	mov	r1, r5
 800be6e:	dd39      	ble.n	800bee4 <__ieee754_rem_pio2+0xbc>
 800be70:	f7f4 fa0a 	bl	8000288 <__aeabi_dsub>
 800be74:	45b0      	cmp	r8, r6
 800be76:	4604      	mov	r4, r0
 800be78:	460d      	mov	r5, r1
 800be7a:	d01b      	beq.n	800beb4 <__ieee754_rem_pio2+0x8c>
 800be7c:	a3ac      	add	r3, pc, #688	; (adr r3, 800c130 <__ieee754_rem_pio2+0x308>)
 800be7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be82:	f7f4 fa01 	bl	8000288 <__aeabi_dsub>
 800be86:	4602      	mov	r2, r0
 800be88:	460b      	mov	r3, r1
 800be8a:	e9ca 2300 	strd	r2, r3, [sl]
 800be8e:	4620      	mov	r0, r4
 800be90:	4629      	mov	r1, r5
 800be92:	f7f4 f9f9 	bl	8000288 <__aeabi_dsub>
 800be96:	a3a6      	add	r3, pc, #664	; (adr r3, 800c130 <__ieee754_rem_pio2+0x308>)
 800be98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9c:	f7f4 f9f4 	bl	8000288 <__aeabi_dsub>
 800bea0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bea4:	f04f 0b01 	mov.w	fp, #1
 800bea8:	4658      	mov	r0, fp
 800beaa:	b00b      	add	sp, #44	; 0x2c
 800beac:	ecbd 8b02 	vpop	{d8}
 800beb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800beb4:	a3a0      	add	r3, pc, #640	; (adr r3, 800c138 <__ieee754_rem_pio2+0x310>)
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	f7f4 f9e5 	bl	8000288 <__aeabi_dsub>
 800bebe:	a3a0      	add	r3, pc, #640	; (adr r3, 800c140 <__ieee754_rem_pio2+0x318>)
 800bec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bec4:	4604      	mov	r4, r0
 800bec6:	460d      	mov	r5, r1
 800bec8:	f7f4 f9de 	bl	8000288 <__aeabi_dsub>
 800becc:	4602      	mov	r2, r0
 800bece:	460b      	mov	r3, r1
 800bed0:	e9ca 2300 	strd	r2, r3, [sl]
 800bed4:	4620      	mov	r0, r4
 800bed6:	4629      	mov	r1, r5
 800bed8:	f7f4 f9d6 	bl	8000288 <__aeabi_dsub>
 800bedc:	a398      	add	r3, pc, #608	; (adr r3, 800c140 <__ieee754_rem_pio2+0x318>)
 800bede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee2:	e7db      	b.n	800be9c <__ieee754_rem_pio2+0x74>
 800bee4:	f7f4 f9d2 	bl	800028c <__adddf3>
 800bee8:	45b0      	cmp	r8, r6
 800beea:	4604      	mov	r4, r0
 800beec:	460d      	mov	r5, r1
 800beee:	d016      	beq.n	800bf1e <__ieee754_rem_pio2+0xf6>
 800bef0:	a38f      	add	r3, pc, #572	; (adr r3, 800c130 <__ieee754_rem_pio2+0x308>)
 800bef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bef6:	f7f4 f9c9 	bl	800028c <__adddf3>
 800befa:	4602      	mov	r2, r0
 800befc:	460b      	mov	r3, r1
 800befe:	e9ca 2300 	strd	r2, r3, [sl]
 800bf02:	4620      	mov	r0, r4
 800bf04:	4629      	mov	r1, r5
 800bf06:	f7f4 f9bf 	bl	8000288 <__aeabi_dsub>
 800bf0a:	a389      	add	r3, pc, #548	; (adr r3, 800c130 <__ieee754_rem_pio2+0x308>)
 800bf0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf10:	f7f4 f9bc 	bl	800028c <__adddf3>
 800bf14:	f04f 3bff 	mov.w	fp, #4294967295
 800bf18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bf1c:	e7c4      	b.n	800bea8 <__ieee754_rem_pio2+0x80>
 800bf1e:	a386      	add	r3, pc, #536	; (adr r3, 800c138 <__ieee754_rem_pio2+0x310>)
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	f7f4 f9b2 	bl	800028c <__adddf3>
 800bf28:	a385      	add	r3, pc, #532	; (adr r3, 800c140 <__ieee754_rem_pio2+0x318>)
 800bf2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf2e:	4604      	mov	r4, r0
 800bf30:	460d      	mov	r5, r1
 800bf32:	f7f4 f9ab 	bl	800028c <__adddf3>
 800bf36:	4602      	mov	r2, r0
 800bf38:	460b      	mov	r3, r1
 800bf3a:	e9ca 2300 	strd	r2, r3, [sl]
 800bf3e:	4620      	mov	r0, r4
 800bf40:	4629      	mov	r1, r5
 800bf42:	f7f4 f9a1 	bl	8000288 <__aeabi_dsub>
 800bf46:	a37e      	add	r3, pc, #504	; (adr r3, 800c140 <__ieee754_rem_pio2+0x318>)
 800bf48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf4c:	e7e0      	b.n	800bf10 <__ieee754_rem_pio2+0xe8>
 800bf4e:	4b87      	ldr	r3, [pc, #540]	; (800c16c <__ieee754_rem_pio2+0x344>)
 800bf50:	4598      	cmp	r8, r3
 800bf52:	f300 80d9 	bgt.w	800c108 <__ieee754_rem_pio2+0x2e0>
 800bf56:	f001 f89f 	bl	800d098 <fabs>
 800bf5a:	ec55 4b10 	vmov	r4, r5, d0
 800bf5e:	ee10 0a10 	vmov	r0, s0
 800bf62:	a379      	add	r3, pc, #484	; (adr r3, 800c148 <__ieee754_rem_pio2+0x320>)
 800bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf68:	4629      	mov	r1, r5
 800bf6a:	f7f4 fb45 	bl	80005f8 <__aeabi_dmul>
 800bf6e:	4b80      	ldr	r3, [pc, #512]	; (800c170 <__ieee754_rem_pio2+0x348>)
 800bf70:	2200      	movs	r2, #0
 800bf72:	f7f4 f98b 	bl	800028c <__adddf3>
 800bf76:	f7f4 fdef 	bl	8000b58 <__aeabi_d2iz>
 800bf7a:	4683      	mov	fp, r0
 800bf7c:	f7f4 fad2 	bl	8000524 <__aeabi_i2d>
 800bf80:	4602      	mov	r2, r0
 800bf82:	460b      	mov	r3, r1
 800bf84:	ec43 2b18 	vmov	d8, r2, r3
 800bf88:	a367      	add	r3, pc, #412	; (adr r3, 800c128 <__ieee754_rem_pio2+0x300>)
 800bf8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf8e:	f7f4 fb33 	bl	80005f8 <__aeabi_dmul>
 800bf92:	4602      	mov	r2, r0
 800bf94:	460b      	mov	r3, r1
 800bf96:	4620      	mov	r0, r4
 800bf98:	4629      	mov	r1, r5
 800bf9a:	f7f4 f975 	bl	8000288 <__aeabi_dsub>
 800bf9e:	a364      	add	r3, pc, #400	; (adr r3, 800c130 <__ieee754_rem_pio2+0x308>)
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	4606      	mov	r6, r0
 800bfa6:	460f      	mov	r7, r1
 800bfa8:	ec51 0b18 	vmov	r0, r1, d8
 800bfac:	f7f4 fb24 	bl	80005f8 <__aeabi_dmul>
 800bfb0:	f1bb 0f1f 	cmp.w	fp, #31
 800bfb4:	4604      	mov	r4, r0
 800bfb6:	460d      	mov	r5, r1
 800bfb8:	dc0d      	bgt.n	800bfd6 <__ieee754_rem_pio2+0x1ae>
 800bfba:	4b6e      	ldr	r3, [pc, #440]	; (800c174 <__ieee754_rem_pio2+0x34c>)
 800bfbc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800bfc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfc4:	4543      	cmp	r3, r8
 800bfc6:	d006      	beq.n	800bfd6 <__ieee754_rem_pio2+0x1ae>
 800bfc8:	4622      	mov	r2, r4
 800bfca:	462b      	mov	r3, r5
 800bfcc:	4630      	mov	r0, r6
 800bfce:	4639      	mov	r1, r7
 800bfd0:	f7f4 f95a 	bl	8000288 <__aeabi_dsub>
 800bfd4:	e00f      	b.n	800bff6 <__ieee754_rem_pio2+0x1ce>
 800bfd6:	462b      	mov	r3, r5
 800bfd8:	4622      	mov	r2, r4
 800bfda:	4630      	mov	r0, r6
 800bfdc:	4639      	mov	r1, r7
 800bfde:	f7f4 f953 	bl	8000288 <__aeabi_dsub>
 800bfe2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800bfe6:	9303      	str	r3, [sp, #12]
 800bfe8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800bfec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800bff0:	f1b8 0f10 	cmp.w	r8, #16
 800bff4:	dc02      	bgt.n	800bffc <__ieee754_rem_pio2+0x1d4>
 800bff6:	e9ca 0100 	strd	r0, r1, [sl]
 800bffa:	e039      	b.n	800c070 <__ieee754_rem_pio2+0x248>
 800bffc:	a34e      	add	r3, pc, #312	; (adr r3, 800c138 <__ieee754_rem_pio2+0x310>)
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	ec51 0b18 	vmov	r0, r1, d8
 800c006:	f7f4 faf7 	bl	80005f8 <__aeabi_dmul>
 800c00a:	4604      	mov	r4, r0
 800c00c:	460d      	mov	r5, r1
 800c00e:	4602      	mov	r2, r0
 800c010:	460b      	mov	r3, r1
 800c012:	4630      	mov	r0, r6
 800c014:	4639      	mov	r1, r7
 800c016:	f7f4 f937 	bl	8000288 <__aeabi_dsub>
 800c01a:	4602      	mov	r2, r0
 800c01c:	460b      	mov	r3, r1
 800c01e:	4680      	mov	r8, r0
 800c020:	4689      	mov	r9, r1
 800c022:	4630      	mov	r0, r6
 800c024:	4639      	mov	r1, r7
 800c026:	f7f4 f92f 	bl	8000288 <__aeabi_dsub>
 800c02a:	4622      	mov	r2, r4
 800c02c:	462b      	mov	r3, r5
 800c02e:	f7f4 f92b 	bl	8000288 <__aeabi_dsub>
 800c032:	a343      	add	r3, pc, #268	; (adr r3, 800c140 <__ieee754_rem_pio2+0x318>)
 800c034:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c038:	4604      	mov	r4, r0
 800c03a:	460d      	mov	r5, r1
 800c03c:	ec51 0b18 	vmov	r0, r1, d8
 800c040:	f7f4 fada 	bl	80005f8 <__aeabi_dmul>
 800c044:	4622      	mov	r2, r4
 800c046:	462b      	mov	r3, r5
 800c048:	f7f4 f91e 	bl	8000288 <__aeabi_dsub>
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	4604      	mov	r4, r0
 800c052:	460d      	mov	r5, r1
 800c054:	4640      	mov	r0, r8
 800c056:	4649      	mov	r1, r9
 800c058:	f7f4 f916 	bl	8000288 <__aeabi_dsub>
 800c05c:	9a03      	ldr	r2, [sp, #12]
 800c05e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c062:	1ad3      	subs	r3, r2, r3
 800c064:	2b31      	cmp	r3, #49	; 0x31
 800c066:	dc24      	bgt.n	800c0b2 <__ieee754_rem_pio2+0x28a>
 800c068:	e9ca 0100 	strd	r0, r1, [sl]
 800c06c:	4646      	mov	r6, r8
 800c06e:	464f      	mov	r7, r9
 800c070:	e9da 8900 	ldrd	r8, r9, [sl]
 800c074:	4630      	mov	r0, r6
 800c076:	4642      	mov	r2, r8
 800c078:	464b      	mov	r3, r9
 800c07a:	4639      	mov	r1, r7
 800c07c:	f7f4 f904 	bl	8000288 <__aeabi_dsub>
 800c080:	462b      	mov	r3, r5
 800c082:	4622      	mov	r2, r4
 800c084:	f7f4 f900 	bl	8000288 <__aeabi_dsub>
 800c088:	9b02      	ldr	r3, [sp, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c090:	f6bf af0a 	bge.w	800bea8 <__ieee754_rem_pio2+0x80>
 800c094:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c098:	f8ca 3004 	str.w	r3, [sl, #4]
 800c09c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0a0:	f8ca 8000 	str.w	r8, [sl]
 800c0a4:	f8ca 0008 	str.w	r0, [sl, #8]
 800c0a8:	f8ca 300c 	str.w	r3, [sl, #12]
 800c0ac:	f1cb 0b00 	rsb	fp, fp, #0
 800c0b0:	e6fa      	b.n	800bea8 <__ieee754_rem_pio2+0x80>
 800c0b2:	a327      	add	r3, pc, #156	; (adr r3, 800c150 <__ieee754_rem_pio2+0x328>)
 800c0b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b8:	ec51 0b18 	vmov	r0, r1, d8
 800c0bc:	f7f4 fa9c 	bl	80005f8 <__aeabi_dmul>
 800c0c0:	4604      	mov	r4, r0
 800c0c2:	460d      	mov	r5, r1
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	460b      	mov	r3, r1
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	4649      	mov	r1, r9
 800c0cc:	f7f4 f8dc 	bl	8000288 <__aeabi_dsub>
 800c0d0:	4602      	mov	r2, r0
 800c0d2:	460b      	mov	r3, r1
 800c0d4:	4606      	mov	r6, r0
 800c0d6:	460f      	mov	r7, r1
 800c0d8:	4640      	mov	r0, r8
 800c0da:	4649      	mov	r1, r9
 800c0dc:	f7f4 f8d4 	bl	8000288 <__aeabi_dsub>
 800c0e0:	4622      	mov	r2, r4
 800c0e2:	462b      	mov	r3, r5
 800c0e4:	f7f4 f8d0 	bl	8000288 <__aeabi_dsub>
 800c0e8:	a31b      	add	r3, pc, #108	; (adr r3, 800c158 <__ieee754_rem_pio2+0x330>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	4604      	mov	r4, r0
 800c0f0:	460d      	mov	r5, r1
 800c0f2:	ec51 0b18 	vmov	r0, r1, d8
 800c0f6:	f7f4 fa7f 	bl	80005f8 <__aeabi_dmul>
 800c0fa:	4622      	mov	r2, r4
 800c0fc:	462b      	mov	r3, r5
 800c0fe:	f7f4 f8c3 	bl	8000288 <__aeabi_dsub>
 800c102:	4604      	mov	r4, r0
 800c104:	460d      	mov	r5, r1
 800c106:	e75f      	b.n	800bfc8 <__ieee754_rem_pio2+0x1a0>
 800c108:	4b1b      	ldr	r3, [pc, #108]	; (800c178 <__ieee754_rem_pio2+0x350>)
 800c10a:	4598      	cmp	r8, r3
 800c10c:	dd36      	ble.n	800c17c <__ieee754_rem_pio2+0x354>
 800c10e:	ee10 2a10 	vmov	r2, s0
 800c112:	462b      	mov	r3, r5
 800c114:	4620      	mov	r0, r4
 800c116:	4629      	mov	r1, r5
 800c118:	f7f4 f8b6 	bl	8000288 <__aeabi_dsub>
 800c11c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c120:	e9ca 0100 	strd	r0, r1, [sl]
 800c124:	e694      	b.n	800be50 <__ieee754_rem_pio2+0x28>
 800c126:	bf00      	nop
 800c128:	54400000 	.word	0x54400000
 800c12c:	3ff921fb 	.word	0x3ff921fb
 800c130:	1a626331 	.word	0x1a626331
 800c134:	3dd0b461 	.word	0x3dd0b461
 800c138:	1a600000 	.word	0x1a600000
 800c13c:	3dd0b461 	.word	0x3dd0b461
 800c140:	2e037073 	.word	0x2e037073
 800c144:	3ba3198a 	.word	0x3ba3198a
 800c148:	6dc9c883 	.word	0x6dc9c883
 800c14c:	3fe45f30 	.word	0x3fe45f30
 800c150:	2e000000 	.word	0x2e000000
 800c154:	3ba3198a 	.word	0x3ba3198a
 800c158:	252049c1 	.word	0x252049c1
 800c15c:	397b839a 	.word	0x397b839a
 800c160:	3fe921fb 	.word	0x3fe921fb
 800c164:	4002d97b 	.word	0x4002d97b
 800c168:	3ff921fb 	.word	0x3ff921fb
 800c16c:	413921fb 	.word	0x413921fb
 800c170:	3fe00000 	.word	0x3fe00000
 800c174:	0800d730 	.word	0x0800d730
 800c178:	7fefffff 	.word	0x7fefffff
 800c17c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800c180:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800c184:	ee10 0a10 	vmov	r0, s0
 800c188:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800c18c:	ee10 6a10 	vmov	r6, s0
 800c190:	460f      	mov	r7, r1
 800c192:	f7f4 fce1 	bl	8000b58 <__aeabi_d2iz>
 800c196:	f7f4 f9c5 	bl	8000524 <__aeabi_i2d>
 800c19a:	4602      	mov	r2, r0
 800c19c:	460b      	mov	r3, r1
 800c19e:	4630      	mov	r0, r6
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800c1a6:	f7f4 f86f 	bl	8000288 <__aeabi_dsub>
 800c1aa:	4b23      	ldr	r3, [pc, #140]	; (800c238 <__ieee754_rem_pio2+0x410>)
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f7f4 fa23 	bl	80005f8 <__aeabi_dmul>
 800c1b2:	460f      	mov	r7, r1
 800c1b4:	4606      	mov	r6, r0
 800c1b6:	f7f4 fccf 	bl	8000b58 <__aeabi_d2iz>
 800c1ba:	f7f4 f9b3 	bl	8000524 <__aeabi_i2d>
 800c1be:	4602      	mov	r2, r0
 800c1c0:	460b      	mov	r3, r1
 800c1c2:	4630      	mov	r0, r6
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1ca:	f7f4 f85d 	bl	8000288 <__aeabi_dsub>
 800c1ce:	4b1a      	ldr	r3, [pc, #104]	; (800c238 <__ieee754_rem_pio2+0x410>)
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	f7f4 fa11 	bl	80005f8 <__aeabi_dmul>
 800c1d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1da:	ad04      	add	r5, sp, #16
 800c1dc:	f04f 0803 	mov.w	r8, #3
 800c1e0:	46a9      	mov	r9, r5
 800c1e2:	2600      	movs	r6, #0
 800c1e4:	2700      	movs	r7, #0
 800c1e6:	4632      	mov	r2, r6
 800c1e8:	463b      	mov	r3, r7
 800c1ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800c1ee:	46c3      	mov	fp, r8
 800c1f0:	3d08      	subs	r5, #8
 800c1f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800c1f6:	f7f4 fc67 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1fa:	2800      	cmp	r0, #0
 800c1fc:	d1f3      	bne.n	800c1e6 <__ieee754_rem_pio2+0x3be>
 800c1fe:	4b0f      	ldr	r3, [pc, #60]	; (800c23c <__ieee754_rem_pio2+0x414>)
 800c200:	9301      	str	r3, [sp, #4]
 800c202:	2302      	movs	r3, #2
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	4622      	mov	r2, r4
 800c208:	465b      	mov	r3, fp
 800c20a:	4651      	mov	r1, sl
 800c20c:	4648      	mov	r0, r9
 800c20e:	f000 f993 	bl	800c538 <__kernel_rem_pio2>
 800c212:	9b02      	ldr	r3, [sp, #8]
 800c214:	2b00      	cmp	r3, #0
 800c216:	4683      	mov	fp, r0
 800c218:	f6bf ae46 	bge.w	800bea8 <__ieee754_rem_pio2+0x80>
 800c21c:	e9da 2100 	ldrd	r2, r1, [sl]
 800c220:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c224:	e9ca 2300 	strd	r2, r3, [sl]
 800c228:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800c22c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c230:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800c234:	e73a      	b.n	800c0ac <__ieee754_rem_pio2+0x284>
 800c236:	bf00      	nop
 800c238:	41700000 	.word	0x41700000
 800c23c:	0800d7b0 	.word	0x0800d7b0

0800c240 <__ieee754_sqrt>:
 800c240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c244:	ec55 4b10 	vmov	r4, r5, d0
 800c248:	4e55      	ldr	r6, [pc, #340]	; (800c3a0 <__ieee754_sqrt+0x160>)
 800c24a:	43ae      	bics	r6, r5
 800c24c:	ee10 0a10 	vmov	r0, s0
 800c250:	ee10 3a10 	vmov	r3, s0
 800c254:	462a      	mov	r2, r5
 800c256:	4629      	mov	r1, r5
 800c258:	d110      	bne.n	800c27c <__ieee754_sqrt+0x3c>
 800c25a:	ee10 2a10 	vmov	r2, s0
 800c25e:	462b      	mov	r3, r5
 800c260:	f7f4 f9ca 	bl	80005f8 <__aeabi_dmul>
 800c264:	4602      	mov	r2, r0
 800c266:	460b      	mov	r3, r1
 800c268:	4620      	mov	r0, r4
 800c26a:	4629      	mov	r1, r5
 800c26c:	f7f4 f80e 	bl	800028c <__adddf3>
 800c270:	4604      	mov	r4, r0
 800c272:	460d      	mov	r5, r1
 800c274:	ec45 4b10 	vmov	d0, r4, r5
 800c278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c27c:	2d00      	cmp	r5, #0
 800c27e:	dc10      	bgt.n	800c2a2 <__ieee754_sqrt+0x62>
 800c280:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c284:	4330      	orrs	r0, r6
 800c286:	d0f5      	beq.n	800c274 <__ieee754_sqrt+0x34>
 800c288:	b15d      	cbz	r5, 800c2a2 <__ieee754_sqrt+0x62>
 800c28a:	ee10 2a10 	vmov	r2, s0
 800c28e:	462b      	mov	r3, r5
 800c290:	ee10 0a10 	vmov	r0, s0
 800c294:	f7f3 fff8 	bl	8000288 <__aeabi_dsub>
 800c298:	4602      	mov	r2, r0
 800c29a:	460b      	mov	r3, r1
 800c29c:	f7f4 fad6 	bl	800084c <__aeabi_ddiv>
 800c2a0:	e7e6      	b.n	800c270 <__ieee754_sqrt+0x30>
 800c2a2:	1512      	asrs	r2, r2, #20
 800c2a4:	d074      	beq.n	800c390 <__ieee754_sqrt+0x150>
 800c2a6:	07d4      	lsls	r4, r2, #31
 800c2a8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800c2ac:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800c2b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800c2b4:	bf5e      	ittt	pl
 800c2b6:	0fda      	lsrpl	r2, r3, #31
 800c2b8:	005b      	lslpl	r3, r3, #1
 800c2ba:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800c2be:	2400      	movs	r4, #0
 800c2c0:	0fda      	lsrs	r2, r3, #31
 800c2c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800c2c6:	107f      	asrs	r7, r7, #1
 800c2c8:	005b      	lsls	r3, r3, #1
 800c2ca:	2516      	movs	r5, #22
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800c2d2:	1886      	adds	r6, r0, r2
 800c2d4:	428e      	cmp	r6, r1
 800c2d6:	bfde      	ittt	le
 800c2d8:	1b89      	suble	r1, r1, r6
 800c2da:	18b0      	addle	r0, r6, r2
 800c2dc:	18a4      	addle	r4, r4, r2
 800c2de:	0049      	lsls	r1, r1, #1
 800c2e0:	3d01      	subs	r5, #1
 800c2e2:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800c2e6:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800c2ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c2ee:	d1f0      	bne.n	800c2d2 <__ieee754_sqrt+0x92>
 800c2f0:	462a      	mov	r2, r5
 800c2f2:	f04f 0e20 	mov.w	lr, #32
 800c2f6:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c2fa:	4281      	cmp	r1, r0
 800c2fc:	eb06 0c05 	add.w	ip, r6, r5
 800c300:	dc02      	bgt.n	800c308 <__ieee754_sqrt+0xc8>
 800c302:	d113      	bne.n	800c32c <__ieee754_sqrt+0xec>
 800c304:	459c      	cmp	ip, r3
 800c306:	d811      	bhi.n	800c32c <__ieee754_sqrt+0xec>
 800c308:	f1bc 0f00 	cmp.w	ip, #0
 800c30c:	eb0c 0506 	add.w	r5, ip, r6
 800c310:	da43      	bge.n	800c39a <__ieee754_sqrt+0x15a>
 800c312:	2d00      	cmp	r5, #0
 800c314:	db41      	blt.n	800c39a <__ieee754_sqrt+0x15a>
 800c316:	f100 0801 	add.w	r8, r0, #1
 800c31a:	1a09      	subs	r1, r1, r0
 800c31c:	459c      	cmp	ip, r3
 800c31e:	bf88      	it	hi
 800c320:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800c324:	eba3 030c 	sub.w	r3, r3, ip
 800c328:	4432      	add	r2, r6
 800c32a:	4640      	mov	r0, r8
 800c32c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800c330:	f1be 0e01 	subs.w	lr, lr, #1
 800c334:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800c338:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800c33c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c340:	d1db      	bne.n	800c2fa <__ieee754_sqrt+0xba>
 800c342:	430b      	orrs	r3, r1
 800c344:	d006      	beq.n	800c354 <__ieee754_sqrt+0x114>
 800c346:	1c50      	adds	r0, r2, #1
 800c348:	bf13      	iteet	ne
 800c34a:	3201      	addne	r2, #1
 800c34c:	3401      	addeq	r4, #1
 800c34e:	4672      	moveq	r2, lr
 800c350:	f022 0201 	bicne.w	r2, r2, #1
 800c354:	1063      	asrs	r3, r4, #1
 800c356:	0852      	lsrs	r2, r2, #1
 800c358:	07e1      	lsls	r1, r4, #31
 800c35a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800c35e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800c362:	bf48      	it	mi
 800c364:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800c368:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800c36c:	4614      	mov	r4, r2
 800c36e:	e781      	b.n	800c274 <__ieee754_sqrt+0x34>
 800c370:	0ad9      	lsrs	r1, r3, #11
 800c372:	3815      	subs	r0, #21
 800c374:	055b      	lsls	r3, r3, #21
 800c376:	2900      	cmp	r1, #0
 800c378:	d0fa      	beq.n	800c370 <__ieee754_sqrt+0x130>
 800c37a:	02cd      	lsls	r5, r1, #11
 800c37c:	d50a      	bpl.n	800c394 <__ieee754_sqrt+0x154>
 800c37e:	f1c2 0420 	rsb	r4, r2, #32
 800c382:	fa23 f404 	lsr.w	r4, r3, r4
 800c386:	1e55      	subs	r5, r2, #1
 800c388:	4093      	lsls	r3, r2
 800c38a:	4321      	orrs	r1, r4
 800c38c:	1b42      	subs	r2, r0, r5
 800c38e:	e78a      	b.n	800c2a6 <__ieee754_sqrt+0x66>
 800c390:	4610      	mov	r0, r2
 800c392:	e7f0      	b.n	800c376 <__ieee754_sqrt+0x136>
 800c394:	0049      	lsls	r1, r1, #1
 800c396:	3201      	adds	r2, #1
 800c398:	e7ef      	b.n	800c37a <__ieee754_sqrt+0x13a>
 800c39a:	4680      	mov	r8, r0
 800c39c:	e7bd      	b.n	800c31a <__ieee754_sqrt+0xda>
 800c39e:	bf00      	nop
 800c3a0:	7ff00000 	.word	0x7ff00000
 800c3a4:	00000000 	.word	0x00000000

0800c3a8 <__kernel_cos>:
 800c3a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ac:	ec57 6b10 	vmov	r6, r7, d0
 800c3b0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800c3b4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800c3b8:	ed8d 1b00 	vstr	d1, [sp]
 800c3bc:	da07      	bge.n	800c3ce <__kernel_cos+0x26>
 800c3be:	ee10 0a10 	vmov	r0, s0
 800c3c2:	4639      	mov	r1, r7
 800c3c4:	f7f4 fbc8 	bl	8000b58 <__aeabi_d2iz>
 800c3c8:	2800      	cmp	r0, #0
 800c3ca:	f000 8088 	beq.w	800c4de <__kernel_cos+0x136>
 800c3ce:	4632      	mov	r2, r6
 800c3d0:	463b      	mov	r3, r7
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	4639      	mov	r1, r7
 800c3d6:	f7f4 f90f 	bl	80005f8 <__aeabi_dmul>
 800c3da:	4b51      	ldr	r3, [pc, #324]	; (800c520 <__kernel_cos+0x178>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	4604      	mov	r4, r0
 800c3e0:	460d      	mov	r5, r1
 800c3e2:	f7f4 f909 	bl	80005f8 <__aeabi_dmul>
 800c3e6:	a340      	add	r3, pc, #256	; (adr r3, 800c4e8 <__kernel_cos+0x140>)
 800c3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ec:	4682      	mov	sl, r0
 800c3ee:	468b      	mov	fp, r1
 800c3f0:	4620      	mov	r0, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	f7f4 f900 	bl	80005f8 <__aeabi_dmul>
 800c3f8:	a33d      	add	r3, pc, #244	; (adr r3, 800c4f0 <__kernel_cos+0x148>)
 800c3fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3fe:	f7f3 ff45 	bl	800028c <__adddf3>
 800c402:	4622      	mov	r2, r4
 800c404:	462b      	mov	r3, r5
 800c406:	f7f4 f8f7 	bl	80005f8 <__aeabi_dmul>
 800c40a:	a33b      	add	r3, pc, #236	; (adr r3, 800c4f8 <__kernel_cos+0x150>)
 800c40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c410:	f7f3 ff3a 	bl	8000288 <__aeabi_dsub>
 800c414:	4622      	mov	r2, r4
 800c416:	462b      	mov	r3, r5
 800c418:	f7f4 f8ee 	bl	80005f8 <__aeabi_dmul>
 800c41c:	a338      	add	r3, pc, #224	; (adr r3, 800c500 <__kernel_cos+0x158>)
 800c41e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c422:	f7f3 ff33 	bl	800028c <__adddf3>
 800c426:	4622      	mov	r2, r4
 800c428:	462b      	mov	r3, r5
 800c42a:	f7f4 f8e5 	bl	80005f8 <__aeabi_dmul>
 800c42e:	a336      	add	r3, pc, #216	; (adr r3, 800c508 <__kernel_cos+0x160>)
 800c430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c434:	f7f3 ff28 	bl	8000288 <__aeabi_dsub>
 800c438:	4622      	mov	r2, r4
 800c43a:	462b      	mov	r3, r5
 800c43c:	f7f4 f8dc 	bl	80005f8 <__aeabi_dmul>
 800c440:	a333      	add	r3, pc, #204	; (adr r3, 800c510 <__kernel_cos+0x168>)
 800c442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c446:	f7f3 ff21 	bl	800028c <__adddf3>
 800c44a:	4622      	mov	r2, r4
 800c44c:	462b      	mov	r3, r5
 800c44e:	f7f4 f8d3 	bl	80005f8 <__aeabi_dmul>
 800c452:	4622      	mov	r2, r4
 800c454:	462b      	mov	r3, r5
 800c456:	f7f4 f8cf 	bl	80005f8 <__aeabi_dmul>
 800c45a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c45e:	4604      	mov	r4, r0
 800c460:	460d      	mov	r5, r1
 800c462:	4630      	mov	r0, r6
 800c464:	4639      	mov	r1, r7
 800c466:	f7f4 f8c7 	bl	80005f8 <__aeabi_dmul>
 800c46a:	460b      	mov	r3, r1
 800c46c:	4602      	mov	r2, r0
 800c46e:	4629      	mov	r1, r5
 800c470:	4620      	mov	r0, r4
 800c472:	f7f3 ff09 	bl	8000288 <__aeabi_dsub>
 800c476:	4b2b      	ldr	r3, [pc, #172]	; (800c524 <__kernel_cos+0x17c>)
 800c478:	4598      	cmp	r8, r3
 800c47a:	4606      	mov	r6, r0
 800c47c:	460f      	mov	r7, r1
 800c47e:	dc10      	bgt.n	800c4a2 <__kernel_cos+0xfa>
 800c480:	4602      	mov	r2, r0
 800c482:	460b      	mov	r3, r1
 800c484:	4650      	mov	r0, sl
 800c486:	4659      	mov	r1, fp
 800c488:	f7f3 fefe 	bl	8000288 <__aeabi_dsub>
 800c48c:	460b      	mov	r3, r1
 800c48e:	4926      	ldr	r1, [pc, #152]	; (800c528 <__kernel_cos+0x180>)
 800c490:	4602      	mov	r2, r0
 800c492:	2000      	movs	r0, #0
 800c494:	f7f3 fef8 	bl	8000288 <__aeabi_dsub>
 800c498:	ec41 0b10 	vmov	d0, r0, r1
 800c49c:	b003      	add	sp, #12
 800c49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4a2:	4b22      	ldr	r3, [pc, #136]	; (800c52c <__kernel_cos+0x184>)
 800c4a4:	4920      	ldr	r1, [pc, #128]	; (800c528 <__kernel_cos+0x180>)
 800c4a6:	4598      	cmp	r8, r3
 800c4a8:	bfcc      	ite	gt
 800c4aa:	4d21      	ldrgt	r5, [pc, #132]	; (800c530 <__kernel_cos+0x188>)
 800c4ac:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800c4b0:	2400      	movs	r4, #0
 800c4b2:	4622      	mov	r2, r4
 800c4b4:	462b      	mov	r3, r5
 800c4b6:	2000      	movs	r0, #0
 800c4b8:	f7f3 fee6 	bl	8000288 <__aeabi_dsub>
 800c4bc:	4622      	mov	r2, r4
 800c4be:	4680      	mov	r8, r0
 800c4c0:	4689      	mov	r9, r1
 800c4c2:	462b      	mov	r3, r5
 800c4c4:	4650      	mov	r0, sl
 800c4c6:	4659      	mov	r1, fp
 800c4c8:	f7f3 fede 	bl	8000288 <__aeabi_dsub>
 800c4cc:	4632      	mov	r2, r6
 800c4ce:	463b      	mov	r3, r7
 800c4d0:	f7f3 feda 	bl	8000288 <__aeabi_dsub>
 800c4d4:	4602      	mov	r2, r0
 800c4d6:	460b      	mov	r3, r1
 800c4d8:	4640      	mov	r0, r8
 800c4da:	4649      	mov	r1, r9
 800c4dc:	e7da      	b.n	800c494 <__kernel_cos+0xec>
 800c4de:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800c518 <__kernel_cos+0x170>
 800c4e2:	e7db      	b.n	800c49c <__kernel_cos+0xf4>
 800c4e4:	f3af 8000 	nop.w
 800c4e8:	be8838d4 	.word	0xbe8838d4
 800c4ec:	bda8fae9 	.word	0xbda8fae9
 800c4f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800c4f4:	3e21ee9e 	.word	0x3e21ee9e
 800c4f8:	809c52ad 	.word	0x809c52ad
 800c4fc:	3e927e4f 	.word	0x3e927e4f
 800c500:	19cb1590 	.word	0x19cb1590
 800c504:	3efa01a0 	.word	0x3efa01a0
 800c508:	16c15177 	.word	0x16c15177
 800c50c:	3f56c16c 	.word	0x3f56c16c
 800c510:	5555554c 	.word	0x5555554c
 800c514:	3fa55555 	.word	0x3fa55555
 800c518:	00000000 	.word	0x00000000
 800c51c:	3ff00000 	.word	0x3ff00000
 800c520:	3fe00000 	.word	0x3fe00000
 800c524:	3fd33332 	.word	0x3fd33332
 800c528:	3ff00000 	.word	0x3ff00000
 800c52c:	3fe90000 	.word	0x3fe90000
 800c530:	3fd20000 	.word	0x3fd20000
 800c534:	00000000 	.word	0x00000000

0800c538 <__kernel_rem_pio2>:
 800c538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c53c:	ed2d 8b02 	vpush	{d8}
 800c540:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800c544:	f112 0f14 	cmn.w	r2, #20
 800c548:	9308      	str	r3, [sp, #32]
 800c54a:	9101      	str	r1, [sp, #4]
 800c54c:	4bc4      	ldr	r3, [pc, #784]	; (800c860 <__kernel_rem_pio2+0x328>)
 800c54e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800c550:	900b      	str	r0, [sp, #44]	; 0x2c
 800c552:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c556:	9302      	str	r3, [sp, #8]
 800c558:	9b08      	ldr	r3, [sp, #32]
 800c55a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c55e:	bfa8      	it	ge
 800c560:	1ed4      	subge	r4, r2, #3
 800c562:	9306      	str	r3, [sp, #24]
 800c564:	bfb2      	itee	lt
 800c566:	2400      	movlt	r4, #0
 800c568:	2318      	movge	r3, #24
 800c56a:	fb94 f4f3 	sdivge	r4, r4, r3
 800c56e:	f06f 0317 	mvn.w	r3, #23
 800c572:	fb04 3303 	mla	r3, r4, r3, r3
 800c576:	eb03 0a02 	add.w	sl, r3, r2
 800c57a:	9b02      	ldr	r3, [sp, #8]
 800c57c:	9a06      	ldr	r2, [sp, #24]
 800c57e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800c850 <__kernel_rem_pio2+0x318>
 800c582:	eb03 0802 	add.w	r8, r3, r2
 800c586:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c588:	1aa7      	subs	r7, r4, r2
 800c58a:	ae22      	add	r6, sp, #136	; 0x88
 800c58c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800c590:	2500      	movs	r5, #0
 800c592:	4545      	cmp	r5, r8
 800c594:	dd13      	ble.n	800c5be <__kernel_rem_pio2+0x86>
 800c596:	9b08      	ldr	r3, [sp, #32]
 800c598:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800c850 <__kernel_rem_pio2+0x318>
 800c59c:	aa22      	add	r2, sp, #136	; 0x88
 800c59e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800c5a2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800c5a6:	f04f 0800 	mov.w	r8, #0
 800c5aa:	9b02      	ldr	r3, [sp, #8]
 800c5ac:	4598      	cmp	r8, r3
 800c5ae:	dc2f      	bgt.n	800c610 <__kernel_rem_pio2+0xd8>
 800c5b0:	ed8d 8b04 	vstr	d8, [sp, #16]
 800c5b4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800c5b8:	462f      	mov	r7, r5
 800c5ba:	2600      	movs	r6, #0
 800c5bc:	e01b      	b.n	800c5f6 <__kernel_rem_pio2+0xbe>
 800c5be:	42ef      	cmn	r7, r5
 800c5c0:	d407      	bmi.n	800c5d2 <__kernel_rem_pio2+0x9a>
 800c5c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800c5c6:	f7f3 ffad 	bl	8000524 <__aeabi_i2d>
 800c5ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800c5ce:	3501      	adds	r5, #1
 800c5d0:	e7df      	b.n	800c592 <__kernel_rem_pio2+0x5a>
 800c5d2:	ec51 0b18 	vmov	r0, r1, d8
 800c5d6:	e7f8      	b.n	800c5ca <__kernel_rem_pio2+0x92>
 800c5d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5dc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800c5e0:	f7f4 f80a 	bl	80005f8 <__aeabi_dmul>
 800c5e4:	4602      	mov	r2, r0
 800c5e6:	460b      	mov	r3, r1
 800c5e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c5ec:	f7f3 fe4e 	bl	800028c <__adddf3>
 800c5f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c5f4:	3601      	adds	r6, #1
 800c5f6:	9b06      	ldr	r3, [sp, #24]
 800c5f8:	429e      	cmp	r6, r3
 800c5fa:	f1a7 0708 	sub.w	r7, r7, #8
 800c5fe:	ddeb      	ble.n	800c5d8 <__kernel_rem_pio2+0xa0>
 800c600:	ed9d 7b04 	vldr	d7, [sp, #16]
 800c604:	f108 0801 	add.w	r8, r8, #1
 800c608:	ecab 7b02 	vstmia	fp!, {d7}
 800c60c:	3508      	adds	r5, #8
 800c60e:	e7cc      	b.n	800c5aa <__kernel_rem_pio2+0x72>
 800c610:	9b02      	ldr	r3, [sp, #8]
 800c612:	aa0e      	add	r2, sp, #56	; 0x38
 800c614:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c618:	930d      	str	r3, [sp, #52]	; 0x34
 800c61a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800c61c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800c620:	9c02      	ldr	r4, [sp, #8]
 800c622:	930c      	str	r3, [sp, #48]	; 0x30
 800c624:	00e3      	lsls	r3, r4, #3
 800c626:	930a      	str	r3, [sp, #40]	; 0x28
 800c628:	ab9a      	add	r3, sp, #616	; 0x268
 800c62a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c62e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800c632:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800c636:	ab72      	add	r3, sp, #456	; 0x1c8
 800c638:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800c63c:	46c3      	mov	fp, r8
 800c63e:	46a1      	mov	r9, r4
 800c640:	f1b9 0f00 	cmp.w	r9, #0
 800c644:	f1a5 0508 	sub.w	r5, r5, #8
 800c648:	dc77      	bgt.n	800c73a <__kernel_rem_pio2+0x202>
 800c64a:	ec47 6b10 	vmov	d0, r6, r7
 800c64e:	4650      	mov	r0, sl
 800c650:	f000 fdae 	bl	800d1b0 <scalbn>
 800c654:	ec57 6b10 	vmov	r6, r7, d0
 800c658:	2200      	movs	r2, #0
 800c65a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800c65e:	ee10 0a10 	vmov	r0, s0
 800c662:	4639      	mov	r1, r7
 800c664:	f7f3 ffc8 	bl	80005f8 <__aeabi_dmul>
 800c668:	ec41 0b10 	vmov	d0, r0, r1
 800c66c:	f000 fd20 	bl	800d0b0 <floor>
 800c670:	4b7c      	ldr	r3, [pc, #496]	; (800c864 <__kernel_rem_pio2+0x32c>)
 800c672:	ec51 0b10 	vmov	r0, r1, d0
 800c676:	2200      	movs	r2, #0
 800c678:	f7f3 ffbe 	bl	80005f8 <__aeabi_dmul>
 800c67c:	4602      	mov	r2, r0
 800c67e:	460b      	mov	r3, r1
 800c680:	4630      	mov	r0, r6
 800c682:	4639      	mov	r1, r7
 800c684:	f7f3 fe00 	bl	8000288 <__aeabi_dsub>
 800c688:	460f      	mov	r7, r1
 800c68a:	4606      	mov	r6, r0
 800c68c:	f7f4 fa64 	bl	8000b58 <__aeabi_d2iz>
 800c690:	9004      	str	r0, [sp, #16]
 800c692:	f7f3 ff47 	bl	8000524 <__aeabi_i2d>
 800c696:	4602      	mov	r2, r0
 800c698:	460b      	mov	r3, r1
 800c69a:	4630      	mov	r0, r6
 800c69c:	4639      	mov	r1, r7
 800c69e:	f7f3 fdf3 	bl	8000288 <__aeabi_dsub>
 800c6a2:	f1ba 0f00 	cmp.w	sl, #0
 800c6a6:	4606      	mov	r6, r0
 800c6a8:	460f      	mov	r7, r1
 800c6aa:	dd6d      	ble.n	800c788 <__kernel_rem_pio2+0x250>
 800c6ac:	1e62      	subs	r2, r4, #1
 800c6ae:	ab0e      	add	r3, sp, #56	; 0x38
 800c6b0:	9d04      	ldr	r5, [sp, #16]
 800c6b2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800c6b6:	f1ca 0118 	rsb	r1, sl, #24
 800c6ba:	fa40 f301 	asr.w	r3, r0, r1
 800c6be:	441d      	add	r5, r3
 800c6c0:	408b      	lsls	r3, r1
 800c6c2:	1ac0      	subs	r0, r0, r3
 800c6c4:	ab0e      	add	r3, sp, #56	; 0x38
 800c6c6:	9504      	str	r5, [sp, #16]
 800c6c8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800c6cc:	f1ca 0317 	rsb	r3, sl, #23
 800c6d0:	fa40 fb03 	asr.w	fp, r0, r3
 800c6d4:	f1bb 0f00 	cmp.w	fp, #0
 800c6d8:	dd65      	ble.n	800c7a6 <__kernel_rem_pio2+0x26e>
 800c6da:	9b04      	ldr	r3, [sp, #16]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	3301      	adds	r3, #1
 800c6e0:	9304      	str	r3, [sp, #16]
 800c6e2:	4615      	mov	r5, r2
 800c6e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800c6e8:	4294      	cmp	r4, r2
 800c6ea:	f300 809c 	bgt.w	800c826 <__kernel_rem_pio2+0x2ee>
 800c6ee:	f1ba 0f00 	cmp.w	sl, #0
 800c6f2:	dd07      	ble.n	800c704 <__kernel_rem_pio2+0x1cc>
 800c6f4:	f1ba 0f01 	cmp.w	sl, #1
 800c6f8:	f000 80c0 	beq.w	800c87c <__kernel_rem_pio2+0x344>
 800c6fc:	f1ba 0f02 	cmp.w	sl, #2
 800c700:	f000 80c6 	beq.w	800c890 <__kernel_rem_pio2+0x358>
 800c704:	f1bb 0f02 	cmp.w	fp, #2
 800c708:	d14d      	bne.n	800c7a6 <__kernel_rem_pio2+0x26e>
 800c70a:	4632      	mov	r2, r6
 800c70c:	463b      	mov	r3, r7
 800c70e:	4956      	ldr	r1, [pc, #344]	; (800c868 <__kernel_rem_pio2+0x330>)
 800c710:	2000      	movs	r0, #0
 800c712:	f7f3 fdb9 	bl	8000288 <__aeabi_dsub>
 800c716:	4606      	mov	r6, r0
 800c718:	460f      	mov	r7, r1
 800c71a:	2d00      	cmp	r5, #0
 800c71c:	d043      	beq.n	800c7a6 <__kernel_rem_pio2+0x26e>
 800c71e:	4650      	mov	r0, sl
 800c720:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800c858 <__kernel_rem_pio2+0x320>
 800c724:	f000 fd44 	bl	800d1b0 <scalbn>
 800c728:	4630      	mov	r0, r6
 800c72a:	4639      	mov	r1, r7
 800c72c:	ec53 2b10 	vmov	r2, r3, d0
 800c730:	f7f3 fdaa 	bl	8000288 <__aeabi_dsub>
 800c734:	4606      	mov	r6, r0
 800c736:	460f      	mov	r7, r1
 800c738:	e035      	b.n	800c7a6 <__kernel_rem_pio2+0x26e>
 800c73a:	4b4c      	ldr	r3, [pc, #304]	; (800c86c <__kernel_rem_pio2+0x334>)
 800c73c:	2200      	movs	r2, #0
 800c73e:	4630      	mov	r0, r6
 800c740:	4639      	mov	r1, r7
 800c742:	f7f3 ff59 	bl	80005f8 <__aeabi_dmul>
 800c746:	f7f4 fa07 	bl	8000b58 <__aeabi_d2iz>
 800c74a:	f7f3 feeb 	bl	8000524 <__aeabi_i2d>
 800c74e:	4602      	mov	r2, r0
 800c750:	460b      	mov	r3, r1
 800c752:	ec43 2b18 	vmov	d8, r2, r3
 800c756:	4b46      	ldr	r3, [pc, #280]	; (800c870 <__kernel_rem_pio2+0x338>)
 800c758:	2200      	movs	r2, #0
 800c75a:	f7f3 ff4d 	bl	80005f8 <__aeabi_dmul>
 800c75e:	4602      	mov	r2, r0
 800c760:	460b      	mov	r3, r1
 800c762:	4630      	mov	r0, r6
 800c764:	4639      	mov	r1, r7
 800c766:	f7f3 fd8f 	bl	8000288 <__aeabi_dsub>
 800c76a:	f7f4 f9f5 	bl	8000b58 <__aeabi_d2iz>
 800c76e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c772:	f84b 0b04 	str.w	r0, [fp], #4
 800c776:	ec51 0b18 	vmov	r0, r1, d8
 800c77a:	f7f3 fd87 	bl	800028c <__adddf3>
 800c77e:	f109 39ff 	add.w	r9, r9, #4294967295
 800c782:	4606      	mov	r6, r0
 800c784:	460f      	mov	r7, r1
 800c786:	e75b      	b.n	800c640 <__kernel_rem_pio2+0x108>
 800c788:	d106      	bne.n	800c798 <__kernel_rem_pio2+0x260>
 800c78a:	1e63      	subs	r3, r4, #1
 800c78c:	aa0e      	add	r2, sp, #56	; 0x38
 800c78e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800c792:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800c796:	e79d      	b.n	800c6d4 <__kernel_rem_pio2+0x19c>
 800c798:	4b36      	ldr	r3, [pc, #216]	; (800c874 <__kernel_rem_pio2+0x33c>)
 800c79a:	2200      	movs	r2, #0
 800c79c:	f7f4 f9b2 	bl	8000b04 <__aeabi_dcmpge>
 800c7a0:	2800      	cmp	r0, #0
 800c7a2:	d13d      	bne.n	800c820 <__kernel_rem_pio2+0x2e8>
 800c7a4:	4683      	mov	fp, r0
 800c7a6:	2200      	movs	r2, #0
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	4639      	mov	r1, r7
 800c7ae:	f7f4 f98b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7b2:	2800      	cmp	r0, #0
 800c7b4:	f000 80c0 	beq.w	800c938 <__kernel_rem_pio2+0x400>
 800c7b8:	1e65      	subs	r5, r4, #1
 800c7ba:	462b      	mov	r3, r5
 800c7bc:	2200      	movs	r2, #0
 800c7be:	9902      	ldr	r1, [sp, #8]
 800c7c0:	428b      	cmp	r3, r1
 800c7c2:	da6c      	bge.n	800c89e <__kernel_rem_pio2+0x366>
 800c7c4:	2a00      	cmp	r2, #0
 800c7c6:	f000 8089 	beq.w	800c8dc <__kernel_rem_pio2+0x3a4>
 800c7ca:	ab0e      	add	r3, sp, #56	; 0x38
 800c7cc:	f1aa 0a18 	sub.w	sl, sl, #24
 800c7d0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	f000 80ad 	beq.w	800c934 <__kernel_rem_pio2+0x3fc>
 800c7da:	4650      	mov	r0, sl
 800c7dc:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800c858 <__kernel_rem_pio2+0x320>
 800c7e0:	f000 fce6 	bl	800d1b0 <scalbn>
 800c7e4:	ab9a      	add	r3, sp, #616	; 0x268
 800c7e6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800c7ea:	ec57 6b10 	vmov	r6, r7, d0
 800c7ee:	00ec      	lsls	r4, r5, #3
 800c7f0:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800c7f4:	46aa      	mov	sl, r5
 800c7f6:	f1ba 0f00 	cmp.w	sl, #0
 800c7fa:	f280 80d6 	bge.w	800c9aa <__kernel_rem_pio2+0x472>
 800c7fe:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800c850 <__kernel_rem_pio2+0x318>
 800c802:	462e      	mov	r6, r5
 800c804:	2e00      	cmp	r6, #0
 800c806:	f2c0 8104 	blt.w	800ca12 <__kernel_rem_pio2+0x4da>
 800c80a:	ab72      	add	r3, sp, #456	; 0x1c8
 800c80c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800c810:	f8df a064 	ldr.w	sl, [pc, #100]	; 800c878 <__kernel_rem_pio2+0x340>
 800c814:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800c818:	f04f 0800 	mov.w	r8, #0
 800c81c:	1baf      	subs	r7, r5, r6
 800c81e:	e0ea      	b.n	800c9f6 <__kernel_rem_pio2+0x4be>
 800c820:	f04f 0b02 	mov.w	fp, #2
 800c824:	e759      	b.n	800c6da <__kernel_rem_pio2+0x1a2>
 800c826:	f8d8 3000 	ldr.w	r3, [r8]
 800c82a:	b955      	cbnz	r5, 800c842 <__kernel_rem_pio2+0x30a>
 800c82c:	b123      	cbz	r3, 800c838 <__kernel_rem_pio2+0x300>
 800c82e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800c832:	f8c8 3000 	str.w	r3, [r8]
 800c836:	2301      	movs	r3, #1
 800c838:	3201      	adds	r2, #1
 800c83a:	f108 0804 	add.w	r8, r8, #4
 800c83e:	461d      	mov	r5, r3
 800c840:	e752      	b.n	800c6e8 <__kernel_rem_pio2+0x1b0>
 800c842:	1acb      	subs	r3, r1, r3
 800c844:	f8c8 3000 	str.w	r3, [r8]
 800c848:	462b      	mov	r3, r5
 800c84a:	e7f5      	b.n	800c838 <__kernel_rem_pio2+0x300>
 800c84c:	f3af 8000 	nop.w
	...
 800c85c:	3ff00000 	.word	0x3ff00000
 800c860:	0800d8f8 	.word	0x0800d8f8
 800c864:	40200000 	.word	0x40200000
 800c868:	3ff00000 	.word	0x3ff00000
 800c86c:	3e700000 	.word	0x3e700000
 800c870:	41700000 	.word	0x41700000
 800c874:	3fe00000 	.word	0x3fe00000
 800c878:	0800d8b8 	.word	0x0800d8b8
 800c87c:	1e62      	subs	r2, r4, #1
 800c87e:	ab0e      	add	r3, sp, #56	; 0x38
 800c880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c884:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800c888:	a90e      	add	r1, sp, #56	; 0x38
 800c88a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800c88e:	e739      	b.n	800c704 <__kernel_rem_pio2+0x1cc>
 800c890:	1e62      	subs	r2, r4, #1
 800c892:	ab0e      	add	r3, sp, #56	; 0x38
 800c894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c898:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800c89c:	e7f4      	b.n	800c888 <__kernel_rem_pio2+0x350>
 800c89e:	a90e      	add	r1, sp, #56	; 0x38
 800c8a0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	430a      	orrs	r2, r1
 800c8a8:	e789      	b.n	800c7be <__kernel_rem_pio2+0x286>
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800c8b0:	2900      	cmp	r1, #0
 800c8b2:	d0fa      	beq.n	800c8aa <__kernel_rem_pio2+0x372>
 800c8b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8b6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800c8ba:	446a      	add	r2, sp
 800c8bc:	3a98      	subs	r2, #152	; 0x98
 800c8be:	920a      	str	r2, [sp, #40]	; 0x28
 800c8c0:	9a08      	ldr	r2, [sp, #32]
 800c8c2:	18e3      	adds	r3, r4, r3
 800c8c4:	18a5      	adds	r5, r4, r2
 800c8c6:	aa22      	add	r2, sp, #136	; 0x88
 800c8c8:	f104 0801 	add.w	r8, r4, #1
 800c8cc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800c8d0:	9304      	str	r3, [sp, #16]
 800c8d2:	9b04      	ldr	r3, [sp, #16]
 800c8d4:	4543      	cmp	r3, r8
 800c8d6:	da04      	bge.n	800c8e2 <__kernel_rem_pio2+0x3aa>
 800c8d8:	461c      	mov	r4, r3
 800c8da:	e6a3      	b.n	800c624 <__kernel_rem_pio2+0xec>
 800c8dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c8de:	2301      	movs	r3, #1
 800c8e0:	e7e4      	b.n	800c8ac <__kernel_rem_pio2+0x374>
 800c8e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c8e4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800c8e8:	f7f3 fe1c 	bl	8000524 <__aeabi_i2d>
 800c8ec:	e8e5 0102 	strd	r0, r1, [r5], #8
 800c8f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8f2:	46ab      	mov	fp, r5
 800c8f4:	461c      	mov	r4, r3
 800c8f6:	f04f 0900 	mov.w	r9, #0
 800c8fa:	2600      	movs	r6, #0
 800c8fc:	2700      	movs	r7, #0
 800c8fe:	9b06      	ldr	r3, [sp, #24]
 800c900:	4599      	cmp	r9, r3
 800c902:	dd06      	ble.n	800c912 <__kernel_rem_pio2+0x3da>
 800c904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c906:	e8e3 6702 	strd	r6, r7, [r3], #8
 800c90a:	f108 0801 	add.w	r8, r8, #1
 800c90e:	930a      	str	r3, [sp, #40]	; 0x28
 800c910:	e7df      	b.n	800c8d2 <__kernel_rem_pio2+0x39a>
 800c912:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800c916:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800c91a:	f7f3 fe6d 	bl	80005f8 <__aeabi_dmul>
 800c91e:	4602      	mov	r2, r0
 800c920:	460b      	mov	r3, r1
 800c922:	4630      	mov	r0, r6
 800c924:	4639      	mov	r1, r7
 800c926:	f7f3 fcb1 	bl	800028c <__adddf3>
 800c92a:	f109 0901 	add.w	r9, r9, #1
 800c92e:	4606      	mov	r6, r0
 800c930:	460f      	mov	r7, r1
 800c932:	e7e4      	b.n	800c8fe <__kernel_rem_pio2+0x3c6>
 800c934:	3d01      	subs	r5, #1
 800c936:	e748      	b.n	800c7ca <__kernel_rem_pio2+0x292>
 800c938:	ec47 6b10 	vmov	d0, r6, r7
 800c93c:	f1ca 0000 	rsb	r0, sl, #0
 800c940:	f000 fc36 	bl	800d1b0 <scalbn>
 800c944:	ec57 6b10 	vmov	r6, r7, d0
 800c948:	4ba0      	ldr	r3, [pc, #640]	; (800cbcc <__kernel_rem_pio2+0x694>)
 800c94a:	ee10 0a10 	vmov	r0, s0
 800c94e:	2200      	movs	r2, #0
 800c950:	4639      	mov	r1, r7
 800c952:	f7f4 f8d7 	bl	8000b04 <__aeabi_dcmpge>
 800c956:	b1f8      	cbz	r0, 800c998 <__kernel_rem_pio2+0x460>
 800c958:	4b9d      	ldr	r3, [pc, #628]	; (800cbd0 <__kernel_rem_pio2+0x698>)
 800c95a:	2200      	movs	r2, #0
 800c95c:	4630      	mov	r0, r6
 800c95e:	4639      	mov	r1, r7
 800c960:	f7f3 fe4a 	bl	80005f8 <__aeabi_dmul>
 800c964:	f7f4 f8f8 	bl	8000b58 <__aeabi_d2iz>
 800c968:	4680      	mov	r8, r0
 800c96a:	f7f3 fddb 	bl	8000524 <__aeabi_i2d>
 800c96e:	4b97      	ldr	r3, [pc, #604]	; (800cbcc <__kernel_rem_pio2+0x694>)
 800c970:	2200      	movs	r2, #0
 800c972:	f7f3 fe41 	bl	80005f8 <__aeabi_dmul>
 800c976:	460b      	mov	r3, r1
 800c978:	4602      	mov	r2, r0
 800c97a:	4639      	mov	r1, r7
 800c97c:	4630      	mov	r0, r6
 800c97e:	f7f3 fc83 	bl	8000288 <__aeabi_dsub>
 800c982:	f7f4 f8e9 	bl	8000b58 <__aeabi_d2iz>
 800c986:	1c65      	adds	r5, r4, #1
 800c988:	ab0e      	add	r3, sp, #56	; 0x38
 800c98a:	f10a 0a18 	add.w	sl, sl, #24
 800c98e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c992:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800c996:	e720      	b.n	800c7da <__kernel_rem_pio2+0x2a2>
 800c998:	4630      	mov	r0, r6
 800c99a:	4639      	mov	r1, r7
 800c99c:	f7f4 f8dc 	bl	8000b58 <__aeabi_d2iz>
 800c9a0:	ab0e      	add	r3, sp, #56	; 0x38
 800c9a2:	4625      	mov	r5, r4
 800c9a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800c9a8:	e717      	b.n	800c7da <__kernel_rem_pio2+0x2a2>
 800c9aa:	ab0e      	add	r3, sp, #56	; 0x38
 800c9ac:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800c9b0:	f7f3 fdb8 	bl	8000524 <__aeabi_i2d>
 800c9b4:	4632      	mov	r2, r6
 800c9b6:	463b      	mov	r3, r7
 800c9b8:	f7f3 fe1e 	bl	80005f8 <__aeabi_dmul>
 800c9bc:	4b84      	ldr	r3, [pc, #528]	; (800cbd0 <__kernel_rem_pio2+0x698>)
 800c9be:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	4630      	mov	r0, r6
 800c9c6:	4639      	mov	r1, r7
 800c9c8:	f7f3 fe16 	bl	80005f8 <__aeabi_dmul>
 800c9cc:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c9d0:	4606      	mov	r6, r0
 800c9d2:	460f      	mov	r7, r1
 800c9d4:	e70f      	b.n	800c7f6 <__kernel_rem_pio2+0x2be>
 800c9d6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800c9da:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800c9de:	f7f3 fe0b 	bl	80005f8 <__aeabi_dmul>
 800c9e2:	4602      	mov	r2, r0
 800c9e4:	460b      	mov	r3, r1
 800c9e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c9ea:	f7f3 fc4f 	bl	800028c <__adddf3>
 800c9ee:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c9f2:	f108 0801 	add.w	r8, r8, #1
 800c9f6:	9b02      	ldr	r3, [sp, #8]
 800c9f8:	4598      	cmp	r8, r3
 800c9fa:	dc01      	bgt.n	800ca00 <__kernel_rem_pio2+0x4c8>
 800c9fc:	45b8      	cmp	r8, r7
 800c9fe:	ddea      	ble.n	800c9d6 <__kernel_rem_pio2+0x49e>
 800ca00:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ca04:	ab4a      	add	r3, sp, #296	; 0x128
 800ca06:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ca0a:	ed87 7b00 	vstr	d7, [r7]
 800ca0e:	3e01      	subs	r6, #1
 800ca10:	e6f8      	b.n	800c804 <__kernel_rem_pio2+0x2cc>
 800ca12:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ca14:	2b02      	cmp	r3, #2
 800ca16:	dc0b      	bgt.n	800ca30 <__kernel_rem_pio2+0x4f8>
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	dc35      	bgt.n	800ca88 <__kernel_rem_pio2+0x550>
 800ca1c:	d059      	beq.n	800cad2 <__kernel_rem_pio2+0x59a>
 800ca1e:	9b04      	ldr	r3, [sp, #16]
 800ca20:	f003 0007 	and.w	r0, r3, #7
 800ca24:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ca28:	ecbd 8b02 	vpop	{d8}
 800ca2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca30:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ca32:	2b03      	cmp	r3, #3
 800ca34:	d1f3      	bne.n	800ca1e <__kernel_rem_pio2+0x4e6>
 800ca36:	ab4a      	add	r3, sp, #296	; 0x128
 800ca38:	4423      	add	r3, r4
 800ca3a:	9306      	str	r3, [sp, #24]
 800ca3c:	461c      	mov	r4, r3
 800ca3e:	469a      	mov	sl, r3
 800ca40:	9502      	str	r5, [sp, #8]
 800ca42:	9b02      	ldr	r3, [sp, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	f1aa 0a08 	sub.w	sl, sl, #8
 800ca4a:	dc6b      	bgt.n	800cb24 <__kernel_rem_pio2+0x5ec>
 800ca4c:	46aa      	mov	sl, r5
 800ca4e:	f1ba 0f01 	cmp.w	sl, #1
 800ca52:	f1a4 0408 	sub.w	r4, r4, #8
 800ca56:	f300 8085 	bgt.w	800cb64 <__kernel_rem_pio2+0x62c>
 800ca5a:	9c06      	ldr	r4, [sp, #24]
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	3408      	adds	r4, #8
 800ca60:	2100      	movs	r1, #0
 800ca62:	2d01      	cmp	r5, #1
 800ca64:	f300 809d 	bgt.w	800cba2 <__kernel_rem_pio2+0x66a>
 800ca68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800ca6c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800ca70:	f1bb 0f00 	cmp.w	fp, #0
 800ca74:	f040 809b 	bne.w	800cbae <__kernel_rem_pio2+0x676>
 800ca78:	9b01      	ldr	r3, [sp, #4]
 800ca7a:	e9c3 5600 	strd	r5, r6, [r3]
 800ca7e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800ca82:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ca86:	e7ca      	b.n	800ca1e <__kernel_rem_pio2+0x4e6>
 800ca88:	3408      	adds	r4, #8
 800ca8a:	ab4a      	add	r3, sp, #296	; 0x128
 800ca8c:	441c      	add	r4, r3
 800ca8e:	462e      	mov	r6, r5
 800ca90:	2000      	movs	r0, #0
 800ca92:	2100      	movs	r1, #0
 800ca94:	2e00      	cmp	r6, #0
 800ca96:	da36      	bge.n	800cb06 <__kernel_rem_pio2+0x5ce>
 800ca98:	f1bb 0f00 	cmp.w	fp, #0
 800ca9c:	d039      	beq.n	800cb12 <__kernel_rem_pio2+0x5da>
 800ca9e:	4602      	mov	r2, r0
 800caa0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caa4:	9c01      	ldr	r4, [sp, #4]
 800caa6:	e9c4 2300 	strd	r2, r3, [r4]
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800cab2:	f7f3 fbe9 	bl	8000288 <__aeabi_dsub>
 800cab6:	ae4c      	add	r6, sp, #304	; 0x130
 800cab8:	2401      	movs	r4, #1
 800caba:	42a5      	cmp	r5, r4
 800cabc:	da2c      	bge.n	800cb18 <__kernel_rem_pio2+0x5e0>
 800cabe:	f1bb 0f00 	cmp.w	fp, #0
 800cac2:	d002      	beq.n	800caca <__kernel_rem_pio2+0x592>
 800cac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cac8:	4619      	mov	r1, r3
 800caca:	9b01      	ldr	r3, [sp, #4]
 800cacc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800cad0:	e7a5      	b.n	800ca1e <__kernel_rem_pio2+0x4e6>
 800cad2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800cad6:	eb0d 0403 	add.w	r4, sp, r3
 800cada:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800cade:	2000      	movs	r0, #0
 800cae0:	2100      	movs	r1, #0
 800cae2:	2d00      	cmp	r5, #0
 800cae4:	da09      	bge.n	800cafa <__kernel_rem_pio2+0x5c2>
 800cae6:	f1bb 0f00 	cmp.w	fp, #0
 800caea:	d002      	beq.n	800caf2 <__kernel_rem_pio2+0x5ba>
 800caec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800caf0:	4619      	mov	r1, r3
 800caf2:	9b01      	ldr	r3, [sp, #4]
 800caf4:	e9c3 0100 	strd	r0, r1, [r3]
 800caf8:	e791      	b.n	800ca1e <__kernel_rem_pio2+0x4e6>
 800cafa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cafe:	f7f3 fbc5 	bl	800028c <__adddf3>
 800cb02:	3d01      	subs	r5, #1
 800cb04:	e7ed      	b.n	800cae2 <__kernel_rem_pio2+0x5aa>
 800cb06:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cb0a:	f7f3 fbbf 	bl	800028c <__adddf3>
 800cb0e:	3e01      	subs	r6, #1
 800cb10:	e7c0      	b.n	800ca94 <__kernel_rem_pio2+0x55c>
 800cb12:	4602      	mov	r2, r0
 800cb14:	460b      	mov	r3, r1
 800cb16:	e7c5      	b.n	800caa4 <__kernel_rem_pio2+0x56c>
 800cb18:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800cb1c:	f7f3 fbb6 	bl	800028c <__adddf3>
 800cb20:	3401      	adds	r4, #1
 800cb22:	e7ca      	b.n	800caba <__kernel_rem_pio2+0x582>
 800cb24:	e9da 8900 	ldrd	r8, r9, [sl]
 800cb28:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800cb2c:	9b02      	ldr	r3, [sp, #8]
 800cb2e:	3b01      	subs	r3, #1
 800cb30:	9302      	str	r3, [sp, #8]
 800cb32:	4632      	mov	r2, r6
 800cb34:	463b      	mov	r3, r7
 800cb36:	4640      	mov	r0, r8
 800cb38:	4649      	mov	r1, r9
 800cb3a:	f7f3 fba7 	bl	800028c <__adddf3>
 800cb3e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800cb42:	4602      	mov	r2, r0
 800cb44:	460b      	mov	r3, r1
 800cb46:	4640      	mov	r0, r8
 800cb48:	4649      	mov	r1, r9
 800cb4a:	f7f3 fb9d 	bl	8000288 <__aeabi_dsub>
 800cb4e:	4632      	mov	r2, r6
 800cb50:	463b      	mov	r3, r7
 800cb52:	f7f3 fb9b 	bl	800028c <__adddf3>
 800cb56:	ed9d 7b08 	vldr	d7, [sp, #32]
 800cb5a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800cb5e:	ed8a 7b00 	vstr	d7, [sl]
 800cb62:	e76e      	b.n	800ca42 <__kernel_rem_pio2+0x50a>
 800cb64:	e9d4 8900 	ldrd	r8, r9, [r4]
 800cb68:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800cb6c:	4640      	mov	r0, r8
 800cb6e:	4632      	mov	r2, r6
 800cb70:	463b      	mov	r3, r7
 800cb72:	4649      	mov	r1, r9
 800cb74:	f7f3 fb8a 	bl	800028c <__adddf3>
 800cb78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb7c:	4602      	mov	r2, r0
 800cb7e:	460b      	mov	r3, r1
 800cb80:	4640      	mov	r0, r8
 800cb82:	4649      	mov	r1, r9
 800cb84:	f7f3 fb80 	bl	8000288 <__aeabi_dsub>
 800cb88:	4632      	mov	r2, r6
 800cb8a:	463b      	mov	r3, r7
 800cb8c:	f7f3 fb7e 	bl	800028c <__adddf3>
 800cb90:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cb94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800cb98:	ed84 7b00 	vstr	d7, [r4]
 800cb9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cba0:	e755      	b.n	800ca4e <__kernel_rem_pio2+0x516>
 800cba2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800cba6:	f7f3 fb71 	bl	800028c <__adddf3>
 800cbaa:	3d01      	subs	r5, #1
 800cbac:	e759      	b.n	800ca62 <__kernel_rem_pio2+0x52a>
 800cbae:	9b01      	ldr	r3, [sp, #4]
 800cbb0:	9a01      	ldr	r2, [sp, #4]
 800cbb2:	601d      	str	r5, [r3, #0]
 800cbb4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800cbb8:	605c      	str	r4, [r3, #4]
 800cbba:	609f      	str	r7, [r3, #8]
 800cbbc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800cbc0:	60d3      	str	r3, [r2, #12]
 800cbc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cbc6:	6110      	str	r0, [r2, #16]
 800cbc8:	6153      	str	r3, [r2, #20]
 800cbca:	e728      	b.n	800ca1e <__kernel_rem_pio2+0x4e6>
 800cbcc:	41700000 	.word	0x41700000
 800cbd0:	3e700000 	.word	0x3e700000
 800cbd4:	00000000 	.word	0x00000000

0800cbd8 <__kernel_sin>:
 800cbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbdc:	ed2d 8b04 	vpush	{d8-d9}
 800cbe0:	eeb0 8a41 	vmov.f32	s16, s2
 800cbe4:	eef0 8a61 	vmov.f32	s17, s3
 800cbe8:	ec55 4b10 	vmov	r4, r5, d0
 800cbec:	b083      	sub	sp, #12
 800cbee:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800cbf2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800cbf6:	9001      	str	r0, [sp, #4]
 800cbf8:	da06      	bge.n	800cc08 <__kernel_sin+0x30>
 800cbfa:	ee10 0a10 	vmov	r0, s0
 800cbfe:	4629      	mov	r1, r5
 800cc00:	f7f3 ffaa 	bl	8000b58 <__aeabi_d2iz>
 800cc04:	2800      	cmp	r0, #0
 800cc06:	d051      	beq.n	800ccac <__kernel_sin+0xd4>
 800cc08:	4622      	mov	r2, r4
 800cc0a:	462b      	mov	r3, r5
 800cc0c:	4620      	mov	r0, r4
 800cc0e:	4629      	mov	r1, r5
 800cc10:	f7f3 fcf2 	bl	80005f8 <__aeabi_dmul>
 800cc14:	4682      	mov	sl, r0
 800cc16:	468b      	mov	fp, r1
 800cc18:	4602      	mov	r2, r0
 800cc1a:	460b      	mov	r3, r1
 800cc1c:	4620      	mov	r0, r4
 800cc1e:	4629      	mov	r1, r5
 800cc20:	f7f3 fcea 	bl	80005f8 <__aeabi_dmul>
 800cc24:	a341      	add	r3, pc, #260	; (adr r3, 800cd2c <__kernel_sin+0x154>)
 800cc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2a:	4680      	mov	r8, r0
 800cc2c:	4689      	mov	r9, r1
 800cc2e:	4650      	mov	r0, sl
 800cc30:	4659      	mov	r1, fp
 800cc32:	f7f3 fce1 	bl	80005f8 <__aeabi_dmul>
 800cc36:	a33f      	add	r3, pc, #252	; (adr r3, 800cd34 <__kernel_sin+0x15c>)
 800cc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc3c:	f7f3 fb24 	bl	8000288 <__aeabi_dsub>
 800cc40:	4652      	mov	r2, sl
 800cc42:	465b      	mov	r3, fp
 800cc44:	f7f3 fcd8 	bl	80005f8 <__aeabi_dmul>
 800cc48:	a33c      	add	r3, pc, #240	; (adr r3, 800cd3c <__kernel_sin+0x164>)
 800cc4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc4e:	f7f3 fb1d 	bl	800028c <__adddf3>
 800cc52:	4652      	mov	r2, sl
 800cc54:	465b      	mov	r3, fp
 800cc56:	f7f3 fccf 	bl	80005f8 <__aeabi_dmul>
 800cc5a:	a33a      	add	r3, pc, #232	; (adr r3, 800cd44 <__kernel_sin+0x16c>)
 800cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc60:	f7f3 fb12 	bl	8000288 <__aeabi_dsub>
 800cc64:	4652      	mov	r2, sl
 800cc66:	465b      	mov	r3, fp
 800cc68:	f7f3 fcc6 	bl	80005f8 <__aeabi_dmul>
 800cc6c:	a337      	add	r3, pc, #220	; (adr r3, 800cd4c <__kernel_sin+0x174>)
 800cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc72:	f7f3 fb0b 	bl	800028c <__adddf3>
 800cc76:	9b01      	ldr	r3, [sp, #4]
 800cc78:	4606      	mov	r6, r0
 800cc7a:	460f      	mov	r7, r1
 800cc7c:	b9eb      	cbnz	r3, 800ccba <__kernel_sin+0xe2>
 800cc7e:	4602      	mov	r2, r0
 800cc80:	460b      	mov	r3, r1
 800cc82:	4650      	mov	r0, sl
 800cc84:	4659      	mov	r1, fp
 800cc86:	f7f3 fcb7 	bl	80005f8 <__aeabi_dmul>
 800cc8a:	a325      	add	r3, pc, #148	; (adr r3, 800cd20 <__kernel_sin+0x148>)
 800cc8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc90:	f7f3 fafa 	bl	8000288 <__aeabi_dsub>
 800cc94:	4642      	mov	r2, r8
 800cc96:	464b      	mov	r3, r9
 800cc98:	f7f3 fcae 	bl	80005f8 <__aeabi_dmul>
 800cc9c:	4602      	mov	r2, r0
 800cc9e:	460b      	mov	r3, r1
 800cca0:	4620      	mov	r0, r4
 800cca2:	4629      	mov	r1, r5
 800cca4:	f7f3 faf2 	bl	800028c <__adddf3>
 800cca8:	4604      	mov	r4, r0
 800ccaa:	460d      	mov	r5, r1
 800ccac:	ec45 4b10 	vmov	d0, r4, r5
 800ccb0:	b003      	add	sp, #12
 800ccb2:	ecbd 8b04 	vpop	{d8-d9}
 800ccb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccba:	4b1b      	ldr	r3, [pc, #108]	; (800cd28 <__kernel_sin+0x150>)
 800ccbc:	ec51 0b18 	vmov	r0, r1, d8
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f7f3 fc99 	bl	80005f8 <__aeabi_dmul>
 800ccc6:	4632      	mov	r2, r6
 800ccc8:	ec41 0b19 	vmov	d9, r0, r1
 800cccc:	463b      	mov	r3, r7
 800ccce:	4640      	mov	r0, r8
 800ccd0:	4649      	mov	r1, r9
 800ccd2:	f7f3 fc91 	bl	80005f8 <__aeabi_dmul>
 800ccd6:	4602      	mov	r2, r0
 800ccd8:	460b      	mov	r3, r1
 800ccda:	ec51 0b19 	vmov	r0, r1, d9
 800ccde:	f7f3 fad3 	bl	8000288 <__aeabi_dsub>
 800cce2:	4652      	mov	r2, sl
 800cce4:	465b      	mov	r3, fp
 800cce6:	f7f3 fc87 	bl	80005f8 <__aeabi_dmul>
 800ccea:	ec53 2b18 	vmov	r2, r3, d8
 800ccee:	f7f3 facb 	bl	8000288 <__aeabi_dsub>
 800ccf2:	a30b      	add	r3, pc, #44	; (adr r3, 800cd20 <__kernel_sin+0x148>)
 800ccf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf8:	4606      	mov	r6, r0
 800ccfa:	460f      	mov	r7, r1
 800ccfc:	4640      	mov	r0, r8
 800ccfe:	4649      	mov	r1, r9
 800cd00:	f7f3 fc7a 	bl	80005f8 <__aeabi_dmul>
 800cd04:	4602      	mov	r2, r0
 800cd06:	460b      	mov	r3, r1
 800cd08:	4630      	mov	r0, r6
 800cd0a:	4639      	mov	r1, r7
 800cd0c:	f7f3 fabe 	bl	800028c <__adddf3>
 800cd10:	4602      	mov	r2, r0
 800cd12:	460b      	mov	r3, r1
 800cd14:	4620      	mov	r0, r4
 800cd16:	4629      	mov	r1, r5
 800cd18:	f7f3 fab6 	bl	8000288 <__aeabi_dsub>
 800cd1c:	e7c4      	b.n	800cca8 <__kernel_sin+0xd0>
 800cd1e:	bf00      	nop
 800cd20:	55555549 	.word	0x55555549
 800cd24:	3fc55555 	.word	0x3fc55555
 800cd28:	3fe00000 	.word	0x3fe00000
 800cd2c:	5acfd57c 	.word	0x5acfd57c
 800cd30:	3de5d93a 	.word	0x3de5d93a
 800cd34:	8a2b9ceb 	.word	0x8a2b9ceb
 800cd38:	3e5ae5e6 	.word	0x3e5ae5e6
 800cd3c:	57b1fe7d 	.word	0x57b1fe7d
 800cd40:	3ec71de3 	.word	0x3ec71de3
 800cd44:	19c161d5 	.word	0x19c161d5
 800cd48:	3f2a01a0 	.word	0x3f2a01a0
 800cd4c:	1110f8a6 	.word	0x1110f8a6
 800cd50:	3f811111 	.word	0x3f811111
 800cd54:	00000000 	.word	0x00000000

0800cd58 <atan>:
 800cd58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	ec55 4b10 	vmov	r4, r5, d0
 800cd60:	4bc3      	ldr	r3, [pc, #780]	; (800d070 <atan+0x318>)
 800cd62:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800cd66:	429e      	cmp	r6, r3
 800cd68:	46ab      	mov	fp, r5
 800cd6a:	dd18      	ble.n	800cd9e <atan+0x46>
 800cd6c:	4bc1      	ldr	r3, [pc, #772]	; (800d074 <atan+0x31c>)
 800cd6e:	429e      	cmp	r6, r3
 800cd70:	dc01      	bgt.n	800cd76 <atan+0x1e>
 800cd72:	d109      	bne.n	800cd88 <atan+0x30>
 800cd74:	b144      	cbz	r4, 800cd88 <atan+0x30>
 800cd76:	4622      	mov	r2, r4
 800cd78:	462b      	mov	r3, r5
 800cd7a:	4620      	mov	r0, r4
 800cd7c:	4629      	mov	r1, r5
 800cd7e:	f7f3 fa85 	bl	800028c <__adddf3>
 800cd82:	4604      	mov	r4, r0
 800cd84:	460d      	mov	r5, r1
 800cd86:	e006      	b.n	800cd96 <atan+0x3e>
 800cd88:	f1bb 0f00 	cmp.w	fp, #0
 800cd8c:	f300 8131 	bgt.w	800cff2 <atan+0x29a>
 800cd90:	a59b      	add	r5, pc, #620	; (adr r5, 800d000 <atan+0x2a8>)
 800cd92:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cd96:	ec45 4b10 	vmov	d0, r4, r5
 800cd9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9e:	4bb6      	ldr	r3, [pc, #728]	; (800d078 <atan+0x320>)
 800cda0:	429e      	cmp	r6, r3
 800cda2:	dc14      	bgt.n	800cdce <atan+0x76>
 800cda4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800cda8:	429e      	cmp	r6, r3
 800cdaa:	dc0d      	bgt.n	800cdc8 <atan+0x70>
 800cdac:	a396      	add	r3, pc, #600	; (adr r3, 800d008 <atan+0x2b0>)
 800cdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdb2:	ee10 0a10 	vmov	r0, s0
 800cdb6:	4629      	mov	r1, r5
 800cdb8:	f7f3 fa68 	bl	800028c <__adddf3>
 800cdbc:	4baf      	ldr	r3, [pc, #700]	; (800d07c <atan+0x324>)
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	f7f3 feaa 	bl	8000b18 <__aeabi_dcmpgt>
 800cdc4:	2800      	cmp	r0, #0
 800cdc6:	d1e6      	bne.n	800cd96 <atan+0x3e>
 800cdc8:	f04f 3aff 	mov.w	sl, #4294967295
 800cdcc:	e02b      	b.n	800ce26 <atan+0xce>
 800cdce:	f000 f963 	bl	800d098 <fabs>
 800cdd2:	4bab      	ldr	r3, [pc, #684]	; (800d080 <atan+0x328>)
 800cdd4:	429e      	cmp	r6, r3
 800cdd6:	ec55 4b10 	vmov	r4, r5, d0
 800cdda:	f300 80bf 	bgt.w	800cf5c <atan+0x204>
 800cdde:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800cde2:	429e      	cmp	r6, r3
 800cde4:	f300 80a0 	bgt.w	800cf28 <atan+0x1d0>
 800cde8:	ee10 2a10 	vmov	r2, s0
 800cdec:	ee10 0a10 	vmov	r0, s0
 800cdf0:	462b      	mov	r3, r5
 800cdf2:	4629      	mov	r1, r5
 800cdf4:	f7f3 fa4a 	bl	800028c <__adddf3>
 800cdf8:	4ba0      	ldr	r3, [pc, #640]	; (800d07c <atan+0x324>)
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f7f3 fa44 	bl	8000288 <__aeabi_dsub>
 800ce00:	2200      	movs	r2, #0
 800ce02:	4606      	mov	r6, r0
 800ce04:	460f      	mov	r7, r1
 800ce06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ce0a:	4620      	mov	r0, r4
 800ce0c:	4629      	mov	r1, r5
 800ce0e:	f7f3 fa3d 	bl	800028c <__adddf3>
 800ce12:	4602      	mov	r2, r0
 800ce14:	460b      	mov	r3, r1
 800ce16:	4630      	mov	r0, r6
 800ce18:	4639      	mov	r1, r7
 800ce1a:	f7f3 fd17 	bl	800084c <__aeabi_ddiv>
 800ce1e:	f04f 0a00 	mov.w	sl, #0
 800ce22:	4604      	mov	r4, r0
 800ce24:	460d      	mov	r5, r1
 800ce26:	4622      	mov	r2, r4
 800ce28:	462b      	mov	r3, r5
 800ce2a:	4620      	mov	r0, r4
 800ce2c:	4629      	mov	r1, r5
 800ce2e:	f7f3 fbe3 	bl	80005f8 <__aeabi_dmul>
 800ce32:	4602      	mov	r2, r0
 800ce34:	460b      	mov	r3, r1
 800ce36:	4680      	mov	r8, r0
 800ce38:	4689      	mov	r9, r1
 800ce3a:	f7f3 fbdd 	bl	80005f8 <__aeabi_dmul>
 800ce3e:	a374      	add	r3, pc, #464	; (adr r3, 800d010 <atan+0x2b8>)
 800ce40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce44:	4606      	mov	r6, r0
 800ce46:	460f      	mov	r7, r1
 800ce48:	f7f3 fbd6 	bl	80005f8 <__aeabi_dmul>
 800ce4c:	a372      	add	r3, pc, #456	; (adr r3, 800d018 <atan+0x2c0>)
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	f7f3 fa1b 	bl	800028c <__adddf3>
 800ce56:	4632      	mov	r2, r6
 800ce58:	463b      	mov	r3, r7
 800ce5a:	f7f3 fbcd 	bl	80005f8 <__aeabi_dmul>
 800ce5e:	a370      	add	r3, pc, #448	; (adr r3, 800d020 <atan+0x2c8>)
 800ce60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce64:	f7f3 fa12 	bl	800028c <__adddf3>
 800ce68:	4632      	mov	r2, r6
 800ce6a:	463b      	mov	r3, r7
 800ce6c:	f7f3 fbc4 	bl	80005f8 <__aeabi_dmul>
 800ce70:	a36d      	add	r3, pc, #436	; (adr r3, 800d028 <atan+0x2d0>)
 800ce72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce76:	f7f3 fa09 	bl	800028c <__adddf3>
 800ce7a:	4632      	mov	r2, r6
 800ce7c:	463b      	mov	r3, r7
 800ce7e:	f7f3 fbbb 	bl	80005f8 <__aeabi_dmul>
 800ce82:	a36b      	add	r3, pc, #428	; (adr r3, 800d030 <atan+0x2d8>)
 800ce84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce88:	f7f3 fa00 	bl	800028c <__adddf3>
 800ce8c:	4632      	mov	r2, r6
 800ce8e:	463b      	mov	r3, r7
 800ce90:	f7f3 fbb2 	bl	80005f8 <__aeabi_dmul>
 800ce94:	a368      	add	r3, pc, #416	; (adr r3, 800d038 <atan+0x2e0>)
 800ce96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce9a:	f7f3 f9f7 	bl	800028c <__adddf3>
 800ce9e:	4642      	mov	r2, r8
 800cea0:	464b      	mov	r3, r9
 800cea2:	f7f3 fba9 	bl	80005f8 <__aeabi_dmul>
 800cea6:	a366      	add	r3, pc, #408	; (adr r3, 800d040 <atan+0x2e8>)
 800cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ceac:	4680      	mov	r8, r0
 800ceae:	4689      	mov	r9, r1
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	4639      	mov	r1, r7
 800ceb4:	f7f3 fba0 	bl	80005f8 <__aeabi_dmul>
 800ceb8:	a363      	add	r3, pc, #396	; (adr r3, 800d048 <atan+0x2f0>)
 800ceba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cebe:	f7f3 f9e3 	bl	8000288 <__aeabi_dsub>
 800cec2:	4632      	mov	r2, r6
 800cec4:	463b      	mov	r3, r7
 800cec6:	f7f3 fb97 	bl	80005f8 <__aeabi_dmul>
 800ceca:	a361      	add	r3, pc, #388	; (adr r3, 800d050 <atan+0x2f8>)
 800cecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ced0:	f7f3 f9da 	bl	8000288 <__aeabi_dsub>
 800ced4:	4632      	mov	r2, r6
 800ced6:	463b      	mov	r3, r7
 800ced8:	f7f3 fb8e 	bl	80005f8 <__aeabi_dmul>
 800cedc:	a35e      	add	r3, pc, #376	; (adr r3, 800d058 <atan+0x300>)
 800cede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee2:	f7f3 f9d1 	bl	8000288 <__aeabi_dsub>
 800cee6:	4632      	mov	r2, r6
 800cee8:	463b      	mov	r3, r7
 800ceea:	f7f3 fb85 	bl	80005f8 <__aeabi_dmul>
 800ceee:	a35c      	add	r3, pc, #368	; (adr r3, 800d060 <atan+0x308>)
 800cef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cef4:	f7f3 f9c8 	bl	8000288 <__aeabi_dsub>
 800cef8:	4632      	mov	r2, r6
 800cefa:	463b      	mov	r3, r7
 800cefc:	f7f3 fb7c 	bl	80005f8 <__aeabi_dmul>
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	4640      	mov	r0, r8
 800cf06:	4649      	mov	r1, r9
 800cf08:	f7f3 f9c0 	bl	800028c <__adddf3>
 800cf0c:	4622      	mov	r2, r4
 800cf0e:	462b      	mov	r3, r5
 800cf10:	f7f3 fb72 	bl	80005f8 <__aeabi_dmul>
 800cf14:	f1ba 3fff 	cmp.w	sl, #4294967295
 800cf18:	4602      	mov	r2, r0
 800cf1a:	460b      	mov	r3, r1
 800cf1c:	d14b      	bne.n	800cfb6 <atan+0x25e>
 800cf1e:	4620      	mov	r0, r4
 800cf20:	4629      	mov	r1, r5
 800cf22:	f7f3 f9b1 	bl	8000288 <__aeabi_dsub>
 800cf26:	e72c      	b.n	800cd82 <atan+0x2a>
 800cf28:	ee10 0a10 	vmov	r0, s0
 800cf2c:	4b53      	ldr	r3, [pc, #332]	; (800d07c <atan+0x324>)
 800cf2e:	2200      	movs	r2, #0
 800cf30:	4629      	mov	r1, r5
 800cf32:	f7f3 f9a9 	bl	8000288 <__aeabi_dsub>
 800cf36:	4b51      	ldr	r3, [pc, #324]	; (800d07c <atan+0x324>)
 800cf38:	4606      	mov	r6, r0
 800cf3a:	460f      	mov	r7, r1
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	4620      	mov	r0, r4
 800cf40:	4629      	mov	r1, r5
 800cf42:	f7f3 f9a3 	bl	800028c <__adddf3>
 800cf46:	4602      	mov	r2, r0
 800cf48:	460b      	mov	r3, r1
 800cf4a:	4630      	mov	r0, r6
 800cf4c:	4639      	mov	r1, r7
 800cf4e:	f7f3 fc7d 	bl	800084c <__aeabi_ddiv>
 800cf52:	f04f 0a01 	mov.w	sl, #1
 800cf56:	4604      	mov	r4, r0
 800cf58:	460d      	mov	r5, r1
 800cf5a:	e764      	b.n	800ce26 <atan+0xce>
 800cf5c:	4b49      	ldr	r3, [pc, #292]	; (800d084 <atan+0x32c>)
 800cf5e:	429e      	cmp	r6, r3
 800cf60:	da1d      	bge.n	800cf9e <atan+0x246>
 800cf62:	ee10 0a10 	vmov	r0, s0
 800cf66:	4b48      	ldr	r3, [pc, #288]	; (800d088 <atan+0x330>)
 800cf68:	2200      	movs	r2, #0
 800cf6a:	4629      	mov	r1, r5
 800cf6c:	f7f3 f98c 	bl	8000288 <__aeabi_dsub>
 800cf70:	4b45      	ldr	r3, [pc, #276]	; (800d088 <atan+0x330>)
 800cf72:	4606      	mov	r6, r0
 800cf74:	460f      	mov	r7, r1
 800cf76:	2200      	movs	r2, #0
 800cf78:	4620      	mov	r0, r4
 800cf7a:	4629      	mov	r1, r5
 800cf7c:	f7f3 fb3c 	bl	80005f8 <__aeabi_dmul>
 800cf80:	4b3e      	ldr	r3, [pc, #248]	; (800d07c <atan+0x324>)
 800cf82:	2200      	movs	r2, #0
 800cf84:	f7f3 f982 	bl	800028c <__adddf3>
 800cf88:	4602      	mov	r2, r0
 800cf8a:	460b      	mov	r3, r1
 800cf8c:	4630      	mov	r0, r6
 800cf8e:	4639      	mov	r1, r7
 800cf90:	f7f3 fc5c 	bl	800084c <__aeabi_ddiv>
 800cf94:	f04f 0a02 	mov.w	sl, #2
 800cf98:	4604      	mov	r4, r0
 800cf9a:	460d      	mov	r5, r1
 800cf9c:	e743      	b.n	800ce26 <atan+0xce>
 800cf9e:	462b      	mov	r3, r5
 800cfa0:	ee10 2a10 	vmov	r2, s0
 800cfa4:	4939      	ldr	r1, [pc, #228]	; (800d08c <atan+0x334>)
 800cfa6:	2000      	movs	r0, #0
 800cfa8:	f7f3 fc50 	bl	800084c <__aeabi_ddiv>
 800cfac:	f04f 0a03 	mov.w	sl, #3
 800cfb0:	4604      	mov	r4, r0
 800cfb2:	460d      	mov	r5, r1
 800cfb4:	e737      	b.n	800ce26 <atan+0xce>
 800cfb6:	4b36      	ldr	r3, [pc, #216]	; (800d090 <atan+0x338>)
 800cfb8:	4e36      	ldr	r6, [pc, #216]	; (800d094 <atan+0x33c>)
 800cfba:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800cfbe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 800cfc2:	e9da 2300 	ldrd	r2, r3, [sl]
 800cfc6:	f7f3 f95f 	bl	8000288 <__aeabi_dsub>
 800cfca:	4622      	mov	r2, r4
 800cfcc:	462b      	mov	r3, r5
 800cfce:	f7f3 f95b 	bl	8000288 <__aeabi_dsub>
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	e9d6 0100 	ldrd	r0, r1, [r6]
 800cfda:	f7f3 f955 	bl	8000288 <__aeabi_dsub>
 800cfde:	f1bb 0f00 	cmp.w	fp, #0
 800cfe2:	4604      	mov	r4, r0
 800cfe4:	460d      	mov	r5, r1
 800cfe6:	f6bf aed6 	bge.w	800cd96 <atan+0x3e>
 800cfea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800cfee:	461d      	mov	r5, r3
 800cff0:	e6d1      	b.n	800cd96 <atan+0x3e>
 800cff2:	a51d      	add	r5, pc, #116	; (adr r5, 800d068 <atan+0x310>)
 800cff4:	e9d5 4500 	ldrd	r4, r5, [r5]
 800cff8:	e6cd      	b.n	800cd96 <atan+0x3e>
 800cffa:	bf00      	nop
 800cffc:	f3af 8000 	nop.w
 800d000:	54442d18 	.word	0x54442d18
 800d004:	bff921fb 	.word	0xbff921fb
 800d008:	8800759c 	.word	0x8800759c
 800d00c:	7e37e43c 	.word	0x7e37e43c
 800d010:	e322da11 	.word	0xe322da11
 800d014:	3f90ad3a 	.word	0x3f90ad3a
 800d018:	24760deb 	.word	0x24760deb
 800d01c:	3fa97b4b 	.word	0x3fa97b4b
 800d020:	a0d03d51 	.word	0xa0d03d51
 800d024:	3fb10d66 	.word	0x3fb10d66
 800d028:	c54c206e 	.word	0xc54c206e
 800d02c:	3fb745cd 	.word	0x3fb745cd
 800d030:	920083ff 	.word	0x920083ff
 800d034:	3fc24924 	.word	0x3fc24924
 800d038:	5555550d 	.word	0x5555550d
 800d03c:	3fd55555 	.word	0x3fd55555
 800d040:	2c6a6c2f 	.word	0x2c6a6c2f
 800d044:	bfa2b444 	.word	0xbfa2b444
 800d048:	52defd9a 	.word	0x52defd9a
 800d04c:	3fadde2d 	.word	0x3fadde2d
 800d050:	af749a6d 	.word	0xaf749a6d
 800d054:	3fb3b0f2 	.word	0x3fb3b0f2
 800d058:	fe231671 	.word	0xfe231671
 800d05c:	3fbc71c6 	.word	0x3fbc71c6
 800d060:	9998ebc4 	.word	0x9998ebc4
 800d064:	3fc99999 	.word	0x3fc99999
 800d068:	54442d18 	.word	0x54442d18
 800d06c:	3ff921fb 	.word	0x3ff921fb
 800d070:	440fffff 	.word	0x440fffff
 800d074:	7ff00000 	.word	0x7ff00000
 800d078:	3fdbffff 	.word	0x3fdbffff
 800d07c:	3ff00000 	.word	0x3ff00000
 800d080:	3ff2ffff 	.word	0x3ff2ffff
 800d084:	40038000 	.word	0x40038000
 800d088:	3ff80000 	.word	0x3ff80000
 800d08c:	bff00000 	.word	0xbff00000
 800d090:	0800d928 	.word	0x0800d928
 800d094:	0800d908 	.word	0x0800d908

0800d098 <fabs>:
 800d098:	ec51 0b10 	vmov	r0, r1, d0
 800d09c:	ee10 2a10 	vmov	r2, s0
 800d0a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d0a4:	ec43 2b10 	vmov	d0, r2, r3
 800d0a8:	4770      	bx	lr
 800d0aa:	0000      	movs	r0, r0
 800d0ac:	0000      	movs	r0, r0
	...

0800d0b0 <floor>:
 800d0b0:	ec51 0b10 	vmov	r0, r1, d0
 800d0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800d0bc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800d0c0:	2e13      	cmp	r6, #19
 800d0c2:	ee10 5a10 	vmov	r5, s0
 800d0c6:	ee10 8a10 	vmov	r8, s0
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	dc32      	bgt.n	800d134 <floor+0x84>
 800d0ce:	2e00      	cmp	r6, #0
 800d0d0:	da14      	bge.n	800d0fc <floor+0x4c>
 800d0d2:	a333      	add	r3, pc, #204	; (adr r3, 800d1a0 <floor+0xf0>)
 800d0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0d8:	f7f3 f8d8 	bl	800028c <__adddf3>
 800d0dc:	2200      	movs	r2, #0
 800d0de:	2300      	movs	r3, #0
 800d0e0:	f7f3 fd1a 	bl	8000b18 <__aeabi_dcmpgt>
 800d0e4:	b138      	cbz	r0, 800d0f6 <floor+0x46>
 800d0e6:	2c00      	cmp	r4, #0
 800d0e8:	da57      	bge.n	800d19a <floor+0xea>
 800d0ea:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d0ee:	431d      	orrs	r5, r3
 800d0f0:	d001      	beq.n	800d0f6 <floor+0x46>
 800d0f2:	4c2d      	ldr	r4, [pc, #180]	; (800d1a8 <floor+0xf8>)
 800d0f4:	2500      	movs	r5, #0
 800d0f6:	4621      	mov	r1, r4
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	e025      	b.n	800d148 <floor+0x98>
 800d0fc:	4f2b      	ldr	r7, [pc, #172]	; (800d1ac <floor+0xfc>)
 800d0fe:	4137      	asrs	r7, r6
 800d100:	ea01 0307 	and.w	r3, r1, r7
 800d104:	4303      	orrs	r3, r0
 800d106:	d01f      	beq.n	800d148 <floor+0x98>
 800d108:	a325      	add	r3, pc, #148	; (adr r3, 800d1a0 <floor+0xf0>)
 800d10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d10e:	f7f3 f8bd 	bl	800028c <__adddf3>
 800d112:	2200      	movs	r2, #0
 800d114:	2300      	movs	r3, #0
 800d116:	f7f3 fcff 	bl	8000b18 <__aeabi_dcmpgt>
 800d11a:	2800      	cmp	r0, #0
 800d11c:	d0eb      	beq.n	800d0f6 <floor+0x46>
 800d11e:	2c00      	cmp	r4, #0
 800d120:	bfbe      	ittt	lt
 800d122:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800d126:	fa43 f606 	asrlt.w	r6, r3, r6
 800d12a:	19a4      	addlt	r4, r4, r6
 800d12c:	ea24 0407 	bic.w	r4, r4, r7
 800d130:	2500      	movs	r5, #0
 800d132:	e7e0      	b.n	800d0f6 <floor+0x46>
 800d134:	2e33      	cmp	r6, #51	; 0x33
 800d136:	dd0b      	ble.n	800d150 <floor+0xa0>
 800d138:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800d13c:	d104      	bne.n	800d148 <floor+0x98>
 800d13e:	ee10 2a10 	vmov	r2, s0
 800d142:	460b      	mov	r3, r1
 800d144:	f7f3 f8a2 	bl	800028c <__adddf3>
 800d148:	ec41 0b10 	vmov	d0, r0, r1
 800d14c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d150:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800d154:	f04f 33ff 	mov.w	r3, #4294967295
 800d158:	fa23 f707 	lsr.w	r7, r3, r7
 800d15c:	4207      	tst	r7, r0
 800d15e:	d0f3      	beq.n	800d148 <floor+0x98>
 800d160:	a30f      	add	r3, pc, #60	; (adr r3, 800d1a0 <floor+0xf0>)
 800d162:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d166:	f7f3 f891 	bl	800028c <__adddf3>
 800d16a:	2200      	movs	r2, #0
 800d16c:	2300      	movs	r3, #0
 800d16e:	f7f3 fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 800d172:	2800      	cmp	r0, #0
 800d174:	d0bf      	beq.n	800d0f6 <floor+0x46>
 800d176:	2c00      	cmp	r4, #0
 800d178:	da02      	bge.n	800d180 <floor+0xd0>
 800d17a:	2e14      	cmp	r6, #20
 800d17c:	d103      	bne.n	800d186 <floor+0xd6>
 800d17e:	3401      	adds	r4, #1
 800d180:	ea25 0507 	bic.w	r5, r5, r7
 800d184:	e7b7      	b.n	800d0f6 <floor+0x46>
 800d186:	2301      	movs	r3, #1
 800d188:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800d18c:	fa03 f606 	lsl.w	r6, r3, r6
 800d190:	4435      	add	r5, r6
 800d192:	4545      	cmp	r5, r8
 800d194:	bf38      	it	cc
 800d196:	18e4      	addcc	r4, r4, r3
 800d198:	e7f2      	b.n	800d180 <floor+0xd0>
 800d19a:	2500      	movs	r5, #0
 800d19c:	462c      	mov	r4, r5
 800d19e:	e7aa      	b.n	800d0f6 <floor+0x46>
 800d1a0:	8800759c 	.word	0x8800759c
 800d1a4:	7e37e43c 	.word	0x7e37e43c
 800d1a8:	bff00000 	.word	0xbff00000
 800d1ac:	000fffff 	.word	0x000fffff

0800d1b0 <scalbn>:
 800d1b0:	b570      	push	{r4, r5, r6, lr}
 800d1b2:	ec55 4b10 	vmov	r4, r5, d0
 800d1b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800d1ba:	4606      	mov	r6, r0
 800d1bc:	462b      	mov	r3, r5
 800d1be:	b99a      	cbnz	r2, 800d1e8 <scalbn+0x38>
 800d1c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800d1c4:	4323      	orrs	r3, r4
 800d1c6:	d036      	beq.n	800d236 <scalbn+0x86>
 800d1c8:	4b39      	ldr	r3, [pc, #228]	; (800d2b0 <scalbn+0x100>)
 800d1ca:	4629      	mov	r1, r5
 800d1cc:	ee10 0a10 	vmov	r0, s0
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	f7f3 fa11 	bl	80005f8 <__aeabi_dmul>
 800d1d6:	4b37      	ldr	r3, [pc, #220]	; (800d2b4 <scalbn+0x104>)
 800d1d8:	429e      	cmp	r6, r3
 800d1da:	4604      	mov	r4, r0
 800d1dc:	460d      	mov	r5, r1
 800d1de:	da10      	bge.n	800d202 <scalbn+0x52>
 800d1e0:	a32b      	add	r3, pc, #172	; (adr r3, 800d290 <scalbn+0xe0>)
 800d1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1e6:	e03a      	b.n	800d25e <scalbn+0xae>
 800d1e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800d1ec:	428a      	cmp	r2, r1
 800d1ee:	d10c      	bne.n	800d20a <scalbn+0x5a>
 800d1f0:	ee10 2a10 	vmov	r2, s0
 800d1f4:	4620      	mov	r0, r4
 800d1f6:	4629      	mov	r1, r5
 800d1f8:	f7f3 f848 	bl	800028c <__adddf3>
 800d1fc:	4604      	mov	r4, r0
 800d1fe:	460d      	mov	r5, r1
 800d200:	e019      	b.n	800d236 <scalbn+0x86>
 800d202:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d206:	460b      	mov	r3, r1
 800d208:	3a36      	subs	r2, #54	; 0x36
 800d20a:	4432      	add	r2, r6
 800d20c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800d210:	428a      	cmp	r2, r1
 800d212:	dd08      	ble.n	800d226 <scalbn+0x76>
 800d214:	2d00      	cmp	r5, #0
 800d216:	a120      	add	r1, pc, #128	; (adr r1, 800d298 <scalbn+0xe8>)
 800d218:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d21c:	da1c      	bge.n	800d258 <scalbn+0xa8>
 800d21e:	a120      	add	r1, pc, #128	; (adr r1, 800d2a0 <scalbn+0xf0>)
 800d220:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d224:	e018      	b.n	800d258 <scalbn+0xa8>
 800d226:	2a00      	cmp	r2, #0
 800d228:	dd08      	ble.n	800d23c <scalbn+0x8c>
 800d22a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d22e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d232:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800d236:	ec45 4b10 	vmov	d0, r4, r5
 800d23a:	bd70      	pop	{r4, r5, r6, pc}
 800d23c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800d240:	da19      	bge.n	800d276 <scalbn+0xc6>
 800d242:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d246:	429e      	cmp	r6, r3
 800d248:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800d24c:	dd0a      	ble.n	800d264 <scalbn+0xb4>
 800d24e:	a112      	add	r1, pc, #72	; (adr r1, 800d298 <scalbn+0xe8>)
 800d250:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1e2      	bne.n	800d21e <scalbn+0x6e>
 800d258:	a30f      	add	r3, pc, #60	; (adr r3, 800d298 <scalbn+0xe8>)
 800d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25e:	f7f3 f9cb 	bl	80005f8 <__aeabi_dmul>
 800d262:	e7cb      	b.n	800d1fc <scalbn+0x4c>
 800d264:	a10a      	add	r1, pc, #40	; (adr r1, 800d290 <scalbn+0xe0>)
 800d266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d0b8      	beq.n	800d1e0 <scalbn+0x30>
 800d26e:	a10e      	add	r1, pc, #56	; (adr r1, 800d2a8 <scalbn+0xf8>)
 800d270:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d274:	e7b4      	b.n	800d1e0 <scalbn+0x30>
 800d276:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d27a:	3236      	adds	r2, #54	; 0x36
 800d27c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800d280:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800d284:	4620      	mov	r0, r4
 800d286:	4b0c      	ldr	r3, [pc, #48]	; (800d2b8 <scalbn+0x108>)
 800d288:	2200      	movs	r2, #0
 800d28a:	e7e8      	b.n	800d25e <scalbn+0xae>
 800d28c:	f3af 8000 	nop.w
 800d290:	c2f8f359 	.word	0xc2f8f359
 800d294:	01a56e1f 	.word	0x01a56e1f
 800d298:	8800759c 	.word	0x8800759c
 800d29c:	7e37e43c 	.word	0x7e37e43c
 800d2a0:	8800759c 	.word	0x8800759c
 800d2a4:	fe37e43c 	.word	0xfe37e43c
 800d2a8:	c2f8f359 	.word	0xc2f8f359
 800d2ac:	81a56e1f 	.word	0x81a56e1f
 800d2b0:	43500000 	.word	0x43500000
 800d2b4:	ffff3cb0 	.word	0xffff3cb0
 800d2b8:	3c900000 	.word	0x3c900000

0800d2bc <_init>:
 800d2bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2be:	bf00      	nop
 800d2c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2c2:	bc08      	pop	{r3}
 800d2c4:	469e      	mov	lr, r3
 800d2c6:	4770      	bx	lr

0800d2c8 <_fini>:
 800d2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ca:	bf00      	nop
 800d2cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2ce:	bc08      	pop	{r3}
 800d2d0:	469e      	mov	lr, r3
 800d2d2:	4770      	bx	lr
